// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/account_service.proto

#include "bgs/low/pb/client/account_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthorizedData_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameSessionInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameSessionUpdateInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameTimeRemainingInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace account {
namespace v1 {
class ResolveAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveAccountRequest> _instance;
} _ResolveAccountRequest_default_instance_;
class ResolveAccountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveAccountResponse> _instance;
} _ResolveAccountResponse_default_instance_;
class GameAccountFlagUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountFlagUpdateRequest> _instance;
} _GameAccountFlagUpdateRequest_default_instance_;
class SubscriptionUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionUpdateRequest> _instance;
} _SubscriptionUpdateRequest_default_instance_;
class SubscriptionUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionUpdateResponse> _instance;
} _SubscriptionUpdateResponse_default_instance_;
class IsIgrAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsIgrAddressRequest> _instance;
} _IsIgrAddressRequest_default_instance_;
class GetAccountStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountStateRequest> _instance;
} _GetAccountStateRequest_default_instance_;
class GetAccountStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountStateResponse> _instance;
} _GetAccountStateResponse_default_instance_;
class GetSignedAccountStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSignedAccountStateRequest> _instance;
} _GetSignedAccountStateRequest_default_instance_;
class GetSignedAccountStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSignedAccountStateResponse> _instance;
} _GetSignedAccountStateResponse_default_instance_;
class GetGameAccountStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGameAccountStateRequest> _instance;
} _GetGameAccountStateRequest_default_instance_;
class GetGameAccountStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGameAccountStateResponse> _instance;
} _GetGameAccountStateResponse_default_instance_;
class GetLicensesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLicensesRequest> _instance;
} _GetLicensesRequest_default_instance_;
class GetLicensesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLicensesResponse> _instance;
} _GetLicensesResponse_default_instance_;
class GetGameSessionInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGameSessionInfoRequest> _instance;
} _GetGameSessionInfoRequest_default_instance_;
class GetGameSessionInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGameSessionInfoResponse> _instance;
} _GetGameSessionInfoResponse_default_instance_;
class GetGameTimeRemainingInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGameTimeRemainingInfoRequest> _instance;
} _GetGameTimeRemainingInfoRequest_default_instance_;
class GetGameTimeRemainingInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGameTimeRemainingInfoResponse> _instance;
} _GetGameTimeRemainingInfoResponse_default_instance_;
class GetCAISInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCAISInfoRequest> _instance;
} _GetCAISInfoRequest_default_instance_;
class GetCAISInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCAISInfoResponse> _instance;
} _GetCAISInfoResponse_default_instance_;
class GetAuthorizedDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthorizedDataRequest> _instance;
} _GetAuthorizedDataRequest_default_instance_;
class GetAuthorizedDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthorizedDataResponse> _instance;
} _GetAuthorizedDataResponse_default_instance_;
class AccountStateNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountStateNotification> _instance;
} _AccountStateNotification_default_instance_;
class GameAccountStateNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountStateNotification> _instance;
} _GameAccountStateNotification_default_instance_;
class GameAccountNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountNotification> _instance;
} _GameAccountNotification_default_instance_;
class GameAccountSessionNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountSessionNotification> _instance;
} _GameAccountSessionNotification_default_instance_;
}  // namespace v1
}  // namespace account
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountStateNotification_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountStateNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountStateNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameAccountFlagUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountFlagUpdateRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountFlagUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountFlagUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameAccountFlagUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameAccountFlagUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameAccountNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountNotification_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameAccountNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameAccountNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameAccountSessionNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountSessionNotification_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountSessionNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountSessionNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameAccountSessionNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameAccountSessionNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameSessionUpdateInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameAccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountStateNotification_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountStateNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountStateNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameAccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameAccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetAccountStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetAccountStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetAccountStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetAccountStateResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetAccountStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetAccountStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetAuthorizedDataRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetAuthorizedDataRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetAuthorizedDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetAuthorizedDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAuthorizedDataRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAuthorizedDataRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetAuthorizedDataResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetAuthorizedDataResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetAuthorizedDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetAuthorizedDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAuthorizedDataResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAuthorizedDataResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_AuthorizedData_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetCAISInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetCAISInfoRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetCAISInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetCAISInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCAISInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCAISInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetCAISInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetCAISInfoResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetCAISInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetCAISInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCAISInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCAISInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetGameAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetGameAccountStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetGameAccountStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetGameAccountStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetGameAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetGameAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetGameAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetGameAccountStateResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetGameAccountStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetGameAccountStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetGameAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetGameAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetGameSessionInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetGameSessionInfoRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetGameSessionInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetGameSessionInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGameSessionInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGameSessionInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetGameSessionInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetGameSessionInfoResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetGameSessionInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetGameSessionInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGameSessionInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGameSessionInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_GameSessionInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetGameTimeRemainingInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetGameTimeRemainingInfoRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGameTimeRemainingInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGameTimeRemainingInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetGameTimeRemainingInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetGameTimeRemainingInfoResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGameTimeRemainingInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGameTimeRemainingInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_GameTimeRemainingInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetLicensesRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetLicensesRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetLicensesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetLicensesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLicensesRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLicensesRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetLicensesResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetLicensesResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetLicensesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetLicensesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLicensesResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLicensesResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetSignedAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetSignedAccountStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetSignedAccountStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetSignedAccountStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSignedAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSignedAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetSignedAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GetSignedAccountStateResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GetSignedAccountStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GetSignedAccountStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSignedAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSignedAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_IsIgrAddressRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_IsIgrAddressRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::IsIgrAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::IsIgrAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsIgrAddressRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsIgrAddressRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ResolveAccountRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_ResolveAccountRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::ResolveAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::ResolveAccountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolveAccountRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResolveAccountRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_AccountReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ResolveAccountResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_ResolveAccountResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::ResolveAccountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::ResolveAccountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolveAccountResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResolveAccountResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_SubscriptionUpdateRequest_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::SubscriptionUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::SubscriptionUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriptionUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscriptionUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionUpdateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_SubscriptionUpdateResponse_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::SubscriptionUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::SubscriptionUpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriptionUpdateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscriptionUpdateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto}, {
      &scc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ResolveAccountRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ResolveAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ResolveAccountRequest, ref_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ResolveAccountRequest, fetch_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ResolveAccountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ResolveAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ResolveAccountResponse, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFlagUpdateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFlagUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFlagUpdateRequest, game_account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFlagUpdateRequest, flag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFlagUpdateRequest, active_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriptionUpdateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriptionUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriptionUpdateRequest, ref_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriptionUpdateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriptionUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriptionUpdateResponse, ref_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IsIgrAddressRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IsIgrAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IsIgrAddressRequest, client_address_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IsIgrAddressRequest, region_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateRequest, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateRequest, region_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateRequest, options_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateRequest, tags_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAccountStateResponse, tags_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetSignedAccountStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetSignedAccountStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetSignedAccountStateRequest, account_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetSignedAccountStateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetSignedAccountStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetSignedAccountStateResponse, token_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateRequest, game_account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateRequest, options_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateRequest, tags_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameAccountStateResponse, tags_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesRequest, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesRequest, fetch_account_licenses_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesRequest, fetch_game_account_licenses_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesRequest, fetch_dynamic_account_licenses_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesRequest, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesRequest, exclude_unknown_program_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetLicensesResponse, licenses_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameSessionInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameSessionInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameSessionInfoRequest, entity_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameSessionInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameSessionInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameSessionInfoResponse, session_info_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest, game_account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest, account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse, game_time_remaining_info_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetCAISInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetCAISInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetCAISInfoRequest, entity_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetCAISInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetCAISInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetCAISInfoResponse, cais_info_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAuthorizedDataRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAuthorizedDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAuthorizedDataRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAuthorizedDataRequest, tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAuthorizedDataRequest, privileged_network_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAuthorizedDataResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAuthorizedDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GetAuthorizedDataResponse, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateNotification, account_state_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateNotification, subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateNotification, account_tags_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateNotification, subscription_completed_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateNotification, game_account_state_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateNotification, subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateNotification, game_account_tags_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateNotification, subscription_completed_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountNotification, game_accounts_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountNotification, subscriber_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountNotification, account_tags_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountSessionNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountSessionNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountSessionNotification, game_account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountSessionNotification, session_info_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::account::v1::ResolveAccountRequest)},
  { 9, 15, sizeof(::bgs::protocol::account::v1::ResolveAccountResponse)},
  { 16, 24, sizeof(::bgs::protocol::account::v1::GameAccountFlagUpdateRequest)},
  { 27, 33, sizeof(::bgs::protocol::account::v1::SubscriptionUpdateRequest)},
  { 34, 40, sizeof(::bgs::protocol::account::v1::SubscriptionUpdateResponse)},
  { 41, 48, sizeof(::bgs::protocol::account::v1::IsIgrAddressRequest)},
  { 50, 60, sizeof(::bgs::protocol::account::v1::GetAccountStateRequest)},
  { 65, 72, sizeof(::bgs::protocol::account::v1::GetAccountStateResponse)},
  { 74, 80, sizeof(::bgs::protocol::account::v1::GetSignedAccountStateRequest)},
  { 81, 87, sizeof(::bgs::protocol::account::v1::GetSignedAccountStateResponse)},
  { 88, 97, sizeof(::bgs::protocol::account::v1::GetGameAccountStateRequest)},
  { 101, 108, sizeof(::bgs::protocol::account::v1::GetGameAccountStateResponse)},
  { 110, 121, sizeof(::bgs::protocol::account::v1::GetLicensesRequest)},
  { 127, 133, sizeof(::bgs::protocol::account::v1::GetLicensesResponse)},
  { 134, 140, sizeof(::bgs::protocol::account::v1::GetGameSessionInfoRequest)},
  { 141, 147, sizeof(::bgs::protocol::account::v1::GetGameSessionInfoResponse)},
  { 148, 155, sizeof(::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest)},
  { 157, 163, sizeof(::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse)},
  { 164, 170, sizeof(::bgs::protocol::account::v1::GetCAISInfoRequest)},
  { 171, 177, sizeof(::bgs::protocol::account::v1::GetCAISInfoResponse)},
  { 178, 186, sizeof(::bgs::protocol::account::v1::GetAuthorizedDataRequest)},
  { 189, 195, sizeof(::bgs::protocol::account::v1::GetAuthorizedDataResponse)},
  { 196, 205, sizeof(::bgs::protocol::account::v1::AccountStateNotification)},
  { 209, 218, sizeof(::bgs::protocol::account::v1::GameAccountStateNotification)},
  { 222, 230, sizeof(::bgs::protocol::account::v1::GameAccountNotification)},
  { 233, 240, sizeof(::bgs::protocol::account::v1::GameAccountSessionNotification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_ResolveAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_ResolveAccountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountFlagUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_SubscriptionUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_SubscriptionUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_IsIgrAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetAccountStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetAccountStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetSignedAccountStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetSignedAccountStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetGameAccountStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetGameAccountStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetLicensesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetLicensesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetGameSessionInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetGameSessionInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetGameTimeRemainingInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetGameTimeRemainingInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetCAISInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetCAISInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetAuthorizedDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GetAuthorizedDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountStateNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountStateNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountSessionNotification_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'bgs/low/pb/client/account_service.prot"
  "o\022\027bgs.protocol.account.v1\032%bgs/low/pb/c"
  "lient/account_types.proto\032$bgs/low/pb/cl"
  "ient/entity_types.proto\032!bgs/low/pb/clie"
  "nt/rpc_types.proto\"i\n\025ResolveAccountRequ"
  "est\0226\n\003ref\030\001 \001(\0132).bgs.protocol.account."
  "v1.AccountReference\022\020\n\010fetch_id\030\014 \001(\010:\006\202"
  "\371+\002\010\001\"H\n\026ResolveAccountResponse\022.\n\002id\030\014 "
  "\001(\0132\".bgs.protocol.account.v1.AccountId\""
  "~\n\034GameAccountFlagUpdateRequest\022@\n\014game_"
  "account\030\001 \001(\0132*.bgs.protocol.account.v1."
  "GameAccountHandle\022\014\n\004flag\030\002 \001(\004\022\016\n\006activ"
  "e\030\003 \001(\010\"V\n\031SubscriptionUpdateRequest\0229\n\003"
  "ref\030\002 \003(\0132,.bgs.protocol.account.v1.Subs"
  "criberReference\"W\n\032SubscriptionUpdateRes"
  "ponse\0229\n\003ref\030\001 \003(\0132,.bgs.protocol.accoun"
  "t.v1.SubscriberReference\"=\n\023IsIgrAddress"
  "Request\022\026\n\016client_address\030\001 \001(\t\022\016\n\006regio"
  "n\030\002 \001(\r\"\344\001\n\026GetAccountStateRequest\0221\n\ten"
  "tity_id\030\001 \001(\0132\026.bgs.protocol.EntityIdB\006\202"
  "\371+\002\020\001\022\017\n\007program\030\002 \001(\r\022\016\n\006region\030\003 \001(\r\022="
  "\n\007options\030\n \001(\0132,.bgs.protocol.account.v"
  "1.AccountFieldOptions\0227\n\004tags\030\013 \001(\0132).bg"
  "s.protocol.account.v1.AccountFieldTags\"\210"
  "\001\n\027GetAccountStateResponse\0224\n\005state\030\001 \001("
  "\0132%.bgs.protocol.account.v1.AccountState"
  "\0227\n\004tags\030\002 \001(\0132).bgs.protocol.account.v1"
  ".AccountFieldTags\"S\n\034GetSignedAccountSta"
  "teRequest\0223\n\007account\030\001 \001(\0132\".bgs.protoco"
  "l.account.v1.AccountId\".\n\035GetSignedAccou"
  "ntStateResponse\022\r\n\005token\030\001 \001(\t\"\375\001\n\032GetGa"
  "meAccountStateRequest\022.\n\naccount_id\030\001 \001("
  "\0132\026.bgs.protocol.EntityIdB\002\030\001\022/\n\017game_ac"
  "count_id\030\002 \001(\0132\026.bgs.protocol.EntityId\022A"
  "\n\007options\030\n \001(\01320.bgs.protocol.account.v"
  "1.GameAccountFieldOptions\022;\n\004tags\030\013 \001(\0132"
  "-.bgs.protocol.account.v1.GameAccountFie"
  "ldTags\"\224\001\n\033GetGameAccountStateResponse\0228"
  "\n\005state\030\001 \001(\0132).bgs.protocol.account.v1."
  "GameAccountState\022;\n\004tags\030\002 \001(\0132-.bgs.pro"
  "tocol.account.v1.GameAccountFieldTags\"\355\001"
  "\n\022GetLicensesRequest\0221\n\ttarget_id\030\001 \001(\0132"
  "\026.bgs.protocol.EntityIdB\006\202\371+\002\020\001\022\036\n\026fetch"
  "_account_licenses\030\002 \001(\010\022#\n\033fetch_game_ac"
  "count_licenses\030\003 \001(\010\022&\n\036fetch_dynamic_ac"
  "count_licenses\030\004 \001(\010\022\017\n\007program\030\005 \001(\007\022&\n"
  "\027exclude_unknown_program\030\006 \001(\010:\005false\"P\n"
  "\023GetLicensesResponse\0229\n\010licenses\030\001 \003(\0132\'"
  ".bgs.protocol.account.v1.AccountLicense\""
  "F\n\031GetGameSessionInfoRequest\022)\n\tentity_i"
  "d\030\001 \001(\0132\026.bgs.protocol.EntityId\"\\\n\032GetGa"
  "meSessionInfoResponse\022>\n\014session_info\030\002 "
  "\001(\0132(.bgs.protocol.account.v1.GameSessio"
  "nInfo\"~\n\037GetGameTimeRemainingInfoRequest"
  "\022/\n\017game_account_id\030\001 \001(\0132\026.bgs.protocol"
  ".EntityId\022*\n\naccount_id\030\002 \001(\0132\026.bgs.prot"
  "ocol.EntityId\"t\n GetGameTimeRemainingInf"
  "oResponse\022P\n\030game_time_remaining_info\030\001 "
  "\001(\0132..bgs.protocol.account.v1.GameTimeRe"
  "mainingInfo\"\?\n\022GetCAISInfoRequest\022)\n\tent"
  "ity_id\030\001 \001(\0132\026.bgs.protocol.EntityId\"G\n\023"
  "GetCAISInfoResponse\0220\n\tcais_info\030\001 \001(\0132\035"
  ".bgs.protocol.account.v1.CAIS\"n\n\030GetAuth"
  "orizedDataRequest\022)\n\tentity_id\030\001 \001(\0132\026.b"
  "gs.protocol.EntityId\022\013\n\003tag\030\002 \003(\t\022\032\n\022pri"
  "vileged_network\030\003 \001(\010\"R\n\031GetAuthorizedDa"
  "taResponse\0225\n\004data\030\001 \003(\0132\'.bgs.protocol."
  "account.v1.AuthorizedData\"\324\001\n\030AccountSta"
  "teNotification\022<\n\raccount_state\030\001 \001(\0132%."
  "bgs.protocol.account.v1.AccountState\022\031\n\r"
  "subscriber_id\030\002 \001(\004B\002\030\001\022\?\n\014account_tags\030"
  "\003 \001(\0132).bgs.protocol.account.v1.AccountF"
  "ieldTags\022\036\n\026subscription_completed\030\004 \001(\010"
  "\"\352\001\n\034GameAccountStateNotification\022E\n\022gam"
  "e_account_state\030\001 \001(\0132).bgs.protocol.acc"
  "ount.v1.GameAccountState\022\031\n\rsubscriber_i"
  "d\030\002 \001(\004B\002\030\001\022H\n\021game_account_tags\030\003 \001(\0132-"
  ".bgs.protocol.account.v1.GameAccountFiel"
  "dTags\022\036\n\026subscription_completed\030\004 \001(\010\"\262\001"
  "\n\027GameAccountNotification\022\?\n\rgame_accoun"
  "ts\030\001 \003(\0132(.bgs.protocol.account.v1.GameA"
  "ccountList\022\025\n\rsubscriber_id\030\002 \001(\004\022\?\n\014acc"
  "ount_tags\030\003 \001(\0132).bgs.protocol.account.v"
  "1.AccountFieldTags\"\250\001\n\036GameAccountSessio"
  "nNotification\022@\n\014game_account\030\001 \001(\0132*.bg"
  "s.protocol.account.v1.GameAccountHandle\022"
  "D\n\014session_info\030\002 \001(\0132..bgs.protocol.acc"
  "ount.v1.GameSessionUpdateInfo2\255\014\n\016Accoun"
  "tService\022y\n\016ResolveAccount\022..bgs.protoco"
  "l.account.v1.ResolveAccountRequest\032/.bgs"
  ".protocol.account.v1.ResolveAccountRespo"
  "nse\"\006\202\371+\002\010\r\022]\n\014IsIgrAddress\022,.bgs.protoc"
  "ol.account.v1.IsIgrAddressRequest\032\024.bgs."
  "protocol.NoData\"\t\210\002\001\202\371+\002\010\017\022|\n\tSubscribe\022"
  "2.bgs.protocol.account.v1.SubscriptionUp"
  "dateRequest\0323.bgs.protocol.account.v1.Su"
  "bscriptionUpdateResponse\"\006\202\371+\002\010\031\022_\n\013Unsu"
  "bscribe\0222.bgs.protocol.account.v1.Subscr"
  "iptionUpdateRequest\032\024.bgs.protocol.NoDat"
  "a\"\006\202\371+\002\010\032\022|\n\017GetAccountState\022/.bgs.proto"
  "col.account.v1.GetAccountStateRequest\0320."
  "bgs.protocol.account.v1.GetAccountStateR"
  "esponse\"\006\202\371+\002\010\036\022\210\001\n\023GetGameAccountState\022"
  "3.bgs.protocol.account.v1.GetGameAccount"
  "StateRequest\0324.bgs.protocol.account.v1.G"
  "etGameAccountStateResponse\"\006\202\371+\002\010\037\022p\n\013Ge"
  "tLicenses\022+.bgs.protocol.account.v1.GetL"
  "icensesRequest\032,.bgs.protocol.account.v1"
  ".GetLicensesResponse\"\006\202\371+\002\010 \022\227\001\n\030GetGame"
  "TimeRemainingInfo\0228.bgs.protocol.account"
  ".v1.GetGameTimeRemainingInfoRequest\0329.bg"
  "s.protocol.account.v1.GetGameTimeRemaini"
  "ngInfoResponse\"\006\202\371+\002\010!\022\205\001\n\022GetGameSessio"
  "nInfo\0222.bgs.protocol.account.v1.GetGameS"
  "essionInfoRequest\0323.bgs.protocol.account"
  ".v1.GetGameSessionInfoResponse\"\006\202\371+\002\010\"\022p"
  "\n\013GetCAISInfo\022+.bgs.protocol.account.v1."
  "GetCAISInfoRequest\032,.bgs.protocol.accoun"
  "t.v1.GetCAISInfoResponse\"\006\202\371+\002\010#\022\202\001\n\021Get"
  "AuthorizedData\0221.bgs.protocol.account.v1"
  ".GetAuthorizedDataRequest\0322.bgs.protocol"
  ".account.v1.GetAuthorizedDataResponse\"\006\202"
  "\371+\002\010%\022\216\001\n\025GetSignedAccountState\0225.bgs.pr"
  "otocol.account.v1.GetSignedAccountStateR"
  "equest\0326.bgs.protocol.account.v1.GetSign"
  "edAccountStateResponse\"\006\202\371+\002\010,\032=\202\371+&\n$bn"
  "et.protocol.account.AccountService\202\371+\t*\007"
  "account\212\371+\002\020\0012\220\004\n\017AccountListener\022m\n\025OnA"
  "ccountStateUpdated\0221.bgs.protocol.accoun"
  "t.v1.AccountStateNotification\032\031.bgs.prot"
  "ocol.NO_RESPONSE\"\006\202\371+\002\010\001\022u\n\031OnGameAccoun"
  "tStateUpdated\0225.bgs.protocol.account.v1."
  "GameAccountStateNotification\032\031.bgs.proto"
  "col.NO_RESPONSE\"\006\202\371+\002\010\002\022o\n\025OnGameAccount"
  "sUpdated\0220.bgs.protocol.account.v1.GameA"
  "ccountNotification\032\031.bgs.protocol.NO_RES"
  "PONSE\"\t\210\002\001\202\371+\002\010\003\022u\n\024OnGameSessionUpdated"
  "\0227.bgs.protocol.account.v1.GameAccountSe"
  "ssionNotification\032\031.bgs.protocol.NO_RESP"
  "ONSE\"\t\210\002\001\202\371+\002\010\004\032/\202\371+%\n#bnet.protocol.acc"
  "ount.AccountNotify\212\371+\002\010\001B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto_deps[3] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto_sccs[26] = {
  &scc_info_AccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GameAccountFlagUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GameAccountNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GameAccountSessionNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GameAccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetAuthorizedDataRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetAuthorizedDataResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetCAISInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetCAISInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetGameAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetGameAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetGameSessionInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetGameSessionInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetGameTimeRemainingInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetGameTimeRemainingInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetLicensesRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetLicensesResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetSignedAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_GetSignedAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_IsIgrAddressRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_ResolveAccountRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_ResolveAccountResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_SubscriptionUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
  &scc_info_SubscriptionUpdateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto, "bgs/low/pb/client/account_service.proto", 5629,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto_deps, 26, 3,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto, 26, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto)), true);
namespace bgs {
namespace protocol {
namespace account {
namespace v1 {

// ===================================================================

void ResolveAccountRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_ResolveAccountRequest_default_instance_._instance.get_mutable()->ref_ = const_cast< ::bgs::protocol::account::v1::AccountReference*>(
      ::bgs::protocol::account::v1::AccountReference::internal_default_instance());
}
class ResolveAccountRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolveAccountRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountReference& ref(const ResolveAccountRequest* msg);
  static void set_has_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fetch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountReference&
ResolveAccountRequest::_Internal::ref(const ResolveAccountRequest* msg) {
  return *msg->ref_;
}
void ResolveAccountRequest::clear_ref() {
  if (ref_ != nullptr) ref_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ResolveAccountRequest::ResolveAccountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.ResolveAccountRequest)
}
ResolveAccountRequest::ResolveAccountRequest(const ResolveAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ref()) {
    ref_ = new ::bgs::protocol::account::v1::AccountReference(*from.ref_);
  } else {
    ref_ = nullptr;
  }
  fetch_id_ = from.fetch_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.ResolveAccountRequest)
}

void ResolveAccountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveAccountRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetch_id_) -
      reinterpret_cast<char*>(&ref_)) + sizeof(fetch_id_));
}

ResolveAccountRequest::~ResolveAccountRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.ResolveAccountRequest)
  SharedDtor();
}

void ResolveAccountRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ref_;
}

void ResolveAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveAccountRequest& ResolveAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveAccountRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ResolveAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.ResolveAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ref_ != nullptr);
    ref_->Clear();
  }
  fetch_id_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ResolveAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountReference ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fetch_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_fetch_id(&has_bits);
          fetch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.ResolveAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountReference ref = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ref(this), target, stream);
  }

  // optional bool fetch_id = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_fetch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.ResolveAccountRequest)
  return target;
}

size_t ResolveAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.ResolveAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountReference ref = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ref_);
    }

    // optional bool fetch_id = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveAccountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.ResolveAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveAccountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.ResolveAccountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.ResolveAccountRequest)
    MergeFrom(*source);
  }
}

void ResolveAccountRequest::MergeFrom(const ResolveAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.ResolveAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ref()->::bgs::protocol::account::v1::AccountReference::MergeFrom(from._internal_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      fetch_id_ = from.fetch_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResolveAccountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.ResolveAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveAccountRequest::CopyFrom(const ResolveAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.ResolveAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveAccountRequest::IsInitialized() const {
  if (_internal_has_ref()) {
    if (!ref_->IsInitialized()) return false;
  }
  return true;
}

void ResolveAccountRequest::InternalSwap(ResolveAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ref_, other->ref_);
  swap(fetch_id_, other->fetch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveAccountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolveAccountResponse::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_ResolveAccountResponse_default_instance_._instance.get_mutable()->id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
}
class ResolveAccountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolveAccountResponse>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& id(const ResolveAccountResponse* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
ResolveAccountResponse::_Internal::id(const ResolveAccountResponse* msg) {
  return *msg->id_;
}
void ResolveAccountResponse::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ResolveAccountResponse::ResolveAccountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.ResolveAccountResponse)
}
ResolveAccountResponse::ResolveAccountResponse(const ResolveAccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::bgs::protocol::account::v1::AccountId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.ResolveAccountResponse)
}

void ResolveAccountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveAccountResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  id_ = nullptr;
}

ResolveAccountResponse::~ResolveAccountResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.ResolveAccountResponse)
  SharedDtor();
}

void ResolveAccountResponse::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ResolveAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveAccountResponse& ResolveAccountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveAccountResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ResolveAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.ResolveAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ResolveAccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveAccountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.ResolveAccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId id = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.ResolveAccountResponse)
  return target;
}

size_t ResolveAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.ResolveAccountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.AccountId id = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveAccountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.ResolveAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveAccountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveAccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.ResolveAccountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.ResolveAccountResponse)
    MergeFrom(*source);
  }
}

void ResolveAccountResponse::MergeFrom(const ResolveAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.ResolveAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_id());
  }
}

void ResolveAccountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.ResolveAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveAccountResponse::CopyFrom(const ResolveAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.ResolveAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveAccountResponse::IsInitialized() const {
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  return true;
}

void ResolveAccountResponse::InternalSwap(ResolveAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveAccountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountFlagUpdateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GameAccountFlagUpdateRequest_default_instance_._instance.get_mutable()->game_account_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class GameAccountFlagUpdateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountFlagUpdateRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& game_account(const GameAccountFlagUpdateRequest* msg);
  static void set_has_game_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
GameAccountFlagUpdateRequest::_Internal::game_account(const GameAccountFlagUpdateRequest* msg) {
  return *msg->game_account_;
}
void GameAccountFlagUpdateRequest::clear_game_account() {
  if (game_account_ != nullptr) game_account_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameAccountFlagUpdateRequest::GameAccountFlagUpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
}
GameAccountFlagUpdateRequest::GameAccountFlagUpdateRequest(const GameAccountFlagUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_game_account()) {
    game_account_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.game_account_);
  } else {
    game_account_ = nullptr;
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
}

void GameAccountFlagUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameAccountFlagUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&game_account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&game_account_)) + sizeof(active_));
}

GameAccountFlagUpdateRequest::~GameAccountFlagUpdateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  SharedDtor();
}

void GameAccountFlagUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete game_account_;
}

void GameAccountFlagUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountFlagUpdateRequest& GameAccountFlagUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountFlagUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GameAccountFlagUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_account_ != nullptr);
    game_account_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&flag_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountFlagUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountFlagUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_account(this), target, stream);
  }

  // optional uint64 flag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_flag(), target);
  }

  // optional bool active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  return target;
}

size_t GameAccountFlagUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_);
    }

    // optional uint64 flag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_flag());
    }

    // optional bool active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountFlagUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountFlagUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountFlagUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
    MergeFrom(*source);
  }
}

void GameAccountFlagUpdateRequest::MergeFrom(const GameAccountFlagUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_account()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_game_account());
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAccountFlagUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountFlagUpdateRequest::CopyFrom(const GameAccountFlagUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountFlagUpdateRequest::IsInitialized() const {
  if (_internal_has_game_account()) {
    if (!game_account_->IsInitialized()) return false;
  }
  return true;
}

void GameAccountFlagUpdateRequest::InternalSwap(GameAccountFlagUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_account_, other->game_account_);
  swap(flag_, other->flag_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountFlagUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionUpdateRequest::InitAsDefaultInstance() {
}
class SubscriptionUpdateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionUpdateRequest>()._has_bits_);
};

void SubscriptionUpdateRequest::clear_ref() {
  ref_.Clear();
}
SubscriptionUpdateRequest::SubscriptionUpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.SubscriptionUpdateRequest)
}
SubscriptionUpdateRequest::SubscriptionUpdateRequest(const SubscriptionUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ref_(from.ref_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.SubscriptionUpdateRequest)
}

void SubscriptionUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
}

SubscriptionUpdateRequest::~SubscriptionUpdateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  SharedDtor();
}

void SubscriptionUpdateRequest::SharedDtor() {
}

void SubscriptionUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionUpdateRequest& SubscriptionUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionUpdateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ref_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscriptionUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.account.v1.SubscriberReference ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.SubscriberReference ref = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ref(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  return target;
}

size_t SubscriptionUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.SubscriberReference ref = 2;
  total_size += 1UL * this->_internal_ref_size();
  for (const auto& msg : this->ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.SubscriptionUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.SubscriptionUpdateRequest)
    MergeFrom(*source);
  }
}

void SubscriptionUpdateRequest::MergeFrom(const SubscriptionUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ref_.MergeFrom(from.ref_);
}

void SubscriptionUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionUpdateRequest::CopyFrom(const SubscriptionUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.SubscriptionUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionUpdateRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ref_)) return false;
  return true;
}

void SubscriptionUpdateRequest::InternalSwap(SubscriptionUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ref_.InternalSwap(&other->ref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionUpdateResponse::InitAsDefaultInstance() {
}
class SubscriptionUpdateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionUpdateResponse>()._has_bits_);
};

void SubscriptionUpdateResponse::clear_ref() {
  ref_.Clear();
}
SubscriptionUpdateResponse::SubscriptionUpdateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.SubscriptionUpdateResponse)
}
SubscriptionUpdateResponse::SubscriptionUpdateResponse(const SubscriptionUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ref_(from.ref_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.SubscriptionUpdateResponse)
}

void SubscriptionUpdateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionUpdateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
}

SubscriptionUpdateResponse::~SubscriptionUpdateResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  SharedDtor();
}

void SubscriptionUpdateResponse::SharedDtor() {
}

void SubscriptionUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionUpdateResponse& SubscriptionUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionUpdateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ref_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscriptionUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.account.v1.SubscriberReference ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionUpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.SubscriberReference ref = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ref(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  return target;
}

size_t SubscriptionUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.SubscriberReference ref = 1;
  total_size += 1UL * this->_internal_ref_size();
  for (const auto& msg : this->ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionUpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionUpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.SubscriptionUpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.SubscriptionUpdateResponse)
    MergeFrom(*source);
  }
}

void SubscriptionUpdateResponse::MergeFrom(const SubscriptionUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ref_.MergeFrom(from.ref_);
}

void SubscriptionUpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionUpdateResponse::CopyFrom(const SubscriptionUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.SubscriptionUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionUpdateResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ref_)) return false;
  return true;
}

void SubscriptionUpdateResponse::InternalSwap(SubscriptionUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ref_.InternalSwap(&other->ref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionUpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsIgrAddressRequest::InitAsDefaultInstance() {
}
class IsIgrAddressRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<IsIgrAddressRequest>()._has_bits_);
  static void set_has_client_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IsIgrAddressRequest::IsIgrAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.IsIgrAddressRequest)
}
IsIgrAddressRequest::IsIgrAddressRequest(const IsIgrAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_address()) {
    client_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_address_);
  }
  region_ = from.region_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.IsIgrAddressRequest)
}

void IsIgrAddressRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsIgrAddressRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  client_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_ = 0u;
}

IsIgrAddressRequest::~IsIgrAddressRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.IsIgrAddressRequest)
  SharedDtor();
}

void IsIgrAddressRequest::SharedDtor() {
  client_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsIgrAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsIgrAddressRequest& IsIgrAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsIgrAddressRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void IsIgrAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.IsIgrAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_address_.ClearNonDefaultToEmptyNoArena();
  }
  region_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IsIgrAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string client_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.IsIgrAddressRequest.client_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsIgrAddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.IsIgrAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_address().data(), static_cast<int>(this->_internal_client_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.IsIgrAddressRequest.client_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_address(), target);
  }

  // optional uint32 region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.IsIgrAddressRequest)
  return target;
}

size_t IsIgrAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.IsIgrAddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string client_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_address());
    }

    // optional uint32 region = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsIgrAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.IsIgrAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsIgrAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsIgrAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.IsIgrAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.IsIgrAddressRequest)
    MergeFrom(*source);
  }
}

void IsIgrAddressRequest::MergeFrom(const IsIgrAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.IsIgrAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IsIgrAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.IsIgrAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsIgrAddressRequest::CopyFrom(const IsIgrAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.IsIgrAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsIgrAddressRequest::IsInitialized() const {
  return true;
}

void IsIgrAddressRequest::InternalSwap(IsIgrAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_address_.Swap(&other->client_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsIgrAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetAccountStateRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::account::v1::_GetAccountStateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::account::v1::AccountFieldOptions*>(
      ::bgs::protocol::account::v1::AccountFieldOptions::internal_default_instance());
  ::bgs::protocol::account::v1::_GetAccountStateRequest_default_instance_._instance.get_mutable()->tags_ = const_cast< ::bgs::protocol::account::v1::AccountFieldTags*>(
      ::bgs::protocol::account::v1::AccountFieldTags::internal_default_instance());
}
class GetAccountStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAccountStateRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const GetAccountStateRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::account::v1::AccountFieldOptions& options(const GetAccountStateRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::account::v1::AccountFieldTags& tags(const GetAccountStateRequest* msg);
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::EntityId&
GetAccountStateRequest::_Internal::entity_id(const GetAccountStateRequest* msg) {
  return *msg->entity_id_;
}
const ::bgs::protocol::account::v1::AccountFieldOptions&
GetAccountStateRequest::_Internal::options(const GetAccountStateRequest* msg) {
  return *msg->options_;
}
const ::bgs::protocol::account::v1::AccountFieldTags&
GetAccountStateRequest::_Internal::tags(const GetAccountStateRequest* msg) {
  return *msg->tags_;
}
void GetAccountStateRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetAccountStateRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GetAccountStateRequest::clear_tags() {
  if (tags_ != nullptr) tags_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GetAccountStateRequest::GetAccountStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetAccountStateRequest)
}
GetAccountStateRequest::GetAccountStateRequest(const GetAccountStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::account::v1::AccountFieldOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_tags()) {
    tags_ = new ::bgs::protocol::account::v1::AccountFieldTags(*from.tags_);
  } else {
    tags_ = nullptr;
  }
  ::memcpy(&program_, &from.program_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&program_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetAccountStateRequest)
}

void GetAccountStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(region_));
}

GetAccountStateRequest::~GetAccountStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetAccountStateRequest)
  SharedDtor();
}

void GetAccountStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete tags_;
}

void GetAccountStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountStateRequest& GetAccountStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAccountStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetAccountStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(entity_id_ != nullptr);
      entity_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tags_ != nullptr);
      tags_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&program_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_) -
        reinterpret_cast<char*>(&program_)) + sizeof(region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAccountStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId entity_id = 1 [(.bgs.protocol.field_options) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 program = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.AccountFieldOptions options = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.AccountFieldTags tags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetAccountStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId entity_id = 1 [(.bgs.protocol.field_options) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // optional uint32 program = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_program(), target);
  }

  // optional uint32 region = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_region(), target);
  }

  // optional .bgs.protocol.account.v1.AccountFieldOptions options = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::options(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.AccountFieldTags tags = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetAccountStateRequest)
  return target;
}

size_t GetAccountStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetAccountStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .bgs.protocol.EntityId entity_id = 1 [(.bgs.protocol.field_options) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_id_);
    }

    // optional .bgs.protocol.account.v1.AccountFieldOptions options = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .bgs.protocol.account.v1.AccountFieldTags tags = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tags_);
    }

    // optional uint32 program = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_program());
    }

    // optional uint32 region = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetAccountStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetAccountStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetAccountStateRequest)
    MergeFrom(*source);
  }
}

void GetAccountStateRequest::MergeFrom(const GetAccountStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetAccountStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::account::v1::AccountFieldOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tags()->::bgs::protocol::account::v1::AccountFieldTags::MergeFrom(from._internal_tags());
    }
    if (cached_has_bits & 0x00000008u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000010u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAccountStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetAccountStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountStateRequest::CopyFrom(const GetAccountStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetAccountStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountStateRequest::IsInitialized() const {
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void GetAccountStateRequest::InternalSwap(GetAccountStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_id_, other->entity_id_);
  swap(options_, other->options_);
  swap(tags_, other->tags_);
  swap(program_, other->program_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountStateResponse::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetAccountStateResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::bgs::protocol::account::v1::AccountState*>(
      ::bgs::protocol::account::v1::AccountState::internal_default_instance());
  ::bgs::protocol::account::v1::_GetAccountStateResponse_default_instance_._instance.get_mutable()->tags_ = const_cast< ::bgs::protocol::account::v1::AccountFieldTags*>(
      ::bgs::protocol::account::v1::AccountFieldTags::internal_default_instance());
}
class GetAccountStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAccountStateResponse>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountState& state(const GetAccountStateResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::AccountFieldTags& tags(const GetAccountStateResponse* msg);
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountState&
GetAccountStateResponse::_Internal::state(const GetAccountStateResponse* msg) {
  return *msg->state_;
}
const ::bgs::protocol::account::v1::AccountFieldTags&
GetAccountStateResponse::_Internal::tags(const GetAccountStateResponse* msg) {
  return *msg->tags_;
}
void GetAccountStateResponse::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetAccountStateResponse::clear_tags() {
  if (tags_ != nullptr) tags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetAccountStateResponse::GetAccountStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetAccountStateResponse)
}
GetAccountStateResponse::GetAccountStateResponse(const GetAccountStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::bgs::protocol::account::v1::AccountState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_tags()) {
    tags_ = new ::bgs::protocol::account::v1::AccountFieldTags(*from.tags_);
  } else {
    tags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetAccountStateResponse)
}

void GetAccountStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tags_) -
      reinterpret_cast<char*>(&state_)) + sizeof(tags_));
}

GetAccountStateResponse::~GetAccountStateResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetAccountStateResponse)
  SharedDtor();
}

void GetAccountStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete tags_;
}

void GetAccountStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountStateResponse& GetAccountStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAccountStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetAccountStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tags_ != nullptr);
      tags_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAccountStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.AccountFieldTags tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetAccountStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.AccountFieldTags tags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetAccountStateResponse)
  return target;
}

size_t GetAccountStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetAccountStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountState state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .bgs.protocol.account.v1.AccountFieldTags tags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tags_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetAccountStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetAccountStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetAccountStateResponse)
    MergeFrom(*source);
  }
}

void GetAccountStateResponse::MergeFrom(const GetAccountStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetAccountStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_state()->::bgs::protocol::account::v1::AccountState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tags()->::bgs::protocol::account::v1::AccountFieldTags::MergeFrom(from._internal_tags());
    }
  }
}

void GetAccountStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetAccountStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountStateResponse::CopyFrom(const GetAccountStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetAccountStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountStateResponse::IsInitialized() const {
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  return true;
}

void GetAccountStateResponse::InternalSwap(GetAccountStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
  swap(tags_, other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSignedAccountStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetSignedAccountStateRequest_default_instance_._instance.get_mutable()->account_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
}
class GetSignedAccountStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSignedAccountStateRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& account(const GetSignedAccountStateRequest* msg);
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
GetSignedAccountStateRequest::_Internal::account(const GetSignedAccountStateRequest* msg) {
  return *msg->account_;
}
void GetSignedAccountStateRequest::clear_account() {
  if (account_ != nullptr) account_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetSignedAccountStateRequest::GetSignedAccountStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetSignedAccountStateRequest)
}
GetSignedAccountStateRequest::GetSignedAccountStateRequest(const GetSignedAccountStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::bgs::protocol::account::v1::AccountId(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetSignedAccountStateRequest)
}

void GetSignedAccountStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSignedAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  account_ = nullptr;
}

GetSignedAccountStateRequest::~GetSignedAccountStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  SharedDtor();
}

void GetSignedAccountStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
}

void GetSignedAccountStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSignedAccountStateRequest& GetSignedAccountStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSignedAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSignedAccountStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(account_ != nullptr);
    account_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSignedAccountStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignedAccountStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  return target;
}

size_t GetSignedAccountStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.AccountId account = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSignedAccountStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSignedAccountStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSignedAccountStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetSignedAccountStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetSignedAccountStateRequest)
    MergeFrom(*source);
  }
}

void GetSignedAccountStateRequest::MergeFrom(const GetSignedAccountStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account()) {
    _internal_mutable_account()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_account());
  }
}

void GetSignedAccountStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignedAccountStateRequest::CopyFrom(const GetSignedAccountStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetSignedAccountStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignedAccountStateRequest::IsInitialized() const {
  if (_internal_has_account()) {
    if (!account_->IsInitialized()) return false;
  }
  return true;
}

void GetSignedAccountStateRequest::InternalSwap(GetSignedAccountStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignedAccountStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSignedAccountStateResponse::InitAsDefaultInstance() {
}
class GetSignedAccountStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSignedAccountStateResponse>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetSignedAccountStateResponse::GetSignedAccountStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetSignedAccountStateResponse)
}
GetSignedAccountStateResponse::GetSignedAccountStateResponse(const GetSignedAccountStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetSignedAccountStateResponse)
}

void GetSignedAccountStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSignedAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSignedAccountStateResponse::~GetSignedAccountStateResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  SharedDtor();
}

void GetSignedAccountStateResponse::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSignedAccountStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSignedAccountStateResponse& GetSignedAccountStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSignedAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetSignedAccountStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSignedAccountStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.GetSignedAccountStateResponse.token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignedAccountStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.GetSignedAccountStateResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  return target;
}

size_t GetSignedAccountStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSignedAccountStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSignedAccountStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSignedAccountStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetSignedAccountStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetSignedAccountStateResponse)
    MergeFrom(*source);
  }
}

void GetSignedAccountStateResponse::MergeFrom(const GetSignedAccountStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _has_bits_[0] |= 0x00000001u;
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void GetSignedAccountStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignedAccountStateResponse::CopyFrom(const GetSignedAccountStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetSignedAccountStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignedAccountStateResponse::IsInitialized() const {
  return true;
}

void GetSignedAccountStateResponse::InternalSwap(GetSignedAccountStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignedAccountStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGameAccountStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetGameAccountStateRequest_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::account::v1::_GetGameAccountStateRequest_default_instance_._instance.get_mutable()->game_account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::account::v1::_GetGameAccountStateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::account::v1::GameAccountFieldOptions*>(
      ::bgs::protocol::account::v1::GameAccountFieldOptions::internal_default_instance());
  ::bgs::protocol::account::v1::_GetGameAccountStateRequest_default_instance_._instance.get_mutable()->tags_ = const_cast< ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      ::bgs::protocol::account::v1::GameAccountFieldTags::internal_default_instance());
}
class GetGameAccountStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGameAccountStateRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& account_id(const GetGameAccountStateRequest* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& game_account_id(const GetGameAccountStateRequest* msg);
  static void set_has_game_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::account::v1::GameAccountFieldOptions& options(const GetGameAccountStateRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::account::v1::GameAccountFieldTags& tags(const GetGameAccountStateRequest* msg);
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::EntityId&
GetGameAccountStateRequest::_Internal::account_id(const GetGameAccountStateRequest* msg) {
  return *msg->account_id_;
}
const ::bgs::protocol::EntityId&
GetGameAccountStateRequest::_Internal::game_account_id(const GetGameAccountStateRequest* msg) {
  return *msg->game_account_id_;
}
const ::bgs::protocol::account::v1::GameAccountFieldOptions&
GetGameAccountStateRequest::_Internal::options(const GetGameAccountStateRequest* msg) {
  return *msg->options_;
}
const ::bgs::protocol::account::v1::GameAccountFieldTags&
GetGameAccountStateRequest::_Internal::tags(const GetGameAccountStateRequest* msg) {
  return *msg->tags_;
}
void GetGameAccountStateRequest::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetGameAccountStateRequest::clear_game_account_id() {
  if (game_account_id_ != nullptr) game_account_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GetGameAccountStateRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GetGameAccountStateRequest::clear_tags() {
  if (tags_ != nullptr) tags_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GetGameAccountStateRequest::GetGameAccountStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetGameAccountStateRequest)
}
GetGameAccountStateRequest::GetGameAccountStateRequest(const GetGameAccountStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  if (from._internal_has_game_account_id()) {
    game_account_id_ = new ::bgs::protocol::EntityId(*from.game_account_id_);
  } else {
    game_account_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::account::v1::GameAccountFieldOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_tags()) {
    tags_ = new ::bgs::protocol::account::v1::GameAccountFieldTags(*from.tags_);
  } else {
    tags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetGameAccountStateRequest)
}

void GetGameAccountStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGameAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tags_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(tags_));
}

GetGameAccountStateRequest::~GetGameAccountStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetGameAccountStateRequest)
  SharedDtor();
}

void GetGameAccountStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
  if (this != internal_default_instance()) delete game_account_id_;
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete tags_;
}

void GetGameAccountStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGameAccountStateRequest& GetGameAccountStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGameAccountStateRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetGameAccountStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetGameAccountStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_account_id_ != nullptr);
      game_account_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tags_ != nullptr);
      tags_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetGameAccountStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId account_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId game_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountFieldOptions options = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGameAccountStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetGameAccountStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId account_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_id(this), target, stream);
  }

  // optional .bgs.protocol.EntityId game_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_account_id(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameAccountFieldOptions options = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::options(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetGameAccountStateRequest)
  return target;
}

size_t GetGameAccountStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetGameAccountStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.EntityId account_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

    // optional .bgs.protocol.EntityId game_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_id_);
    }

    // optional .bgs.protocol.account.v1.GameAccountFieldOptions options = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tags_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGameAccountStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetGameAccountStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGameAccountStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGameAccountStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetGameAccountStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetGameAccountStateRequest)
    MergeFrom(*source);
  }
}

void GetGameAccountStateRequest::MergeFrom(const GetGameAccountStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetGameAccountStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_game_account_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_options()->::bgs::protocol::account::v1::GameAccountFieldOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tags()->::bgs::protocol::account::v1::GameAccountFieldTags::MergeFrom(from._internal_tags());
    }
  }
}

void GetGameAccountStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetGameAccountStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameAccountStateRequest::CopyFrom(const GetGameAccountStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetGameAccountStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameAccountStateRequest::IsInitialized() const {
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  if (_internal_has_game_account_id()) {
    if (!game_account_id_->IsInitialized()) return false;
  }
  return true;
}

void GetGameAccountStateRequest::InternalSwap(GetGameAccountStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(game_account_id_, other->game_account_id_);
  swap(options_, other->options_);
  swap(tags_, other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGameAccountStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGameAccountStateResponse::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetGameAccountStateResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::bgs::protocol::account::v1::GameAccountState*>(
      ::bgs::protocol::account::v1::GameAccountState::internal_default_instance());
  ::bgs::protocol::account::v1::_GetGameAccountStateResponse_default_instance_._instance.get_mutable()->tags_ = const_cast< ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      ::bgs::protocol::account::v1::GameAccountFieldTags::internal_default_instance());
}
class GetGameAccountStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGameAccountStateResponse>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountState& state(const GetGameAccountStateResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::GameAccountFieldTags& tags(const GetGameAccountStateResponse* msg);
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::GameAccountState&
GetGameAccountStateResponse::_Internal::state(const GetGameAccountStateResponse* msg) {
  return *msg->state_;
}
const ::bgs::protocol::account::v1::GameAccountFieldTags&
GetGameAccountStateResponse::_Internal::tags(const GetGameAccountStateResponse* msg) {
  return *msg->tags_;
}
void GetGameAccountStateResponse::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetGameAccountStateResponse::clear_tags() {
  if (tags_ != nullptr) tags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetGameAccountStateResponse::GetGameAccountStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetGameAccountStateResponse)
}
GetGameAccountStateResponse::GetGameAccountStateResponse(const GetGameAccountStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::bgs::protocol::account::v1::GameAccountState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_tags()) {
    tags_ = new ::bgs::protocol::account::v1::GameAccountFieldTags(*from.tags_);
  } else {
    tags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetGameAccountStateResponse)
}

void GetGameAccountStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGameAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tags_) -
      reinterpret_cast<char*>(&state_)) + sizeof(tags_));
}

GetGameAccountStateResponse::~GetGameAccountStateResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetGameAccountStateResponse)
  SharedDtor();
}

void GetGameAccountStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete tags_;
}

void GetGameAccountStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGameAccountStateResponse& GetGameAccountStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGameAccountStateResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetGameAccountStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetGameAccountStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tags_ != nullptr);
      tags_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetGameAccountStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGameAccountStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetGameAccountStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetGameAccountStateResponse)
  return target;
}

size_t GetGameAccountStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetGameAccountStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.GameAccountState state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tags_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGameAccountStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetGameAccountStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGameAccountStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGameAccountStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetGameAccountStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetGameAccountStateResponse)
    MergeFrom(*source);
  }
}

void GetGameAccountStateResponse::MergeFrom(const GetGameAccountStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetGameAccountStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_state()->::bgs::protocol::account::v1::GameAccountState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tags()->::bgs::protocol::account::v1::GameAccountFieldTags::MergeFrom(from._internal_tags());
    }
  }
}

void GetGameAccountStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetGameAccountStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameAccountStateResponse::CopyFrom(const GetGameAccountStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetGameAccountStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameAccountStateResponse::IsInitialized() const {
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  return true;
}

void GetGameAccountStateResponse::InternalSwap(GetGameAccountStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
  swap(tags_, other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGameAccountStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLicensesRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetLicensesRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class GetLicensesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetLicensesRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& target_id(const GetLicensesRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fetch_account_licenses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fetch_game_account_licenses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fetch_dynamic_account_licenses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_exclude_unknown_program(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::EntityId&
GetLicensesRequest::_Internal::target_id(const GetLicensesRequest* msg) {
  return *msg->target_id_;
}
void GetLicensesRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetLicensesRequest::GetLicensesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetLicensesRequest)
}
GetLicensesRequest::GetLicensesRequest(const GetLicensesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  ::memcpy(&fetch_account_licenses_, &from.fetch_account_licenses_,
    static_cast<size_t>(reinterpret_cast<char*>(&program_) -
    reinterpret_cast<char*>(&fetch_account_licenses_)) + sizeof(program_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetLicensesRequest)
}

void GetLicensesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLicensesRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(program_));
}

GetLicensesRequest::~GetLicensesRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetLicensesRequest)
  SharedDtor();
}

void GetLicensesRequest::SharedDtor() {
  if (this != internal_default_instance()) delete target_id_;
}

void GetLicensesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLicensesRequest& GetLicensesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLicensesRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLicensesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetLicensesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_id_ != nullptr);
    target_id_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&fetch_account_licenses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&program_) -
        reinterpret_cast<char*>(&fetch_account_licenses_)) + sizeof(program_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLicensesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId target_id = 1 [(.bgs.protocol.field_options) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fetch_account_licenses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fetch_account_licenses(&has_bits);
          fetch_account_licenses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fetch_game_account_licenses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fetch_game_account_licenses(&has_bits);
          fetch_game_account_licenses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fetch_dynamic_account_licenses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fetch_dynamic_account_licenses(&has_bits);
          fetch_dynamic_account_licenses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool exclude_unknown_program = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_exclude_unknown_program(&has_bits);
          exclude_unknown_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLicensesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetLicensesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId target_id = 1 [(.bgs.protocol.field_options) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_id(this), target, stream);
  }

  // optional bool fetch_account_licenses = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_fetch_account_licenses(), target);
  }

  // optional bool fetch_game_account_licenses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_fetch_game_account_licenses(), target);
  }

  // optional bool fetch_dynamic_account_licenses = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_fetch_dynamic_account_licenses(), target);
  }

  // optional fixed32 program = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_program(), target);
  }

  // optional bool exclude_unknown_program = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_exclude_unknown_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetLicensesRequest)
  return target;
}

size_t GetLicensesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetLicensesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .bgs.protocol.EntityId target_id = 1 [(.bgs.protocol.field_options) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

    // optional bool fetch_account_licenses = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool fetch_game_account_licenses = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool fetch_dynamic_account_licenses = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool exclude_unknown_program = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional fixed32 program = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLicensesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetLicensesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLicensesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLicensesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetLicensesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetLicensesRequest)
    MergeFrom(*source);
  }
}

void GetLicensesRequest::MergeFrom(const GetLicensesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetLicensesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000002u) {
      fetch_account_licenses_ = from.fetch_account_licenses_;
    }
    if (cached_has_bits & 0x00000004u) {
      fetch_game_account_licenses_ = from.fetch_game_account_licenses_;
    }
    if (cached_has_bits & 0x00000008u) {
      fetch_dynamic_account_licenses_ = from.fetch_dynamic_account_licenses_;
    }
    if (cached_has_bits & 0x00000010u) {
      exclude_unknown_program_ = from.exclude_unknown_program_;
    }
    if (cached_has_bits & 0x00000020u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLicensesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetLicensesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLicensesRequest::CopyFrom(const GetLicensesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetLicensesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLicensesRequest::IsInitialized() const {
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void GetLicensesRequest::InternalSwap(GetLicensesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_id_, other->target_id_);
  swap(fetch_account_licenses_, other->fetch_account_licenses_);
  swap(fetch_game_account_licenses_, other->fetch_game_account_licenses_);
  swap(fetch_dynamic_account_licenses_, other->fetch_dynamic_account_licenses_);
  swap(exclude_unknown_program_, other->exclude_unknown_program_);
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLicensesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLicensesResponse::InitAsDefaultInstance() {
}
class GetLicensesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetLicensesResponse>()._has_bits_);
};

void GetLicensesResponse::clear_licenses() {
  licenses_.Clear();
}
GetLicensesResponse::GetLicensesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetLicensesResponse)
}
GetLicensesResponse::GetLicensesResponse(const GetLicensesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      licenses_(from.licenses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetLicensesResponse)
}

void GetLicensesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLicensesResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
}

GetLicensesResponse::~GetLicensesResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetLicensesResponse)
  SharedDtor();
}

void GetLicensesResponse::SharedDtor() {
}

void GetLicensesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLicensesResponse& GetLicensesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLicensesResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLicensesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetLicensesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licenses_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLicensesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.account.v1.AccountLicense licenses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_licenses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLicensesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetLicensesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_licenses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_licenses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetLicensesResponse)
  return target;
}

size_t GetLicensesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetLicensesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 1;
  total_size += 1UL * this->_internal_licenses_size();
  for (const auto& msg : this->licenses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLicensesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLicensesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLicensesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetLicensesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetLicensesResponse)
    MergeFrom(*source);
  }
}

void GetLicensesResponse::MergeFrom(const GetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  licenses_.MergeFrom(from.licenses_);
}

void GetLicensesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLicensesResponse::CopyFrom(const GetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLicensesResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(licenses_)) return false;
  return true;
}

void GetLicensesResponse::InternalSwap(GetLicensesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  licenses_.InternalSwap(&other->licenses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLicensesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGameSessionInfoRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetGameSessionInfoRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class GetGameSessionInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGameSessionInfoRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const GetGameSessionInfoRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::EntityId&
GetGameSessionInfoRequest::_Internal::entity_id(const GetGameSessionInfoRequest* msg) {
  return *msg->entity_id_;
}
void GetGameSessionInfoRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetGameSessionInfoRequest::GetGameSessionInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetGameSessionInfoRequest)
}
GetGameSessionInfoRequest::GetGameSessionInfoRequest(const GetGameSessionInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetGameSessionInfoRequest)
}

void GetGameSessionInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGameSessionInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  entity_id_ = nullptr;
}

GetGameSessionInfoRequest::~GetGameSessionInfoRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  SharedDtor();
}

void GetGameSessionInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void GetGameSessionInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGameSessionInfoRequest& GetGameSessionInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGameSessionInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetGameSessionInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_id_ != nullptr);
    entity_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetGameSessionInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGameSessionInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  return target;
}

size_t GetGameSessionInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId entity_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGameSessionInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGameSessionInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGameSessionInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetGameSessionInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetGameSessionInfoRequest)
    MergeFrom(*source);
  }
}

void GetGameSessionInfoRequest::MergeFrom(const GetGameSessionInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entity_id()) {
    _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
  }
}

void GetGameSessionInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameSessionInfoRequest::CopyFrom(const GetGameSessionInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetGameSessionInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameSessionInfoRequest::IsInitialized() const {
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void GetGameSessionInfoRequest::InternalSwap(GetGameSessionInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_id_, other->entity_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGameSessionInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGameSessionInfoResponse::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetGameSessionInfoResponse_default_instance_._instance.get_mutable()->session_info_ = const_cast< ::bgs::protocol::account::v1::GameSessionInfo*>(
      ::bgs::protocol::account::v1::GameSessionInfo::internal_default_instance());
}
class GetGameSessionInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGameSessionInfoResponse>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameSessionInfo& session_info(const GetGameSessionInfoResponse* msg);
  static void set_has_session_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::GameSessionInfo&
GetGameSessionInfoResponse::_Internal::session_info(const GetGameSessionInfoResponse* msg) {
  return *msg->session_info_;
}
void GetGameSessionInfoResponse::clear_session_info() {
  if (session_info_ != nullptr) session_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetGameSessionInfoResponse::GetGameSessionInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetGameSessionInfoResponse)
}
GetGameSessionInfoResponse::GetGameSessionInfoResponse(const GetGameSessionInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_session_info()) {
    session_info_ = new ::bgs::protocol::account::v1::GameSessionInfo(*from.session_info_);
  } else {
    session_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetGameSessionInfoResponse)
}

void GetGameSessionInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGameSessionInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  session_info_ = nullptr;
}

GetGameSessionInfoResponse::~GetGameSessionInfoResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  SharedDtor();
}

void GetGameSessionInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete session_info_;
}

void GetGameSessionInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGameSessionInfoResponse& GetGameSessionInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGameSessionInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetGameSessionInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(session_info_ != nullptr);
    session_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetGameSessionInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameSessionInfo session_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGameSessionInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameSessionInfo session_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::session_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  return target;
}

size_t GetGameSessionInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.GameSessionInfo session_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGameSessionInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGameSessionInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGameSessionInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetGameSessionInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetGameSessionInfoResponse)
    MergeFrom(*source);
  }
}

void GetGameSessionInfoResponse::MergeFrom(const GetGameSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_info()) {
    _internal_mutable_session_info()->::bgs::protocol::account::v1::GameSessionInfo::MergeFrom(from._internal_session_info());
  }
}

void GetGameSessionInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameSessionInfoResponse::CopyFrom(const GetGameSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetGameSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameSessionInfoResponse::IsInitialized() const {
  if (_internal_has_session_info()) {
    if (!session_info_->IsInitialized()) return false;
  }
  return true;
}

void GetGameSessionInfoResponse::InternalSwap(GetGameSessionInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_info_, other->session_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGameSessionInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGameTimeRemainingInfoRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetGameTimeRemainingInfoRequest_default_instance_._instance.get_mutable()->game_account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::account::v1::_GetGameTimeRemainingInfoRequest_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class GetGameTimeRemainingInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGameTimeRemainingInfoRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& game_account_id(const GetGameTimeRemainingInfoRequest* msg);
  static void set_has_game_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& account_id(const GetGameTimeRemainingInfoRequest* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
GetGameTimeRemainingInfoRequest::_Internal::game_account_id(const GetGameTimeRemainingInfoRequest* msg) {
  return *msg->game_account_id_;
}
const ::bgs::protocol::EntityId&
GetGameTimeRemainingInfoRequest::_Internal::account_id(const GetGameTimeRemainingInfoRequest* msg) {
  return *msg->account_id_;
}
void GetGameTimeRemainingInfoRequest::clear_game_account_id() {
  if (game_account_id_ != nullptr) game_account_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetGameTimeRemainingInfoRequest::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetGameTimeRemainingInfoRequest::GetGameTimeRemainingInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
}
GetGameTimeRemainingInfoRequest::GetGameTimeRemainingInfoRequest(const GetGameTimeRemainingInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_game_account_id()) {
    game_account_id_ = new ::bgs::protocol::EntityId(*from.game_account_id_);
  } else {
    game_account_id_ = nullptr;
  }
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
}

void GetGameTimeRemainingInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGameTimeRemainingInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&game_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&game_account_id_)) + sizeof(account_id_));
}

GetGameTimeRemainingInfoRequest::~GetGameTimeRemainingInfoRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  SharedDtor();
}

void GetGameTimeRemainingInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete game_account_id_;
  if (this != internal_default_instance()) delete account_id_;
}

void GetGameTimeRemainingInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGameTimeRemainingInfoRequest& GetGameTimeRemainingInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGameTimeRemainingInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetGameTimeRemainingInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(game_account_id_ != nullptr);
      game_account_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetGameTimeRemainingInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId game_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGameTimeRemainingInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId game_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_account_id(this), target, stream);
  }

  // optional .bgs.protocol.EntityId account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::account_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  return target;
}

size_t GetGameTimeRemainingInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId game_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_id_);
    }

    // optional .bgs.protocol.EntityId account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGameTimeRemainingInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGameTimeRemainingInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGameTimeRemainingInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
    MergeFrom(*source);
  }
}

void GetGameTimeRemainingInfoRequest::MergeFrom(const GetGameTimeRemainingInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_game_account_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
  }
}

void GetGameTimeRemainingInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameTimeRemainingInfoRequest::CopyFrom(const GetGameTimeRemainingInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameTimeRemainingInfoRequest::IsInitialized() const {
  if (_internal_has_game_account_id()) {
    if (!game_account_id_->IsInitialized()) return false;
  }
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  return true;
}

void GetGameTimeRemainingInfoRequest::InternalSwap(GetGameTimeRemainingInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_account_id_, other->game_account_id_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGameTimeRemainingInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGameTimeRemainingInfoResponse::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetGameTimeRemainingInfoResponse_default_instance_._instance.get_mutable()->game_time_remaining_info_ = const_cast< ::bgs::protocol::account::v1::GameTimeRemainingInfo*>(
      ::bgs::protocol::account::v1::GameTimeRemainingInfo::internal_default_instance());
}
class GetGameTimeRemainingInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetGameTimeRemainingInfoResponse>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameTimeRemainingInfo& game_time_remaining_info(const GetGameTimeRemainingInfoResponse* msg);
  static void set_has_game_time_remaining_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::GameTimeRemainingInfo&
GetGameTimeRemainingInfoResponse::_Internal::game_time_remaining_info(const GetGameTimeRemainingInfoResponse* msg) {
  return *msg->game_time_remaining_info_;
}
void GetGameTimeRemainingInfoResponse::clear_game_time_remaining_info() {
  if (game_time_remaining_info_ != nullptr) game_time_remaining_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetGameTimeRemainingInfoResponse::GetGameTimeRemainingInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
}
GetGameTimeRemainingInfoResponse::GetGameTimeRemainingInfoResponse(const GetGameTimeRemainingInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_game_time_remaining_info()) {
    game_time_remaining_info_ = new ::bgs::protocol::account::v1::GameTimeRemainingInfo(*from.game_time_remaining_info_);
  } else {
    game_time_remaining_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
}

void GetGameTimeRemainingInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGameTimeRemainingInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  game_time_remaining_info_ = nullptr;
}

GetGameTimeRemainingInfoResponse::~GetGameTimeRemainingInfoResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  SharedDtor();
}

void GetGameTimeRemainingInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete game_time_remaining_info_;
}

void GetGameTimeRemainingInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGameTimeRemainingInfoResponse& GetGameTimeRemainingInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGameTimeRemainingInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetGameTimeRemainingInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_time_remaining_info_ != nullptr);
    game_time_remaining_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetGameTimeRemainingInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameTimeRemainingInfo game_time_remaining_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_time_remaining_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGameTimeRemainingInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameTimeRemainingInfo game_time_remaining_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_time_remaining_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  return target;
}

size_t GetGameTimeRemainingInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.GameTimeRemainingInfo game_time_remaining_info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_time_remaining_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGameTimeRemainingInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGameTimeRemainingInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGameTimeRemainingInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
    MergeFrom(*source);
  }
}

void GetGameTimeRemainingInfoResponse::MergeFrom(const GetGameTimeRemainingInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_time_remaining_info()) {
    _internal_mutable_game_time_remaining_info()->::bgs::protocol::account::v1::GameTimeRemainingInfo::MergeFrom(from._internal_game_time_remaining_info());
  }
}

void GetGameTimeRemainingInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameTimeRemainingInfoResponse::CopyFrom(const GetGameTimeRemainingInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameTimeRemainingInfoResponse::IsInitialized() const {
  return true;
}

void GetGameTimeRemainingInfoResponse::InternalSwap(GetGameTimeRemainingInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_time_remaining_info_, other->game_time_remaining_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGameTimeRemainingInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCAISInfoRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetCAISInfoRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class GetCAISInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCAISInfoRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const GetCAISInfoRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::EntityId&
GetCAISInfoRequest::_Internal::entity_id(const GetCAISInfoRequest* msg) {
  return *msg->entity_id_;
}
void GetCAISInfoRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetCAISInfoRequest::GetCAISInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetCAISInfoRequest)
}
GetCAISInfoRequest::GetCAISInfoRequest(const GetCAISInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetCAISInfoRequest)
}

void GetCAISInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCAISInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  entity_id_ = nullptr;
}

GetCAISInfoRequest::~GetCAISInfoRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetCAISInfoRequest)
  SharedDtor();
}

void GetCAISInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void GetCAISInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCAISInfoRequest& GetCAISInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCAISInfoRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetCAISInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetCAISInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_id_ != nullptr);
    entity_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetCAISInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCAISInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetCAISInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetCAISInfoRequest)
  return target;
}

size_t GetCAISInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetCAISInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId entity_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCAISInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetCAISInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCAISInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCAISInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetCAISInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetCAISInfoRequest)
    MergeFrom(*source);
  }
}

void GetCAISInfoRequest::MergeFrom(const GetCAISInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetCAISInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entity_id()) {
    _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
  }
}

void GetCAISInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetCAISInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCAISInfoRequest::CopyFrom(const GetCAISInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetCAISInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCAISInfoRequest::IsInitialized() const {
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void GetCAISInfoRequest::InternalSwap(GetCAISInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_id_, other->entity_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCAISInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCAISInfoResponse::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetCAISInfoResponse_default_instance_._instance.get_mutable()->cais_info_ = const_cast< ::bgs::protocol::account::v1::CAIS*>(
      ::bgs::protocol::account::v1::CAIS::internal_default_instance());
}
class GetCAISInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCAISInfoResponse>()._has_bits_);
  static const ::bgs::protocol::account::v1::CAIS& cais_info(const GetCAISInfoResponse* msg);
  static void set_has_cais_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::CAIS&
GetCAISInfoResponse::_Internal::cais_info(const GetCAISInfoResponse* msg) {
  return *msg->cais_info_;
}
void GetCAISInfoResponse::clear_cais_info() {
  if (cais_info_ != nullptr) cais_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetCAISInfoResponse::GetCAISInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetCAISInfoResponse)
}
GetCAISInfoResponse::GetCAISInfoResponse(const GetCAISInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cais_info()) {
    cais_info_ = new ::bgs::protocol::account::v1::CAIS(*from.cais_info_);
  } else {
    cais_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetCAISInfoResponse)
}

void GetCAISInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCAISInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  cais_info_ = nullptr;
}

GetCAISInfoResponse::~GetCAISInfoResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetCAISInfoResponse)
  SharedDtor();
}

void GetCAISInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete cais_info_;
}

void GetCAISInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCAISInfoResponse& GetCAISInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCAISInfoResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetCAISInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetCAISInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cais_info_ != nullptr);
    cais_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetCAISInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.CAIS cais_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cais_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCAISInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetCAISInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.CAIS cais_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cais_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetCAISInfoResponse)
  return target;
}

size_t GetCAISInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetCAISInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.CAIS cais_info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cais_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCAISInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetCAISInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCAISInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCAISInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetCAISInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetCAISInfoResponse)
    MergeFrom(*source);
  }
}

void GetCAISInfoResponse::MergeFrom(const GetCAISInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetCAISInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cais_info()) {
    _internal_mutable_cais_info()->::bgs::protocol::account::v1::CAIS::MergeFrom(from._internal_cais_info());
  }
}

void GetCAISInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetCAISInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCAISInfoResponse::CopyFrom(const GetCAISInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetCAISInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCAISInfoResponse::IsInitialized() const {
  return true;
}

void GetCAISInfoResponse::InternalSwap(GetCAISInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cais_info_, other->cais_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCAISInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAuthorizedDataRequest::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GetAuthorizedDataRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class GetAuthorizedDataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAuthorizedDataRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const GetAuthorizedDataRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privileged_network(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
GetAuthorizedDataRequest::_Internal::entity_id(const GetAuthorizedDataRequest* msg) {
  return *msg->entity_id_;
}
void GetAuthorizedDataRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetAuthorizedDataRequest::GetAuthorizedDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetAuthorizedDataRequest)
}
GetAuthorizedDataRequest::GetAuthorizedDataRequest(const GetAuthorizedDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tag_(from.tag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  privileged_network_ = from.privileged_network_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetAuthorizedDataRequest)
}

void GetAuthorizedDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthorizedDataRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privileged_network_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(privileged_network_));
}

GetAuthorizedDataRequest::~GetAuthorizedDataRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  SharedDtor();
}

void GetAuthorizedDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void GetAuthorizedDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthorizedDataRequest& GetAuthorizedDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthorizedDataRequest_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAuthorizedDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_id_ != nullptr);
    entity_id_->Clear();
  }
  privileged_network_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAuthorizedDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tag();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.GetAuthorizedDataRequest.tag");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool privileged_network = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_privileged_network(&has_bits);
          privileged_network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthorizedDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // repeated string tag = 2;
  for (int i = 0, n = this->_internal_tag_size(); i < n; i++) {
    const auto& s = this->_internal_tag(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.GetAuthorizedDataRequest.tag");
    target = stream->WriteString(2, s, target);
  }

  // optional bool privileged_network = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_privileged_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  return target;
}

size_t GetAuthorizedDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tag = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tag_.size());
  for (int i = 0, n = tag_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tag_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId entity_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_id_);
    }

    // optional bool privileged_network = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthorizedDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthorizedDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthorizedDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetAuthorizedDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetAuthorizedDataRequest)
    MergeFrom(*source);
  }
}

void GetAuthorizedDataRequest::MergeFrom(const GetAuthorizedDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      privileged_network_ = from.privileged_network_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAuthorizedDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthorizedDataRequest::CopyFrom(const GetAuthorizedDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetAuthorizedDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthorizedDataRequest::IsInitialized() const {
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void GetAuthorizedDataRequest::InternalSwap(GetAuthorizedDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.InternalSwap(&other->tag_);
  swap(entity_id_, other->entity_id_);
  swap(privileged_network_, other->privileged_network_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthorizedDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAuthorizedDataResponse::InitAsDefaultInstance() {
}
class GetAuthorizedDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAuthorizedDataResponse>()._has_bits_);
};

void GetAuthorizedDataResponse::clear_data() {
  data_.Clear();
}
GetAuthorizedDataResponse::GetAuthorizedDataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GetAuthorizedDataResponse)
}
GetAuthorizedDataResponse::GetAuthorizedDataResponse(const GetAuthorizedDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GetAuthorizedDataResponse)
}

void GetAuthorizedDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthorizedDataResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
}

GetAuthorizedDataResponse::~GetAuthorizedDataResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  SharedDtor();
}

void GetAuthorizedDataResponse::SharedDtor() {
}

void GetAuthorizedDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthorizedDataResponse& GetAuthorizedDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthorizedDataResponse_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetAuthorizedDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAuthorizedDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.account.v1.AuthorizedData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthorizedDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.AuthorizedData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  return target;
}

size_t GetAuthorizedDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.AuthorizedData data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthorizedDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthorizedDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthorizedDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GetAuthorizedDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GetAuthorizedDataResponse)
    MergeFrom(*source);
  }
}

void GetAuthorizedDataResponse::MergeFrom(const GetAuthorizedDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetAuthorizedDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthorizedDataResponse::CopyFrom(const GetAuthorizedDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GetAuthorizedDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthorizedDataResponse::IsInitialized() const {
  return true;
}

void GetAuthorizedDataResponse::InternalSwap(GetAuthorizedDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthorizedDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountStateNotification::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_AccountStateNotification_default_instance_._instance.get_mutable()->account_state_ = const_cast< ::bgs::protocol::account::v1::AccountState*>(
      ::bgs::protocol::account::v1::AccountState::internal_default_instance());
  ::bgs::protocol::account::v1::_AccountStateNotification_default_instance_._instance.get_mutable()->account_tags_ = const_cast< ::bgs::protocol::account::v1::AccountFieldTags*>(
      ::bgs::protocol::account::v1::AccountFieldTags::internal_default_instance());
}
class AccountStateNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountStateNotification>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountState& account_state(const AccountStateNotification* msg);
  static void set_has_account_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subscriber_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::account::v1::AccountFieldTags& account_tags(const AccountStateNotification* msg);
  static void set_has_account_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subscription_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::account::v1::AccountState&
AccountStateNotification::_Internal::account_state(const AccountStateNotification* msg) {
  return *msg->account_state_;
}
const ::bgs::protocol::account::v1::AccountFieldTags&
AccountStateNotification::_Internal::account_tags(const AccountStateNotification* msg) {
  return *msg->account_tags_;
}
void AccountStateNotification::clear_account_state() {
  if (account_state_ != nullptr) account_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AccountStateNotification::clear_account_tags() {
  if (account_tags_ != nullptr) account_tags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AccountStateNotification::AccountStateNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountStateNotification)
}
AccountStateNotification::AccountStateNotification(const AccountStateNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_state()) {
    account_state_ = new ::bgs::protocol::account::v1::AccountState(*from.account_state_);
  } else {
    account_state_ = nullptr;
  }
  if (from._internal_has_account_tags()) {
    account_tags_ = new ::bgs::protocol::account::v1::AccountFieldTags(*from.account_tags_);
  } else {
    account_tags_ = nullptr;
  }
  ::memcpy(&subscriber_id_, &from.subscriber_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscription_completed_) -
    reinterpret_cast<char*>(&subscriber_id_)) + sizeof(subscription_completed_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountStateNotification)
}

void AccountStateNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&account_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscription_completed_) -
      reinterpret_cast<char*>(&account_state_)) + sizeof(subscription_completed_));
}

AccountStateNotification::~AccountStateNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountStateNotification)
  SharedDtor();
}

void AccountStateNotification::SharedDtor() {
  if (this != internal_default_instance()) delete account_state_;
  if (this != internal_default_instance()) delete account_tags_;
}

void AccountStateNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountStateNotification& AccountStateNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AccountStateNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountStateNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_state_ != nullptr);
      account_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(account_tags_ != nullptr);
      account_tags_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&subscriber_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subscription_completed_) -
        reinterpret_cast<char*>(&subscriber_id_)) + sizeof(subscription_completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountStateNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountState account_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 subscriber_id = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_subscriber_id(&has_bits);
          subscriber_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool subscription_completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_subscription_completed(&has_bits);
          subscription_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountStateNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountStateNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountState account_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_state(this), target, stream);
  }

  // optional uint64 subscriber_id = 2 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_subscriber_id(), target);
  }

  // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::account_tags(this), target, stream);
  }

  // optional bool subscription_completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_subscription_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountStateNotification)
  return target;
}

size_t AccountStateNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountStateNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.account.v1.AccountState account_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_state_);
    }

    // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_tags_);
    }

    // optional uint64 subscriber_id = 2 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subscriber_id());
    }

    // optional bool subscription_completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountStateNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountStateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountStateNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountStateNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountStateNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountStateNotification)
    MergeFrom(*source);
  }
}

void AccountStateNotification::MergeFrom(const AccountStateNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountStateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_state()->::bgs::protocol::account::v1::AccountState::MergeFrom(from._internal_account_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_account_tags()->::bgs::protocol::account::v1::AccountFieldTags::MergeFrom(from._internal_account_tags());
    }
    if (cached_has_bits & 0x00000004u) {
      subscriber_id_ = from.subscriber_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      subscription_completed_ = from.subscription_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountStateNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountStateNotification::CopyFrom(const AccountStateNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountStateNotification::IsInitialized() const {
  if (_internal_has_account_state()) {
    if (!account_state_->IsInitialized()) return false;
  }
  return true;
}

void AccountStateNotification::InternalSwap(AccountStateNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_state_, other->account_state_);
  swap(account_tags_, other->account_tags_);
  swap(subscriber_id_, other->subscriber_id_);
  swap(subscription_completed_, other->subscription_completed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountStateNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountStateNotification::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GameAccountStateNotification_default_instance_._instance.get_mutable()->game_account_state_ = const_cast< ::bgs::protocol::account::v1::GameAccountState*>(
      ::bgs::protocol::account::v1::GameAccountState::internal_default_instance());
  ::bgs::protocol::account::v1::_GameAccountStateNotification_default_instance_._instance.get_mutable()->game_account_tags_ = const_cast< ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      ::bgs::protocol::account::v1::GameAccountFieldTags::internal_default_instance());
}
class GameAccountStateNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountStateNotification>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountState& game_account_state(const GameAccountStateNotification* msg);
  static void set_has_game_account_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subscriber_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::account::v1::GameAccountFieldTags& game_account_tags(const GameAccountStateNotification* msg);
  static void set_has_game_account_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subscription_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::account::v1::GameAccountState&
GameAccountStateNotification::_Internal::game_account_state(const GameAccountStateNotification* msg) {
  return *msg->game_account_state_;
}
const ::bgs::protocol::account::v1::GameAccountFieldTags&
GameAccountStateNotification::_Internal::game_account_tags(const GameAccountStateNotification* msg) {
  return *msg->game_account_tags_;
}
void GameAccountStateNotification::clear_game_account_state() {
  if (game_account_state_ != nullptr) game_account_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameAccountStateNotification::clear_game_account_tags() {
  if (game_account_tags_ != nullptr) game_account_tags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameAccountStateNotification::GameAccountStateNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountStateNotification)
}
GameAccountStateNotification::GameAccountStateNotification(const GameAccountStateNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_game_account_state()) {
    game_account_state_ = new ::bgs::protocol::account::v1::GameAccountState(*from.game_account_state_);
  } else {
    game_account_state_ = nullptr;
  }
  if (from._internal_has_game_account_tags()) {
    game_account_tags_ = new ::bgs::protocol::account::v1::GameAccountFieldTags(*from.game_account_tags_);
  } else {
    game_account_tags_ = nullptr;
  }
  ::memcpy(&subscriber_id_, &from.subscriber_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscription_completed_) -
    reinterpret_cast<char*>(&subscriber_id_)) + sizeof(subscription_completed_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountStateNotification)
}

void GameAccountStateNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameAccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&game_account_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscription_completed_) -
      reinterpret_cast<char*>(&game_account_state_)) + sizeof(subscription_completed_));
}

GameAccountStateNotification::~GameAccountStateNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountStateNotification)
  SharedDtor();
}

void GameAccountStateNotification::SharedDtor() {
  if (this != internal_default_instance()) delete game_account_state_;
  if (this != internal_default_instance()) delete game_account_tags_;
}

void GameAccountStateNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountStateNotification& GameAccountStateNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountStateNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GameAccountStateNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountStateNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(game_account_state_ != nullptr);
      game_account_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_account_tags_ != nullptr);
      game_account_tags_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&subscriber_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subscription_completed_) -
        reinterpret_cast<char*>(&subscriber_id_)) + sizeof(subscription_completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountStateNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 subscriber_id = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_subscriber_id(&has_bits);
          subscriber_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool subscription_completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_subscription_completed(&has_bits);
          subscription_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountStateNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountStateNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_account_state(this), target, stream);
  }

  // optional uint64 subscriber_id = 2 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_subscriber_id(), target);
  }

  // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::game_account_tags(this), target, stream);
  }

  // optional bool subscription_completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_subscription_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountStateNotification)
  return target;
}

size_t GameAccountStateNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountStateNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_state_);
    }

    // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_tags_);
    }

    // optional uint64 subscriber_id = 2 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subscriber_id());
    }

    // optional bool subscription_completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountStateNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountStateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountStateNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountStateNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountStateNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountStateNotification)
    MergeFrom(*source);
  }
}

void GameAccountStateNotification::MergeFrom(const GameAccountStateNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountStateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_account_state()->::bgs::protocol::account::v1::GameAccountState::MergeFrom(from._internal_game_account_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_account_tags()->::bgs::protocol::account::v1::GameAccountFieldTags::MergeFrom(from._internal_game_account_tags());
    }
    if (cached_has_bits & 0x00000004u) {
      subscriber_id_ = from.subscriber_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      subscription_completed_ = from.subscription_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAccountStateNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountStateNotification::CopyFrom(const GameAccountStateNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountStateNotification::IsInitialized() const {
  if (_internal_has_game_account_state()) {
    if (!game_account_state_->IsInitialized()) return false;
  }
  return true;
}

void GameAccountStateNotification::InternalSwap(GameAccountStateNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_account_state_, other->game_account_state_);
  swap(game_account_tags_, other->game_account_tags_);
  swap(subscriber_id_, other->subscriber_id_);
  swap(subscription_completed_, other->subscription_completed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountStateNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountNotification::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GameAccountNotification_default_instance_._instance.get_mutable()->account_tags_ = const_cast< ::bgs::protocol::account::v1::AccountFieldTags*>(
      ::bgs::protocol::account::v1::AccountFieldTags::internal_default_instance());
}
class GameAccountNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountNotification>()._has_bits_);
  static void set_has_subscriber_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::account::v1::AccountFieldTags& account_tags(const GameAccountNotification* msg);
  static void set_has_account_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::AccountFieldTags&
GameAccountNotification::_Internal::account_tags(const GameAccountNotification* msg) {
  return *msg->account_tags_;
}
void GameAccountNotification::clear_game_accounts() {
  game_accounts_.Clear();
}
void GameAccountNotification::clear_account_tags() {
  if (account_tags_ != nullptr) account_tags_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameAccountNotification::GameAccountNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountNotification)
}
GameAccountNotification::GameAccountNotification(const GameAccountNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      game_accounts_(from.game_accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_tags()) {
    account_tags_ = new ::bgs::protocol::account::v1::AccountFieldTags(*from.account_tags_);
  } else {
    account_tags_ = nullptr;
  }
  subscriber_id_ = from.subscriber_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountNotification)
}

void GameAccountNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameAccountNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&account_tags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscriber_id_) -
      reinterpret_cast<char*>(&account_tags_)) + sizeof(subscriber_id_));
}

GameAccountNotification::~GameAccountNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountNotification)
  SharedDtor();
}

void GameAccountNotification::SharedDtor() {
  if (this != internal_default_instance()) delete account_tags_;
}

void GameAccountNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountNotification& GameAccountNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GameAccountNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_accounts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(account_tags_ != nullptr);
    account_tags_->Clear();
  }
  subscriber_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 subscriber_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_subscriber_id(&has_bits);
          subscriber_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_game_accounts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 subscriber_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_subscriber_id(), target);
  }

  // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::account_tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountNotification)
  return target;
}

size_t GameAccountNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 1;
  total_size += 1UL * this->_internal_game_accounts_size();
  for (const auto& msg : this->game_accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_tags_);
    }

    // optional uint64 subscriber_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subscriber_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountNotification)
    MergeFrom(*source);
  }
}

void GameAccountNotification::MergeFrom(const GameAccountNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_accounts_.MergeFrom(from.game_accounts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_tags()->::bgs::protocol::account::v1::AccountFieldTags::MergeFrom(from._internal_account_tags());
    }
    if (cached_has_bits & 0x00000002u) {
      subscriber_id_ = from.subscriber_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAccountNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountNotification::CopyFrom(const GameAccountNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(game_accounts_)) return false;
  return true;
}

void GameAccountNotification::InternalSwap(GameAccountNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_accounts_.InternalSwap(&other->game_accounts_);
  swap(account_tags_, other->account_tags_);
  swap(subscriber_id_, other->subscriber_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountSessionNotification::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GameAccountSessionNotification_default_instance_._instance.get_mutable()->game_account_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
  ::bgs::protocol::account::v1::_GameAccountSessionNotification_default_instance_._instance.get_mutable()->session_info_ = const_cast< ::bgs::protocol::account::v1::GameSessionUpdateInfo*>(
      ::bgs::protocol::account::v1::GameSessionUpdateInfo::internal_default_instance());
}
class GameAccountSessionNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountSessionNotification>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& game_account(const GameAccountSessionNotification* msg);
  static void set_has_game_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::GameSessionUpdateInfo& session_info(const GameAccountSessionNotification* msg);
  static void set_has_session_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
GameAccountSessionNotification::_Internal::game_account(const GameAccountSessionNotification* msg) {
  return *msg->game_account_;
}
const ::bgs::protocol::account::v1::GameSessionUpdateInfo&
GameAccountSessionNotification::_Internal::session_info(const GameAccountSessionNotification* msg) {
  return *msg->session_info_;
}
void GameAccountSessionNotification::clear_game_account() {
  if (game_account_ != nullptr) game_account_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GameAccountSessionNotification::clear_session_info() {
  if (session_info_ != nullptr) session_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameAccountSessionNotification::GameAccountSessionNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountSessionNotification)
}
GameAccountSessionNotification::GameAccountSessionNotification(const GameAccountSessionNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_game_account()) {
    game_account_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.game_account_);
  } else {
    game_account_ = nullptr;
  }
  if (from._internal_has_session_info()) {
    session_info_ = new ::bgs::protocol::account::v1::GameSessionUpdateInfo(*from.session_info_);
  } else {
    session_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountSessionNotification)
}

void GameAccountSessionNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameAccountSessionNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  ::memset(&game_account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_info_) -
      reinterpret_cast<char*>(&game_account_)) + sizeof(session_info_));
}

GameAccountSessionNotification::~GameAccountSessionNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountSessionNotification)
  SharedDtor();
}

void GameAccountSessionNotification::SharedDtor() {
  if (this != internal_default_instance()) delete game_account_;
  if (this != internal_default_instance()) delete session_info_;
}

void GameAccountSessionNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountSessionNotification& GameAccountSessionNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountSessionNotification_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GameAccountSessionNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountSessionNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(game_account_ != nullptr);
      game_account_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(session_info_ != nullptr);
      session_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountSessionNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameSessionUpdateInfo session_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountSessionNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountSessionNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_account(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameSessionUpdateInfo session_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::session_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountSessionNotification)
  return target;
}

size_t GameAccountSessionNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountSessionNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_);
    }

    // optional .bgs.protocol.account.v1.GameSessionUpdateInfo session_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountSessionNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountSessionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountSessionNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountSessionNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountSessionNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountSessionNotification)
    MergeFrom(*source);
  }
}

void GameAccountSessionNotification::MergeFrom(const GameAccountSessionNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountSessionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_account()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_game_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_session_info()->::bgs::protocol::account::v1::GameSessionUpdateInfo::MergeFrom(from._internal_session_info());
    }
  }
}

void GameAccountSessionNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountSessionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountSessionNotification::CopyFrom(const GameAccountSessionNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountSessionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountSessionNotification::IsInitialized() const {
  if (_internal_has_game_account()) {
    if (!game_account_->IsInitialized()) return false;
  }
  return true;
}

void GameAccountSessionNotification::InternalSwap(GameAccountSessionNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_account_, other->game_account_);
  swap(session_info_, other->session_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountSessionNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace account
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::ResolveAccountRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::ResolveAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::ResolveAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::ResolveAccountResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::ResolveAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::ResolveAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountFlagUpdateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountFlagUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountFlagUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::SubscriptionUpdateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::SubscriptionUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::SubscriptionUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::SubscriptionUpdateResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::SubscriptionUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::SubscriptionUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::IsIgrAddressRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::IsIgrAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::IsIgrAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetAccountStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetAccountStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetAccountStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetAccountStateResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetAccountStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetAccountStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetSignedAccountStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetSignedAccountStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetSignedAccountStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetSignedAccountStateResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetSignedAccountStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetSignedAccountStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetGameAccountStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetGameAccountStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetGameAccountStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetGameAccountStateResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetGameAccountStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetGameAccountStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetLicensesRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetLicensesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetLicensesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetLicensesResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetLicensesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetLicensesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetGameSessionInfoRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetGameSessionInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetGameSessionInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetGameSessionInfoResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetGameSessionInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetGameSessionInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetCAISInfoRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetCAISInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetCAISInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetCAISInfoResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetCAISInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetCAISInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetAuthorizedDataRequest* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetAuthorizedDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetAuthorizedDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GetAuthorizedDataResponse* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GetAuthorizedDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GetAuthorizedDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountStateNotification* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountStateNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountStateNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountStateNotification* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountStateNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountStateNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountNotification* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountSessionNotification* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountSessionNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountSessionNotification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
