// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/account_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/account_types.pb.h"
#include "bgs/low/pb/client/entity_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
namespace bgs {
namespace protocol {
namespace account {
namespace v1 {
class AccountStateNotification;
class AccountStateNotificationDefaultTypeInternal;
extern AccountStateNotificationDefaultTypeInternal _AccountStateNotification_default_instance_;
class GameAccountFlagUpdateRequest;
class GameAccountFlagUpdateRequestDefaultTypeInternal;
extern GameAccountFlagUpdateRequestDefaultTypeInternal _GameAccountFlagUpdateRequest_default_instance_;
class GameAccountNotification;
class GameAccountNotificationDefaultTypeInternal;
extern GameAccountNotificationDefaultTypeInternal _GameAccountNotification_default_instance_;
class GameAccountSessionNotification;
class GameAccountSessionNotificationDefaultTypeInternal;
extern GameAccountSessionNotificationDefaultTypeInternal _GameAccountSessionNotification_default_instance_;
class GameAccountStateNotification;
class GameAccountStateNotificationDefaultTypeInternal;
extern GameAccountStateNotificationDefaultTypeInternal _GameAccountStateNotification_default_instance_;
class GetAccountStateRequest;
class GetAccountStateRequestDefaultTypeInternal;
extern GetAccountStateRequestDefaultTypeInternal _GetAccountStateRequest_default_instance_;
class GetAccountStateResponse;
class GetAccountStateResponseDefaultTypeInternal;
extern GetAccountStateResponseDefaultTypeInternal _GetAccountStateResponse_default_instance_;
class GetAuthorizedDataRequest;
class GetAuthorizedDataRequestDefaultTypeInternal;
extern GetAuthorizedDataRequestDefaultTypeInternal _GetAuthorizedDataRequest_default_instance_;
class GetAuthorizedDataResponse;
class GetAuthorizedDataResponseDefaultTypeInternal;
extern GetAuthorizedDataResponseDefaultTypeInternal _GetAuthorizedDataResponse_default_instance_;
class GetCAISInfoRequest;
class GetCAISInfoRequestDefaultTypeInternal;
extern GetCAISInfoRequestDefaultTypeInternal _GetCAISInfoRequest_default_instance_;
class GetCAISInfoResponse;
class GetCAISInfoResponseDefaultTypeInternal;
extern GetCAISInfoResponseDefaultTypeInternal _GetCAISInfoResponse_default_instance_;
class GetGameAccountStateRequest;
class GetGameAccountStateRequestDefaultTypeInternal;
extern GetGameAccountStateRequestDefaultTypeInternal _GetGameAccountStateRequest_default_instance_;
class GetGameAccountStateResponse;
class GetGameAccountStateResponseDefaultTypeInternal;
extern GetGameAccountStateResponseDefaultTypeInternal _GetGameAccountStateResponse_default_instance_;
class GetGameSessionInfoRequest;
class GetGameSessionInfoRequestDefaultTypeInternal;
extern GetGameSessionInfoRequestDefaultTypeInternal _GetGameSessionInfoRequest_default_instance_;
class GetGameSessionInfoResponse;
class GetGameSessionInfoResponseDefaultTypeInternal;
extern GetGameSessionInfoResponseDefaultTypeInternal _GetGameSessionInfoResponse_default_instance_;
class GetGameTimeRemainingInfoRequest;
class GetGameTimeRemainingInfoRequestDefaultTypeInternal;
extern GetGameTimeRemainingInfoRequestDefaultTypeInternal _GetGameTimeRemainingInfoRequest_default_instance_;
class GetGameTimeRemainingInfoResponse;
class GetGameTimeRemainingInfoResponseDefaultTypeInternal;
extern GetGameTimeRemainingInfoResponseDefaultTypeInternal _GetGameTimeRemainingInfoResponse_default_instance_;
class GetLicensesRequest;
class GetLicensesRequestDefaultTypeInternal;
extern GetLicensesRequestDefaultTypeInternal _GetLicensesRequest_default_instance_;
class GetLicensesResponse;
class GetLicensesResponseDefaultTypeInternal;
extern GetLicensesResponseDefaultTypeInternal _GetLicensesResponse_default_instance_;
class GetSignedAccountStateRequest;
class GetSignedAccountStateRequestDefaultTypeInternal;
extern GetSignedAccountStateRequestDefaultTypeInternal _GetSignedAccountStateRequest_default_instance_;
class GetSignedAccountStateResponse;
class GetSignedAccountStateResponseDefaultTypeInternal;
extern GetSignedAccountStateResponseDefaultTypeInternal _GetSignedAccountStateResponse_default_instance_;
class IsIgrAddressRequest;
class IsIgrAddressRequestDefaultTypeInternal;
extern IsIgrAddressRequestDefaultTypeInternal _IsIgrAddressRequest_default_instance_;
class ResolveAccountRequest;
class ResolveAccountRequestDefaultTypeInternal;
extern ResolveAccountRequestDefaultTypeInternal _ResolveAccountRequest_default_instance_;
class ResolveAccountResponse;
class ResolveAccountResponseDefaultTypeInternal;
extern ResolveAccountResponseDefaultTypeInternal _ResolveAccountResponse_default_instance_;
class SubscriptionUpdateRequest;
class SubscriptionUpdateRequestDefaultTypeInternal;
extern SubscriptionUpdateRequestDefaultTypeInternal _SubscriptionUpdateRequest_default_instance_;
class SubscriptionUpdateResponse;
class SubscriptionUpdateResponseDefaultTypeInternal;
extern SubscriptionUpdateResponseDefaultTypeInternal _SubscriptionUpdateResponse_default_instance_;
}  // namespace v1
}  // namespace account
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::account::v1::AccountStateNotification* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountStateNotification>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountFlagUpdateRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFlagUpdateRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountNotification* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountNotification>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountSessionNotification* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountSessionNotification>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountStateNotification* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountStateNotification>(Arena*);
template<> ::bgs::protocol::account::v1::GetAccountStateRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetAccountStateRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GetAccountStateResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetAccountStateResponse>(Arena*);
template<> ::bgs::protocol::account::v1::GetAuthorizedDataRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetAuthorizedDataRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GetAuthorizedDataResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetAuthorizedDataResponse>(Arena*);
template<> ::bgs::protocol::account::v1::GetCAISInfoRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetCAISInfoRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GetCAISInfoResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetCAISInfoResponse>(Arena*);
template<> ::bgs::protocol::account::v1::GetGameAccountStateRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetGameAccountStateRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GetGameAccountStateResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetGameAccountStateResponse>(Arena*);
template<> ::bgs::protocol::account::v1::GetGameSessionInfoRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetGameSessionInfoRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GetGameSessionInfoResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetGameSessionInfoResponse>(Arena*);
template<> ::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetGameTimeRemainingInfoRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetGameTimeRemainingInfoResponse>(Arena*);
template<> ::bgs::protocol::account::v1::GetLicensesRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetLicensesRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GetLicensesResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetLicensesResponse>(Arena*);
template<> ::bgs::protocol::account::v1::GetSignedAccountStateRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetSignedAccountStateRequest>(Arena*);
template<> ::bgs::protocol::account::v1::GetSignedAccountStateResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GetSignedAccountStateResponse>(Arena*);
template<> ::bgs::protocol::account::v1::IsIgrAddressRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::IsIgrAddressRequest>(Arena*);
template<> ::bgs::protocol::account::v1::ResolveAccountRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::ResolveAccountRequest>(Arena*);
template<> ::bgs::protocol::account::v1::ResolveAccountResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::ResolveAccountResponse>(Arena*);
template<> ::bgs::protocol::account::v1::SubscriptionUpdateRequest* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::SubscriptionUpdateRequest>(Arena*);
template<> ::bgs::protocol::account::v1::SubscriptionUpdateResponse* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::SubscriptionUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace account {
namespace v1 {

// ===================================================================

class ResolveAccountRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.ResolveAccountRequest) */ {
 public:
  ResolveAccountRequest();
  virtual ~ResolveAccountRequest();

  ResolveAccountRequest(const ResolveAccountRequest& from);
  ResolveAccountRequest(ResolveAccountRequest&& from) noexcept
    : ResolveAccountRequest() {
    *this = ::std::move(from);
  }

  inline ResolveAccountRequest& operator=(const ResolveAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveAccountRequest& operator=(ResolveAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveAccountRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveAccountRequest*>(
               &_ResolveAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResolveAccountRequest& a, ResolveAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveAccountRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveAccountRequest* New() const final {
    return CreateMaybeMessage<ResolveAccountRequest>(nullptr);
  }

  ResolveAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveAccountRequest& from);
  void MergeFrom(const ResolveAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.ResolveAccountRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefFieldNumber = 1,
    kFetchIdFieldNumber = 12,
  };
  // optional .bgs.protocol.account.v1.AccountReference ref = 1;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::bgs::protocol::account::v1::AccountReference& ref() const;
  ::bgs::protocol::account::v1::AccountReference* release_ref();
  ::bgs::protocol::account::v1::AccountReference* mutable_ref();
  void set_allocated_ref(::bgs::protocol::account::v1::AccountReference* ref);
  private:
  const ::bgs::protocol::account::v1::AccountReference& _internal_ref() const;
  ::bgs::protocol::account::v1::AccountReference* _internal_mutable_ref();
  public:

  // optional bool fetch_id = 12;
  bool has_fetch_id() const;
  private:
  bool _internal_has_fetch_id() const;
  public:
  void clear_fetch_id();
  bool fetch_id() const;
  void set_fetch_id(bool value);
  private:
  bool _internal_fetch_id() const;
  void _internal_set_fetch_id(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.ResolveAccountRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountReference* ref_;
  bool fetch_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResolveAccountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.ResolveAccountResponse) */ {
 public:
  ResolveAccountResponse();
  virtual ~ResolveAccountResponse();

  ResolveAccountResponse(const ResolveAccountResponse& from);
  ResolveAccountResponse(ResolveAccountResponse&& from) noexcept
    : ResolveAccountResponse() {
    *this = ::std::move(from);
  }

  inline ResolveAccountResponse& operator=(const ResolveAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveAccountResponse& operator=(ResolveAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveAccountResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveAccountResponse*>(
               &_ResolveAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResolveAccountResponse& a, ResolveAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveAccountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveAccountResponse* New() const final {
    return CreateMaybeMessage<ResolveAccountResponse>(nullptr);
  }

  ResolveAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveAccountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveAccountResponse& from);
  void MergeFrom(const ResolveAccountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveAccountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.ResolveAccountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 12,
  };
  // optional .bgs.protocol.account.v1.AccountId id = 12;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bgs::protocol::account::v1::AccountId& id() const;
  ::bgs::protocol::account::v1::AccountId* release_id();
  ::bgs::protocol::account::v1::AccountId* mutable_id();
  void set_allocated_id(::bgs::protocol::account::v1::AccountId* id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.ResolveAccountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GameAccountFlagUpdateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountFlagUpdateRequest) */ {
 public:
  GameAccountFlagUpdateRequest();
  virtual ~GameAccountFlagUpdateRequest();

  GameAccountFlagUpdateRequest(const GameAccountFlagUpdateRequest& from);
  GameAccountFlagUpdateRequest(GameAccountFlagUpdateRequest&& from) noexcept
    : GameAccountFlagUpdateRequest() {
    *this = ::std::move(from);
  }

  inline GameAccountFlagUpdateRequest& operator=(const GameAccountFlagUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountFlagUpdateRequest& operator=(GameAccountFlagUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountFlagUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountFlagUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const GameAccountFlagUpdateRequest*>(
               &_GameAccountFlagUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameAccountFlagUpdateRequest& a, GameAccountFlagUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountFlagUpdateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountFlagUpdateRequest* New() const final {
    return CreateMaybeMessage<GameAccountFlagUpdateRequest>(nullptr);
  }

  GameAccountFlagUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountFlagUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountFlagUpdateRequest& from);
  void MergeFrom(const GameAccountFlagUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountFlagUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountFlagUpdateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccountFieldNumber = 1,
    kFlagFieldNumber = 2,
    kActiveFieldNumber = 3,
  };
  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
  bool has_game_account() const;
  private:
  bool _internal_has_game_account() const;
  public:
  void clear_game_account();
  const ::bgs::protocol::account::v1::GameAccountHandle& game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_game_account();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_game_account();
  void set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_game_account();
  public:

  // optional uint64 flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint64 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool active = 3;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountFlagUpdateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameAccountHandle* game_account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 flag_;
  bool active_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionUpdateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.SubscriptionUpdateRequest) */ {
 public:
  SubscriptionUpdateRequest();
  virtual ~SubscriptionUpdateRequest();

  SubscriptionUpdateRequest(const SubscriptionUpdateRequest& from);
  SubscriptionUpdateRequest(SubscriptionUpdateRequest&& from) noexcept
    : SubscriptionUpdateRequest() {
    *this = ::std::move(from);
  }

  inline SubscriptionUpdateRequest& operator=(const SubscriptionUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionUpdateRequest& operator=(SubscriptionUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const SubscriptionUpdateRequest*>(
               &_SubscriptionUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubscriptionUpdateRequest& a, SubscriptionUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionUpdateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionUpdateRequest* New() const final {
    return CreateMaybeMessage<SubscriptionUpdateRequest>(nullptr);
  }

  SubscriptionUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionUpdateRequest& from);
  void MergeFrom(const SubscriptionUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.SubscriptionUpdateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefFieldNumber = 2,
  };
  // repeated .bgs.protocol.account.v1.SubscriberReference ref = 2;
  int ref_size() const;
  private:
  int _internal_ref_size() const;
  public:
  void clear_ref();
  ::bgs::protocol::account::v1::SubscriberReference* mutable_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference >*
      mutable_ref();
  private:
  const ::bgs::protocol::account::v1::SubscriberReference& _internal_ref(int index) const;
  ::bgs::protocol::account::v1::SubscriberReference* _internal_add_ref();
  public:
  const ::bgs::protocol::account::v1::SubscriberReference& ref(int index) const;
  ::bgs::protocol::account::v1::SubscriberReference* add_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference >&
      ref() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.SubscriptionUpdateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference > ref_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionUpdateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.SubscriptionUpdateResponse) */ {
 public:
  SubscriptionUpdateResponse();
  virtual ~SubscriptionUpdateResponse();

  SubscriptionUpdateResponse(const SubscriptionUpdateResponse& from);
  SubscriptionUpdateResponse(SubscriptionUpdateResponse&& from) noexcept
    : SubscriptionUpdateResponse() {
    *this = ::std::move(from);
  }

  inline SubscriptionUpdateResponse& operator=(const SubscriptionUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionUpdateResponse& operator=(SubscriptionUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const SubscriptionUpdateResponse*>(
               &_SubscriptionUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscriptionUpdateResponse& a, SubscriptionUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionUpdateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionUpdateResponse* New() const final {
    return CreateMaybeMessage<SubscriptionUpdateResponse>(nullptr);
  }

  SubscriptionUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionUpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionUpdateResponse& from);
  void MergeFrom(const SubscriptionUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionUpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.SubscriptionUpdateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefFieldNumber = 1,
  };
  // repeated .bgs.protocol.account.v1.SubscriberReference ref = 1;
  int ref_size() const;
  private:
  int _internal_ref_size() const;
  public:
  void clear_ref();
  ::bgs::protocol::account::v1::SubscriberReference* mutable_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference >*
      mutable_ref();
  private:
  const ::bgs::protocol::account::v1::SubscriberReference& _internal_ref(int index) const;
  ::bgs::protocol::account::v1::SubscriberReference* _internal_add_ref();
  public:
  const ::bgs::protocol::account::v1::SubscriberReference& ref(int index) const;
  ::bgs::protocol::account::v1::SubscriberReference* add_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference >&
      ref() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.SubscriptionUpdateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference > ref_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class IsIgrAddressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.IsIgrAddressRequest) */ {
 public:
  IsIgrAddressRequest();
  virtual ~IsIgrAddressRequest();

  IsIgrAddressRequest(const IsIgrAddressRequest& from);
  IsIgrAddressRequest(IsIgrAddressRequest&& from) noexcept
    : IsIgrAddressRequest() {
    *this = ::std::move(from);
  }

  inline IsIgrAddressRequest& operator=(const IsIgrAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsIgrAddressRequest& operator=(IsIgrAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsIgrAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsIgrAddressRequest* internal_default_instance() {
    return reinterpret_cast<const IsIgrAddressRequest*>(
               &_IsIgrAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IsIgrAddressRequest& a, IsIgrAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsIgrAddressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsIgrAddressRequest* New() const final {
    return CreateMaybeMessage<IsIgrAddressRequest>(nullptr);
  }

  IsIgrAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsIgrAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsIgrAddressRequest& from);
  void MergeFrom(const IsIgrAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsIgrAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.IsIgrAddressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientAddressFieldNumber = 1,
    kRegionFieldNumber = 2,
  };
  // optional string client_address = 1;
  bool has_client_address() const;
  private:
  bool _internal_has_client_address() const;
  public:
  void clear_client_address();
  const std::string& client_address() const;
  void set_client_address(const std::string& value);
  void set_client_address(std::string&& value);
  void set_client_address(const char* value);
  void set_client_address(const char* value, size_t size);
  std::string* mutable_client_address();
  std::string* release_client_address();
  void set_allocated_client_address(std::string* client_address);
  private:
  const std::string& _internal_client_address() const;
  void _internal_set_client_address(const std::string& value);
  std::string* _internal_mutable_client_address();
  public:

  // optional uint32 region = 2;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.IsIgrAddressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAccountStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetAccountStateRequest) */ {
 public:
  GetAccountStateRequest();
  virtual ~GetAccountStateRequest();

  GetAccountStateRequest(const GetAccountStateRequest& from);
  GetAccountStateRequest(GetAccountStateRequest&& from) noexcept
    : GetAccountStateRequest() {
    *this = ::std::move(from);
  }

  inline GetAccountStateRequest& operator=(const GetAccountStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountStateRequest& operator=(GetAccountStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccountStateRequest*>(
               &_GetAccountStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetAccountStateRequest& a, GetAccountStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountStateRequest* New() const final {
    return CreateMaybeMessage<GetAccountStateRequest>(nullptr);
  }

  GetAccountStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountStateRequest& from);
  void MergeFrom(const GetAccountStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetAccountStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kOptionsFieldNumber = 10,
    kTagsFieldNumber = 11,
    kProgramFieldNumber = 2,
    kRegionFieldNumber = 3,
  };
  // optional .bgs.protocol.EntityId entity_id = 1 [(.bgs.protocol.field_options) = {
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::bgs::protocol::EntityId& entity_id() const;
  ::bgs::protocol::EntityId* release_entity_id();
  ::bgs::protocol::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::bgs::protocol::EntityId* entity_id);
  private:
  const ::bgs::protocol::EntityId& _internal_entity_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_entity_id();
  public:

  // optional .bgs.protocol.account.v1.AccountFieldOptions options = 10;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::account::v1::AccountFieldOptions& options() const;
  ::bgs::protocol::account::v1::AccountFieldOptions* release_options();
  ::bgs::protocol::account::v1::AccountFieldOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::account::v1::AccountFieldOptions* options);
  private:
  const ::bgs::protocol::account::v1::AccountFieldOptions& _internal_options() const;
  ::bgs::protocol::account::v1::AccountFieldOptions* _internal_mutable_options();
  public:

  // optional .bgs.protocol.account.v1.AccountFieldTags tags = 11;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const ::bgs::protocol::account::v1::AccountFieldTags& tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* release_tags();
  ::bgs::protocol::account::v1::AccountFieldTags* mutable_tags();
  void set_allocated_tags(::bgs::protocol::account::v1::AccountFieldTags* tags);
  private:
  const ::bgs::protocol::account::v1::AccountFieldTags& _internal_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* _internal_mutable_tags();
  public:

  // optional uint32 program = 2;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 region = 3;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetAccountStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* entity_id_;
  ::bgs::protocol::account::v1::AccountFieldOptions* options_;
  ::bgs::protocol::account::v1::AccountFieldTags* tags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAccountStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetAccountStateResponse) */ {
 public:
  GetAccountStateResponse();
  virtual ~GetAccountStateResponse();

  GetAccountStateResponse(const GetAccountStateResponse& from);
  GetAccountStateResponse(GetAccountStateResponse&& from) noexcept
    : GetAccountStateResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountStateResponse& operator=(const GetAccountStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountStateResponse& operator=(GetAccountStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountStateResponse*>(
               &_GetAccountStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetAccountStateResponse& a, GetAccountStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountStateResponse* New() const final {
    return CreateMaybeMessage<GetAccountStateResponse>(nullptr);
  }

  GetAccountStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountStateResponse& from);
  void MergeFrom(const GetAccountStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetAccountStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kTagsFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.AccountState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::bgs::protocol::account::v1::AccountState& state() const;
  ::bgs::protocol::account::v1::AccountState* release_state();
  ::bgs::protocol::account::v1::AccountState* mutable_state();
  void set_allocated_state(::bgs::protocol::account::v1::AccountState* state);
  private:
  const ::bgs::protocol::account::v1::AccountState& _internal_state() const;
  ::bgs::protocol::account::v1::AccountState* _internal_mutable_state();
  public:

  // optional .bgs.protocol.account.v1.AccountFieldTags tags = 2;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const ::bgs::protocol::account::v1::AccountFieldTags& tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* release_tags();
  ::bgs::protocol::account::v1::AccountFieldTags* mutable_tags();
  void set_allocated_tags(::bgs::protocol::account::v1::AccountFieldTags* tags);
  private:
  const ::bgs::protocol::account::v1::AccountFieldTags& _internal_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* _internal_mutable_tags();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetAccountStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountState* state_;
  ::bgs::protocol::account::v1::AccountFieldTags* tags_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSignedAccountStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetSignedAccountStateRequest) */ {
 public:
  GetSignedAccountStateRequest();
  virtual ~GetSignedAccountStateRequest();

  GetSignedAccountStateRequest(const GetSignedAccountStateRequest& from);
  GetSignedAccountStateRequest(GetSignedAccountStateRequest&& from) noexcept
    : GetSignedAccountStateRequest() {
    *this = ::std::move(from);
  }

  inline GetSignedAccountStateRequest& operator=(const GetSignedAccountStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSignedAccountStateRequest& operator=(GetSignedAccountStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSignedAccountStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSignedAccountStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetSignedAccountStateRequest*>(
               &_GetSignedAccountStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetSignedAccountStateRequest& a, GetSignedAccountStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSignedAccountStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSignedAccountStateRequest* New() const final {
    return CreateMaybeMessage<GetSignedAccountStateRequest>(nullptr);
  }

  GetSignedAccountStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSignedAccountStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSignedAccountStateRequest& from);
  void MergeFrom(const GetSignedAccountStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSignedAccountStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetSignedAccountStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // optional .bgs.protocol.account.v1.AccountId account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::bgs::protocol::account::v1::AccountId& account() const;
  ::bgs::protocol::account::v1::AccountId* release_account();
  ::bgs::protocol::account::v1::AccountId* mutable_account();
  void set_allocated_account(::bgs::protocol::account::v1::AccountId* account);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_account() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetSignedAccountStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* account_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSignedAccountStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetSignedAccountStateResponse) */ {
 public:
  GetSignedAccountStateResponse();
  virtual ~GetSignedAccountStateResponse();

  GetSignedAccountStateResponse(const GetSignedAccountStateResponse& from);
  GetSignedAccountStateResponse(GetSignedAccountStateResponse&& from) noexcept
    : GetSignedAccountStateResponse() {
    *this = ::std::move(from);
  }

  inline GetSignedAccountStateResponse& operator=(const GetSignedAccountStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSignedAccountStateResponse& operator=(GetSignedAccountStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSignedAccountStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSignedAccountStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetSignedAccountStateResponse*>(
               &_GetSignedAccountStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSignedAccountStateResponse& a, GetSignedAccountStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSignedAccountStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSignedAccountStateResponse* New() const final {
    return CreateMaybeMessage<GetSignedAccountStateResponse>(nullptr);
  }

  GetSignedAccountStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSignedAccountStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSignedAccountStateResponse& from);
  void MergeFrom(const GetSignedAccountStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSignedAccountStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetSignedAccountStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // optional string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetSignedAccountStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGameAccountStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetGameAccountStateRequest) */ {
 public:
  GetGameAccountStateRequest();
  virtual ~GetGameAccountStateRequest();

  GetGameAccountStateRequest(const GetGameAccountStateRequest& from);
  GetGameAccountStateRequest(GetGameAccountStateRequest&& from) noexcept
    : GetGameAccountStateRequest() {
    *this = ::std::move(from);
  }

  inline GetGameAccountStateRequest& operator=(const GetGameAccountStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameAccountStateRequest& operator=(GetGameAccountStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGameAccountStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameAccountStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetGameAccountStateRequest*>(
               &_GetGameAccountStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetGameAccountStateRequest& a, GetGameAccountStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGameAccountStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGameAccountStateRequest* New() const final {
    return CreateMaybeMessage<GetGameAccountStateRequest>(nullptr);
  }

  GetGameAccountStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGameAccountStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGameAccountStateRequest& from);
  void MergeFrom(const GetGameAccountStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGameAccountStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetGameAccountStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kGameAccountIdFieldNumber = 2,
    kOptionsFieldNumber = 10,
    kTagsFieldNumber = 11,
  };
  // optional .bgs.protocol.EntityId account_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_account_id();
  PROTOBUF_DEPRECATED const ::bgs::protocol::EntityId& account_id() const;
  PROTOBUF_DEPRECATED ::bgs::protocol::EntityId* release_account_id();
  PROTOBUF_DEPRECATED ::bgs::protocol::EntityId* mutable_account_id();
  PROTOBUF_DEPRECATED void set_allocated_account_id(::bgs::protocol::EntityId* account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_account_id();
  public:

  // optional .bgs.protocol.EntityId game_account_id = 2;
  bool has_game_account_id() const;
  private:
  bool _internal_has_game_account_id() const;
  public:
  void clear_game_account_id();
  const ::bgs::protocol::EntityId& game_account_id() const;
  ::bgs::protocol::EntityId* release_game_account_id();
  ::bgs::protocol::EntityId* mutable_game_account_id();
  void set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_game_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_game_account_id();
  public:

  // optional .bgs.protocol.account.v1.GameAccountFieldOptions options = 10;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::account::v1::GameAccountFieldOptions& options() const;
  ::bgs::protocol::account::v1::GameAccountFieldOptions* release_options();
  ::bgs::protocol::account::v1::GameAccountFieldOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::account::v1::GameAccountFieldOptions* options);
  private:
  const ::bgs::protocol::account::v1::GameAccountFieldOptions& _internal_options() const;
  ::bgs::protocol::account::v1::GameAccountFieldOptions* _internal_mutable_options();
  public:

  // optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 11;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const ::bgs::protocol::account::v1::GameAccountFieldTags& tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* release_tags();
  ::bgs::protocol::account::v1::GameAccountFieldTags* mutable_tags();
  void set_allocated_tags(::bgs::protocol::account::v1::GameAccountFieldTags* tags);
  private:
  const ::bgs::protocol::account::v1::GameAccountFieldTags& _internal_tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* _internal_mutable_tags();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetGameAccountStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* account_id_;
  ::bgs::protocol::EntityId* game_account_id_;
  ::bgs::protocol::account::v1::GameAccountFieldOptions* options_;
  ::bgs::protocol::account::v1::GameAccountFieldTags* tags_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGameAccountStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetGameAccountStateResponse) */ {
 public:
  GetGameAccountStateResponse();
  virtual ~GetGameAccountStateResponse();

  GetGameAccountStateResponse(const GetGameAccountStateResponse& from);
  GetGameAccountStateResponse(GetGameAccountStateResponse&& from) noexcept
    : GetGameAccountStateResponse() {
    *this = ::std::move(from);
  }

  inline GetGameAccountStateResponse& operator=(const GetGameAccountStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameAccountStateResponse& operator=(GetGameAccountStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGameAccountStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameAccountStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetGameAccountStateResponse*>(
               &_GetGameAccountStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetGameAccountStateResponse& a, GetGameAccountStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGameAccountStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGameAccountStateResponse* New() const final {
    return CreateMaybeMessage<GetGameAccountStateResponse>(nullptr);
  }

  GetGameAccountStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGameAccountStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGameAccountStateResponse& from);
  void MergeFrom(const GetGameAccountStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGameAccountStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetGameAccountStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kTagsFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.GameAccountState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::bgs::protocol::account::v1::GameAccountState& state() const;
  ::bgs::protocol::account::v1::GameAccountState* release_state();
  ::bgs::protocol::account::v1::GameAccountState* mutable_state();
  void set_allocated_state(::bgs::protocol::account::v1::GameAccountState* state);
  private:
  const ::bgs::protocol::account::v1::GameAccountState& _internal_state() const;
  ::bgs::protocol::account::v1::GameAccountState* _internal_mutable_state();
  public:

  // optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 2;
  bool has_tags() const;
  private:
  bool _internal_has_tags() const;
  public:
  void clear_tags();
  const ::bgs::protocol::account::v1::GameAccountFieldTags& tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* release_tags();
  ::bgs::protocol::account::v1::GameAccountFieldTags* mutable_tags();
  void set_allocated_tags(::bgs::protocol::account::v1::GameAccountFieldTags* tags);
  private:
  const ::bgs::protocol::account::v1::GameAccountFieldTags& _internal_tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* _internal_mutable_tags();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetGameAccountStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameAccountState* state_;
  ::bgs::protocol::account::v1::GameAccountFieldTags* tags_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLicensesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetLicensesRequest) */ {
 public:
  GetLicensesRequest();
  virtual ~GetLicensesRequest();

  GetLicensesRequest(const GetLicensesRequest& from);
  GetLicensesRequest(GetLicensesRequest&& from) noexcept
    : GetLicensesRequest() {
    *this = ::std::move(from);
  }

  inline GetLicensesRequest& operator=(const GetLicensesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLicensesRequest& operator=(GetLicensesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLicensesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLicensesRequest* internal_default_instance() {
    return reinterpret_cast<const GetLicensesRequest*>(
               &_GetLicensesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetLicensesRequest& a, GetLicensesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLicensesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLicensesRequest* New() const final {
    return CreateMaybeMessage<GetLicensesRequest>(nullptr);
  }

  GetLicensesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLicensesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLicensesRequest& from);
  void MergeFrom(const GetLicensesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLicensesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetLicensesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kFetchAccountLicensesFieldNumber = 2,
    kFetchGameAccountLicensesFieldNumber = 3,
    kFetchDynamicAccountLicensesFieldNumber = 4,
    kExcludeUnknownProgramFieldNumber = 6,
    kProgramFieldNumber = 5,
  };
  // optional .bgs.protocol.EntityId target_id = 1 [(.bgs.protocol.field_options) = {
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::EntityId& target_id() const;
  ::bgs::protocol::EntityId* release_target_id();
  ::bgs::protocol::EntityId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::EntityId* target_id);
  private:
  const ::bgs::protocol::EntityId& _internal_target_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_target_id();
  public:

  // optional bool fetch_account_licenses = 2;
  bool has_fetch_account_licenses() const;
  private:
  bool _internal_has_fetch_account_licenses() const;
  public:
  void clear_fetch_account_licenses();
  bool fetch_account_licenses() const;
  void set_fetch_account_licenses(bool value);
  private:
  bool _internal_fetch_account_licenses() const;
  void _internal_set_fetch_account_licenses(bool value);
  public:

  // optional bool fetch_game_account_licenses = 3;
  bool has_fetch_game_account_licenses() const;
  private:
  bool _internal_has_fetch_game_account_licenses() const;
  public:
  void clear_fetch_game_account_licenses();
  bool fetch_game_account_licenses() const;
  void set_fetch_game_account_licenses(bool value);
  private:
  bool _internal_fetch_game_account_licenses() const;
  void _internal_set_fetch_game_account_licenses(bool value);
  public:

  // optional bool fetch_dynamic_account_licenses = 4;
  bool has_fetch_dynamic_account_licenses() const;
  private:
  bool _internal_has_fetch_dynamic_account_licenses() const;
  public:
  void clear_fetch_dynamic_account_licenses();
  bool fetch_dynamic_account_licenses() const;
  void set_fetch_dynamic_account_licenses(bool value);
  private:
  bool _internal_fetch_dynamic_account_licenses() const;
  void _internal_set_fetch_dynamic_account_licenses(bool value);
  public:

  // optional bool exclude_unknown_program = 6 [default = false];
  bool has_exclude_unknown_program() const;
  private:
  bool _internal_has_exclude_unknown_program() const;
  public:
  void clear_exclude_unknown_program();
  bool exclude_unknown_program() const;
  void set_exclude_unknown_program(bool value);
  private:
  bool _internal_exclude_unknown_program() const;
  void _internal_set_exclude_unknown_program(bool value);
  public:

  // optional fixed32 program = 5;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetLicensesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* target_id_;
  bool fetch_account_licenses_;
  bool fetch_game_account_licenses_;
  bool fetch_dynamic_account_licenses_;
  bool exclude_unknown_program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLicensesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetLicensesResponse) */ {
 public:
  GetLicensesResponse();
  virtual ~GetLicensesResponse();

  GetLicensesResponse(const GetLicensesResponse& from);
  GetLicensesResponse(GetLicensesResponse&& from) noexcept
    : GetLicensesResponse() {
    *this = ::std::move(from);
  }

  inline GetLicensesResponse& operator=(const GetLicensesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLicensesResponse& operator=(GetLicensesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLicensesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLicensesResponse* internal_default_instance() {
    return reinterpret_cast<const GetLicensesResponse*>(
               &_GetLicensesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetLicensesResponse& a, GetLicensesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLicensesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLicensesResponse* New() const final {
    return CreateMaybeMessage<GetLicensesResponse>(nullptr);
  }

  GetLicensesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLicensesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLicensesResponse& from);
  void MergeFrom(const GetLicensesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLicensesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetLicensesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicensesFieldNumber = 1,
  };
  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 1;
  int licenses_size() const;
  private:
  int _internal_licenses_size() const;
  public:
  void clear_licenses();
  ::bgs::protocol::account::v1::AccountLicense* mutable_licenses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >*
      mutable_licenses();
  private:
  const ::bgs::protocol::account::v1::AccountLicense& _internal_licenses(int index) const;
  ::bgs::protocol::account::v1::AccountLicense* _internal_add_licenses();
  public:
  const ::bgs::protocol::account::v1::AccountLicense& licenses(int index) const;
  ::bgs::protocol::account::v1::AccountLicense* add_licenses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >&
      licenses() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetLicensesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense > licenses_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGameSessionInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetGameSessionInfoRequest) */ {
 public:
  GetGameSessionInfoRequest();
  virtual ~GetGameSessionInfoRequest();

  GetGameSessionInfoRequest(const GetGameSessionInfoRequest& from);
  GetGameSessionInfoRequest(GetGameSessionInfoRequest&& from) noexcept
    : GetGameSessionInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetGameSessionInfoRequest& operator=(const GetGameSessionInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameSessionInfoRequest& operator=(GetGameSessionInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGameSessionInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameSessionInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetGameSessionInfoRequest*>(
               &_GetGameSessionInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetGameSessionInfoRequest& a, GetGameSessionInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGameSessionInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGameSessionInfoRequest* New() const final {
    return CreateMaybeMessage<GetGameSessionInfoRequest>(nullptr);
  }

  GetGameSessionInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGameSessionInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGameSessionInfoRequest& from);
  void MergeFrom(const GetGameSessionInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGameSessionInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetGameSessionInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
  };
  // optional .bgs.protocol.EntityId entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::bgs::protocol::EntityId& entity_id() const;
  ::bgs::protocol::EntityId* release_entity_id();
  ::bgs::protocol::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::bgs::protocol::EntityId* entity_id);
  private:
  const ::bgs::protocol::EntityId& _internal_entity_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_entity_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetGameSessionInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* entity_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGameSessionInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetGameSessionInfoResponse) */ {
 public:
  GetGameSessionInfoResponse();
  virtual ~GetGameSessionInfoResponse();

  GetGameSessionInfoResponse(const GetGameSessionInfoResponse& from);
  GetGameSessionInfoResponse(GetGameSessionInfoResponse&& from) noexcept
    : GetGameSessionInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetGameSessionInfoResponse& operator=(const GetGameSessionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameSessionInfoResponse& operator=(GetGameSessionInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGameSessionInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameSessionInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetGameSessionInfoResponse*>(
               &_GetGameSessionInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetGameSessionInfoResponse& a, GetGameSessionInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGameSessionInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGameSessionInfoResponse* New() const final {
    return CreateMaybeMessage<GetGameSessionInfoResponse>(nullptr);
  }

  GetGameSessionInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGameSessionInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGameSessionInfoResponse& from);
  void MergeFrom(const GetGameSessionInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGameSessionInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetGameSessionInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionInfoFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.GameSessionInfo session_info = 2;
  bool has_session_info() const;
  private:
  bool _internal_has_session_info() const;
  public:
  void clear_session_info();
  const ::bgs::protocol::account::v1::GameSessionInfo& session_info() const;
  ::bgs::protocol::account::v1::GameSessionInfo* release_session_info();
  ::bgs::protocol::account::v1::GameSessionInfo* mutable_session_info();
  void set_allocated_session_info(::bgs::protocol::account::v1::GameSessionInfo* session_info);
  private:
  const ::bgs::protocol::account::v1::GameSessionInfo& _internal_session_info() const;
  ::bgs::protocol::account::v1::GameSessionInfo* _internal_mutable_session_info();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetGameSessionInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameSessionInfo* session_info_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGameTimeRemainingInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest) */ {
 public:
  GetGameTimeRemainingInfoRequest();
  virtual ~GetGameTimeRemainingInfoRequest();

  GetGameTimeRemainingInfoRequest(const GetGameTimeRemainingInfoRequest& from);
  GetGameTimeRemainingInfoRequest(GetGameTimeRemainingInfoRequest&& from) noexcept
    : GetGameTimeRemainingInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetGameTimeRemainingInfoRequest& operator=(const GetGameTimeRemainingInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameTimeRemainingInfoRequest& operator=(GetGameTimeRemainingInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGameTimeRemainingInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameTimeRemainingInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetGameTimeRemainingInfoRequest*>(
               &_GetGameTimeRemainingInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetGameTimeRemainingInfoRequest& a, GetGameTimeRemainingInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGameTimeRemainingInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGameTimeRemainingInfoRequest* New() const final {
    return CreateMaybeMessage<GetGameTimeRemainingInfoRequest>(nullptr);
  }

  GetGameTimeRemainingInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGameTimeRemainingInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGameTimeRemainingInfoRequest& from);
  void MergeFrom(const GetGameTimeRemainingInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGameTimeRemainingInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccountIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // optional .bgs.protocol.EntityId game_account_id = 1;
  bool has_game_account_id() const;
  private:
  bool _internal_has_game_account_id() const;
  public:
  void clear_game_account_id();
  const ::bgs::protocol::EntityId& game_account_id() const;
  ::bgs::protocol::EntityId* release_game_account_id();
  ::bgs::protocol::EntityId* mutable_game_account_id();
  void set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_game_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_game_account_id();
  public:

  // optional .bgs.protocol.EntityId account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::bgs::protocol::EntityId& account_id() const;
  ::bgs::protocol::EntityId* release_account_id();
  ::bgs::protocol::EntityId* mutable_account_id();
  void set_allocated_account_id(::bgs::protocol::EntityId* account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* game_account_id_;
  ::bgs::protocol::EntityId* account_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGameTimeRemainingInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse) */ {
 public:
  GetGameTimeRemainingInfoResponse();
  virtual ~GetGameTimeRemainingInfoResponse();

  GetGameTimeRemainingInfoResponse(const GetGameTimeRemainingInfoResponse& from);
  GetGameTimeRemainingInfoResponse(GetGameTimeRemainingInfoResponse&& from) noexcept
    : GetGameTimeRemainingInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetGameTimeRemainingInfoResponse& operator=(const GetGameTimeRemainingInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameTimeRemainingInfoResponse& operator=(GetGameTimeRemainingInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGameTimeRemainingInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGameTimeRemainingInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetGameTimeRemainingInfoResponse*>(
               &_GetGameTimeRemainingInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetGameTimeRemainingInfoResponse& a, GetGameTimeRemainingInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGameTimeRemainingInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGameTimeRemainingInfoResponse* New() const final {
    return CreateMaybeMessage<GetGameTimeRemainingInfoResponse>(nullptr);
  }

  GetGameTimeRemainingInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGameTimeRemainingInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGameTimeRemainingInfoResponse& from);
  void MergeFrom(const GetGameTimeRemainingInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGameTimeRemainingInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTimeRemainingInfoFieldNumber = 1,
  };
  // optional .bgs.protocol.account.v1.GameTimeRemainingInfo game_time_remaining_info = 1;
  bool has_game_time_remaining_info() const;
  private:
  bool _internal_has_game_time_remaining_info() const;
  public:
  void clear_game_time_remaining_info();
  const ::bgs::protocol::account::v1::GameTimeRemainingInfo& game_time_remaining_info() const;
  ::bgs::protocol::account::v1::GameTimeRemainingInfo* release_game_time_remaining_info();
  ::bgs::protocol::account::v1::GameTimeRemainingInfo* mutable_game_time_remaining_info();
  void set_allocated_game_time_remaining_info(::bgs::protocol::account::v1::GameTimeRemainingInfo* game_time_remaining_info);
  private:
  const ::bgs::protocol::account::v1::GameTimeRemainingInfo& _internal_game_time_remaining_info() const;
  ::bgs::protocol::account::v1::GameTimeRemainingInfo* _internal_mutable_game_time_remaining_info();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameTimeRemainingInfo* game_time_remaining_info_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCAISInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetCAISInfoRequest) */ {
 public:
  GetCAISInfoRequest();
  virtual ~GetCAISInfoRequest();

  GetCAISInfoRequest(const GetCAISInfoRequest& from);
  GetCAISInfoRequest(GetCAISInfoRequest&& from) noexcept
    : GetCAISInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetCAISInfoRequest& operator=(const GetCAISInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCAISInfoRequest& operator=(GetCAISInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCAISInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCAISInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetCAISInfoRequest*>(
               &_GetCAISInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetCAISInfoRequest& a, GetCAISInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCAISInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCAISInfoRequest* New() const final {
    return CreateMaybeMessage<GetCAISInfoRequest>(nullptr);
  }

  GetCAISInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCAISInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCAISInfoRequest& from);
  void MergeFrom(const GetCAISInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCAISInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetCAISInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
  };
  // optional .bgs.protocol.EntityId entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::bgs::protocol::EntityId& entity_id() const;
  ::bgs::protocol::EntityId* release_entity_id();
  ::bgs::protocol::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::bgs::protocol::EntityId* entity_id);
  private:
  const ::bgs::protocol::EntityId& _internal_entity_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_entity_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetCAISInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* entity_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCAISInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetCAISInfoResponse) */ {
 public:
  GetCAISInfoResponse();
  virtual ~GetCAISInfoResponse();

  GetCAISInfoResponse(const GetCAISInfoResponse& from);
  GetCAISInfoResponse(GetCAISInfoResponse&& from) noexcept
    : GetCAISInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetCAISInfoResponse& operator=(const GetCAISInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCAISInfoResponse& operator=(GetCAISInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCAISInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCAISInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetCAISInfoResponse*>(
               &_GetCAISInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetCAISInfoResponse& a, GetCAISInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCAISInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCAISInfoResponse* New() const final {
    return CreateMaybeMessage<GetCAISInfoResponse>(nullptr);
  }

  GetCAISInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCAISInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCAISInfoResponse& from);
  void MergeFrom(const GetCAISInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCAISInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetCAISInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaisInfoFieldNumber = 1,
  };
  // optional .bgs.protocol.account.v1.CAIS cais_info = 1;
  bool has_cais_info() const;
  private:
  bool _internal_has_cais_info() const;
  public:
  void clear_cais_info();
  const ::bgs::protocol::account::v1::CAIS& cais_info() const;
  ::bgs::protocol::account::v1::CAIS* release_cais_info();
  ::bgs::protocol::account::v1::CAIS* mutable_cais_info();
  void set_allocated_cais_info(::bgs::protocol::account::v1::CAIS* cais_info);
  private:
  const ::bgs::protocol::account::v1::CAIS& _internal_cais_info() const;
  ::bgs::protocol::account::v1::CAIS* _internal_mutable_cais_info();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetCAISInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::CAIS* cais_info_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAuthorizedDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetAuthorizedDataRequest) */ {
 public:
  GetAuthorizedDataRequest();
  virtual ~GetAuthorizedDataRequest();

  GetAuthorizedDataRequest(const GetAuthorizedDataRequest& from);
  GetAuthorizedDataRequest(GetAuthorizedDataRequest&& from) noexcept
    : GetAuthorizedDataRequest() {
    *this = ::std::move(from);
  }

  inline GetAuthorizedDataRequest& operator=(const GetAuthorizedDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthorizedDataRequest& operator=(GetAuthorizedDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthorizedDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthorizedDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetAuthorizedDataRequest*>(
               &_GetAuthorizedDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetAuthorizedDataRequest& a, GetAuthorizedDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthorizedDataRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthorizedDataRequest* New() const final {
    return CreateMaybeMessage<GetAuthorizedDataRequest>(nullptr);
  }

  GetAuthorizedDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthorizedDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthorizedDataRequest& from);
  void MergeFrom(const GetAuthorizedDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthorizedDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetAuthorizedDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kEntityIdFieldNumber = 1,
    kPrivilegedNetworkFieldNumber = 3,
  };
  // repeated string tag = 2;
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  const std::string& tag(int index) const;
  std::string* mutable_tag(int index);
  void set_tag(int index, const std::string& value);
  void set_tag(int index, std::string&& value);
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  std::string* add_tag();
  void add_tag(const std::string& value);
  void add_tag(std::string&& value);
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tag();
  private:
  const std::string& _internal_tag(int index) const;
  std::string* _internal_add_tag();
  public:

  // optional .bgs.protocol.EntityId entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::bgs::protocol::EntityId& entity_id() const;
  ::bgs::protocol::EntityId* release_entity_id();
  ::bgs::protocol::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::bgs::protocol::EntityId* entity_id);
  private:
  const ::bgs::protocol::EntityId& _internal_entity_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_entity_id();
  public:

  // optional bool privileged_network = 3;
  bool has_privileged_network() const;
  private:
  bool _internal_has_privileged_network() const;
  public:
  void clear_privileged_network();
  bool privileged_network() const;
  void set_privileged_network(bool value);
  private:
  bool _internal_privileged_network() const;
  void _internal_set_privileged_network(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetAuthorizedDataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tag_;
  ::bgs::protocol::EntityId* entity_id_;
  bool privileged_network_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAuthorizedDataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GetAuthorizedDataResponse) */ {
 public:
  GetAuthorizedDataResponse();
  virtual ~GetAuthorizedDataResponse();

  GetAuthorizedDataResponse(const GetAuthorizedDataResponse& from);
  GetAuthorizedDataResponse(GetAuthorizedDataResponse&& from) noexcept
    : GetAuthorizedDataResponse() {
    *this = ::std::move(from);
  }

  inline GetAuthorizedDataResponse& operator=(const GetAuthorizedDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthorizedDataResponse& operator=(GetAuthorizedDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthorizedDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthorizedDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetAuthorizedDataResponse*>(
               &_GetAuthorizedDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAuthorizedDataResponse& a, GetAuthorizedDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthorizedDataResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthorizedDataResponse* New() const final {
    return CreateMaybeMessage<GetAuthorizedDataResponse>(nullptr);
  }

  GetAuthorizedDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthorizedDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthorizedDataResponse& from);
  void MergeFrom(const GetAuthorizedDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthorizedDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GetAuthorizedDataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .bgs.protocol.account.v1.AuthorizedData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::bgs::protocol::account::v1::AuthorizedData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AuthorizedData >*
      mutable_data();
  private:
  const ::bgs::protocol::account::v1::AuthorizedData& _internal_data(int index) const;
  ::bgs::protocol::account::v1::AuthorizedData* _internal_add_data();
  public:
  const ::bgs::protocol::account::v1::AuthorizedData& data(int index) const;
  ::bgs::protocol::account::v1::AuthorizedData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AuthorizedData >&
      data() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GetAuthorizedDataResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AuthorizedData > data_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AccountStateNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountStateNotification) */ {
 public:
  AccountStateNotification();
  virtual ~AccountStateNotification();

  AccountStateNotification(const AccountStateNotification& from);
  AccountStateNotification(AccountStateNotification&& from) noexcept
    : AccountStateNotification() {
    *this = ::std::move(from);
  }

  inline AccountStateNotification& operator=(const AccountStateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountStateNotification& operator=(AccountStateNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountStateNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountStateNotification* internal_default_instance() {
    return reinterpret_cast<const AccountStateNotification*>(
               &_AccountStateNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AccountStateNotification& a, AccountStateNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountStateNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountStateNotification* New() const final {
    return CreateMaybeMessage<AccountStateNotification>(nullptr);
  }

  AccountStateNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountStateNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountStateNotification& from);
  void MergeFrom(const AccountStateNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountStateNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountStateNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountStateFieldNumber = 1,
    kAccountTagsFieldNumber = 3,
    kSubscriberIdFieldNumber = 2,
    kSubscriptionCompletedFieldNumber = 4,
  };
  // optional .bgs.protocol.account.v1.AccountState account_state = 1;
  bool has_account_state() const;
  private:
  bool _internal_has_account_state() const;
  public:
  void clear_account_state();
  const ::bgs::protocol::account::v1::AccountState& account_state() const;
  ::bgs::protocol::account::v1::AccountState* release_account_state();
  ::bgs::protocol::account::v1::AccountState* mutable_account_state();
  void set_allocated_account_state(::bgs::protocol::account::v1::AccountState* account_state);
  private:
  const ::bgs::protocol::account::v1::AccountState& _internal_account_state() const;
  ::bgs::protocol::account::v1::AccountState* _internal_mutable_account_state();
  public:

  // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
  bool has_account_tags() const;
  private:
  bool _internal_has_account_tags() const;
  public:
  void clear_account_tags();
  const ::bgs::protocol::account::v1::AccountFieldTags& account_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* release_account_tags();
  ::bgs::protocol::account::v1::AccountFieldTags* mutable_account_tags();
  void set_allocated_account_tags(::bgs::protocol::account::v1::AccountFieldTags* account_tags);
  private:
  const ::bgs::protocol::account::v1::AccountFieldTags& _internal_account_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* _internal_mutable_account_tags();
  public:

  // optional uint64 subscriber_id = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_subscriber_id() const;
  private:
  bool _internal_has_subscriber_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_subscriber_id();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_id() const;
  PROTOBUF_DEPRECATED void set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subscriber_id() const;
  void _internal_set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool subscription_completed = 4;
  bool has_subscription_completed() const;
  private:
  bool _internal_has_subscription_completed() const;
  public:
  void clear_subscription_completed();
  bool subscription_completed() const;
  void set_subscription_completed(bool value);
  private:
  bool _internal_subscription_completed() const;
  void _internal_set_subscription_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountStateNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountState* account_state_;
  ::bgs::protocol::account::v1::AccountFieldTags* account_tags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_id_;
  bool subscription_completed_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GameAccountStateNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountStateNotification) */ {
 public:
  GameAccountStateNotification();
  virtual ~GameAccountStateNotification();

  GameAccountStateNotification(const GameAccountStateNotification& from);
  GameAccountStateNotification(GameAccountStateNotification&& from) noexcept
    : GameAccountStateNotification() {
    *this = ::std::move(from);
  }

  inline GameAccountStateNotification& operator=(const GameAccountStateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountStateNotification& operator=(GameAccountStateNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountStateNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountStateNotification* internal_default_instance() {
    return reinterpret_cast<const GameAccountStateNotification*>(
               &_GameAccountStateNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GameAccountStateNotification& a, GameAccountStateNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountStateNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountStateNotification* New() const final {
    return CreateMaybeMessage<GameAccountStateNotification>(nullptr);
  }

  GameAccountStateNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountStateNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountStateNotification& from);
  void MergeFrom(const GameAccountStateNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountStateNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountStateNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccountStateFieldNumber = 1,
    kGameAccountTagsFieldNumber = 3,
    kSubscriberIdFieldNumber = 2,
    kSubscriptionCompletedFieldNumber = 4,
  };
  // optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
  bool has_game_account_state() const;
  private:
  bool _internal_has_game_account_state() const;
  public:
  void clear_game_account_state();
  const ::bgs::protocol::account::v1::GameAccountState& game_account_state() const;
  ::bgs::protocol::account::v1::GameAccountState* release_game_account_state();
  ::bgs::protocol::account::v1::GameAccountState* mutable_game_account_state();
  void set_allocated_game_account_state(::bgs::protocol::account::v1::GameAccountState* game_account_state);
  private:
  const ::bgs::protocol::account::v1::GameAccountState& _internal_game_account_state() const;
  ::bgs::protocol::account::v1::GameAccountState* _internal_mutable_game_account_state();
  public:

  // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 3;
  bool has_game_account_tags() const;
  private:
  bool _internal_has_game_account_tags() const;
  public:
  void clear_game_account_tags();
  const ::bgs::protocol::account::v1::GameAccountFieldTags& game_account_tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* release_game_account_tags();
  ::bgs::protocol::account::v1::GameAccountFieldTags* mutable_game_account_tags();
  void set_allocated_game_account_tags(::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags);
  private:
  const ::bgs::protocol::account::v1::GameAccountFieldTags& _internal_game_account_tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* _internal_mutable_game_account_tags();
  public:

  // optional uint64 subscriber_id = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_subscriber_id() const;
  private:
  bool _internal_has_subscriber_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_subscriber_id();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_id() const;
  PROTOBUF_DEPRECATED void set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subscriber_id() const;
  void _internal_set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool subscription_completed = 4;
  bool has_subscription_completed() const;
  private:
  bool _internal_has_subscription_completed() const;
  public:
  void clear_subscription_completed();
  bool subscription_completed() const;
  void set_subscription_completed(bool value);
  private:
  bool _internal_subscription_completed() const;
  void _internal_set_subscription_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountStateNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameAccountState* game_account_state_;
  ::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_id_;
  bool subscription_completed_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GameAccountNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountNotification) */ {
 public:
  GameAccountNotification();
  virtual ~GameAccountNotification();

  GameAccountNotification(const GameAccountNotification& from);
  GameAccountNotification(GameAccountNotification&& from) noexcept
    : GameAccountNotification() {
    *this = ::std::move(from);
  }

  inline GameAccountNotification& operator=(const GameAccountNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountNotification& operator=(GameAccountNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountNotification* internal_default_instance() {
    return reinterpret_cast<const GameAccountNotification*>(
               &_GameAccountNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GameAccountNotification& a, GameAccountNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountNotification* New() const final {
    return CreateMaybeMessage<GameAccountNotification>(nullptr);
  }

  GameAccountNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountNotification& from);
  void MergeFrom(const GameAccountNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccountsFieldNumber = 1,
    kAccountTagsFieldNumber = 3,
    kSubscriberIdFieldNumber = 2,
  };
  // repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 1;
  int game_accounts_size() const;
  private:
  int _internal_game_accounts_size() const;
  public:
  void clear_game_accounts();
  ::bgs::protocol::account::v1::GameAccountList* mutable_game_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList >*
      mutable_game_accounts();
  private:
  const ::bgs::protocol::account::v1::GameAccountList& _internal_game_accounts(int index) const;
  ::bgs::protocol::account::v1::GameAccountList* _internal_add_game_accounts();
  public:
  const ::bgs::protocol::account::v1::GameAccountList& game_accounts(int index) const;
  ::bgs::protocol::account::v1::GameAccountList* add_game_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList >&
      game_accounts() const;

  // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
  bool has_account_tags() const;
  private:
  bool _internal_has_account_tags() const;
  public:
  void clear_account_tags();
  const ::bgs::protocol::account::v1::AccountFieldTags& account_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* release_account_tags();
  ::bgs::protocol::account::v1::AccountFieldTags* mutable_account_tags();
  void set_allocated_account_tags(::bgs::protocol::account::v1::AccountFieldTags* account_tags);
  private:
  const ::bgs::protocol::account::v1::AccountFieldTags& _internal_account_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* _internal_mutable_account_tags();
  public:

  // optional uint64 subscriber_id = 2;
  bool has_subscriber_id() const;
  private:
  bool _internal_has_subscriber_id() const;
  public:
  void clear_subscriber_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_id() const;
  void set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subscriber_id() const;
  void _internal_set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList > game_accounts_;
  ::bgs::protocol::account::v1::AccountFieldTags* account_tags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GameAccountSessionNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountSessionNotification) */ {
 public:
  GameAccountSessionNotification();
  virtual ~GameAccountSessionNotification();

  GameAccountSessionNotification(const GameAccountSessionNotification& from);
  GameAccountSessionNotification(GameAccountSessionNotification&& from) noexcept
    : GameAccountSessionNotification() {
    *this = ::std::move(from);
  }

  inline GameAccountSessionNotification& operator=(const GameAccountSessionNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountSessionNotification& operator=(GameAccountSessionNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountSessionNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountSessionNotification* internal_default_instance() {
    return reinterpret_cast<const GameAccountSessionNotification*>(
               &_GameAccountSessionNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GameAccountSessionNotification& a, GameAccountSessionNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountSessionNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountSessionNotification* New() const final {
    return CreateMaybeMessage<GameAccountSessionNotification>(nullptr);
  }

  GameAccountSessionNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountSessionNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountSessionNotification& from);
  void MergeFrom(const GameAccountSessionNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountSessionNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountSessionNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccountFieldNumber = 1,
    kSessionInfoFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
  bool has_game_account() const;
  private:
  bool _internal_has_game_account() const;
  public:
  void clear_game_account();
  const ::bgs::protocol::account::v1::GameAccountHandle& game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_game_account();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_game_account();
  void set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_game_account();
  public:

  // optional .bgs.protocol.account.v1.GameSessionUpdateInfo session_info = 2;
  bool has_session_info() const;
  private:
  bool _internal_has_session_info() const;
  public:
  void clear_session_info();
  const ::bgs::protocol::account::v1::GameSessionUpdateInfo& session_info() const;
  ::bgs::protocol::account::v1::GameSessionUpdateInfo* release_session_info();
  ::bgs::protocol::account::v1::GameSessionUpdateInfo* mutable_session_info();
  void set_allocated_session_info(::bgs::protocol::account::v1::GameSessionUpdateInfo* session_info);
  private:
  const ::bgs::protocol::account::v1::GameSessionUpdateInfo& _internal_session_info() const;
  ::bgs::protocol::account::v1::GameSessionUpdateInfo* _internal_mutable_session_info();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountSessionNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameAccountHandle* game_account_;
  ::bgs::protocol::account::v1::GameSessionUpdateInfo* session_info_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResolveAccountRequest

// optional .bgs.protocol.account.v1.AccountReference ref = 1;
inline bool ResolveAccountRequest::_internal_has_ref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ref_ != nullptr);
  return value;
}
inline bool ResolveAccountRequest::has_ref() const {
  return _internal_has_ref();
}
inline const ::bgs::protocol::account::v1::AccountReference& ResolveAccountRequest::_internal_ref() const {
  const ::bgs::protocol::account::v1::AccountReference* p = ref_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountReference*>(
      &::bgs::protocol::account::v1::_AccountReference_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountReference& ResolveAccountRequest::ref() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ResolveAccountRequest.ref)
  return _internal_ref();
}
inline ::bgs::protocol::account::v1::AccountReference* ResolveAccountRequest::release_ref() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.ResolveAccountRequest.ref)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountReference* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountReference* ResolveAccountRequest::_internal_mutable_ref() {
  _has_bits_[0] |= 0x00000001u;
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountReference>(GetArenaNoVirtual());
    ref_ = p;
  }
  return ref_;
}
inline ::bgs::protocol::account::v1::AccountReference* ResolveAccountRequest::mutable_ref() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.ResolveAccountRequest.ref)
  return _internal_mutable_ref();
}
inline void ResolveAccountRequest::set_allocated_ref(::bgs::protocol::account::v1::AccountReference* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_);
  }
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.ResolveAccountRequest.ref)
}

// optional bool fetch_id = 12;
inline bool ResolveAccountRequest::_internal_has_fetch_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResolveAccountRequest::has_fetch_id() const {
  return _internal_has_fetch_id();
}
inline void ResolveAccountRequest::clear_fetch_id() {
  fetch_id_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ResolveAccountRequest::_internal_fetch_id() const {
  return fetch_id_;
}
inline bool ResolveAccountRequest::fetch_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ResolveAccountRequest.fetch_id)
  return _internal_fetch_id();
}
inline void ResolveAccountRequest::_internal_set_fetch_id(bool value) {
  _has_bits_[0] |= 0x00000002u;
  fetch_id_ = value;
}
inline void ResolveAccountRequest::set_fetch_id(bool value) {
  _internal_set_fetch_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ResolveAccountRequest.fetch_id)
}

// -------------------------------------------------------------------

// ResolveAccountResponse

// optional .bgs.protocol.account.v1.AccountId id = 12;
inline bool ResolveAccountResponse::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool ResolveAccountResponse::has_id() const {
  return _internal_has_id();
}
inline const ::bgs::protocol::account::v1::AccountId& ResolveAccountResponse::_internal_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& ResolveAccountResponse::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ResolveAccountResponse.id)
  return _internal_id();
}
inline ::bgs::protocol::account::v1::AccountId* ResolveAccountResponse::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.ResolveAccountResponse.id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* ResolveAccountResponse::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::bgs::protocol::account::v1::AccountId* ResolveAccountResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.ResolveAccountResponse.id)
  return _internal_mutable_id();
}
inline void ResolveAccountResponse::set_allocated_id(::bgs::protocol::account::v1::AccountId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.ResolveAccountResponse.id)
}

// -------------------------------------------------------------------

// GameAccountFlagUpdateRequest

// optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
inline bool GameAccountFlagUpdateRequest::_internal_has_game_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_account_ != nullptr);
  return value;
}
inline bool GameAccountFlagUpdateRequest::has_game_account() const {
  return _internal_has_game_account();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& GameAccountFlagUpdateRequest::_internal_game_account() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = game_account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& GameAccountFlagUpdateRequest::game_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFlagUpdateRequest.game_account)
  return _internal_game_account();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountFlagUpdateRequest::release_game_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountFlagUpdateRequest.game_account)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = game_account_;
  game_account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountFlagUpdateRequest::_internal_mutable_game_account() {
  _has_bits_[0] |= 0x00000001u;
  if (game_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    game_account_ = p;
  }
  return game_account_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountFlagUpdateRequest::mutable_game_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountFlagUpdateRequest.game_account)
  return _internal_mutable_game_account();
}
inline void GameAccountFlagUpdateRequest::set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_);
  }
  if (game_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_account_ = game_account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountFlagUpdateRequest.game_account)
}

// optional uint64 flag = 2;
inline bool GameAccountFlagUpdateRequest::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameAccountFlagUpdateRequest::has_flag() const {
  return _internal_has_flag();
}
inline void GameAccountFlagUpdateRequest::clear_flag() {
  flag_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountFlagUpdateRequest::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountFlagUpdateRequest::flag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFlagUpdateRequest.flag)
  return _internal_flag();
}
inline void GameAccountFlagUpdateRequest::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  flag_ = value;
}
inline void GameAccountFlagUpdateRequest::set_flag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFlagUpdateRequest.flag)
}

// optional bool active = 3;
inline bool GameAccountFlagUpdateRequest::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameAccountFlagUpdateRequest::has_active() const {
  return _internal_has_active();
}
inline void GameAccountFlagUpdateRequest::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GameAccountFlagUpdateRequest::_internal_active() const {
  return active_;
}
inline bool GameAccountFlagUpdateRequest::active() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFlagUpdateRequest.active)
  return _internal_active();
}
inline void GameAccountFlagUpdateRequest::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  active_ = value;
}
inline void GameAccountFlagUpdateRequest::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFlagUpdateRequest.active)
}

// -------------------------------------------------------------------

// SubscriptionUpdateRequest

// repeated .bgs.protocol.account.v1.SubscriberReference ref = 2;
inline int SubscriptionUpdateRequest::_internal_ref_size() const {
  return ref_.size();
}
inline int SubscriptionUpdateRequest::ref_size() const {
  return _internal_ref_size();
}
inline ::bgs::protocol::account::v1::SubscriberReference* SubscriptionUpdateRequest::mutable_ref(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.SubscriptionUpdateRequest.ref)
  return ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference >*
SubscriptionUpdateRequest::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.SubscriptionUpdateRequest.ref)
  return &ref_;
}
inline const ::bgs::protocol::account::v1::SubscriberReference& SubscriptionUpdateRequest::_internal_ref(int index) const {
  return ref_.Get(index);
}
inline const ::bgs::protocol::account::v1::SubscriberReference& SubscriptionUpdateRequest::ref(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriptionUpdateRequest.ref)
  return _internal_ref(index);
}
inline ::bgs::protocol::account::v1::SubscriberReference* SubscriptionUpdateRequest::_internal_add_ref() {
  return ref_.Add();
}
inline ::bgs::protocol::account::v1::SubscriberReference* SubscriptionUpdateRequest::add_ref() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.SubscriptionUpdateRequest.ref)
  return _internal_add_ref();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference >&
SubscriptionUpdateRequest::ref() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.SubscriptionUpdateRequest.ref)
  return ref_;
}

// -------------------------------------------------------------------

// SubscriptionUpdateResponse

// repeated .bgs.protocol.account.v1.SubscriberReference ref = 1;
inline int SubscriptionUpdateResponse::_internal_ref_size() const {
  return ref_.size();
}
inline int SubscriptionUpdateResponse::ref_size() const {
  return _internal_ref_size();
}
inline ::bgs::protocol::account::v1::SubscriberReference* SubscriptionUpdateResponse::mutable_ref(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.SubscriptionUpdateResponse.ref)
  return ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference >*
SubscriptionUpdateResponse::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.SubscriptionUpdateResponse.ref)
  return &ref_;
}
inline const ::bgs::protocol::account::v1::SubscriberReference& SubscriptionUpdateResponse::_internal_ref(int index) const {
  return ref_.Get(index);
}
inline const ::bgs::protocol::account::v1::SubscriberReference& SubscriptionUpdateResponse::ref(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriptionUpdateResponse.ref)
  return _internal_ref(index);
}
inline ::bgs::protocol::account::v1::SubscriberReference* SubscriptionUpdateResponse::_internal_add_ref() {
  return ref_.Add();
}
inline ::bgs::protocol::account::v1::SubscriberReference* SubscriptionUpdateResponse::add_ref() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.SubscriptionUpdateResponse.ref)
  return _internal_add_ref();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::SubscriberReference >&
SubscriptionUpdateResponse::ref() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.SubscriptionUpdateResponse.ref)
  return ref_;
}

// -------------------------------------------------------------------

// IsIgrAddressRequest

// optional string client_address = 1;
inline bool IsIgrAddressRequest::_internal_has_client_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IsIgrAddressRequest::has_client_address() const {
  return _internal_has_client_address();
}
inline void IsIgrAddressRequest::clear_client_address() {
  client_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IsIgrAddressRequest::client_address() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.IsIgrAddressRequest.client_address)
  return _internal_client_address();
}
inline void IsIgrAddressRequest::set_client_address(const std::string& value) {
  _internal_set_client_address(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.IsIgrAddressRequest.client_address)
}
inline std::string* IsIgrAddressRequest::mutable_client_address() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.IsIgrAddressRequest.client_address)
  return _internal_mutable_client_address();
}
inline const std::string& IsIgrAddressRequest::_internal_client_address() const {
  return client_address_.GetNoArena();
}
inline void IsIgrAddressRequest::_internal_set_client_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IsIgrAddressRequest::set_client_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.IsIgrAddressRequest.client_address)
}
inline void IsIgrAddressRequest::set_client_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.IsIgrAddressRequest.client_address)
}
inline void IsIgrAddressRequest::set_client_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.IsIgrAddressRequest.client_address)
}
inline std::string* IsIgrAddressRequest::_internal_mutable_client_address() {
  _has_bits_[0] |= 0x00000001u;
  return client_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IsIgrAddressRequest::release_client_address() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.IsIgrAddressRequest.client_address)
  if (!_internal_has_client_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IsIgrAddressRequest::set_allocated_client_address(std::string* client_address) {
  if (client_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_address);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.IsIgrAddressRequest.client_address)
}

// optional uint32 region = 2;
inline bool IsIgrAddressRequest::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IsIgrAddressRequest::has_region() const {
  return _internal_has_region();
}
inline void IsIgrAddressRequest::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsIgrAddressRequest::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IsIgrAddressRequest::region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.IsIgrAddressRequest.region)
  return _internal_region();
}
inline void IsIgrAddressRequest::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  region_ = value;
}
inline void IsIgrAddressRequest::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.IsIgrAddressRequest.region)
}

// -------------------------------------------------------------------

// GetAccountStateRequest

// optional .bgs.protocol.EntityId entity_id = 1 [(.bgs.protocol.field_options) = {
inline bool GetAccountStateRequest::_internal_has_entity_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entity_id_ != nullptr);
  return value;
}
inline bool GetAccountStateRequest::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::bgs::protocol::EntityId& GetAccountStateRequest::_internal_entity_id() const {
  const ::bgs::protocol::EntityId* p = entity_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetAccountStateRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAccountStateRequest.entity_id)
  return _internal_entity_id();
}
inline ::bgs::protocol::EntityId* GetAccountStateRequest::release_entity_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetAccountStateRequest.entity_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetAccountStateRequest::_internal_mutable_entity_id() {
  _has_bits_[0] |= 0x00000001u;
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::bgs::protocol::EntityId* GetAccountStateRequest::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetAccountStateRequest.entity_id)
  return _internal_mutable_entity_id();
}
inline void GetAccountStateRequest::set_allocated_entity_id(::bgs::protocol::EntityId* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetAccountStateRequest.entity_id)
}

// optional uint32 program = 2;
inline bool GetAccountStateRequest::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetAccountStateRequest::has_program() const {
  return _internal_has_program();
}
inline void GetAccountStateRequest::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountStateRequest::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountStateRequest::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAccountStateRequest.program)
  return _internal_program();
}
inline void GetAccountStateRequest::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  program_ = value;
}
inline void GetAccountStateRequest::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetAccountStateRequest.program)
}

// optional uint32 region = 3;
inline bool GetAccountStateRequest::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetAccountStateRequest::has_region() const {
  return _internal_has_region();
}
inline void GetAccountStateRequest::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountStateRequest::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAccountStateRequest::region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAccountStateRequest.region)
  return _internal_region();
}
inline void GetAccountStateRequest::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  region_ = value;
}
inline void GetAccountStateRequest::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetAccountStateRequest.region)
}

// optional .bgs.protocol.account.v1.AccountFieldOptions options = 10;
inline bool GetAccountStateRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool GetAccountStateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::account::v1::AccountFieldOptions& GetAccountStateRequest::_internal_options() const {
  const ::bgs::protocol::account::v1::AccountFieldOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountFieldOptions*>(
      &::bgs::protocol::account::v1::_AccountFieldOptions_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountFieldOptions& GetAccountStateRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAccountStateRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::account::v1::AccountFieldOptions* GetAccountStateRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetAccountStateRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::AccountFieldOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountFieldOptions* GetAccountStateRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::account::v1::AccountFieldOptions* GetAccountStateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetAccountStateRequest.options)
  return _internal_mutable_options();
}
inline void GetAccountStateRequest::set_allocated_options(::bgs::protocol::account::v1::AccountFieldOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetAccountStateRequest.options)
}

// optional .bgs.protocol.account.v1.AccountFieldTags tags = 11;
inline bool GetAccountStateRequest::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tags_ != nullptr);
  return value;
}
inline bool GetAccountStateRequest::has_tags() const {
  return _internal_has_tags();
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& GetAccountStateRequest::_internal_tags() const {
  const ::bgs::protocol::account::v1::AccountFieldTags* p = tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountFieldTags*>(
      &::bgs::protocol::account::v1::_AccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& GetAccountStateRequest::tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAccountStateRequest.tags)
  return _internal_tags();
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GetAccountStateRequest::release_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetAccountStateRequest.tags)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::account::v1::AccountFieldTags* temp = tags_;
  tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GetAccountStateRequest::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000004u;
  if (tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldTags>(GetArenaNoVirtual());
    tags_ = p;
  }
  return tags_;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GetAccountStateRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetAccountStateRequest.tags)
  return _internal_mutable_tags();
}
inline void GetAccountStateRequest::set_allocated_tags(::bgs::protocol::account::v1::AccountFieldTags* tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags_);
  }
  if (tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tags_ = tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetAccountStateRequest.tags)
}

// -------------------------------------------------------------------

// GetAccountStateResponse

// optional .bgs.protocol.account.v1.AccountState state = 1;
inline bool GetAccountStateResponse::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool GetAccountStateResponse::has_state() const {
  return _internal_has_state();
}
inline const ::bgs::protocol::account::v1::AccountState& GetAccountStateResponse::_internal_state() const {
  const ::bgs::protocol::account::v1::AccountState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountState*>(
      &::bgs::protocol::account::v1::_AccountState_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountState& GetAccountStateResponse::state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAccountStateResponse.state)
  return _internal_state();
}
inline ::bgs::protocol::account::v1::AccountState* GetAccountStateResponse::release_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetAccountStateResponse.state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountState* GetAccountStateResponse::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::bgs::protocol::account::v1::AccountState* GetAccountStateResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetAccountStateResponse.state)
  return _internal_mutable_state();
}
inline void GetAccountStateResponse::set_allocated_state(::bgs::protocol::account::v1::AccountState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetAccountStateResponse.state)
}

// optional .bgs.protocol.account.v1.AccountFieldTags tags = 2;
inline bool GetAccountStateResponse::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tags_ != nullptr);
  return value;
}
inline bool GetAccountStateResponse::has_tags() const {
  return _internal_has_tags();
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& GetAccountStateResponse::_internal_tags() const {
  const ::bgs::protocol::account::v1::AccountFieldTags* p = tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountFieldTags*>(
      &::bgs::protocol::account::v1::_AccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& GetAccountStateResponse::tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAccountStateResponse.tags)
  return _internal_tags();
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GetAccountStateResponse::release_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetAccountStateResponse.tags)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::AccountFieldTags* temp = tags_;
  tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GetAccountStateResponse::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000002u;
  if (tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldTags>(GetArenaNoVirtual());
    tags_ = p;
  }
  return tags_;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GetAccountStateResponse::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetAccountStateResponse.tags)
  return _internal_mutable_tags();
}
inline void GetAccountStateResponse::set_allocated_tags(::bgs::protocol::account::v1::AccountFieldTags* tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags_);
  }
  if (tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tags_ = tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetAccountStateResponse.tags)
}

// -------------------------------------------------------------------

// GetSignedAccountStateRequest

// optional .bgs.protocol.account.v1.AccountId account = 1;
inline bool GetSignedAccountStateRequest::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_ != nullptr);
  return value;
}
inline bool GetSignedAccountStateRequest::has_account() const {
  return _internal_has_account();
}
inline const ::bgs::protocol::account::v1::AccountId& GetSignedAccountStateRequest::_internal_account() const {
  const ::bgs::protocol::account::v1::AccountId* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& GetSignedAccountStateRequest::account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetSignedAccountStateRequest.account)
  return _internal_account();
}
inline ::bgs::protocol::account::v1::AccountId* GetSignedAccountStateRequest::release_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetSignedAccountStateRequest.account)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* GetSignedAccountStateRequest::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    account_ = p;
  }
  return account_;
}
inline ::bgs::protocol::account::v1::AccountId* GetSignedAccountStateRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetSignedAccountStateRequest.account)
  return _internal_mutable_account();
}
inline void GetSignedAccountStateRequest::set_allocated_account(::bgs::protocol::account::v1::AccountId* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetSignedAccountStateRequest.account)
}

// -------------------------------------------------------------------

// GetSignedAccountStateResponse

// optional string token = 1;
inline bool GetSignedAccountStateResponse::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetSignedAccountStateResponse::has_token() const {
  return _internal_has_token();
}
inline void GetSignedAccountStateResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetSignedAccountStateResponse::token() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetSignedAccountStateResponse.token)
  return _internal_token();
}
inline void GetSignedAccountStateResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetSignedAccountStateResponse.token)
}
inline std::string* GetSignedAccountStateResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetSignedAccountStateResponse.token)
  return _internal_mutable_token();
}
inline const std::string& GetSignedAccountStateResponse::_internal_token() const {
  return token_.GetNoArena();
}
inline void GetSignedAccountStateResponse::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetSignedAccountStateResponse::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.GetSignedAccountStateResponse.token)
}
inline void GetSignedAccountStateResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.GetSignedAccountStateResponse.token)
}
inline void GetSignedAccountStateResponse::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.GetSignedAccountStateResponse.token)
}
inline std::string* GetSignedAccountStateResponse::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSignedAccountStateResponse::release_token() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetSignedAccountStateResponse.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSignedAccountStateResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetSignedAccountStateResponse.token)
}

// -------------------------------------------------------------------

// GetGameAccountStateRequest

// optional .bgs.protocol.EntityId account_id = 1 [deprecated = true];
inline bool GetGameAccountStateRequest::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_id_ != nullptr);
  return value;
}
inline bool GetGameAccountStateRequest::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::bgs::protocol::EntityId& GetGameAccountStateRequest::_internal_account_id() const {
  const ::bgs::protocol::EntityId* p = account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetGameAccountStateRequest::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameAccountStateRequest.account_id)
  return _internal_account_id();
}
inline ::bgs::protocol::EntityId* GetGameAccountStateRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameAccountStateRequest.account_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetGameAccountStateRequest::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000001u;
  if (account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    account_id_ = p;
  }
  return account_id_;
}
inline ::bgs::protocol::EntityId* GetGameAccountStateRequest::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameAccountStateRequest.account_id)
  return _internal_mutable_account_id();
}
inline void GetGameAccountStateRequest::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameAccountStateRequest.account_id)
}

// optional .bgs.protocol.EntityId game_account_id = 2;
inline bool GetGameAccountStateRequest::_internal_has_game_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_account_id_ != nullptr);
  return value;
}
inline bool GetGameAccountStateRequest::has_game_account_id() const {
  return _internal_has_game_account_id();
}
inline const ::bgs::protocol::EntityId& GetGameAccountStateRequest::_internal_game_account_id() const {
  const ::bgs::protocol::EntityId* p = game_account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetGameAccountStateRequest::game_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameAccountStateRequest.game_account_id)
  return _internal_game_account_id();
}
inline ::bgs::protocol::EntityId* GetGameAccountStateRequest::release_game_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameAccountStateRequest.game_account_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetGameAccountStateRequest::_internal_mutable_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
  if (game_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    game_account_id_ = p;
  }
  return game_account_id_;
}
inline ::bgs::protocol::EntityId* GetGameAccountStateRequest::mutable_game_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameAccountStateRequest.game_account_id)
  return _internal_mutable_game_account_id();
}
inline void GetGameAccountStateRequest::set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_id_);
  }
  if (game_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_account_id_ = game_account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameAccountStateRequest.game_account_id)
}

// optional .bgs.protocol.account.v1.GameAccountFieldOptions options = 10;
inline bool GetGameAccountStateRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool GetGameAccountStateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::account::v1::GameAccountFieldOptions& GetGameAccountStateRequest::_internal_options() const {
  const ::bgs::protocol::account::v1::GameAccountFieldOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountFieldOptions*>(
      &::bgs::protocol::account::v1::_GameAccountFieldOptions_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountFieldOptions& GetGameAccountStateRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameAccountStateRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::account::v1::GameAccountFieldOptions* GetGameAccountStateRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameAccountStateRequest.options)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::account::v1::GameAccountFieldOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountFieldOptions* GetGameAccountStateRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000004u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::account::v1::GameAccountFieldOptions* GetGameAccountStateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameAccountStateRequest.options)
  return _internal_mutable_options();
}
inline void GetGameAccountStateRequest::set_allocated_options(::bgs::protocol::account::v1::GameAccountFieldOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameAccountStateRequest.options)
}

// optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 11;
inline bool GetGameAccountStateRequest::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tags_ != nullptr);
  return value;
}
inline bool GetGameAccountStateRequest::has_tags() const {
  return _internal_has_tags();
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& GetGameAccountStateRequest::_internal_tags() const {
  const ::bgs::protocol::account::v1::GameAccountFieldTags* p = tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      &::bgs::protocol::account::v1::_GameAccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& GetGameAccountStateRequest::tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameAccountStateRequest.tags)
  return _internal_tags();
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GetGameAccountStateRequest::release_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameAccountStateRequest.tags)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::account::v1::GameAccountFieldTags* temp = tags_;
  tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GetGameAccountStateRequest::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000008u;
  if (tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldTags>(GetArenaNoVirtual());
    tags_ = p;
  }
  return tags_;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GetGameAccountStateRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameAccountStateRequest.tags)
  return _internal_mutable_tags();
}
inline void GetGameAccountStateRequest::set_allocated_tags(::bgs::protocol::account::v1::GameAccountFieldTags* tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags_);
  }
  if (tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tags_ = tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameAccountStateRequest.tags)
}

// -------------------------------------------------------------------

// GetGameAccountStateResponse

// optional .bgs.protocol.account.v1.GameAccountState state = 1;
inline bool GetGameAccountStateResponse::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool GetGameAccountStateResponse::has_state() const {
  return _internal_has_state();
}
inline const ::bgs::protocol::account::v1::GameAccountState& GetGameAccountStateResponse::_internal_state() const {
  const ::bgs::protocol::account::v1::GameAccountState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountState*>(
      &::bgs::protocol::account::v1::_GameAccountState_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountState& GetGameAccountStateResponse::state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameAccountStateResponse.state)
  return _internal_state();
}
inline ::bgs::protocol::account::v1::GameAccountState* GetGameAccountStateResponse::release_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameAccountStateResponse.state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameAccountState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountState* GetGameAccountStateResponse::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::bgs::protocol::account::v1::GameAccountState* GetGameAccountStateResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameAccountStateResponse.state)
  return _internal_mutable_state();
}
inline void GetGameAccountStateResponse::set_allocated_state(::bgs::protocol::account::v1::GameAccountState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameAccountStateResponse.state)
}

// optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 2;
inline bool GetGameAccountStateResponse::_internal_has_tags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tags_ != nullptr);
  return value;
}
inline bool GetGameAccountStateResponse::has_tags() const {
  return _internal_has_tags();
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& GetGameAccountStateResponse::_internal_tags() const {
  const ::bgs::protocol::account::v1::GameAccountFieldTags* p = tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      &::bgs::protocol::account::v1::_GameAccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& GetGameAccountStateResponse::tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameAccountStateResponse.tags)
  return _internal_tags();
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GetGameAccountStateResponse::release_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameAccountStateResponse.tags)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameAccountFieldTags* temp = tags_;
  tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GetGameAccountStateResponse::_internal_mutable_tags() {
  _has_bits_[0] |= 0x00000002u;
  if (tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldTags>(GetArenaNoVirtual());
    tags_ = p;
  }
  return tags_;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GetGameAccountStateResponse::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameAccountStateResponse.tags)
  return _internal_mutable_tags();
}
inline void GetGameAccountStateResponse::set_allocated_tags(::bgs::protocol::account::v1::GameAccountFieldTags* tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags_);
  }
  if (tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tags_ = tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameAccountStateResponse.tags)
}

// -------------------------------------------------------------------

// GetLicensesRequest

// optional .bgs.protocol.EntityId target_id = 1 [(.bgs.protocol.field_options) = {
inline bool GetLicensesRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool GetLicensesRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::EntityId& GetLicensesRequest::_internal_target_id() const {
  const ::bgs::protocol::EntityId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetLicensesRequest::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetLicensesRequest.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::EntityId* GetLicensesRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetLicensesRequest.target_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetLicensesRequest::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000001u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::EntityId* GetLicensesRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetLicensesRequest.target_id)
  return _internal_mutable_target_id();
}
inline void GetLicensesRequest::set_allocated_target_id(::bgs::protocol::EntityId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetLicensesRequest.target_id)
}

// optional bool fetch_account_licenses = 2;
inline bool GetLicensesRequest::_internal_has_fetch_account_licenses() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetLicensesRequest::has_fetch_account_licenses() const {
  return _internal_has_fetch_account_licenses();
}
inline void GetLicensesRequest::clear_fetch_account_licenses() {
  fetch_account_licenses_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GetLicensesRequest::_internal_fetch_account_licenses() const {
  return fetch_account_licenses_;
}
inline bool GetLicensesRequest::fetch_account_licenses() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetLicensesRequest.fetch_account_licenses)
  return _internal_fetch_account_licenses();
}
inline void GetLicensesRequest::_internal_set_fetch_account_licenses(bool value) {
  _has_bits_[0] |= 0x00000002u;
  fetch_account_licenses_ = value;
}
inline void GetLicensesRequest::set_fetch_account_licenses(bool value) {
  _internal_set_fetch_account_licenses(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetLicensesRequest.fetch_account_licenses)
}

// optional bool fetch_game_account_licenses = 3;
inline bool GetLicensesRequest::_internal_has_fetch_game_account_licenses() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetLicensesRequest::has_fetch_game_account_licenses() const {
  return _internal_has_fetch_game_account_licenses();
}
inline void GetLicensesRequest::clear_fetch_game_account_licenses() {
  fetch_game_account_licenses_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GetLicensesRequest::_internal_fetch_game_account_licenses() const {
  return fetch_game_account_licenses_;
}
inline bool GetLicensesRequest::fetch_game_account_licenses() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetLicensesRequest.fetch_game_account_licenses)
  return _internal_fetch_game_account_licenses();
}
inline void GetLicensesRequest::_internal_set_fetch_game_account_licenses(bool value) {
  _has_bits_[0] |= 0x00000004u;
  fetch_game_account_licenses_ = value;
}
inline void GetLicensesRequest::set_fetch_game_account_licenses(bool value) {
  _internal_set_fetch_game_account_licenses(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetLicensesRequest.fetch_game_account_licenses)
}

// optional bool fetch_dynamic_account_licenses = 4;
inline bool GetLicensesRequest::_internal_has_fetch_dynamic_account_licenses() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetLicensesRequest::has_fetch_dynamic_account_licenses() const {
  return _internal_has_fetch_dynamic_account_licenses();
}
inline void GetLicensesRequest::clear_fetch_dynamic_account_licenses() {
  fetch_dynamic_account_licenses_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GetLicensesRequest::_internal_fetch_dynamic_account_licenses() const {
  return fetch_dynamic_account_licenses_;
}
inline bool GetLicensesRequest::fetch_dynamic_account_licenses() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetLicensesRequest.fetch_dynamic_account_licenses)
  return _internal_fetch_dynamic_account_licenses();
}
inline void GetLicensesRequest::_internal_set_fetch_dynamic_account_licenses(bool value) {
  _has_bits_[0] |= 0x00000008u;
  fetch_dynamic_account_licenses_ = value;
}
inline void GetLicensesRequest::set_fetch_dynamic_account_licenses(bool value) {
  _internal_set_fetch_dynamic_account_licenses(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetLicensesRequest.fetch_dynamic_account_licenses)
}

// optional fixed32 program = 5;
inline bool GetLicensesRequest::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GetLicensesRequest::has_program() const {
  return _internal_has_program();
}
inline void GetLicensesRequest::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLicensesRequest::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetLicensesRequest::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetLicensesRequest.program)
  return _internal_program();
}
inline void GetLicensesRequest::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  program_ = value;
}
inline void GetLicensesRequest::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetLicensesRequest.program)
}

// optional bool exclude_unknown_program = 6 [default = false];
inline bool GetLicensesRequest::_internal_has_exclude_unknown_program() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetLicensesRequest::has_exclude_unknown_program() const {
  return _internal_has_exclude_unknown_program();
}
inline void GetLicensesRequest::clear_exclude_unknown_program() {
  exclude_unknown_program_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GetLicensesRequest::_internal_exclude_unknown_program() const {
  return exclude_unknown_program_;
}
inline bool GetLicensesRequest::exclude_unknown_program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetLicensesRequest.exclude_unknown_program)
  return _internal_exclude_unknown_program();
}
inline void GetLicensesRequest::_internal_set_exclude_unknown_program(bool value) {
  _has_bits_[0] |= 0x00000010u;
  exclude_unknown_program_ = value;
}
inline void GetLicensesRequest::set_exclude_unknown_program(bool value) {
  _internal_set_exclude_unknown_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetLicensesRequest.exclude_unknown_program)
}

// -------------------------------------------------------------------

// GetLicensesResponse

// repeated .bgs.protocol.account.v1.AccountLicense licenses = 1;
inline int GetLicensesResponse::_internal_licenses_size() const {
  return licenses_.size();
}
inline int GetLicensesResponse::licenses_size() const {
  return _internal_licenses_size();
}
inline ::bgs::protocol::account::v1::AccountLicense* GetLicensesResponse::mutable_licenses(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetLicensesResponse.licenses)
  return licenses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >*
GetLicensesResponse::mutable_licenses() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.GetLicensesResponse.licenses)
  return &licenses_;
}
inline const ::bgs::protocol::account::v1::AccountLicense& GetLicensesResponse::_internal_licenses(int index) const {
  return licenses_.Get(index);
}
inline const ::bgs::protocol::account::v1::AccountLicense& GetLicensesResponse::licenses(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetLicensesResponse.licenses)
  return _internal_licenses(index);
}
inline ::bgs::protocol::account::v1::AccountLicense* GetLicensesResponse::_internal_add_licenses() {
  return licenses_.Add();
}
inline ::bgs::protocol::account::v1::AccountLicense* GetLicensesResponse::add_licenses() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.GetLicensesResponse.licenses)
  return _internal_add_licenses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >&
GetLicensesResponse::licenses() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.GetLicensesResponse.licenses)
  return licenses_;
}

// -------------------------------------------------------------------

// GetGameSessionInfoRequest

// optional .bgs.protocol.EntityId entity_id = 1;
inline bool GetGameSessionInfoRequest::_internal_has_entity_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entity_id_ != nullptr);
  return value;
}
inline bool GetGameSessionInfoRequest::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::bgs::protocol::EntityId& GetGameSessionInfoRequest::_internal_entity_id() const {
  const ::bgs::protocol::EntityId* p = entity_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetGameSessionInfoRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameSessionInfoRequest.entity_id)
  return _internal_entity_id();
}
inline ::bgs::protocol::EntityId* GetGameSessionInfoRequest::release_entity_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameSessionInfoRequest.entity_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetGameSessionInfoRequest::_internal_mutable_entity_id() {
  _has_bits_[0] |= 0x00000001u;
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::bgs::protocol::EntityId* GetGameSessionInfoRequest::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameSessionInfoRequest.entity_id)
  return _internal_mutable_entity_id();
}
inline void GetGameSessionInfoRequest::set_allocated_entity_id(::bgs::protocol::EntityId* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameSessionInfoRequest.entity_id)
}

// -------------------------------------------------------------------

// GetGameSessionInfoResponse

// optional .bgs.protocol.account.v1.GameSessionInfo session_info = 2;
inline bool GetGameSessionInfoResponse::_internal_has_session_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || session_info_ != nullptr);
  return value;
}
inline bool GetGameSessionInfoResponse::has_session_info() const {
  return _internal_has_session_info();
}
inline const ::bgs::protocol::account::v1::GameSessionInfo& GetGameSessionInfoResponse::_internal_session_info() const {
  const ::bgs::protocol::account::v1::GameSessionInfo* p = session_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameSessionInfo*>(
      &::bgs::protocol::account::v1::_GameSessionInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameSessionInfo& GetGameSessionInfoResponse::session_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameSessionInfoResponse.session_info)
  return _internal_session_info();
}
inline ::bgs::protocol::account::v1::GameSessionInfo* GetGameSessionInfoResponse::release_session_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameSessionInfoResponse.session_info)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameSessionInfo* temp = session_info_;
  session_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameSessionInfo* GetGameSessionInfoResponse::_internal_mutable_session_info() {
  _has_bits_[0] |= 0x00000001u;
  if (session_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameSessionInfo>(GetArenaNoVirtual());
    session_info_ = p;
  }
  return session_info_;
}
inline ::bgs::protocol::account::v1::GameSessionInfo* GetGameSessionInfoResponse::mutable_session_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameSessionInfoResponse.session_info)
  return _internal_mutable_session_info();
}
inline void GetGameSessionInfoResponse::set_allocated_session_info(::bgs::protocol::account::v1::GameSessionInfo* session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_info_);
  }
  if (session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_info_ = session_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameSessionInfoResponse.session_info)
}

// -------------------------------------------------------------------

// GetGameTimeRemainingInfoRequest

// optional .bgs.protocol.EntityId game_account_id = 1;
inline bool GetGameTimeRemainingInfoRequest::_internal_has_game_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_account_id_ != nullptr);
  return value;
}
inline bool GetGameTimeRemainingInfoRequest::has_game_account_id() const {
  return _internal_has_game_account_id();
}
inline const ::bgs::protocol::EntityId& GetGameTimeRemainingInfoRequest::_internal_game_account_id() const {
  const ::bgs::protocol::EntityId* p = game_account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetGameTimeRemainingInfoRequest::game_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest.game_account_id)
  return _internal_game_account_id();
}
inline ::bgs::protocol::EntityId* GetGameTimeRemainingInfoRequest::release_game_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest.game_account_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetGameTimeRemainingInfoRequest::_internal_mutable_game_account_id() {
  _has_bits_[0] |= 0x00000001u;
  if (game_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    game_account_id_ = p;
  }
  return game_account_id_;
}
inline ::bgs::protocol::EntityId* GetGameTimeRemainingInfoRequest::mutable_game_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest.game_account_id)
  return _internal_mutable_game_account_id();
}
inline void GetGameTimeRemainingInfoRequest::set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_id_);
  }
  if (game_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_account_id_ = game_account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest.game_account_id)
}

// optional .bgs.protocol.EntityId account_id = 2;
inline bool GetGameTimeRemainingInfoRequest::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || account_id_ != nullptr);
  return value;
}
inline bool GetGameTimeRemainingInfoRequest::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::bgs::protocol::EntityId& GetGameTimeRemainingInfoRequest::_internal_account_id() const {
  const ::bgs::protocol::EntityId* p = account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetGameTimeRemainingInfoRequest::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest.account_id)
  return _internal_account_id();
}
inline ::bgs::protocol::EntityId* GetGameTimeRemainingInfoRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest.account_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetGameTimeRemainingInfoRequest::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000002u;
  if (account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    account_id_ = p;
  }
  return account_id_;
}
inline ::bgs::protocol::EntityId* GetGameTimeRemainingInfoRequest::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest.account_id)
  return _internal_mutable_account_id();
}
inline void GetGameTimeRemainingInfoRequest::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest.account_id)
}

// -------------------------------------------------------------------

// GetGameTimeRemainingInfoResponse

// optional .bgs.protocol.account.v1.GameTimeRemainingInfo game_time_remaining_info = 1;
inline bool GetGameTimeRemainingInfoResponse::_internal_has_game_time_remaining_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_time_remaining_info_ != nullptr);
  return value;
}
inline bool GetGameTimeRemainingInfoResponse::has_game_time_remaining_info() const {
  return _internal_has_game_time_remaining_info();
}
inline const ::bgs::protocol::account::v1::GameTimeRemainingInfo& GetGameTimeRemainingInfoResponse::_internal_game_time_remaining_info() const {
  const ::bgs::protocol::account::v1::GameTimeRemainingInfo* p = game_time_remaining_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameTimeRemainingInfo*>(
      &::bgs::protocol::account::v1::_GameTimeRemainingInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameTimeRemainingInfo& GetGameTimeRemainingInfoResponse::game_time_remaining_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse.game_time_remaining_info)
  return _internal_game_time_remaining_info();
}
inline ::bgs::protocol::account::v1::GameTimeRemainingInfo* GetGameTimeRemainingInfoResponse::release_game_time_remaining_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse.game_time_remaining_info)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameTimeRemainingInfo* temp = game_time_remaining_info_;
  game_time_remaining_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameTimeRemainingInfo* GetGameTimeRemainingInfoResponse::_internal_mutable_game_time_remaining_info() {
  _has_bits_[0] |= 0x00000001u;
  if (game_time_remaining_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameTimeRemainingInfo>(GetArenaNoVirtual());
    game_time_remaining_info_ = p;
  }
  return game_time_remaining_info_;
}
inline ::bgs::protocol::account::v1::GameTimeRemainingInfo* GetGameTimeRemainingInfoResponse::mutable_game_time_remaining_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse.game_time_remaining_info)
  return _internal_mutable_game_time_remaining_info();
}
inline void GetGameTimeRemainingInfoResponse::set_allocated_game_time_remaining_info(::bgs::protocol::account::v1::GameTimeRemainingInfo* game_time_remaining_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_time_remaining_info_);
  }
  if (game_time_remaining_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_time_remaining_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_time_remaining_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_time_remaining_info_ = game_time_remaining_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse.game_time_remaining_info)
}

// -------------------------------------------------------------------

// GetCAISInfoRequest

// optional .bgs.protocol.EntityId entity_id = 1;
inline bool GetCAISInfoRequest::_internal_has_entity_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entity_id_ != nullptr);
  return value;
}
inline bool GetCAISInfoRequest::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::bgs::protocol::EntityId& GetCAISInfoRequest::_internal_entity_id() const {
  const ::bgs::protocol::EntityId* p = entity_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetCAISInfoRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetCAISInfoRequest.entity_id)
  return _internal_entity_id();
}
inline ::bgs::protocol::EntityId* GetCAISInfoRequest::release_entity_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetCAISInfoRequest.entity_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetCAISInfoRequest::_internal_mutable_entity_id() {
  _has_bits_[0] |= 0x00000001u;
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::bgs::protocol::EntityId* GetCAISInfoRequest::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetCAISInfoRequest.entity_id)
  return _internal_mutable_entity_id();
}
inline void GetCAISInfoRequest::set_allocated_entity_id(::bgs::protocol::EntityId* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetCAISInfoRequest.entity_id)
}

// -------------------------------------------------------------------

// GetCAISInfoResponse

// optional .bgs.protocol.account.v1.CAIS cais_info = 1;
inline bool GetCAISInfoResponse::_internal_has_cais_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cais_info_ != nullptr);
  return value;
}
inline bool GetCAISInfoResponse::has_cais_info() const {
  return _internal_has_cais_info();
}
inline const ::bgs::protocol::account::v1::CAIS& GetCAISInfoResponse::_internal_cais_info() const {
  const ::bgs::protocol::account::v1::CAIS* p = cais_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::CAIS*>(
      &::bgs::protocol::account::v1::_CAIS_default_instance_);
}
inline const ::bgs::protocol::account::v1::CAIS& GetCAISInfoResponse::cais_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetCAISInfoResponse.cais_info)
  return _internal_cais_info();
}
inline ::bgs::protocol::account::v1::CAIS* GetCAISInfoResponse::release_cais_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetCAISInfoResponse.cais_info)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::CAIS* temp = cais_info_;
  cais_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::CAIS* GetCAISInfoResponse::_internal_mutable_cais_info() {
  _has_bits_[0] |= 0x00000001u;
  if (cais_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::CAIS>(GetArenaNoVirtual());
    cais_info_ = p;
  }
  return cais_info_;
}
inline ::bgs::protocol::account::v1::CAIS* GetCAISInfoResponse::mutable_cais_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetCAISInfoResponse.cais_info)
  return _internal_mutable_cais_info();
}
inline void GetCAISInfoResponse::set_allocated_cais_info(::bgs::protocol::account::v1::CAIS* cais_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cais_info_);
  }
  if (cais_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cais_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cais_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cais_info_ = cais_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetCAISInfoResponse.cais_info)
}

// -------------------------------------------------------------------

// GetAuthorizedDataRequest

// optional .bgs.protocol.EntityId entity_id = 1;
inline bool GetAuthorizedDataRequest::_internal_has_entity_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entity_id_ != nullptr);
  return value;
}
inline bool GetAuthorizedDataRequest::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::bgs::protocol::EntityId& GetAuthorizedDataRequest::_internal_entity_id() const {
  const ::bgs::protocol::EntityId* p = entity_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& GetAuthorizedDataRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAuthorizedDataRequest.entity_id)
  return _internal_entity_id();
}
inline ::bgs::protocol::EntityId* GetAuthorizedDataRequest::release_entity_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GetAuthorizedDataRequest.entity_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* GetAuthorizedDataRequest::_internal_mutable_entity_id() {
  _has_bits_[0] |= 0x00000001u;
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::bgs::protocol::EntityId* GetAuthorizedDataRequest::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetAuthorizedDataRequest.entity_id)
  return _internal_mutable_entity_id();
}
inline void GetAuthorizedDataRequest::set_allocated_entity_id(::bgs::protocol::EntityId* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GetAuthorizedDataRequest.entity_id)
}

// repeated string tag = 2;
inline int GetAuthorizedDataRequest::_internal_tag_size() const {
  return tag_.size();
}
inline int GetAuthorizedDataRequest::tag_size() const {
  return _internal_tag_size();
}
inline void GetAuthorizedDataRequest::clear_tag() {
  tag_.Clear();
}
inline std::string* GetAuthorizedDataRequest::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
  return _internal_add_tag();
}
inline const std::string& GetAuthorizedDataRequest::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const std::string& GetAuthorizedDataRequest::tag(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
  return _internal_tag(index);
}
inline std::string* GetAuthorizedDataRequest::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
  return tag_.Mutable(index);
}
inline void GetAuthorizedDataRequest::set_tag(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
  tag_.Mutable(index)->assign(value);
}
inline void GetAuthorizedDataRequest::set_tag(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
inline void GetAuthorizedDataRequest::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
}
inline void GetAuthorizedDataRequest::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
}
inline std::string* GetAuthorizedDataRequest::_internal_add_tag() {
  return tag_.Add();
}
inline void GetAuthorizedDataRequest::add_tag(const std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
}
inline void GetAuthorizedDataRequest::add_tag(std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
}
inline void GetAuthorizedDataRequest::add_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
}
inline void GetAuthorizedDataRequest::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAuthorizedDataRequest::tag() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAuthorizedDataRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.GetAuthorizedDataRequest.tag)
  return &tag_;
}

// optional bool privileged_network = 3;
inline bool GetAuthorizedDataRequest::_internal_has_privileged_network() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAuthorizedDataRequest::has_privileged_network() const {
  return _internal_has_privileged_network();
}
inline void GetAuthorizedDataRequest::clear_privileged_network() {
  privileged_network_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GetAuthorizedDataRequest::_internal_privileged_network() const {
  return privileged_network_;
}
inline bool GetAuthorizedDataRequest::privileged_network() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAuthorizedDataRequest.privileged_network)
  return _internal_privileged_network();
}
inline void GetAuthorizedDataRequest::_internal_set_privileged_network(bool value) {
  _has_bits_[0] |= 0x00000002u;
  privileged_network_ = value;
}
inline void GetAuthorizedDataRequest::set_privileged_network(bool value) {
  _internal_set_privileged_network(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GetAuthorizedDataRequest.privileged_network)
}

// -------------------------------------------------------------------

// GetAuthorizedDataResponse

// repeated .bgs.protocol.account.v1.AuthorizedData data = 1;
inline int GetAuthorizedDataResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetAuthorizedDataResponse::data_size() const {
  return _internal_data_size();
}
inline ::bgs::protocol::account::v1::AuthorizedData* GetAuthorizedDataResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GetAuthorizedDataResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AuthorizedData >*
GetAuthorizedDataResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.GetAuthorizedDataResponse.data)
  return &data_;
}
inline const ::bgs::protocol::account::v1::AuthorizedData& GetAuthorizedDataResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::bgs::protocol::account::v1::AuthorizedData& GetAuthorizedDataResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GetAuthorizedDataResponse.data)
  return _internal_data(index);
}
inline ::bgs::protocol::account::v1::AuthorizedData* GetAuthorizedDataResponse::_internal_add_data() {
  return data_.Add();
}
inline ::bgs::protocol::account::v1::AuthorizedData* GetAuthorizedDataResponse::add_data() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.GetAuthorizedDataResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AuthorizedData >&
GetAuthorizedDataResponse::data() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.GetAuthorizedDataResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// AccountStateNotification

// optional .bgs.protocol.account.v1.AccountState account_state = 1;
inline bool AccountStateNotification::_internal_has_account_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_state_ != nullptr);
  return value;
}
inline bool AccountStateNotification::has_account_state() const {
  return _internal_has_account_state();
}
inline const ::bgs::protocol::account::v1::AccountState& AccountStateNotification::_internal_account_state() const {
  const ::bgs::protocol::account::v1::AccountState* p = account_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountState*>(
      &::bgs::protocol::account::v1::_AccountState_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountState& AccountStateNotification::account_state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountStateNotification.account_state)
  return _internal_account_state();
}
inline ::bgs::protocol::account::v1::AccountState* AccountStateNotification::release_account_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountStateNotification.account_state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountState* temp = account_state_;
  account_state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountState* AccountStateNotification::_internal_mutable_account_state() {
  _has_bits_[0] |= 0x00000001u;
  if (account_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountState>(GetArenaNoVirtual());
    account_state_ = p;
  }
  return account_state_;
}
inline ::bgs::protocol::account::v1::AccountState* AccountStateNotification::mutable_account_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountStateNotification.account_state)
  return _internal_mutable_account_state();
}
inline void AccountStateNotification::set_allocated_account_state(::bgs::protocol::account::v1::AccountState* account_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_state_);
  }
  if (account_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_state_ = account_state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountStateNotification.account_state)
}

// optional uint64 subscriber_id = 2 [deprecated = true];
inline bool AccountStateNotification::_internal_has_subscriber_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountStateNotification::has_subscriber_id() const {
  return _internal_has_subscriber_id();
}
inline void AccountStateNotification::clear_subscriber_id() {
  subscriber_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountStateNotification::_internal_subscriber_id() const {
  return subscriber_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountStateNotification::subscriber_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountStateNotification.subscriber_id)
  return _internal_subscriber_id();
}
inline void AccountStateNotification::_internal_set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  subscriber_id_ = value;
}
inline void AccountStateNotification::set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subscriber_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountStateNotification.subscriber_id)
}

// optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
inline bool AccountStateNotification::_internal_has_account_tags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || account_tags_ != nullptr);
  return value;
}
inline bool AccountStateNotification::has_account_tags() const {
  return _internal_has_account_tags();
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& AccountStateNotification::_internal_account_tags() const {
  const ::bgs::protocol::account::v1::AccountFieldTags* p = account_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountFieldTags*>(
      &::bgs::protocol::account::v1::_AccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& AccountStateNotification::account_tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountStateNotification.account_tags)
  return _internal_account_tags();
}
inline ::bgs::protocol::account::v1::AccountFieldTags* AccountStateNotification::release_account_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountStateNotification.account_tags)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::AccountFieldTags* temp = account_tags_;
  account_tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* AccountStateNotification::_internal_mutable_account_tags() {
  _has_bits_[0] |= 0x00000002u;
  if (account_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldTags>(GetArenaNoVirtual());
    account_tags_ = p;
  }
  return account_tags_;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* AccountStateNotification::mutable_account_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountStateNotification.account_tags)
  return _internal_mutable_account_tags();
}
inline void AccountStateNotification::set_allocated_account_tags(::bgs::protocol::account::v1::AccountFieldTags* account_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_tags_);
  }
  if (account_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_tags_ = account_tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountStateNotification.account_tags)
}

// optional bool subscription_completed = 4;
inline bool AccountStateNotification::_internal_has_subscription_completed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountStateNotification::has_subscription_completed() const {
  return _internal_has_subscription_completed();
}
inline void AccountStateNotification::clear_subscription_completed() {
  subscription_completed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AccountStateNotification::_internal_subscription_completed() const {
  return subscription_completed_;
}
inline bool AccountStateNotification::subscription_completed() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountStateNotification.subscription_completed)
  return _internal_subscription_completed();
}
inline void AccountStateNotification::_internal_set_subscription_completed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  subscription_completed_ = value;
}
inline void AccountStateNotification::set_subscription_completed(bool value) {
  _internal_set_subscription_completed(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountStateNotification.subscription_completed)
}

// -------------------------------------------------------------------

// GameAccountStateNotification

// optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
inline bool GameAccountStateNotification::_internal_has_game_account_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_account_state_ != nullptr);
  return value;
}
inline bool GameAccountStateNotification::has_game_account_state() const {
  return _internal_has_game_account_state();
}
inline const ::bgs::protocol::account::v1::GameAccountState& GameAccountStateNotification::_internal_game_account_state() const {
  const ::bgs::protocol::account::v1::GameAccountState* p = game_account_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountState*>(
      &::bgs::protocol::account::v1::_GameAccountState_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountState& GameAccountStateNotification::game_account_state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountStateNotification.game_account_state)
  return _internal_game_account_state();
}
inline ::bgs::protocol::account::v1::GameAccountState* GameAccountStateNotification::release_game_account_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountStateNotification.game_account_state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameAccountState* temp = game_account_state_;
  game_account_state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountState* GameAccountStateNotification::_internal_mutable_game_account_state() {
  _has_bits_[0] |= 0x00000001u;
  if (game_account_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountState>(GetArenaNoVirtual());
    game_account_state_ = p;
  }
  return game_account_state_;
}
inline ::bgs::protocol::account::v1::GameAccountState* GameAccountStateNotification::mutable_game_account_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountStateNotification.game_account_state)
  return _internal_mutable_game_account_state();
}
inline void GameAccountStateNotification::set_allocated_game_account_state(::bgs::protocol::account::v1::GameAccountState* game_account_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_state_);
  }
  if (game_account_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_account_state_ = game_account_state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountStateNotification.game_account_state)
}

// optional uint64 subscriber_id = 2 [deprecated = true];
inline bool GameAccountStateNotification::_internal_has_subscriber_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameAccountStateNotification::has_subscriber_id() const {
  return _internal_has_subscriber_id();
}
inline void GameAccountStateNotification::clear_subscriber_id() {
  subscriber_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountStateNotification::_internal_subscriber_id() const {
  return subscriber_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountStateNotification::subscriber_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountStateNotification.subscriber_id)
  return _internal_subscriber_id();
}
inline void GameAccountStateNotification::_internal_set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  subscriber_id_ = value;
}
inline void GameAccountStateNotification::set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subscriber_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountStateNotification.subscriber_id)
}

// optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 3;
inline bool GameAccountStateNotification::_internal_has_game_account_tags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_account_tags_ != nullptr);
  return value;
}
inline bool GameAccountStateNotification::has_game_account_tags() const {
  return _internal_has_game_account_tags();
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& GameAccountStateNotification::_internal_game_account_tags() const {
  const ::bgs::protocol::account::v1::GameAccountFieldTags* p = game_account_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      &::bgs::protocol::account::v1::_GameAccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& GameAccountStateNotification::game_account_tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountStateNotification.game_account_tags)
  return _internal_game_account_tags();
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GameAccountStateNotification::release_game_account_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountStateNotification.game_account_tags)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameAccountFieldTags* temp = game_account_tags_;
  game_account_tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GameAccountStateNotification::_internal_mutable_game_account_tags() {
  _has_bits_[0] |= 0x00000002u;
  if (game_account_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldTags>(GetArenaNoVirtual());
    game_account_tags_ = p;
  }
  return game_account_tags_;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GameAccountStateNotification::mutable_game_account_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountStateNotification.game_account_tags)
  return _internal_mutable_game_account_tags();
}
inline void GameAccountStateNotification::set_allocated_game_account_tags(::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_tags_);
  }
  if (game_account_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_account_tags_ = game_account_tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountStateNotification.game_account_tags)
}

// optional bool subscription_completed = 4;
inline bool GameAccountStateNotification::_internal_has_subscription_completed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameAccountStateNotification::has_subscription_completed() const {
  return _internal_has_subscription_completed();
}
inline void GameAccountStateNotification::clear_subscription_completed() {
  subscription_completed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GameAccountStateNotification::_internal_subscription_completed() const {
  return subscription_completed_;
}
inline bool GameAccountStateNotification::subscription_completed() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountStateNotification.subscription_completed)
  return _internal_subscription_completed();
}
inline void GameAccountStateNotification::_internal_set_subscription_completed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  subscription_completed_ = value;
}
inline void GameAccountStateNotification::set_subscription_completed(bool value) {
  _internal_set_subscription_completed(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountStateNotification.subscription_completed)
}

// -------------------------------------------------------------------

// GameAccountNotification

// repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 1;
inline int GameAccountNotification::_internal_game_accounts_size() const {
  return game_accounts_.size();
}
inline int GameAccountNotification::game_accounts_size() const {
  return _internal_game_accounts_size();
}
inline ::bgs::protocol::account::v1::GameAccountList* GameAccountNotification::mutable_game_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountNotification.game_accounts)
  return game_accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList >*
GameAccountNotification::mutable_game_accounts() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.GameAccountNotification.game_accounts)
  return &game_accounts_;
}
inline const ::bgs::protocol::account::v1::GameAccountList& GameAccountNotification::_internal_game_accounts(int index) const {
  return game_accounts_.Get(index);
}
inline const ::bgs::protocol::account::v1::GameAccountList& GameAccountNotification::game_accounts(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountNotification.game_accounts)
  return _internal_game_accounts(index);
}
inline ::bgs::protocol::account::v1::GameAccountList* GameAccountNotification::_internal_add_game_accounts() {
  return game_accounts_.Add();
}
inline ::bgs::protocol::account::v1::GameAccountList* GameAccountNotification::add_game_accounts() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.GameAccountNotification.game_accounts)
  return _internal_add_game_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList >&
GameAccountNotification::game_accounts() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.GameAccountNotification.game_accounts)
  return game_accounts_;
}

// optional uint64 subscriber_id = 2;
inline bool GameAccountNotification::_internal_has_subscriber_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameAccountNotification::has_subscriber_id() const {
  return _internal_has_subscriber_id();
}
inline void GameAccountNotification::clear_subscriber_id() {
  subscriber_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountNotification::_internal_subscriber_id() const {
  return subscriber_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameAccountNotification::subscriber_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountNotification.subscriber_id)
  return _internal_subscriber_id();
}
inline void GameAccountNotification::_internal_set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  subscriber_id_ = value;
}
inline void GameAccountNotification::set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subscriber_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountNotification.subscriber_id)
}

// optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
inline bool GameAccountNotification::_internal_has_account_tags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_tags_ != nullptr);
  return value;
}
inline bool GameAccountNotification::has_account_tags() const {
  return _internal_has_account_tags();
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& GameAccountNotification::_internal_account_tags() const {
  const ::bgs::protocol::account::v1::AccountFieldTags* p = account_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountFieldTags*>(
      &::bgs::protocol::account::v1::_AccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& GameAccountNotification::account_tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountNotification.account_tags)
  return _internal_account_tags();
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GameAccountNotification::release_account_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountNotification.account_tags)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountFieldTags* temp = account_tags_;
  account_tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GameAccountNotification::_internal_mutable_account_tags() {
  _has_bits_[0] |= 0x00000001u;
  if (account_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldTags>(GetArenaNoVirtual());
    account_tags_ = p;
  }
  return account_tags_;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* GameAccountNotification::mutable_account_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountNotification.account_tags)
  return _internal_mutable_account_tags();
}
inline void GameAccountNotification::set_allocated_account_tags(::bgs::protocol::account::v1::AccountFieldTags* account_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_tags_);
  }
  if (account_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_tags_ = account_tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountNotification.account_tags)
}

// -------------------------------------------------------------------

// GameAccountSessionNotification

// optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
inline bool GameAccountSessionNotification::_internal_has_game_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_account_ != nullptr);
  return value;
}
inline bool GameAccountSessionNotification::has_game_account() const {
  return _internal_has_game_account();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& GameAccountSessionNotification::_internal_game_account() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = game_account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& GameAccountSessionNotification::game_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountSessionNotification.game_account)
  return _internal_game_account();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountSessionNotification::release_game_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountSessionNotification.game_account)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = game_account_;
  game_account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountSessionNotification::_internal_mutable_game_account() {
  _has_bits_[0] |= 0x00000001u;
  if (game_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    game_account_ = p;
  }
  return game_account_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountSessionNotification::mutable_game_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountSessionNotification.game_account)
  return _internal_mutable_game_account();
}
inline void GameAccountSessionNotification::set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_);
  }
  if (game_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_account_ = game_account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountSessionNotification.game_account)
}

// optional .bgs.protocol.account.v1.GameSessionUpdateInfo session_info = 2;
inline bool GameAccountSessionNotification::_internal_has_session_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || session_info_ != nullptr);
  return value;
}
inline bool GameAccountSessionNotification::has_session_info() const {
  return _internal_has_session_info();
}
inline const ::bgs::protocol::account::v1::GameSessionUpdateInfo& GameAccountSessionNotification::_internal_session_info() const {
  const ::bgs::protocol::account::v1::GameSessionUpdateInfo* p = session_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameSessionUpdateInfo*>(
      &::bgs::protocol::account::v1::_GameSessionUpdateInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameSessionUpdateInfo& GameAccountSessionNotification::session_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountSessionNotification.session_info)
  return _internal_session_info();
}
inline ::bgs::protocol::account::v1::GameSessionUpdateInfo* GameAccountSessionNotification::release_session_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountSessionNotification.session_info)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameSessionUpdateInfo* temp = session_info_;
  session_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameSessionUpdateInfo* GameAccountSessionNotification::_internal_mutable_session_info() {
  _has_bits_[0] |= 0x00000002u;
  if (session_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameSessionUpdateInfo>(GetArenaNoVirtual());
    session_info_ = p;
  }
  return session_info_;
}
inline ::bgs::protocol::account::v1::GameSessionUpdateInfo* GameAccountSessionNotification::mutable_session_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountSessionNotification.session_info)
  return _internal_mutable_session_info();
}
inline void GameAccountSessionNotification::set_allocated_session_info(::bgs::protocol::account::v1::GameSessionUpdateInfo* session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_info_);
  }
  if (session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_info_ = session_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountSessionNotification.session_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace account
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2faccount_5fservice_2eproto
