// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/account_types.proto

#include "bgs/low/pb/client/account_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameSessionLocation_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStatus_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameTimeInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IgrId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParentalControlInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivacyInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProgramTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RAFInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace account {
namespace v1 {
class AccountIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountId> _instance;
} _AccountId_default_instance_;
class AccountLicenseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountLicense> _instance;
} _AccountLicense_default_instance_;
class GameAccountHandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountHandle> _instance;
} _GameAccountHandle_default_instance_;
class AccountReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountReference> _instance;
} _AccountReference_default_instance_;
class IdentityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identity> _instance;
} _Identity_default_instance_;
class ProgramTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProgramTag> _instance;
} _ProgramTag_default_instance_;
class RegionTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionTag> _instance;
} _RegionTag_default_instance_;
class AccountFieldTagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountFieldTags> _instance;
} _AccountFieldTags_default_instance_;
class GameAccountFieldTagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountFieldTags> _instance;
} _GameAccountFieldTags_default_instance_;
class AccountFieldOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountFieldOptions> _instance;
} _AccountFieldOptions_default_instance_;
class GameAccountFieldOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountFieldOptions> _instance;
} _GameAccountFieldOptions_default_instance_;
class SubscriberReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberReference> _instance;
} _SubscriberReference_default_instance_;
class AccountLevelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountLevelInfo> _instance;
} _AccountLevelInfo_default_instance_;
class PrivacyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrivacyInfo> _instance;
} _PrivacyInfo_default_instance_;
class ParentalControlInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParentalControlInfo> _instance;
} _ParentalControlInfo_default_instance_;
class GameLevelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameLevelInfo> _instance;
} _GameLevelInfo_default_instance_;
class GameTimeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameTimeInfo> _instance;
} _GameTimeInfo_default_instance_;
class GameTimeRemainingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameTimeRemainingInfo> _instance;
} _GameTimeRemainingInfo_default_instance_;
class GameStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStatus> _instance;
} _GameStatus_default_instance_;
class RAFInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RAFInfo> _instance;
} _RAFInfo_default_instance_;
class GameSessionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSessionInfo> _instance;
} _GameSessionInfo_default_instance_;
class GameSessionUpdateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSessionUpdateInfo> _instance;
} _GameSessionUpdateInfo_default_instance_;
class GameSessionLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSessionLocation> _instance;
} _GameSessionLocation_default_instance_;
class CAISDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAIS> _instance;
} _CAIS_default_instance_;
class GameAccountListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountList> _instance;
} _GameAccountList_default_instance_;
class AccountStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountState> _instance;
} _AccountState_default_instance_;
class AccountStateTaggedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountStateTagged> _instance;
} _AccountStateTagged_default_instance_;
class GameAccountStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountState> _instance;
} _GameAccountState_default_instance_;
class GameAccountStateTaggedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAccountStateTagged> _instance;
} _GameAccountStateTagged_default_instance_;
class AuthorizedDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthorizedData> _instance;
} _AuthorizedData_default_instance_;
class IgrIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IgrId> _instance;
  const ::bgs::protocol::account::v1::GameAccountHandle* game_account_;
  ::PROTOBUF_NAMESPACE_ID::uint32 external_id_;
} _IgrId_default_instance_;
class IgrAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IgrAddress> _instance;
} _IgrAddress_default_instance_;
}  // namespace v1
}  // namespace account
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountFieldOptions_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountFieldOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountFieldOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountFieldTags_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountFieldTags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountFieldTags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_ProgramTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_RegionTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountId_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_AccountLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountLevelInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountLevelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountLevelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountLicense_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountLicense();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountLicense::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_AccountReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountReference_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountState_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_AccountLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_PrivacyInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_ParentalControlInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameStatus_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_AccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AccountStateTagged_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AccountStateTagged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AccountStateTagged::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_AuthorizedData_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_AuthorizedData_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::AuthorizedData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::AuthorizedData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthorizedData_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthorizedData_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_CAIS_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::CAIS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::CAIS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountFieldOptions_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountFieldOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountFieldOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountFieldTags_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountFieldTags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountFieldTags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountHandle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountHandle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountList_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountState_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameTimeInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameStatus_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_RAFInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameAccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameAccountStateTagged_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameAccountStateTagged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameAccountStateTagged::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameAccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameAccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameLevelInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameLevelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameLevelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameSessionInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameSessionInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameSessionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameSessionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameSessionInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameSessionInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_GameSessionLocation_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_IgrId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameSessionLocation_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameSessionLocation_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameSessionLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameSessionLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameSessionLocation_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameSessionLocation_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_GameSessionUpdateInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameSessionUpdateInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameSessionUpdateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameSessionUpdateInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameSessionUpdateInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameSessionUpdateInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GameStatus_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameStatus_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStatus_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameStatus_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_GameTimeInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameTimeInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameTimeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameTimeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameTimeInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameTimeInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_GameTimeRemainingInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_GameTimeRemainingInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::GameTimeRemainingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::GameTimeRemainingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameTimeRemainingInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameTimeRemainingInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_Identity_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::Identity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::Identity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_IgrAddress_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_IgrAddress_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::IgrAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::IgrAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IgrAddress_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IgrAddress_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_IgrId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_IgrId_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::IgrId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::IgrId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IgrId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IgrId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ParentalControlInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_ParentalControlInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::ParentalControlInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::ParentalControlInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParentalControlInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParentalControlInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_PrivacyInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_PrivacyInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::PrivacyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::PrivacyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivacyInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrivacyInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ProgramTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_ProgramTag_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::ProgramTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::ProgramTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProgramTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProgramTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_RAFInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_RAFInfo_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::RAFInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::RAFInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RAFInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RAFInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_RegionTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_RegionTag_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::RegionTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::RegionTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegionTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::account::v1::_SubscriberReference_default_instance_;
    new (ptr) ::bgs::protocol::account::v1::SubscriberReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::account::v1::SubscriberReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountId, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLicense, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLicense, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLicense, expires_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountHandle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountHandle, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountHandle, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountHandle, region_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountReference, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountReference, email_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountReference, handle_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountReference, battle_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountReference, region_),
  3,
  0,
  2,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::Identity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::Identity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::Identity, account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::Identity, game_account_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ProgramTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ProgramTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ProgramTag, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ProgramTag, tag_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::RegionTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::RegionTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::RegionTag, region_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::RegionTag, tag_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldTags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldTags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldTags, account_level_info_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldTags, privacy_info_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldTags, parental_control_info_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldTags, game_level_info_tags_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldTags, game_status_tags_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldTags, game_account_tags_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldTags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldTags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldTags, game_level_info_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldTags, game_time_info_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldTags, game_status_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldTags, raf_info_tag_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, all_fields_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, field_account_level_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, field_privacy_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, field_parental_control_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, field_game_level_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, field_game_status_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountFieldOptions, field_game_accounts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldOptions, all_fields_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldOptions, field_game_level_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldOptions, field_game_time_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldOptions, field_game_status_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountFieldOptions, field_raf_info_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, object_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, account_options_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, account_tags_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, game_account_options_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, game_account_tags_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::SubscriberReference, subscriber_id_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, licenses_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, default_currency_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, country_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, preferred_region_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, full_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, battle_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, muted_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, manual_review_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, account_paid_any_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, identity_check_status_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, email_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, headless_account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, test_account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, is_sms_protected_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountLevelInfo, ratings_board_minimum_age_),
  ~0u,
  4,
  0,
  5,
  1,
  2,
  6,
  7,
  8,
  10,
  3,
  9,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::PrivacyInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::PrivacyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::PrivacyInfo, is_using_rid_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::PrivacyInfo, is_visible_for_view_friends_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::PrivacyInfo, is_hidden_from_friend_finder_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::PrivacyInfo, game_info_privacy_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::PrivacyInfo, only_allow_friend_whispers_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, timezone_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, minutes_per_day_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, minutes_per_week_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, can_receive_voice_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, can_send_voice_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, play_schedule_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, can_join_group_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::ParentalControlInfo, can_use_profile_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, is_trial_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, is_lifetime_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, is_restricted_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, is_beta_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, licenses_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameLevelInfo, realm_permissions_),
  1,
  2,
  3,
  4,
  0,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeInfo, is_unlimited_play_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeInfo, play_time_expires_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeInfo, is_subscription_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeInfo, is_recurring_subscription_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeRemainingInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeRemainingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeRemainingInfo, minutes_remaining_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeRemainingInfo, parental_daily_minutes_remaining_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeRemainingInfo, parental_weekly_minutes_remaining_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameTimeRemainingInfo, seconds_remaining_until_kick_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameStatus, is_suspended_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameStatus, is_banned_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameStatus, suspension_expires_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameStatus, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameStatus, is_locked_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameStatus, is_bam_unlockable_),
  1,
  2,
  0,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::RAFInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::RAFInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::RAFInfo, raf_info_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, location_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, has_benefactor_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, is_using_igr_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, parental_controls_active_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, start_time_sec_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionInfo, igr_id_),
  2,
  0,
  3,
  4,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionUpdateInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionUpdateInfo, cais_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionLocation, ip_address_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionLocation, country_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameSessionLocation, city_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::CAIS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::CAIS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::CAIS, played_minutes_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::CAIS, rested_minutes_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::CAIS, last_heard_time_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountList, region_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountList, handle_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountState, account_level_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountState, privacy_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountState, parental_control_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountState, game_level_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountState, game_status_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountState, game_accounts_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateTagged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateTagged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateTagged, account_state_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AccountStateTagged, account_tags_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountState, game_level_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountState, game_time_info_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountState, game_status_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountState, raf_info_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateTagged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateTagged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateTagged, game_account_state_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::GameAccountStateTagged, game_account_tags_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AuthorizedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AuthorizedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AuthorizedData, data_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::AuthorizedData, license_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IgrId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IgrId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IgrId, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::bgs::protocol::account::v1::IgrIdDefaultTypeInternal, game_account_),
  offsetof(::bgs::protocol::account::v1::IgrIdDefaultTypeInternal, external_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IgrId, type_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IgrAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IgrAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IgrAddress, client_address_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::account::v1::IgrAddress, region_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::bgs::protocol::account::v1::AccountId)},
  { 7, 14, sizeof(::bgs::protocol::account::v1::AccountLicense)},
  { 16, 24, sizeof(::bgs::protocol::account::v1::GameAccountHandle)},
  { 27, 37, sizeof(::bgs::protocol::account::v1::AccountReference)},
  { 42, 49, sizeof(::bgs::protocol::account::v1::Identity)},
  { 51, 58, sizeof(::bgs::protocol::account::v1::ProgramTag)},
  { 60, 67, sizeof(::bgs::protocol::account::v1::RegionTag)},
  { 69, 80, sizeof(::bgs::protocol::account::v1::AccountFieldTags)},
  { 86, 95, sizeof(::bgs::protocol::account::v1::GameAccountFieldTags)},
  { 99, 111, sizeof(::bgs::protocol::account::v1::AccountFieldOptions)},
  { 118, 128, sizeof(::bgs::protocol::account::v1::GameAccountFieldOptions)},
  { 133, 145, sizeof(::bgs::protocol::account::v1::SubscriberReference)},
  { 152, 172, sizeof(::bgs::protocol::account::v1::AccountLevelInfo)},
  { 187, 197, sizeof(::bgs::protocol::account::v1::PrivacyInfo)},
  { 202, 215, sizeof(::bgs::protocol::account::v1::ParentalControlInfo)},
  { 223, 236, sizeof(::bgs::protocol::account::v1::GameLevelInfo)},
  { 244, 253, sizeof(::bgs::protocol::account::v1::GameTimeInfo)},
  { 257, 266, sizeof(::bgs::protocol::account::v1::GameTimeRemainingInfo)},
  { 270, 281, sizeof(::bgs::protocol::account::v1::GameStatus)},
  { 287, 293, sizeof(::bgs::protocol::account::v1::RAFInfo)},
  { 294, 306, sizeof(::bgs::protocol::account::v1::GameSessionInfo)},
  { 313, 319, sizeof(::bgs::protocol::account::v1::GameSessionUpdateInfo)},
  { 320, 328, sizeof(::bgs::protocol::account::v1::GameSessionLocation)},
  { 331, 339, sizeof(::bgs::protocol::account::v1::CAIS)},
  { 342, 349, sizeof(::bgs::protocol::account::v1::GameAccountList)},
  { 351, 362, sizeof(::bgs::protocol::account::v1::AccountState)},
  { 368, 375, sizeof(::bgs::protocol::account::v1::AccountStateTagged)},
  { 377, 386, sizeof(::bgs::protocol::account::v1::GameAccountState)},
  { 390, 397, sizeof(::bgs::protocol::account::v1::GameAccountStateTagged)},
  { 399, 406, sizeof(::bgs::protocol::account::v1::AuthorizedData)},
  { 408, 416, sizeof(::bgs::protocol::account::v1::IgrId)},
  { 418, 425, sizeof(::bgs::protocol::account::v1::IgrAddress)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountLicense_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountHandle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_Identity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_ProgramTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_RegionTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountFieldTags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountFieldTags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountFieldOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountFieldOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_SubscriberReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountLevelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_PrivacyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_ParentalControlInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameLevelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameTimeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameTimeRemainingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_RAFInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameSessionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameSessionUpdateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameSessionLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_CAIS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AccountStateTagged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_GameAccountStateTagged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_AuthorizedData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_IgrId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::account::v1::_IgrAddress_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%bgs/low/pb/client/account_types.proto\022"
  "\027bgs.protocol.account.v1\032$bgs/low/pb/cli"
  "ent/entity_types.proto\032!bgs/low/pb/clien"
  "t/rpc_types.proto\")\n\tAccountId\022\024\n\002id\030\001 \002"
  "(\007B\010\212\371+\004\022\002\020\000:\006\202\371+\002\010\001\"-\n\016AccountLicense\022\n"
  "\n\002id\030\001 \002(\r\022\017\n\007expires\030\002 \001(\004\"s\n\021GameAccou"
  "ntHandle\022\024\n\002id\030\001 \002(\007B\010\212\371+\004\022\002\020\000\022\031\n\007progra"
  "m\030\002 \002(\007B\010\212\371+\004\022\002\020\000\022%\n\006region\030\003 \002(\rB\025\212\371+\006\022"
  "\004\n\002\010\001\212\371+\007\022\005\n\003\020\377\001:\006\202\371+\002\010\001\"\220\001\n\020AccountRefe"
  "rence\022\n\n\002id\030\001 \001(\007\022\r\n\005email\030\002 \001(\t\022:\n\006hand"
  "le\030\003 \001(\0132*.bgs.protocol.account.v1.GameA"
  "ccountHandle\022\022\n\nbattle_tag\030\004 \001(\t\022\021\n\006regi"
  "on\030\n \001(\r:\0010\"\211\001\n\010Identity\0223\n\007account\030\001 \001("
  "\0132\".bgs.protocol.account.v1.AccountId\022@\n"
  "\014game_account\030\002 \001(\0132*.bgs.protocol.accou"
  "nt.v1.GameAccountHandle:\006\202\371+\002\020\001\"*\n\nProgr"
  "amTag\022\017\n\007program\030\001 \001(\007\022\013\n\003tag\030\002 \001(\007\"(\n\tR"
  "egionTag\022\016\n\006region\030\001 \001(\007\022\013\n\003tag\030\002 \001(\007\"\260\002"
  "\n\020AccountFieldTags\022\036\n\026account_level_info"
  "_tag\030\002 \001(\007\022\030\n\020privacy_info_tag\030\003 \001(\007\022!\n\031"
  "parental_control_info_tag\030\004 \001(\007\022A\n\024game_"
  "level_info_tags\030\007 \003(\0132#.bgs.protocol.acc"
  "ount.v1.ProgramTag\022=\n\020game_status_tags\030\t"
  " \003(\0132#.bgs.protocol.account.v1.ProgramTa"
  "g\022=\n\021game_account_tags\030\013 \003(\0132\".bgs.proto"
  "col.account.v1.RegionTag\"~\n\024GameAccountF"
  "ieldTags\022\033\n\023game_level_info_tag\030\002 \001(\007\022\032\n"
  "\022game_time_info_tag\030\003 \001(\007\022\027\n\017game_status"
  "_tag\030\004 \001(\007\022\024\n\014raf_info_tag\030\005 \001(\007\"\343\001\n\023Acc"
  "ountFieldOptions\022\022\n\nall_fields\030\001 \001(\010\022 \n\030"
  "field_account_level_info\030\002 \001(\010\022\032\n\022field_"
  "privacy_info\030\003 \001(\010\022#\n\033field_parental_con"
  "trol_info\030\004 \001(\010\022\035\n\025field_game_level_info"
  "\030\006 \001(\010\022\031\n\021field_game_status\030\007 \001(\010\022\033\n\023fie"
  "ld_game_accounts\030\010 \001(\010\"\235\001\n\027GameAccountFi"
  "eldOptions\022\022\n\nall_fields\030\001 \001(\010\022\035\n\025field_"
  "game_level_info\030\002 \001(\010\022\034\n\024field_game_time"
  "_info\030\003 \001(\010\022\031\n\021field_game_status\030\004 \001(\010\022\026"
  "\n\016field_raf_info\030\005 \001(\010\"\222\003\n\023SubscriberRef"
  "erence\022\024\n\tobject_id\030\001 \001(\004:\0010\022)\n\tentity_i"
  "d\030\002 \001(\0132\026.bgs.protocol.EntityId\022E\n\017accou"
  "nt_options\030\003 \001(\0132,.bgs.protocol.account."
  "v1.AccountFieldOptions\022\?\n\014account_tags\030\004"
  " \001(\0132).bgs.protocol.account.v1.AccountFi"
  "eldTags\022N\n\024game_account_options\030\005 \001(\01320."
  "bgs.protocol.account.v1.GameAccountField"
  "Options\022H\n\021game_account_tags\030\006 \001(\0132-.bgs"
  ".protocol.account.v1.GameAccountFieldTag"
  "s\022\030\n\rsubscriber_id\030\007 \001(\004:\0010\"\330\003\n\020AccountL"
  "evelInfo\0229\n\010licenses\030\003 \003(\0132\'.bgs.protoco"
  "l.account.v1.AccountLicense\022\030\n\020default_c"
  "urrency\030\004 \001(\007\022\017\n\007country\030\005 \001(\t\022\030\n\020prefer"
  "red_region\030\006 \001(\r\022\021\n\tfull_name\030\007 \001(\t\022\022\n\nb"
  "attle_tag\030\010 \001(\t\022\r\n\005muted\030\t \001(\010\022\025\n\rmanual"
  "_review\030\n \001(\010\022\030\n\020account_paid_any\030\013 \001(\010\022"
  "a\n\025identity_check_status\030\014 \001(\01623.bgs.pro"
  "tocol.account.v1.IdentityVerificationSta"
  "tus:\rIDENT_NO_DATA\022\r\n\005email\030\r \001(\t\022\030\n\020hea"
  "dless_account\030\016 \001(\010\022\024\n\014test_account\030\017 \001("
  "\010\022\030\n\020is_sms_protected\030\021 \001(\010\022!\n\031ratings_b"
  "oard_minimum_age\030\022 \001(\r\"\302\002\n\013PrivacyInfo\022\024"
  "\n\014is_using_rid\030\003 \001(\010\022#\n\033is_visible_for_v"
  "iew_friends\030\004 \001(\010\022$\n\034is_hidden_from_frie"
  "nd_finder\030\005 \001(\010\022`\n\021game_info_privacy\030\006 \001"
  "(\01624.bgs.protocol.account.v1.PrivacyInfo"
  ".GameInfoPrivacy:\017PRIVACY_FRIENDS\022\"\n\032onl"
  "y_allow_friend_whispers\030\007 \001(\010\"L\n\017GameInf"
  "oPrivacy\022\016\n\nPRIVACY_ME\020\000\022\023\n\017PRIVACY_FRIE"
  "NDS\020\001\022\024\n\020PRIVACY_EVERYONE\020\002\"\325\001\n\023Parental"
  "ControlInfo\022\020\n\010timezone\030\003 \001(\t\022\027\n\017minutes"
  "_per_day\030\004 \001(\r\022\030\n\020minutes_per_week\030\005 \001(\r"
  "\022\031\n\021can_receive_voice\030\006 \001(\010\022\026\n\016can_send_"
  "voice\030\007 \001(\010\022\025\n\rplay_schedule\030\010 \003(\010\022\026\n\016ca"
  "n_join_group\030\t \001(\010\022\027\n\017can_use_profile\030\n "
  "\001(\010\"\323\001\n\rGameLevelInfo\022\020\n\010is_trial\030\004 \001(\010\022"
  "\023\n\013is_lifetime\030\005 \001(\010\022\025\n\ris_restricted\030\006 "
  "\001(\010\022\017\n\007is_beta\030\007 \001(\010\022\014\n\004name\030\010 \001(\t\022\017\n\007pr"
  "ogram\030\t \001(\007\0229\n\010licenses\030\n \003(\0132\'.bgs.prot"
  "ocol.account.v1.AccountLicense\022\031\n\021realm_"
  "permissions\030\013 \001(\r\"\205\001\n\014GameTimeInfo\022\036\n\026is"
  "_unlimited_play_time\030\003 \001(\010\022\031\n\021play_time_"
  "expires\030\005 \001(\004\022\027\n\017is_subscription\030\006 \001(\010\022!"
  "\n\031is_recurring_subscription\030\007 \001(\010\"\261\001\n\025Ga"
  "meTimeRemainingInfo\022\031\n\021minutes_remaining"
  "\030\001 \001(\r\022(\n parental_daily_minutes_remaini"
  "ng\030\002 \001(\r\022)\n!parental_weekly_minutes_rema"
  "ining\030\003 \001(\r\022(\n\034seconds_remaining_until_k"
  "ick\030\004 \001(\rB\002\030\001\"\220\001\n\nGameStatus\022\024\n\014is_suspe"
  "nded\030\004 \001(\010\022\021\n\tis_banned\030\005 \001(\010\022\032\n\022suspens"
  "ion_expires\030\006 \001(\004\022\017\n\007program\030\007 \001(\007\022\021\n\tis"
  "_locked\030\010 \001(\010\022\031\n\021is_bam_unlockable\030\t \001(\010"
  "\"\033\n\007RAFInfo\022\020\n\010raf_info\030\001 \001(\014\"\201\002\n\017GameSe"
  "ssionInfo\022\026\n\nstart_time\030\003 \001(\rB\002\030\001\022>\n\010loc"
  "ation\030\004 \001(\0132,.bgs.protocol.account.v1.Ga"
  "meSessionLocation\022\026\n\016has_benefactor\030\005 \001("
  "\010\022\024\n\014is_using_igr\030\006 \001(\010\022 \n\030parental_cont"
  "rols_active\030\007 \001(\010\022\026\n\016start_time_sec\030\010 \001("
  "\004\022.\n\006igr_id\030\t \001(\0132\036.bgs.protocol.account"
  ".v1.IgrId\"D\n\025GameSessionUpdateInfo\022+\n\004ca"
  "is\030\010 \001(\0132\035.bgs.protocol.account.v1.CAIS\""
  "H\n\023GameSessionLocation\022\022\n\nip_address\030\001 \001"
  "(\t\022\017\n\007country\030\002 \001(\r\022\014\n\004city\030\003 \001(\t\"O\n\004CAI"
  "S\022\026\n\016played_minutes\030\001 \001(\r\022\026\n\016rested_minu"
  "tes\030\002 \001(\r\022\027\n\017last_heard_time\030\003 \001(\004\"]\n\017Ga"
  "meAccountList\022\016\n\006region\030\003 \001(\r\022:\n\006handle\030"
  "\004 \003(\0132*.bgs.protocol.account.v1.GameAcco"
  "untHandle\"\232\003\n\014AccountState\022E\n\022account_le"
  "vel_info\030\001 \001(\0132).bgs.protocol.account.v1"
  ".AccountLevelInfo\022:\n\014privacy_info\030\002 \001(\0132"
  "$.bgs.protocol.account.v1.PrivacyInfo\022K\n"
  "\025parental_control_info\030\003 \001(\0132,.bgs.proto"
  "col.account.v1.ParentalControlInfo\022\?\n\017ga"
  "me_level_info\030\005 \003(\0132&.bgs.protocol.accou"
  "nt.v1.GameLevelInfo\0228\n\013game_status\030\006 \003(\013"
  "2#.bgs.protocol.account.v1.GameStatus\022\?\n"
  "\rgame_accounts\030\007 \003(\0132(.bgs.protocol.acco"
  "unt.v1.GameAccountList\"\223\001\n\022AccountStateT"
  "agged\022<\n\raccount_state\030\001 \001(\0132%.bgs.proto"
  "col.account.v1.AccountState\022\?\n\014account_t"
  "ags\030\002 \001(\0132).bgs.protocol.account.v1.Acco"
  "untFieldTags\"\200\002\n\020GameAccountState\022\?\n\017gam"
  "e_level_info\030\001 \001(\0132&.bgs.protocol.accoun"
  "t.v1.GameLevelInfo\022=\n\016game_time_info\030\002 \001"
  "(\0132%.bgs.protocol.account.v1.GameTimeInf"
  "o\0228\n\013game_status\030\003 \001(\0132#.bgs.protocol.ac"
  "count.v1.GameStatus\0222\n\010raf_info\030\004 \001(\0132 ."
  "bgs.protocol.account.v1.RAFInfo\"\251\001\n\026Game"
  "AccountStateTagged\022E\n\022game_account_state"
  "\030\001 \001(\0132).bgs.protocol.account.v1.GameAcc"
  "ountState\022H\n\021game_account_tags\030\002 \001(\0132-.b"
  "gs.protocol.account.v1.GameAccountFieldT"
  "ags\"/\n\016AuthorizedData\022\014\n\004data\030\001 \001(\t\022\017\n\007l"
  "icense\030\002 \003(\r\"j\n\005IgrId\022B\n\014game_account\030\001 "
  "\001(\0132*.bgs.protocol.account.v1.GameAccoun"
  "tHandleH\000\022\025\n\013external_id\030\002 \001(\007H\000B\006\n\004type"
  "\"4\n\nIgrAddress\022\026\n\016client_address\030\001 \001(\t\022\016"
  "\n\006region\030\002 \001(\r*\265\001\n\032IdentityVerificationS"
  "tatus\022\021\n\rIDENT_NO_DATA\020\000\022\021\n\rIDENT_PENDIN"
  "G\020\001\022\021\n\rIDENT_OVER_18\020\002\022\022\n\016IDENT_UNDER_18"
  "\020\003\022\020\n\014IDENT_FAILED\020\004\022\021\n\rIDENT_SUCCESS\020\005\022"
  "\022\n\016IDENT_SUCC_MNL\020\006\022\021\n\rIDENT_UNKNOWN\020\007"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto_deps[2] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto_sccs[32] = {
  &scc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_AccountLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_AccountReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_AccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_AuthorizedData_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameAccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameSessionInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameSessionLocation_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameSessionUpdateInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameStatus_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameTimeInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_GameTimeRemainingInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_IgrAddress_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_IgrId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_ParentalControlInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_PrivacyInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_ProgramTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_RAFInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_RegionTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
  &scc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto, "bgs/low/pb/client/account_types.proto", 5638,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto_deps, 32, 2,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto, 32, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace account {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrivacyInfo_GameInfoPrivacy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto[0];
}
bool PrivacyInfo_GameInfoPrivacy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PrivacyInfo_GameInfoPrivacy PrivacyInfo::PRIVACY_ME;
constexpr PrivacyInfo_GameInfoPrivacy PrivacyInfo::PRIVACY_FRIENDS;
constexpr PrivacyInfo_GameInfoPrivacy PrivacyInfo::PRIVACY_EVERYONE;
constexpr PrivacyInfo_GameInfoPrivacy PrivacyInfo::GameInfoPrivacy_MIN;
constexpr PrivacyInfo_GameInfoPrivacy PrivacyInfo::GameInfoPrivacy_MAX;
constexpr int PrivacyInfo::GameInfoPrivacy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IdentityVerificationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto[1];
}
bool IdentityVerificationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AccountId::InitAsDefaultInstance() {
}
class AccountId::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountId>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AccountId::AccountId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountId)
}
AccountId::AccountId(const AccountId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountId)
}

void AccountId::SharedCtor() {
  id_ = 0u;
}

AccountId::~AccountId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountId)
  SharedDtor();
}

void AccountId::SharedDtor() {
}

void AccountId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountId& AccountId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AccountId::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 id = 1 [(.bgs.protocol.valid) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 id = 1 [(.bgs.protocol.valid) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountId)
  return target;
}

size_t AccountId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountId)
  size_t total_size = 0;

  // required fixed32 id = 1 [(.bgs.protocol.valid) = {
  if (_internal_has_id()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountId)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountId)
    MergeFrom(*source);
  }
}

void AccountId::MergeFrom(const AccountId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void AccountId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountId::CopyFrom(const AccountId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AccountId::InternalSwap(AccountId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountLicense::InitAsDefaultInstance() {
}
class AccountLicense::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountLicense>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AccountLicense::AccountLicense()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountLicense)
}
AccountLicense::AccountLicense(const AccountLicense& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&expires_, &from.expires_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&expires_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountLicense)
}

void AccountLicense::SharedCtor() {
  ::memset(&expires_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&expires_)) + sizeof(id_));
}

AccountLicense::~AccountLicense() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountLicense)
  SharedDtor();
}

void AccountLicense::SharedDtor() {
}

void AccountLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountLicense& AccountLicense::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountLicense_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AccountLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountLicense)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&expires_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&expires_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountLicense::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 expires = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expires(&has_bits);
          expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountLicense::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountLicense)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 expires = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_expires(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountLicense)
  return target;
}

size_t AccountLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountLicense)
  size_t total_size = 0;

  // required uint32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 expires = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expires());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountLicense::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountLicense)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountLicense* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountLicense>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountLicense)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountLicense)
    MergeFrom(*source);
  }
}

void AccountLicense::MergeFrom(const AccountLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountLicense)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      expires_ = from.expires_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountLicense::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLicense::CopyFrom(const AccountLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLicense::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void AccountLicense::InternalSwap(AccountLicense* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(expires_, other->expires_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLicense::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountHandle::InitAsDefaultInstance() {
}
class GameAccountHandle::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountHandle>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GameAccountHandle::GameAccountHandle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountHandle)
}
GameAccountHandle::GameAccountHandle(const GameAccountHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&id_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountHandle)
}

void GameAccountHandle::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&id_)) + sizeof(region_));
}

GameAccountHandle::~GameAccountHandle() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountHandle)
  SharedDtor();
}

void GameAccountHandle::SharedDtor() {
}

void GameAccountHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountHandle& GameAccountHandle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameAccountHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_) -
        reinterpret_cast<char*>(&id_)) + sizeof(region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 id = 1 [(.bgs.protocol.valid) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required fixed32 program = 2 [(.bgs.protocol.valid) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required uint32 region = 3 [(.bgs.protocol.valid) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountHandle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 id = 1 [(.bgs.protocol.valid) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_id(), target);
  }

  // required fixed32 program = 2 [(.bgs.protocol.valid) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_program(), target);
  }

  // required uint32 region = 3 [(.bgs.protocol.valid) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountHandle)
  return target;
}

size_t GameAccountHandle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.account.v1.GameAccountHandle)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required fixed32 id = 1 [(.bgs.protocol.valid) = {
    total_size += 1 + 4;
  }

  if (_internal_has_program()) {
    // required fixed32 program = 2 [(.bgs.protocol.valid) = {
    total_size += 1 + 4;
  }

  if (_internal_has_region()) {
    // required uint32 region = 3 [(.bgs.protocol.valid) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_region());
  }

  return total_size;
}
size_t GameAccountHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountHandle)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed32 id = 1 [(.bgs.protocol.valid) = {
    total_size += 1 + 4;

    // required fixed32 program = 2 [(.bgs.protocol.valid) = {
    total_size += 1 + 4;

    // required uint32 region = 3 [(.bgs.protocol.valid) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_region());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountHandle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountHandle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountHandle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountHandle)
    MergeFrom(*source);
  }
}

void GameAccountHandle::MergeFrom(const GameAccountHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAccountHandle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountHandle::CopyFrom(const GameAccountHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountHandle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GameAccountHandle::InternalSwap(GameAccountHandle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(program_, other->program_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountHandle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountReference::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_AccountReference_default_instance_._instance.get_mutable()->handle_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class AccountReference::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountReference>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::GameAccountHandle& handle(const AccountReference* msg);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
AccountReference::_Internal::handle(const AccountReference* msg) {
  return *msg->handle_;
}
AccountReference::AccountReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountReference)
}
AccountReference::AccountReference(const AccountReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_battle_tag()) {
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
  if (from._internal_has_handle()) {
    handle_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.handle_);
  } else {
    handle_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&id_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountReference)
}

void AccountReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(region_));
}

AccountReference::~AccountReference() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountReference)
  SharedDtor();
}

void AccountReference::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete handle_;
}

void AccountReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountReference& AccountReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AccountReference::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(handle_ != nullptr);
      handle_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_) -
        reinterpret_cast<char*>(&id_)) + sizeof(region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.AccountReference.email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountHandle handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battle_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.AccountReference.battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_id(), target);
  }

  // optional string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.AccountReference.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // optional .bgs.protocol.account.v1.GameAccountHandle handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::handle(this), target, stream);
  }

  // optional string battle_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_battle_tag().data(), static_cast<int>(this->_internal_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.AccountReference.battle_tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_battle_tag(), target);
  }

  // optional uint32 region = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountReference)
  return target;
}

size_t AccountReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string email = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
    }

    // optional string battle_tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_battle_tag());
    }

    // optional .bgs.protocol.account.v1.GameAccountHandle handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *handle_);
    }

    // optional fixed32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 region = 10 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountReference)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountReference)
    MergeFrom(*source);
  }
}

void AccountReference::MergeFrom(const AccountReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_handle()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountReference::CopyFrom(const AccountReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountReference::IsInitialized() const {
  if (_internal_has_handle()) {
    if (!handle_->IsInitialized()) return false;
  }
  return true;
}

void AccountReference::InternalSwap(AccountReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  battle_tag_.Swap(&other->battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  swap(id_, other->id_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identity::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_Identity_default_instance_._instance.get_mutable()->account_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::account::v1::_Identity_default_instance_._instance.get_mutable()->game_account_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class Identity::_Internal {
 public:
  using HasBits = decltype(std::declval<Identity>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& account(const Identity* msg);
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::GameAccountHandle& game_account(const Identity* msg);
  static void set_has_game_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
Identity::_Internal::account(const Identity* msg) {
  return *msg->account_;
}
const ::bgs::protocol::account::v1::GameAccountHandle&
Identity::_Internal::game_account(const Identity* msg) {
  return *msg->game_account_;
}
Identity::Identity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.Identity)
}
Identity::Identity(const Identity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::bgs::protocol::account::v1::AccountId(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_game_account()) {
    game_account_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.game_account_);
  } else {
    game_account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.Identity)
}

void Identity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_account_) -
      reinterpret_cast<char*>(&account_)) + sizeof(game_account_));
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.Identity)
  SharedDtor();
}

void Identity::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete game_account_;
}

void Identity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identity& Identity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Identity::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.Identity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_ != nullptr);
      account_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_account_ != nullptr);
      game_account_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Identity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.Identity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_account(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.Identity)
  return target;
}

size_t Identity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.Identity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountId account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_);
    }

    // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  const Identity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.Identity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.Identity)
    MergeFrom(*source);
  }
}

void Identity::MergeFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_account()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_game_account());
    }
  }
}

void Identity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identity::CopyFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity::IsInitialized() const {
  if (_internal_has_account()) {
    if (!account_->IsInitialized()) return false;
  }
  if (_internal_has_game_account()) {
    if (!game_account_->IsInitialized()) return false;
  }
  return true;
}

void Identity::InternalSwap(Identity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_, other->account_);
  swap(game_account_, other->game_account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProgramTag::InitAsDefaultInstance() {
}
class ProgramTag::_Internal {
 public:
  using HasBits = decltype(std::declval<ProgramTag>()._has_bits_);
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProgramTag::ProgramTag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.ProgramTag)
}
ProgramTag::ProgramTag(const ProgramTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&program_, &from.program_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&program_)) + sizeof(tag_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.ProgramTag)
}

void ProgramTag::SharedCtor() {
  ::memset(&program_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&program_)) + sizeof(tag_));
}

ProgramTag::~ProgramTag() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.ProgramTag)
  SharedDtor();
}

void ProgramTag::SharedDtor() {
}

void ProgramTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProgramTag& ProgramTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProgramTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ProgramTag::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.ProgramTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&program_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_) -
        reinterpret_cast<char*>(&program_)) + sizeof(tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ProgramTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 program = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProgramTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.ProgramTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 program = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_program(), target);
  }

  // optional fixed32 tag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.ProgramTag)
  return target;
}

size_t ProgramTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.ProgramTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 program = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProgramTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.ProgramTag)
  GOOGLE_DCHECK_NE(&from, this);
  const ProgramTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProgramTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.ProgramTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.ProgramTag)
    MergeFrom(*source);
  }
}

void ProgramTag::MergeFrom(const ProgramTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.ProgramTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000002u) {
      tag_ = from.tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProgramTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.ProgramTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgramTag::CopyFrom(const ProgramTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.ProgramTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramTag::IsInitialized() const {
  return true;
}

void ProgramTag::InternalSwap(ProgramTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(program_, other->program_);
  swap(tag_, other->tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionTag::InitAsDefaultInstance() {
}
class RegionTag::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionTag>()._has_bits_);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RegionTag::RegionTag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.RegionTag)
}
RegionTag::RegionTag(const RegionTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&region_, &from.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&region_)) + sizeof(tag_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.RegionTag)
}

void RegionTag::SharedCtor() {
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&region_)) + sizeof(tag_));
}

RegionTag::~RegionTag() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.RegionTag)
  SharedDtor();
}

void RegionTag::SharedDtor() {
}

void RegionTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionTag& RegionTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionTag_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void RegionTag::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.RegionTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_) -
        reinterpret_cast<char*>(&region_)) + sizeof(tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegionTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.RegionTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_region(), target);
  }

  // optional fixed32 tag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.RegionTag)
  return target;
}

size_t RegionTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.RegionTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 region = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.RegionTag)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.RegionTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.RegionTag)
    MergeFrom(*source);
  }
}

void RegionTag::MergeFrom(const RegionTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.RegionTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000002u) {
      tag_ = from.tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.RegionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionTag::CopyFrom(const RegionTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.RegionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionTag::IsInitialized() const {
  return true;
}

void RegionTag::InternalSwap(RegionTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(tag_, other->tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountFieldTags::InitAsDefaultInstance() {
}
class AccountFieldTags::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountFieldTags>()._has_bits_);
  static void set_has_account_level_info_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privacy_info_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parental_control_info_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AccountFieldTags::AccountFieldTags()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountFieldTags)
}
AccountFieldTags::AccountFieldTags(const AccountFieldTags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      game_level_info_tags_(from.game_level_info_tags_),
      game_status_tags_(from.game_status_tags_),
      game_account_tags_(from.game_account_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_level_info_tag_, &from.account_level_info_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&parental_control_info_tag_) -
    reinterpret_cast<char*>(&account_level_info_tag_)) + sizeof(parental_control_info_tag_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountFieldTags)
}

void AccountFieldTags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ::memset(&account_level_info_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parental_control_info_tag_) -
      reinterpret_cast<char*>(&account_level_info_tag_)) + sizeof(parental_control_info_tag_));
}

AccountFieldTags::~AccountFieldTags() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountFieldTags)
  SharedDtor();
}

void AccountFieldTags::SharedDtor() {
}

void AccountFieldTags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountFieldTags& AccountFieldTags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AccountFieldTags::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountFieldTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_level_info_tags_.Clear();
  game_status_tags_.Clear();
  game_account_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_level_info_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parental_control_info_tag_) -
        reinterpret_cast<char*>(&account_level_info_tag_)) + sizeof(parental_control_info_tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountFieldTags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 account_level_info_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_account_level_info_tag(&has_bits);
          account_level_info_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 privacy_info_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_privacy_info_tag(&has_bits);
          privacy_info_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 parental_control_info_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_parental_control_info_tag(&has_bits);
          parental_control_info_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.account.v1.ProgramTag game_level_info_tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_level_info_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.account.v1.ProgramTag game_status_tags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_status_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.account.v1.RegionTag game_account_tags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_account_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountFieldTags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountFieldTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 account_level_info_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_account_level_info_tag(), target);
  }

  // optional fixed32 privacy_info_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_privacy_info_tag(), target);
  }

  // optional fixed32 parental_control_info_tag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_parental_control_info_tag(), target);
  }

  // repeated .bgs.protocol.account.v1.ProgramTag game_level_info_tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_level_info_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_game_level_info_tags(i), target, stream);
  }

  // repeated .bgs.protocol.account.v1.ProgramTag game_status_tags = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_status_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_game_status_tags(i), target, stream);
  }

  // repeated .bgs.protocol.account.v1.RegionTag game_account_tags = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_account_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_game_account_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountFieldTags)
  return target;
}

size_t AccountFieldTags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountFieldTags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.ProgramTag game_level_info_tags = 7;
  total_size += 1UL * this->_internal_game_level_info_tags_size();
  for (const auto& msg : this->game_level_info_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.account.v1.ProgramTag game_status_tags = 9;
  total_size += 1UL * this->_internal_game_status_tags_size();
  for (const auto& msg : this->game_status_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.account.v1.RegionTag game_account_tags = 11;
  total_size += 1UL * this->_internal_game_account_tags_size();
  for (const auto& msg : this->game_account_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 account_level_info_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 privacy_info_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 parental_control_info_tag = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountFieldTags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountFieldTags)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountFieldTags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountFieldTags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountFieldTags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountFieldTags)
    MergeFrom(*source);
  }
}

void AccountFieldTags::MergeFrom(const AccountFieldTags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountFieldTags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_level_info_tags_.MergeFrom(from.game_level_info_tags_);
  game_status_tags_.MergeFrom(from.game_status_tags_);
  game_account_tags_.MergeFrom(from.game_account_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_level_info_tag_ = from.account_level_info_tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      privacy_info_tag_ = from.privacy_info_tag_;
    }
    if (cached_has_bits & 0x00000004u) {
      parental_control_info_tag_ = from.parental_control_info_tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountFieldTags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountFieldTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountFieldTags::CopyFrom(const AccountFieldTags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountFieldTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountFieldTags::IsInitialized() const {
  return true;
}

void AccountFieldTags::InternalSwap(AccountFieldTags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_level_info_tags_.InternalSwap(&other->game_level_info_tags_);
  game_status_tags_.InternalSwap(&other->game_status_tags_);
  game_account_tags_.InternalSwap(&other->game_account_tags_);
  swap(account_level_info_tag_, other->account_level_info_tag_);
  swap(privacy_info_tag_, other->privacy_info_tag_);
  swap(parental_control_info_tag_, other->parental_control_info_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountFieldTags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountFieldTags::InitAsDefaultInstance() {
}
class GameAccountFieldTags::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountFieldTags>()._has_bits_);
  static void set_has_game_level_info_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_time_info_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_status_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_raf_info_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GameAccountFieldTags::GameAccountFieldTags()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountFieldTags)
}
GameAccountFieldTags::GameAccountFieldTags(const GameAccountFieldTags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_level_info_tag_, &from.game_level_info_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&raf_info_tag_) -
    reinterpret_cast<char*>(&game_level_info_tag_)) + sizeof(raf_info_tag_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountFieldTags)
}

void GameAccountFieldTags::SharedCtor() {
  ::memset(&game_level_info_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raf_info_tag_) -
      reinterpret_cast<char*>(&game_level_info_tag_)) + sizeof(raf_info_tag_));
}

GameAccountFieldTags::~GameAccountFieldTags() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountFieldTags)
  SharedDtor();
}

void GameAccountFieldTags::SharedDtor() {
}

void GameAccountFieldTags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountFieldTags& GameAccountFieldTags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountFieldTags_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameAccountFieldTags::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountFieldTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&game_level_info_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raf_info_tag_) -
        reinterpret_cast<char*>(&game_level_info_tag_)) + sizeof(raf_info_tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountFieldTags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 game_level_info_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_game_level_info_tag(&has_bits);
          game_level_info_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 game_time_info_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_game_time_info_tag(&has_bits);
          game_time_info_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 game_status_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_game_status_tag(&has_bits);
          game_status_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 raf_info_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_raf_info_tag(&has_bits);
          raf_info_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountFieldTags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountFieldTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 game_level_info_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_game_level_info_tag(), target);
  }

  // optional fixed32 game_time_info_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_game_time_info_tag(), target);
  }

  // optional fixed32 game_status_tag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_game_status_tag(), target);
  }

  // optional fixed32 raf_info_tag = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_raf_info_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountFieldTags)
  return target;
}

size_t GameAccountFieldTags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountFieldTags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 game_level_info_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 game_time_info_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 game_status_tag = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 raf_info_tag = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountFieldTags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountFieldTags)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountFieldTags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountFieldTags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountFieldTags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountFieldTags)
    MergeFrom(*source);
  }
}

void GameAccountFieldTags::MergeFrom(const GameAccountFieldTags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountFieldTags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      game_level_info_tag_ = from.game_level_info_tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_time_info_tag_ = from.game_time_info_tag_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_status_tag_ = from.game_status_tag_;
    }
    if (cached_has_bits & 0x00000008u) {
      raf_info_tag_ = from.raf_info_tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAccountFieldTags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountFieldTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountFieldTags::CopyFrom(const GameAccountFieldTags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountFieldTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountFieldTags::IsInitialized() const {
  return true;
}

void GameAccountFieldTags::InternalSwap(GameAccountFieldTags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_level_info_tag_, other->game_level_info_tag_);
  swap(game_time_info_tag_, other->game_time_info_tag_);
  swap(game_status_tag_, other->game_status_tag_);
  swap(raf_info_tag_, other->raf_info_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountFieldTags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountFieldOptions::InitAsDefaultInstance() {
}
class AccountFieldOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountFieldOptions>()._has_bits_);
  static void set_has_all_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_account_level_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_privacy_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_parental_control_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_game_level_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field_game_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_field_game_accounts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

AccountFieldOptions::AccountFieldOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountFieldOptions)
}
AccountFieldOptions::AccountFieldOptions(const AccountFieldOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&all_fields_, &from.all_fields_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_game_accounts_) -
    reinterpret_cast<char*>(&all_fields_)) + sizeof(field_game_accounts_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountFieldOptions)
}

void AccountFieldOptions::SharedCtor() {
  ::memset(&all_fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_game_accounts_) -
      reinterpret_cast<char*>(&all_fields_)) + sizeof(field_game_accounts_));
}

AccountFieldOptions::~AccountFieldOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountFieldOptions)
  SharedDtor();
}

void AccountFieldOptions::SharedDtor() {
}

void AccountFieldOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountFieldOptions& AccountFieldOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AccountFieldOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountFieldOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&all_fields_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_game_accounts_) -
        reinterpret_cast<char*>(&all_fields_)) + sizeof(field_game_accounts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountFieldOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_all_fields(&has_bits);
          all_fields_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_account_level_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field_account_level_info(&has_bits);
          field_account_level_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_privacy_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_field_privacy_info(&has_bits);
          field_privacy_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_parental_control_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_field_parental_control_info(&has_bits);
          field_parental_control_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_game_level_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_field_game_level_info(&has_bits);
          field_game_level_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_game_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_field_game_status(&has_bits);
          field_game_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_game_accounts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_field_game_accounts(&has_bits);
          field_game_accounts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountFieldOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountFieldOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_fields = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_fields(), target);
  }

  // optional bool field_account_level_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_field_account_level_info(), target);
  }

  // optional bool field_privacy_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_field_privacy_info(), target);
  }

  // optional bool field_parental_control_info = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_field_parental_control_info(), target);
  }

  // optional bool field_game_level_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_field_game_level_info(), target);
  }

  // optional bool field_game_status = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_field_game_status(), target);
  }

  // optional bool field_game_accounts = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_field_game_accounts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountFieldOptions)
  return target;
}

size_t AccountFieldOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountFieldOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool all_fields = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool field_account_level_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool field_privacy_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool field_parental_control_info = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool field_game_level_info = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool field_game_status = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool field_game_accounts = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountFieldOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountFieldOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountFieldOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountFieldOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountFieldOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountFieldOptions)
    MergeFrom(*source);
  }
}

void AccountFieldOptions::MergeFrom(const AccountFieldOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountFieldOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      all_fields_ = from.all_fields_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_account_level_info_ = from.field_account_level_info_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_privacy_info_ = from.field_privacy_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      field_parental_control_info_ = from.field_parental_control_info_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_game_level_info_ = from.field_game_level_info_;
    }
    if (cached_has_bits & 0x00000020u) {
      field_game_status_ = from.field_game_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      field_game_accounts_ = from.field_game_accounts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountFieldOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountFieldOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountFieldOptions::CopyFrom(const AccountFieldOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountFieldOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountFieldOptions::IsInitialized() const {
  return true;
}

void AccountFieldOptions::InternalSwap(AccountFieldOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(all_fields_, other->all_fields_);
  swap(field_account_level_info_, other->field_account_level_info_);
  swap(field_privacy_info_, other->field_privacy_info_);
  swap(field_parental_control_info_, other->field_parental_control_info_);
  swap(field_game_level_info_, other->field_game_level_info_);
  swap(field_game_status_, other->field_game_status_);
  swap(field_game_accounts_, other->field_game_accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountFieldOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountFieldOptions::InitAsDefaultInstance() {
}
class GameAccountFieldOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountFieldOptions>()._has_bits_);
  static void set_has_all_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_game_level_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_game_time_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_game_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_raf_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GameAccountFieldOptions::GameAccountFieldOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountFieldOptions)
}
GameAccountFieldOptions::GameAccountFieldOptions(const GameAccountFieldOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&all_fields_, &from.all_fields_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_raf_info_) -
    reinterpret_cast<char*>(&all_fields_)) + sizeof(field_raf_info_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountFieldOptions)
}

void GameAccountFieldOptions::SharedCtor() {
  ::memset(&all_fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_raf_info_) -
      reinterpret_cast<char*>(&all_fields_)) + sizeof(field_raf_info_));
}

GameAccountFieldOptions::~GameAccountFieldOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountFieldOptions)
  SharedDtor();
}

void GameAccountFieldOptions::SharedDtor() {
}

void GameAccountFieldOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountFieldOptions& GameAccountFieldOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountFieldOptions_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameAccountFieldOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountFieldOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&all_fields_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_raf_info_) -
        reinterpret_cast<char*>(&all_fields_)) + sizeof(field_raf_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountFieldOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_all_fields(&has_bits);
          all_fields_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_game_level_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field_game_level_info(&has_bits);
          field_game_level_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_game_time_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_field_game_time_info(&has_bits);
          field_game_time_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_game_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_field_game_status(&has_bits);
          field_game_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool field_raf_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_field_raf_info(&has_bits);
          field_raf_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountFieldOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountFieldOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_fields = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_fields(), target);
  }

  // optional bool field_game_level_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_field_game_level_info(), target);
  }

  // optional bool field_game_time_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_field_game_time_info(), target);
  }

  // optional bool field_game_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_field_game_status(), target);
  }

  // optional bool field_raf_info = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_field_raf_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountFieldOptions)
  return target;
}

size_t GameAccountFieldOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountFieldOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool all_fields = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool field_game_level_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool field_game_time_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool field_game_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool field_raf_info = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountFieldOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountFieldOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountFieldOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountFieldOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountFieldOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountFieldOptions)
    MergeFrom(*source);
  }
}

void GameAccountFieldOptions::MergeFrom(const GameAccountFieldOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountFieldOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      all_fields_ = from.all_fields_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_game_level_info_ = from.field_game_level_info_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_game_time_info_ = from.field_game_time_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      field_game_status_ = from.field_game_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_raf_info_ = from.field_raf_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAccountFieldOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountFieldOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountFieldOptions::CopyFrom(const GameAccountFieldOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountFieldOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountFieldOptions::IsInitialized() const {
  return true;
}

void GameAccountFieldOptions::InternalSwap(GameAccountFieldOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(all_fields_, other->all_fields_);
  swap(field_game_level_info_, other->field_game_level_info_);
  swap(field_game_time_info_, other->field_game_time_info_);
  swap(field_game_status_, other->field_game_status_);
  swap(field_raf_info_, other->field_raf_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountFieldOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriberReference::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_SubscriberReference_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::account::v1::_SubscriberReference_default_instance_._instance.get_mutable()->account_options_ = const_cast< ::bgs::protocol::account::v1::AccountFieldOptions*>(
      ::bgs::protocol::account::v1::AccountFieldOptions::internal_default_instance());
  ::bgs::protocol::account::v1::_SubscriberReference_default_instance_._instance.get_mutable()->account_tags_ = const_cast< ::bgs::protocol::account::v1::AccountFieldTags*>(
      ::bgs::protocol::account::v1::AccountFieldTags::internal_default_instance());
  ::bgs::protocol::account::v1::_SubscriberReference_default_instance_._instance.get_mutable()->game_account_options_ = const_cast< ::bgs::protocol::account::v1::GameAccountFieldOptions*>(
      ::bgs::protocol::account::v1::GameAccountFieldOptions::internal_default_instance());
  ::bgs::protocol::account::v1::_SubscriberReference_default_instance_._instance.get_mutable()->game_account_tags_ = const_cast< ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      ::bgs::protocol::account::v1::GameAccountFieldTags::internal_default_instance());
}
class SubscriberReference::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriberReference>()._has_bits_);
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::bgs::protocol::EntityId& entity_id(const SubscriberReference* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::AccountFieldOptions& account_options(const SubscriberReference* msg);
  static void set_has_account_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::account::v1::AccountFieldTags& account_tags(const SubscriberReference* msg);
  static void set_has_account_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::account::v1::GameAccountFieldOptions& game_account_options(const SubscriberReference* msg);
  static void set_has_game_account_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::account::v1::GameAccountFieldTags& game_account_tags(const SubscriberReference* msg);
  static void set_has_game_account_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_subscriber_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::bgs::protocol::EntityId&
SubscriberReference::_Internal::entity_id(const SubscriberReference* msg) {
  return *msg->entity_id_;
}
const ::bgs::protocol::account::v1::AccountFieldOptions&
SubscriberReference::_Internal::account_options(const SubscriberReference* msg) {
  return *msg->account_options_;
}
const ::bgs::protocol::account::v1::AccountFieldTags&
SubscriberReference::_Internal::account_tags(const SubscriberReference* msg) {
  return *msg->account_tags_;
}
const ::bgs::protocol::account::v1::GameAccountFieldOptions&
SubscriberReference::_Internal::game_account_options(const SubscriberReference* msg) {
  return *msg->game_account_options_;
}
const ::bgs::protocol::account::v1::GameAccountFieldTags&
SubscriberReference::_Internal::game_account_tags(const SubscriberReference* msg) {
  return *msg->game_account_tags_;
}
void SubscriberReference::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubscriberReference::SubscriberReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.SubscriberReference)
}
SubscriberReference::SubscriberReference(const SubscriberReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  if (from._internal_has_account_options()) {
    account_options_ = new ::bgs::protocol::account::v1::AccountFieldOptions(*from.account_options_);
  } else {
    account_options_ = nullptr;
  }
  if (from._internal_has_account_tags()) {
    account_tags_ = new ::bgs::protocol::account::v1::AccountFieldTags(*from.account_tags_);
  } else {
    account_tags_ = nullptr;
  }
  if (from._internal_has_game_account_options()) {
    game_account_options_ = new ::bgs::protocol::account::v1::GameAccountFieldOptions(*from.game_account_options_);
  } else {
    game_account_options_ = nullptr;
  }
  if (from._internal_has_game_account_tags()) {
    game_account_tags_ = new ::bgs::protocol::account::v1::GameAccountFieldTags(*from.game_account_tags_);
  } else {
    game_account_tags_ = nullptr;
  }
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscriber_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(subscriber_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.SubscriberReference)
}

void SubscriberReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscriber_id_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(subscriber_id_));
}

SubscriberReference::~SubscriberReference() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.SubscriberReference)
  SharedDtor();
}

void SubscriberReference::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
  if (this != internal_default_instance()) delete account_options_;
  if (this != internal_default_instance()) delete account_tags_;
  if (this != internal_default_instance()) delete game_account_options_;
  if (this != internal_default_instance()) delete game_account_tags_;
}

void SubscriberReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriberReference& SubscriberReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriberReference_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void SubscriberReference::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.SubscriberReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(entity_id_ != nullptr);
      entity_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(account_options_ != nullptr);
      account_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(account_tags_ != nullptr);
      account_tags_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(game_account_options_ != nullptr);
      game_account_options_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(game_account_tags_ != nullptr);
      game_account_tags_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&object_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subscriber_id_) -
        reinterpret_cast<char*>(&object_id_)) + sizeof(subscriber_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscriberReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 object_id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.AccountFieldOptions account_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountFieldOptions game_account_options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 subscriber_id = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_subscriber_id(&has_bits);
          subscriber_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriberReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.SubscriberReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 object_id = 1 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // optional .bgs.protocol.EntityId entity_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_id(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.AccountFieldOptions account_options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::account_options(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::account_tags(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameAccountFieldOptions game_account_options = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::game_account_options(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::game_account_tags(this), target, stream);
  }

  // optional uint64 subscriber_id = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_subscriber_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.SubscriberReference)
  return target;
}

size_t SubscriberReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.SubscriberReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .bgs.protocol.EntityId entity_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_id_);
    }

    // optional .bgs.protocol.account.v1.AccountFieldOptions account_options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_options_);
    }

    // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_tags_);
    }

    // optional .bgs.protocol.account.v1.GameAccountFieldOptions game_account_options = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_options_);
    }

    // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_tags_);
    }

    // optional uint64 object_id = 1 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_object_id());
    }

    // optional uint64 subscriber_id = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subscriber_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.SubscriberReference)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriberReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.SubscriberReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.SubscriberReference)
    MergeFrom(*source);
  }
}

void SubscriberReference::MergeFrom(const SubscriberReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.SubscriberReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_account_options()->::bgs::protocol::account::v1::AccountFieldOptions::MergeFrom(from._internal_account_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_account_tags()->::bgs::protocol::account::v1::AccountFieldTags::MergeFrom(from._internal_account_tags());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_game_account_options()->::bgs::protocol::account::v1::GameAccountFieldOptions::MergeFrom(from._internal_game_account_options());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_game_account_tags()->::bgs::protocol::account::v1::GameAccountFieldTags::MergeFrom(from._internal_game_account_tags());
    }
    if (cached_has_bits & 0x00000020u) {
      object_id_ = from.object_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      subscriber_id_ = from.subscriber_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriberReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.SubscriberReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberReference::CopyFrom(const SubscriberReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.SubscriberReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberReference::IsInitialized() const {
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscriberReference::InternalSwap(SubscriberReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_id_, other->entity_id_);
  swap(account_options_, other->account_options_);
  swap(account_tags_, other->account_tags_);
  swap(game_account_options_, other->game_account_options_);
  swap(game_account_tags_, other->game_account_tags_);
  swap(object_id_, other->object_id_);
  swap(subscriber_id_, other->subscriber_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountLevelInfo::InitAsDefaultInstance() {
}
class AccountLevelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountLevelInfo>()._has_bits_);
  static void set_has_default_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_region(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_review(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_account_paid_any(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_identity_check_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_headless_account(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_test_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_sms_protected(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ratings_board_minimum_age(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

AccountLevelInfo::AccountLevelInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountLevelInfo)
}
AccountLevelInfo::AccountLevelInfo(const AccountLevelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      licenses_(from.licenses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name()) {
    full_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_name_);
  }
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_battle_tag()) {
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  ::memcpy(&default_currency_, &from.default_currency_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratings_board_minimum_age_) -
    reinterpret_cast<char*>(&default_currency_)) + sizeof(ratings_board_minimum_age_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountLevelInfo)
}

void AccountLevelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_currency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratings_board_minimum_age_) -
      reinterpret_cast<char*>(&default_currency_)) + sizeof(ratings_board_minimum_age_));
}

AccountLevelInfo::~AccountLevelInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountLevelInfo)
  SharedDtor();
}

void AccountLevelInfo::SharedDtor() {
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountLevelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountLevelInfo& AccountLevelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AccountLevelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licenses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      country_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      full_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      email_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&default_currency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_review_) -
        reinterpret_cast<char*>(&default_currency_)) + sizeof(manual_review_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&account_paid_any_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ratings_board_minimum_age_) -
        reinterpret_cast<char*>(&account_paid_any_)) + sizeof(ratings_board_minimum_age_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountLevelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.account.v1.AccountLicense licenses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_licenses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed32 default_currency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_default_currency(&has_bits);
          default_currency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string country = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.AccountLevelInfo.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 preferred_region = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_preferred_region(&has_bits);
          preferred_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.AccountLevelInfo.full_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battle_tag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.AccountLevelInfo.battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool muted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_muted(&has_bits);
          muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manual_review = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_manual_review(&has_bits);
          manual_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool account_paid_any = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_account_paid_any(&has_bits);
          account_paid_any_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.IdentityVerificationStatus identity_check_status = 12 [default = IDENT_NO_DATA];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::account::v1::IdentityVerificationStatus_IsValid(val))) {
            _internal_set_identity_check_status(static_cast<::bgs::protocol::account::v1::IdentityVerificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string email = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.AccountLevelInfo.email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool headless_account = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_headless_account(&has_bits);
          headless_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool test_account = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_test_account(&has_bits);
          test_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_sms_protected = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_sms_protected(&has_bits);
          is_sms_protected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ratings_board_minimum_age = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_ratings_board_minimum_age(&has_bits);
          ratings_board_minimum_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountLevelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_licenses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_licenses(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed32 default_currency = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_default_currency(), target);
  }

  // optional string country = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.AccountLevelInfo.country");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country(), target);
  }

  // optional uint32 preferred_region = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_preferred_region(), target);
  }

  // optional string full_name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.AccountLevelInfo.full_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_full_name(), target);
  }

  // optional string battle_tag = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_battle_tag().data(), static_cast<int>(this->_internal_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.AccountLevelInfo.battle_tag");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_battle_tag(), target);
  }

  // optional bool muted = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_muted(), target);
  }

  // optional bool manual_review = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_manual_review(), target);
  }

  // optional bool account_paid_any = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_account_paid_any(), target);
  }

  // optional .bgs.protocol.account.v1.IdentityVerificationStatus identity_check_status = 12 [default = IDENT_NO_DATA];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_identity_check_status(), target);
  }

  // optional string email = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.AccountLevelInfo.email");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_email(), target);
  }

  // optional bool headless_account = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_headless_account(), target);
  }

  // optional bool test_account = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_test_account(), target);
  }

  // optional bool is_sms_protected = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_sms_protected(), target);
  }

  // optional uint32 ratings_board_minimum_age = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ratings_board_minimum_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountLevelInfo)
  return target;
}

size_t AccountLevelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountLevelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 3;
  total_size += 1UL * this->_internal_licenses_size();
  for (const auto& msg : this->licenses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string full_name = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

    // optional string battle_tag = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_battle_tag());
    }

    // optional string email = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
    }

    // optional fixed32 default_currency = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 preferred_region = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_preferred_region());
    }

    // optional bool muted = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool manual_review = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool account_paid_any = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool headless_account = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.account.v1.IdentityVerificationStatus identity_check_status = 12 [default = IDENT_NO_DATA];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_identity_check_status());
    }

    // optional bool test_account = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_sms_protected = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 ratings_board_minimum_age = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ratings_board_minimum_age());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountLevelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountLevelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountLevelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountLevelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountLevelInfo)
    MergeFrom(*source);
  }
}

void AccountLevelInfo::MergeFrom(const AccountLevelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  licenses_.MergeFrom(from.licenses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      full_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000010u) {
      default_currency_ = from.default_currency_;
    }
    if (cached_has_bits & 0x00000020u) {
      preferred_region_ = from.preferred_region_;
    }
    if (cached_has_bits & 0x00000040u) {
      muted_ = from.muted_;
    }
    if (cached_has_bits & 0x00000080u) {
      manual_review_ = from.manual_review_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      account_paid_any_ = from.account_paid_any_;
    }
    if (cached_has_bits & 0x00000200u) {
      headless_account_ = from.headless_account_;
    }
    if (cached_has_bits & 0x00000400u) {
      identity_check_status_ = from.identity_check_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      test_account_ = from.test_account_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_sms_protected_ = from.is_sms_protected_;
    }
    if (cached_has_bits & 0x00002000u) {
      ratings_board_minimum_age_ = from.ratings_board_minimum_age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountLevelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLevelInfo::CopyFrom(const AccountLevelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLevelInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(licenses_)) return false;
  return true;
}

void AccountLevelInfo::InternalSwap(AccountLevelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  licenses_.InternalSwap(&other->licenses_);
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  full_name_.Swap(&other->full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  battle_tag_.Swap(&other->battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_currency_, other->default_currency_);
  swap(preferred_region_, other->preferred_region_);
  swap(muted_, other->muted_);
  swap(manual_review_, other->manual_review_);
  swap(account_paid_any_, other->account_paid_any_);
  swap(headless_account_, other->headless_account_);
  swap(identity_check_status_, other->identity_check_status_);
  swap(test_account_, other->test_account_);
  swap(is_sms_protected_, other->is_sms_protected_);
  swap(ratings_board_minimum_age_, other->ratings_board_minimum_age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLevelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrivacyInfo::InitAsDefaultInstance() {
}
class PrivacyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PrivacyInfo>()._has_bits_);
  static void set_has_is_using_rid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_visible_for_view_friends(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_hidden_from_friend_finder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_info_privacy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_only_allow_friend_whispers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PrivacyInfo::PrivacyInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.PrivacyInfo)
}
PrivacyInfo::PrivacyInfo(const PrivacyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_using_rid_, &from.is_using_rid_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_info_privacy_) -
    reinterpret_cast<char*>(&is_using_rid_)) + sizeof(game_info_privacy_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.PrivacyInfo)
}

void PrivacyInfo::SharedCtor() {
  ::memset(&is_using_rid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_allow_friend_whispers_) -
      reinterpret_cast<char*>(&is_using_rid_)) + sizeof(only_allow_friend_whispers_));
  game_info_privacy_ = 1;
}

PrivacyInfo::~PrivacyInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.PrivacyInfo)
  SharedDtor();
}

void PrivacyInfo::SharedDtor() {
}

void PrivacyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyInfo& PrivacyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrivacyInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void PrivacyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.PrivacyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_using_rid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_allow_friend_whispers_) -
      reinterpret_cast<char*>(&is_using_rid_)) + sizeof(only_allow_friend_whispers_));
  game_info_privacy_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PrivacyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_using_rid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_using_rid(&has_bits);
          is_using_rid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_visible_for_view_friends = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_visible_for_view_friends(&has_bits);
          is_visible_for_view_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hidden_from_friend_finder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_hidden_from_friend_finder(&has_bits);
          is_hidden_from_friend_finder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.PrivacyInfo.GameInfoPrivacy game_info_privacy = 6 [default = PRIVACY_FRIENDS];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy_IsValid(val))) {
            _internal_set_game_info_privacy(static_cast<::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool only_allow_friend_whispers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_only_allow_friend_whispers(&has_bits);
          only_allow_friend_whispers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrivacyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.PrivacyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_using_rid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_using_rid(), target);
  }

  // optional bool is_visible_for_view_friends = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_visible_for_view_friends(), target);
  }

  // optional bool is_hidden_from_friend_finder = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_hidden_from_friend_finder(), target);
  }

  // optional .bgs.protocol.account.v1.PrivacyInfo.GameInfoPrivacy game_info_privacy = 6 [default = PRIVACY_FRIENDS];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_game_info_privacy(), target);
  }

  // optional bool only_allow_friend_whispers = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_only_allow_friend_whispers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.PrivacyInfo)
  return target;
}

size_t PrivacyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.PrivacyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool is_using_rid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_visible_for_view_friends = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_hidden_from_friend_finder = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool only_allow_friend_whispers = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.account.v1.PrivacyInfo.GameInfoPrivacy game_info_privacy = 6 [default = PRIVACY_FRIENDS];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_info_privacy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.PrivacyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrivacyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.PrivacyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.PrivacyInfo)
    MergeFrom(*source);
  }
}

void PrivacyInfo::MergeFrom(const PrivacyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.PrivacyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      is_using_rid_ = from.is_using_rid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_visible_for_view_friends_ = from.is_visible_for_view_friends_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_hidden_from_friend_finder_ = from.is_hidden_from_friend_finder_;
    }
    if (cached_has_bits & 0x00000008u) {
      only_allow_friend_whispers_ = from.only_allow_friend_whispers_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_info_privacy_ = from.game_info_privacy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrivacyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.PrivacyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyInfo::CopyFrom(const PrivacyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.PrivacyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyInfo::IsInitialized() const {
  return true;
}

void PrivacyInfo::InternalSwap(PrivacyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_using_rid_, other->is_using_rid_);
  swap(is_visible_for_view_friends_, other->is_visible_for_view_friends_);
  swap(is_hidden_from_friend_finder_, other->is_hidden_from_friend_finder_);
  swap(only_allow_friend_whispers_, other->only_allow_friend_whispers_);
  swap(game_info_privacy_, other->game_info_privacy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrivacyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParentalControlInfo::InitAsDefaultInstance() {
}
class ParentalControlInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalControlInfo>()._has_bits_);
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_per_day(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minutes_per_week(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_receive_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_send_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_join_group(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_use_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ParentalControlInfo::ParentalControlInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.ParentalControlInfo)
}
ParentalControlInfo::ParentalControlInfo(const ParentalControlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      play_schedule_(from.play_schedule_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timezone()) {
    timezone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  ::memcpy(&minutes_per_day_, &from.minutes_per_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_use_profile_) -
    reinterpret_cast<char*>(&minutes_per_day_)) + sizeof(can_use_profile_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.ParentalControlInfo)
}

void ParentalControlInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParentalControlInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&minutes_per_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_use_profile_) -
      reinterpret_cast<char*>(&minutes_per_day_)) + sizeof(can_use_profile_));
}

ParentalControlInfo::~ParentalControlInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.ParentalControlInfo)
  SharedDtor();
}

void ParentalControlInfo::SharedDtor() {
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParentalControlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParentalControlInfo& ParentalControlInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParentalControlInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ParentalControlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.ParentalControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_schedule_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timezone_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&minutes_per_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_use_profile_) -
        reinterpret_cast<char*>(&minutes_per_day_)) + sizeof(can_use_profile_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParentalControlInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string timezone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.ParentalControlInfo.timezone");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minutes_per_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_minutes_per_day(&has_bits);
          minutes_per_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minutes_per_week = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_minutes_per_week(&has_bits);
          minutes_per_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_receive_voice = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_receive_voice(&has_bits);
          can_receive_voice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_send_voice = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_send_voice(&has_bits);
          can_send_voice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool play_schedule = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_play_schedule(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_play_schedule(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_join_group = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_can_join_group(&has_bits);
          can_join_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_use_profile = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_can_use_profile(&has_bits);
          can_use_profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalControlInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.ParentalControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string timezone = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.ParentalControlInfo.timezone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timezone(), target);
  }

  // optional uint32 minutes_per_day = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_minutes_per_day(), target);
  }

  // optional uint32 minutes_per_week = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_minutes_per_week(), target);
  }

  // optional bool can_receive_voice = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_can_receive_voice(), target);
  }

  // optional bool can_send_voice = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_can_send_voice(), target);
  }

  // repeated bool play_schedule = 8;
  for (int i = 0, n = this->_internal_play_schedule_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_play_schedule(i), target);
  }

  // optional bool can_join_group = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_can_join_group(), target);
  }

  // optional bool can_use_profile = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_can_use_profile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.ParentalControlInfo)
  return target;
}

size_t ParentalControlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.ParentalControlInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool play_schedule = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_play_schedule_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_play_schedule_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string timezone = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezone());
    }

    // optional uint32 minutes_per_day = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_per_day());
    }

    // optional uint32 minutes_per_week = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_per_week());
    }

    // optional bool can_receive_voice = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool can_send_voice = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool can_join_group = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool can_use_profile = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalControlInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.ParentalControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalControlInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalControlInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.ParentalControlInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.ParentalControlInfo)
    MergeFrom(*source);
  }
}

void ParentalControlInfo::MergeFrom(const ParentalControlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.ParentalControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  play_schedule_.MergeFrom(from.play_schedule_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timezone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
    if (cached_has_bits & 0x00000002u) {
      minutes_per_day_ = from.minutes_per_day_;
    }
    if (cached_has_bits & 0x00000004u) {
      minutes_per_week_ = from.minutes_per_week_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_receive_voice_ = from.can_receive_voice_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_send_voice_ = from.can_send_voice_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_join_group_ = from.can_join_group_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_use_profile_ = from.can_use_profile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalControlInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.ParentalControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalControlInfo::CopyFrom(const ParentalControlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.ParentalControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalControlInfo::IsInitialized() const {
  return true;
}

void ParentalControlInfo::InternalSwap(ParentalControlInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  play_schedule_.InternalSwap(&other->play_schedule_);
  timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(minutes_per_day_, other->minutes_per_day_);
  swap(minutes_per_week_, other->minutes_per_week_);
  swap(can_receive_voice_, other->can_receive_voice_);
  swap(can_send_voice_, other->can_send_voice_);
  swap(can_join_group_, other->can_join_group_);
  swap(can_use_profile_, other->can_use_profile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalControlInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameLevelInfo::InitAsDefaultInstance() {
}
class GameLevelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GameLevelInfo>()._has_bits_);
  static void set_has_is_trial(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_restricted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_realm_permissions(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

GameLevelInfo::GameLevelInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameLevelInfo)
}
GameLevelInfo::GameLevelInfo(const GameLevelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      licenses_(from.licenses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&is_trial_, &from.is_trial_,
    static_cast<size_t>(reinterpret_cast<char*>(&realm_permissions_) -
    reinterpret_cast<char*>(&is_trial_)) + sizeof(realm_permissions_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameLevelInfo)
}

void GameLevelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_trial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realm_permissions_) -
      reinterpret_cast<char*>(&is_trial_)) + sizeof(realm_permissions_));
}

GameLevelInfo::~GameLevelInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameLevelInfo)
  SharedDtor();
}

void GameLevelInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameLevelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameLevelInfo& GameLevelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameLevelInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameLevelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licenses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&is_trial_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&realm_permissions_) -
        reinterpret_cast<char*>(&is_trial_)) + sizeof(realm_permissions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameLevelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_trial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_trial(&has_bits);
          is_trial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_lifetime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_lifetime(&has_bits);
          is_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_restricted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_restricted(&has_bits);
          is_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_beta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_beta(&has_bits);
          is_beta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.GameLevelInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.account.v1.AccountLicense licenses = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_licenses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 realm_permissions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_realm_permissions(&has_bits);
          realm_permissions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameLevelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_trial = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_trial(), target);
  }

  // optional bool is_lifetime = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_lifetime(), target);
  }

  // optional bool is_restricted = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_restricted(), target);
  }

  // optional bool is_beta = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_beta(), target);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.GameLevelInfo.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // optional fixed32 program = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_program(), target);
  }

  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_licenses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_licenses(i), target, stream);
  }

  // optional uint32 realm_permissions = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_realm_permissions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameLevelInfo)
  return target;
}

size_t GameLevelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameLevelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 10;
  total_size += 1UL * this->_internal_licenses_size();
  for (const auto& msg : this->licenses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool is_trial = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_lifetime = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_restricted = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_beta = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional fixed32 program = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 realm_permissions = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_realm_permissions());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameLevelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLevelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameLevelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameLevelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameLevelInfo)
    MergeFrom(*source);
  }
}

void GameLevelInfo::MergeFrom(const GameLevelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  licenses_.MergeFrom(from.licenses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_trial_ = from.is_trial_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_lifetime_ = from.is_lifetime_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_restricted_ = from.is_restricted_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_beta_ = from.is_beta_;
    }
    if (cached_has_bits & 0x00000020u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000040u) {
      realm_permissions_ = from.realm_permissions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameLevelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLevelInfo::CopyFrom(const GameLevelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLevelInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(licenses_)) return false;
  return true;
}

void GameLevelInfo::InternalSwap(GameLevelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  licenses_.InternalSwap(&other->licenses_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_trial_, other->is_trial_);
  swap(is_lifetime_, other->is_lifetime_);
  swap(is_restricted_, other->is_restricted_);
  swap(is_beta_, other->is_beta_);
  swap(program_, other->program_);
  swap(realm_permissions_, other->realm_permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameLevelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameTimeInfo::InitAsDefaultInstance() {
}
class GameTimeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GameTimeInfo>()._has_bits_);
  static void set_has_is_unlimited_play_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_play_time_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_subscription(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_recurring_subscription(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GameTimeInfo::GameTimeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameTimeInfo)
}
GameTimeInfo::GameTimeInfo(const GameTimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_time_expires_, &from.play_time_expires_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_recurring_subscription_) -
    reinterpret_cast<char*>(&play_time_expires_)) + sizeof(is_recurring_subscription_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameTimeInfo)
}

void GameTimeInfo::SharedCtor() {
  ::memset(&play_time_expires_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_recurring_subscription_) -
      reinterpret_cast<char*>(&play_time_expires_)) + sizeof(is_recurring_subscription_));
}

GameTimeInfo::~GameTimeInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameTimeInfo)
  SharedDtor();
}

void GameTimeInfo::SharedDtor() {
}

void GameTimeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameTimeInfo& GameTimeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameTimeInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameTimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameTimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&play_time_expires_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_recurring_subscription_) -
        reinterpret_cast<char*>(&play_time_expires_)) + sizeof(is_recurring_subscription_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameTimeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_unlimited_play_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_unlimited_play_time(&has_bits);
          is_unlimited_play_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 play_time_expires = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_play_time_expires(&has_bits);
          play_time_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_subscription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_subscription(&has_bits);
          is_subscription_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_recurring_subscription = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_recurring_subscription(&has_bits);
          is_recurring_subscription_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameTimeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameTimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_unlimited_play_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_unlimited_play_time(), target);
  }

  // optional uint64 play_time_expires = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_play_time_expires(), target);
  }

  // optional bool is_subscription = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_subscription(), target);
  }

  // optional bool is_recurring_subscription = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_recurring_subscription(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameTimeInfo)
  return target;
}

size_t GameTimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameTimeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 play_time_expires = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_play_time_expires());
    }

    // optional bool is_unlimited_play_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_subscription = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_recurring_subscription = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameTimeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameTimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameTimeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameTimeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameTimeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameTimeInfo)
    MergeFrom(*source);
  }
}

void GameTimeInfo::MergeFrom(const GameTimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameTimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      play_time_expires_ = from.play_time_expires_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_unlimited_play_time_ = from.is_unlimited_play_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_subscription_ = from.is_subscription_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_recurring_subscription_ = from.is_recurring_subscription_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameTimeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameTimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTimeInfo::CopyFrom(const GameTimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameTimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTimeInfo::IsInitialized() const {
  return true;
}

void GameTimeInfo::InternalSwap(GameTimeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(play_time_expires_, other->play_time_expires_);
  swap(is_unlimited_play_time_, other->is_unlimited_play_time_);
  swap(is_subscription_, other->is_subscription_);
  swap(is_recurring_subscription_, other->is_recurring_subscription_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameTimeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameTimeRemainingInfo::InitAsDefaultInstance() {
}
class GameTimeRemainingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GameTimeRemainingInfo>()._has_bits_);
  static void set_has_minutes_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parental_daily_minutes_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parental_weekly_minutes_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_remaining_until_kick(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GameTimeRemainingInfo::GameTimeRemainingInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameTimeRemainingInfo)
}
GameTimeRemainingInfo::GameTimeRemainingInfo(const GameTimeRemainingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minutes_remaining_, &from.minutes_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_remaining_until_kick_) -
    reinterpret_cast<char*>(&minutes_remaining_)) + sizeof(seconds_remaining_until_kick_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameTimeRemainingInfo)
}

void GameTimeRemainingInfo::SharedCtor() {
  ::memset(&minutes_remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_remaining_until_kick_) -
      reinterpret_cast<char*>(&minutes_remaining_)) + sizeof(seconds_remaining_until_kick_));
}

GameTimeRemainingInfo::~GameTimeRemainingInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameTimeRemainingInfo)
  SharedDtor();
}

void GameTimeRemainingInfo::SharedDtor() {
}

void GameTimeRemainingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameTimeRemainingInfo& GameTimeRemainingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameTimeRemainingInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameTimeRemainingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameTimeRemainingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&minutes_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_remaining_until_kick_) -
        reinterpret_cast<char*>(&minutes_remaining_)) + sizeof(seconds_remaining_until_kick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameTimeRemainingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 minutes_remaining = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_minutes_remaining(&has_bits);
          minutes_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parental_daily_minutes_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_parental_daily_minutes_remaining(&has_bits);
          parental_daily_minutes_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parental_weekly_minutes_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_parental_weekly_minutes_remaining(&has_bits);
          parental_weekly_minutes_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_remaining_until_kick = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seconds_remaining_until_kick(&has_bits);
          seconds_remaining_until_kick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameTimeRemainingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameTimeRemainingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 minutes_remaining = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_minutes_remaining(), target);
  }

  // optional uint32 parental_daily_minutes_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parental_daily_minutes_remaining(), target);
  }

  // optional uint32 parental_weekly_minutes_remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_parental_weekly_minutes_remaining(), target);
  }

  // optional uint32 seconds_remaining_until_kick = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seconds_remaining_until_kick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameTimeRemainingInfo)
  return target;
}

size_t GameTimeRemainingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameTimeRemainingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 minutes_remaining = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_remaining());
    }

    // optional uint32 parental_daily_minutes_remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parental_daily_minutes_remaining());
    }

    // optional uint32 parental_weekly_minutes_remaining = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parental_weekly_minutes_remaining());
    }

    // optional uint32 seconds_remaining_until_kick = 4 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_remaining_until_kick());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameTimeRemainingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameTimeRemainingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameTimeRemainingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameTimeRemainingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameTimeRemainingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameTimeRemainingInfo)
    MergeFrom(*source);
  }
}

void GameTimeRemainingInfo::MergeFrom(const GameTimeRemainingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameTimeRemainingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      minutes_remaining_ = from.minutes_remaining_;
    }
    if (cached_has_bits & 0x00000002u) {
      parental_daily_minutes_remaining_ = from.parental_daily_minutes_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      parental_weekly_minutes_remaining_ = from.parental_weekly_minutes_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_remaining_until_kick_ = from.seconds_remaining_until_kick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameTimeRemainingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameTimeRemainingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTimeRemainingInfo::CopyFrom(const GameTimeRemainingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameTimeRemainingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTimeRemainingInfo::IsInitialized() const {
  return true;
}

void GameTimeRemainingInfo::InternalSwap(GameTimeRemainingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(minutes_remaining_, other->minutes_remaining_);
  swap(parental_daily_minutes_remaining_, other->parental_daily_minutes_remaining_);
  swap(parental_weekly_minutes_remaining_, other->parental_weekly_minutes_remaining_);
  swap(seconds_remaining_until_kick_, other->seconds_remaining_until_kick_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameTimeRemainingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameStatus::InitAsDefaultInstance() {
}
class GameStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<GameStatus>()._has_bits_);
  static void set_has_is_suspended(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_suspension_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_bam_unlockable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GameStatus::GameStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameStatus)
}
GameStatus::GameStatus(const GameStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&suspension_expires_, &from.suspension_expires_,
    static_cast<size_t>(reinterpret_cast<char*>(&program_) -
    reinterpret_cast<char*>(&suspension_expires_)) + sizeof(program_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameStatus)
}

void GameStatus::SharedCtor() {
  ::memset(&suspension_expires_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_) -
      reinterpret_cast<char*>(&suspension_expires_)) + sizeof(program_));
}

GameStatus::~GameStatus() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameStatus)
  SharedDtor();
}

void GameStatus::SharedDtor() {
}

void GameStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStatus& GameStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStatus_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&suspension_expires_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&program_) -
        reinterpret_cast<char*>(&suspension_expires_)) + sizeof(program_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_suspended = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_suspended(&has_bits);
          is_suspended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_banned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_banned(&has_bits);
          is_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 suspension_expires = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_suspension_expires(&has_bits);
          suspension_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool is_locked = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_locked(&has_bits);
          is_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_bam_unlockable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_bam_unlockable(&has_bits);
          is_bam_unlockable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_suspended = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_suspended(), target);
  }

  // optional bool is_banned = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_banned(), target);
  }

  // optional uint64 suspension_expires = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_suspension_expires(), target);
  }

  // optional fixed32 program = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_program(), target);
  }

  // optional bool is_locked = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_locked(), target);
  }

  // optional bool is_bam_unlockable = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_bam_unlockable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameStatus)
  return target;
}

size_t GameStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 suspension_expires = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_suspension_expires());
    }

    // optional bool is_suspended = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_banned = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_locked = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_bam_unlockable = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional fixed32 program = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameStatus)
    MergeFrom(*source);
  }
}

void GameStatus::MergeFrom(const GameStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      suspension_expires_ = from.suspension_expires_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_suspended_ = from.is_suspended_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_banned_ = from.is_banned_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_locked_ = from.is_locked_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_bam_unlockable_ = from.is_bam_unlockable_;
    }
    if (cached_has_bits & 0x00000020u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatus::CopyFrom(const GameStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatus::IsInitialized() const {
  return true;
}

void GameStatus::InternalSwap(GameStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(suspension_expires_, other->suspension_expires_);
  swap(is_suspended_, other->is_suspended_);
  swap(is_banned_, other->is_banned_);
  swap(is_locked_, other->is_locked_);
  swap(is_bam_unlockable_, other->is_bam_unlockable_);
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RAFInfo::InitAsDefaultInstance() {
}
class RAFInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RAFInfo>()._has_bits_);
  static void set_has_raf_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RAFInfo::RAFInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.RAFInfo)
}
RAFInfo::RAFInfo(const RAFInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raf_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_raf_info()) {
    raf_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raf_info_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.RAFInfo)
}

void RAFInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RAFInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  raf_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RAFInfo::~RAFInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.RAFInfo)
  SharedDtor();
}

void RAFInfo::SharedDtor() {
  raf_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RAFInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RAFInfo& RAFInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RAFInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void RAFInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.RAFInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    raf_info_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RAFInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes raf_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raf_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RAFInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.RAFInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes raf_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_raf_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.RAFInfo)
  return target;
}

size_t RAFInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.RAFInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes raf_info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raf_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RAFInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.RAFInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RAFInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RAFInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.RAFInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.RAFInfo)
    MergeFrom(*source);
  }
}

void RAFInfo::MergeFrom(const RAFInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.RAFInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_raf_info()) {
    _has_bits_[0] |= 0x00000001u;
    raf_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raf_info_);
  }
}

void RAFInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.RAFInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RAFInfo::CopyFrom(const RAFInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.RAFInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RAFInfo::IsInitialized() const {
  return true;
}

void RAFInfo::InternalSwap(RAFInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  raf_info_.Swap(&other->raf_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RAFInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameSessionInfo::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GameSessionInfo_default_instance_._instance.get_mutable()->location_ = const_cast< ::bgs::protocol::account::v1::GameSessionLocation*>(
      ::bgs::protocol::account::v1::GameSessionLocation::internal_default_instance());
  ::bgs::protocol::account::v1::_GameSessionInfo_default_instance_._instance.get_mutable()->igr_id_ = const_cast< ::bgs::protocol::account::v1::IgrId*>(
      ::bgs::protocol::account::v1::IgrId::internal_default_instance());
}
class GameSessionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSessionInfo>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::account::v1::GameSessionLocation& location(const GameSessionInfo* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_benefactor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_using_igr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parental_controls_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::bgs::protocol::account::v1::IgrId& igr_id(const GameSessionInfo* msg);
  static void set_has_igr_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::GameSessionLocation&
GameSessionInfo::_Internal::location(const GameSessionInfo* msg) {
  return *msg->location_;
}
const ::bgs::protocol::account::v1::IgrId&
GameSessionInfo::_Internal::igr_id(const GameSessionInfo* msg) {
  return *msg->igr_id_;
}
GameSessionInfo::GameSessionInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameSessionInfo)
}
GameSessionInfo::GameSessionInfo(const GameSessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::bgs::protocol::account::v1::GameSessionLocation(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_igr_id()) {
    igr_id_ = new ::bgs::protocol::account::v1::IgrId(*from.igr_id_);
  } else {
    igr_id_ = nullptr;
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_sec_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(start_time_sec_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameSessionInfo)
}

void GameSessionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameSessionInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_sec_) -
      reinterpret_cast<char*>(&location_)) + sizeof(start_time_sec_));
}

GameSessionInfo::~GameSessionInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameSessionInfo)
  SharedDtor();
}

void GameSessionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete igr_id_;
}

void GameSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSessionInfo& GameSessionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSessionInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(igr_id_ != nullptr);
      igr_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_sec_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(start_time_sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameSessionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 start_time = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameSessionLocation location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_benefactor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_benefactor(&has_bits);
          has_benefactor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_using_igr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_using_igr(&has_bits);
          is_using_igr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool parental_controls_active = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_parental_controls_active(&has_bits);
          parental_controls_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start_time_sec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_start_time_sec(&has_bits);
          start_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.IgrId igr_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_igr_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSessionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_time = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_time(), target);
  }

  // optional .bgs.protocol.account.v1.GameSessionLocation location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  // optional bool has_benefactor = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_benefactor(), target);
  }

  // optional bool is_using_igr = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_using_igr(), target);
  }

  // optional bool parental_controls_active = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_parental_controls_active(), target);
  }

  // optional uint64 start_time_sec = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_start_time_sec(), target);
  }

  // optional .bgs.protocol.account.v1.IgrId igr_id = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::igr_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameSessionInfo)
  return target;
}

size_t GameSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameSessionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .bgs.protocol.account.v1.GameSessionLocation location = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .bgs.protocol.account.v1.IgrId igr_id = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *igr_id_);
    }

    // optional uint32 start_time = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional bool has_benefactor = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_using_igr = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool parental_controls_active = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint64 start_time_sec = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start_time_sec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSessionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSessionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameSessionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameSessionInfo)
    MergeFrom(*source);
  }
}

void GameSessionInfo::MergeFrom(const GameSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::bgs::protocol::account::v1::GameSessionLocation::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_igr_id()->::bgs::protocol::account::v1::IgrId::MergeFrom(from._internal_igr_id());
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_benefactor_ = from.has_benefactor_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_using_igr_ = from.is_using_igr_;
    }
    if (cached_has_bits & 0x00000020u) {
      parental_controls_active_ = from.parental_controls_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_time_sec_ = from.start_time_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSessionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionInfo::CopyFrom(const GameSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionInfo::IsInitialized() const {
  if (_internal_has_igr_id()) {
    if (!igr_id_->IsInitialized()) return false;
  }
  return true;
}

void GameSessionInfo::InternalSwap(GameSessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(location_, other->location_);
  swap(igr_id_, other->igr_id_);
  swap(start_time_, other->start_time_);
  swap(has_benefactor_, other->has_benefactor_);
  swap(is_using_igr_, other->is_using_igr_);
  swap(parental_controls_active_, other->parental_controls_active_);
  swap(start_time_sec_, other->start_time_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameSessionUpdateInfo::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GameSessionUpdateInfo_default_instance_._instance.get_mutable()->cais_ = const_cast< ::bgs::protocol::account::v1::CAIS*>(
      ::bgs::protocol::account::v1::CAIS::internal_default_instance());
}
class GameSessionUpdateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSessionUpdateInfo>()._has_bits_);
  static const ::bgs::protocol::account::v1::CAIS& cais(const GameSessionUpdateInfo* msg);
  static void set_has_cais(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::CAIS&
GameSessionUpdateInfo::_Internal::cais(const GameSessionUpdateInfo* msg) {
  return *msg->cais_;
}
GameSessionUpdateInfo::GameSessionUpdateInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameSessionUpdateInfo)
}
GameSessionUpdateInfo::GameSessionUpdateInfo(const GameSessionUpdateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cais()) {
    cais_ = new ::bgs::protocol::account::v1::CAIS(*from.cais_);
  } else {
    cais_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameSessionUpdateInfo)
}

void GameSessionUpdateInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameSessionUpdateInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  cais_ = nullptr;
}

GameSessionUpdateInfo::~GameSessionUpdateInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameSessionUpdateInfo)
  SharedDtor();
}

void GameSessionUpdateInfo::SharedDtor() {
  if (this != internal_default_instance()) delete cais_;
}

void GameSessionUpdateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSessionUpdateInfo& GameSessionUpdateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSessionUpdateInfo_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameSessionUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameSessionUpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cais_ != nullptr);
    cais_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameSessionUpdateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.CAIS cais = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cais(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSessionUpdateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameSessionUpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.CAIS cais = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cais(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameSessionUpdateInfo)
  return target;
}

size_t GameSessionUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameSessionUpdateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.CAIS cais = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cais_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSessionUpdateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameSessionUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionUpdateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSessionUpdateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameSessionUpdateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameSessionUpdateInfo)
    MergeFrom(*source);
  }
}

void GameSessionUpdateInfo::MergeFrom(const GameSessionUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameSessionUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cais()) {
    _internal_mutable_cais()->::bgs::protocol::account::v1::CAIS::MergeFrom(from._internal_cais());
  }
}

void GameSessionUpdateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameSessionUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionUpdateInfo::CopyFrom(const GameSessionUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameSessionUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionUpdateInfo::IsInitialized() const {
  return true;
}

void GameSessionUpdateInfo::InternalSwap(GameSessionUpdateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cais_, other->cais_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionUpdateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameSessionLocation::InitAsDefaultInstance() {
}
class GameSessionLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<GameSessionLocation>()._has_bits_);
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_city(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GameSessionLocation::GameSessionLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameSessionLocation)
}
GameSessionLocation::GameSessionLocation(const GameSessionLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip_address()) {
    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_city()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  country_ = from.country_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameSessionLocation)
}

void GameSessionLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameSessionLocation_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_ = 0u;
}

GameSessionLocation::~GameSessionLocation() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameSessionLocation)
  SharedDtor();
}

void GameSessionLocation::SharedDtor() {
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameSessionLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSessionLocation& GameSessionLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSessionLocation_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameSessionLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameSessionLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ip_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      city_.ClearNonDefaultToEmptyNoArena();
    }
  }
  country_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameSessionLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.GameSessionLocation.ip_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_country(&has_bits);
          country_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string city = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.GameSessionLocation.city");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSessionLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameSessionLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.GameSessionLocation.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // optional uint32 country = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_country(), target);
  }

  // optional string city = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.GameSessionLocation.city");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_city(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameSessionLocation)
  return target;
}

size_t GameSessionLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameSessionLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ip_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip_address());
    }

    // optional string city = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_city());
    }

    // optional uint32 country = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_country());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSessionLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameSessionLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSessionLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameSessionLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameSessionLocation)
    MergeFrom(*source);
  }
}

void GameSessionLocation::MergeFrom(const GameSessionLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameSessionLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000004u) {
      country_ = from.country_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSessionLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameSessionLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionLocation::CopyFrom(const GameSessionLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameSessionLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionLocation::IsInitialized() const {
  return true;
}

void GameSessionLocation::InternalSwap(GameSessionLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(country_, other->country_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSessionLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAIS::InitAsDefaultInstance() {
}
class CAIS::_Internal {
 public:
  using HasBits = decltype(std::declval<CAIS>()._has_bits_);
  static void set_has_played_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rested_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_heard_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CAIS::CAIS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.CAIS)
}
CAIS::CAIS(const CAIS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&played_minutes_, &from.played_minutes_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_heard_time_) -
    reinterpret_cast<char*>(&played_minutes_)) + sizeof(last_heard_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.CAIS)
}

void CAIS::SharedCtor() {
  ::memset(&played_minutes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_heard_time_) -
      reinterpret_cast<char*>(&played_minutes_)) + sizeof(last_heard_time_));
}

CAIS::~CAIS() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.CAIS)
  SharedDtor();
}

void CAIS::SharedDtor() {
}

void CAIS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAIS& CAIS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAIS_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void CAIS::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.CAIS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&played_minutes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_heard_time_) -
        reinterpret_cast<char*>(&played_minutes_)) + sizeof(last_heard_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CAIS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 played_minutes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_played_minutes(&has_bits);
          played_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rested_minutes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rested_minutes(&has_bits);
          rested_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_heard_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_heard_time(&has_bits);
          last_heard_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAIS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.CAIS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 played_minutes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_played_minutes(), target);
  }

  // optional uint32 rested_minutes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rested_minutes(), target);
  }

  // optional uint64 last_heard_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_heard_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.CAIS)
  return target;
}

size_t CAIS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.CAIS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 played_minutes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_played_minutes());
    }

    // optional uint32 rested_minutes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rested_minutes());
    }

    // optional uint64 last_heard_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_heard_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAIS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.CAIS)
  GOOGLE_DCHECK_NE(&from, this);
  const CAIS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAIS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.CAIS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.CAIS)
    MergeFrom(*source);
  }
}

void CAIS::MergeFrom(const CAIS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.CAIS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      played_minutes_ = from.played_minutes_;
    }
    if (cached_has_bits & 0x00000002u) {
      rested_minutes_ = from.rested_minutes_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_heard_time_ = from.last_heard_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAIS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.CAIS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAIS::CopyFrom(const CAIS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.CAIS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAIS::IsInitialized() const {
  return true;
}

void CAIS::InternalSwap(CAIS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(played_minutes_, other->played_minutes_);
  swap(rested_minutes_, other->rested_minutes_);
  swap(last_heard_time_, other->last_heard_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAIS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountList::InitAsDefaultInstance() {
}
class GameAccountList::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountList>()._has_bits_);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameAccountList::GameAccountList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountList)
}
GameAccountList::GameAccountList(const GameAccountList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      handle_(from.handle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_ = from.region_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountList)
}

void GameAccountList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  region_ = 0u;
}

GameAccountList::~GameAccountList() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountList)
  SharedDtor();
}

void GameAccountList::SharedDtor() {
}

void GameAccountList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountList& GameAccountList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountList_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameAccountList::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handle_.Clear();
  region_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.account.v1.GameAccountHandle handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_handle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 region = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_region(), target);
  }

  // repeated .bgs.protocol.account.v1.GameAccountHandle handle = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_handle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_handle(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountList)
  return target;
}

size_t GameAccountList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.GameAccountHandle handle = 4;
  total_size += 1UL * this->_internal_handle_size();
  for (const auto& msg : this->handle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 region = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_region());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountList)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountList)
    MergeFrom(*source);
  }
}

void GameAccountList::MergeFrom(const GameAccountList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  handle_.MergeFrom(from.handle_);
  if (from._internal_has_region()) {
    _internal_set_region(from._internal_region());
  }
}

void GameAccountList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountList::CopyFrom(const GameAccountList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(handle_)) return false;
  return true;
}

void GameAccountList::InternalSwap(GameAccountList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  handle_.InternalSwap(&other->handle_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountState::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_AccountState_default_instance_._instance.get_mutable()->account_level_info_ = const_cast< ::bgs::protocol::account::v1::AccountLevelInfo*>(
      ::bgs::protocol::account::v1::AccountLevelInfo::internal_default_instance());
  ::bgs::protocol::account::v1::_AccountState_default_instance_._instance.get_mutable()->privacy_info_ = const_cast< ::bgs::protocol::account::v1::PrivacyInfo*>(
      ::bgs::protocol::account::v1::PrivacyInfo::internal_default_instance());
  ::bgs::protocol::account::v1::_AccountState_default_instance_._instance.get_mutable()->parental_control_info_ = const_cast< ::bgs::protocol::account::v1::ParentalControlInfo*>(
      ::bgs::protocol::account::v1::ParentalControlInfo::internal_default_instance());
}
class AccountState::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountState>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountLevelInfo& account_level_info(const AccountState* msg);
  static void set_has_account_level_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::PrivacyInfo& privacy_info(const AccountState* msg);
  static void set_has_privacy_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::account::v1::ParentalControlInfo& parental_control_info(const AccountState* msg);
  static void set_has_parental_control_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::account::v1::AccountLevelInfo&
AccountState::_Internal::account_level_info(const AccountState* msg) {
  return *msg->account_level_info_;
}
const ::bgs::protocol::account::v1::PrivacyInfo&
AccountState::_Internal::privacy_info(const AccountState* msg) {
  return *msg->privacy_info_;
}
const ::bgs::protocol::account::v1::ParentalControlInfo&
AccountState::_Internal::parental_control_info(const AccountState* msg) {
  return *msg->parental_control_info_;
}
AccountState::AccountState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountState)
}
AccountState::AccountState(const AccountState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      game_level_info_(from.game_level_info_),
      game_status_(from.game_status_),
      game_accounts_(from.game_accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_level_info()) {
    account_level_info_ = new ::bgs::protocol::account::v1::AccountLevelInfo(*from.account_level_info_);
  } else {
    account_level_info_ = nullptr;
  }
  if (from._internal_has_privacy_info()) {
    privacy_info_ = new ::bgs::protocol::account::v1::PrivacyInfo(*from.privacy_info_);
  } else {
    privacy_info_ = nullptr;
  }
  if (from._internal_has_parental_control_info()) {
    parental_control_info_ = new ::bgs::protocol::account::v1::ParentalControlInfo(*from.parental_control_info_);
  } else {
    parental_control_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountState)
}

void AccountState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ::memset(&account_level_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parental_control_info_) -
      reinterpret_cast<char*>(&account_level_info_)) + sizeof(parental_control_info_));
}

AccountState::~AccountState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountState)
  SharedDtor();
}

void AccountState::SharedDtor() {
  if (this != internal_default_instance()) delete account_level_info_;
  if (this != internal_default_instance()) delete privacy_info_;
  if (this != internal_default_instance()) delete parental_control_info_;
}

void AccountState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountState& AccountState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AccountState::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_level_info_.Clear();
  game_status_.Clear();
  game_accounts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_level_info_ != nullptr);
      account_level_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(privacy_info_ != nullptr);
      privacy_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(parental_control_info_ != nullptr);
      parental_control_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountLevelInfo account_level_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_level_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.PrivacyInfo privacy_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_privacy_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.ParentalControlInfo parental_control_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parental_control_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.account.v1.GameLevelInfo game_level_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_level_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.account.v1.GameStatus game_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountLevelInfo account_level_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_level_info(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.PrivacyInfo privacy_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::privacy_info(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.ParentalControlInfo parental_control_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::parental_control_info(this), target, stream);
  }

  // repeated .bgs.protocol.account.v1.GameLevelInfo game_level_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_level_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_game_level_info(i), target, stream);
  }

  // repeated .bgs.protocol.account.v1.GameStatus game_status = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_game_status(i), target, stream);
  }

  // repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_game_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountState)
  return target;
}

size_t AccountState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.account.v1.GameLevelInfo game_level_info = 5;
  total_size += 1UL * this->_internal_game_level_info_size();
  for (const auto& msg : this->game_level_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.account.v1.GameStatus game_status = 6;
  total_size += 1UL * this->_internal_game_status_size();
  for (const auto& msg : this->game_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 7;
  total_size += 1UL * this->_internal_game_accounts_size();
  for (const auto& msg : this->game_accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.account.v1.AccountLevelInfo account_level_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_level_info_);
    }

    // optional .bgs.protocol.account.v1.PrivacyInfo privacy_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *privacy_info_);
    }

    // optional .bgs.protocol.account.v1.ParentalControlInfo parental_control_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parental_control_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountState)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountState)
    MergeFrom(*source);
  }
}

void AccountState::MergeFrom(const AccountState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_level_info_.MergeFrom(from.game_level_info_);
  game_status_.MergeFrom(from.game_status_);
  game_accounts_.MergeFrom(from.game_accounts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_level_info()->::bgs::protocol::account::v1::AccountLevelInfo::MergeFrom(from._internal_account_level_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_privacy_info()->::bgs::protocol::account::v1::PrivacyInfo::MergeFrom(from._internal_privacy_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_parental_control_info()->::bgs::protocol::account::v1::ParentalControlInfo::MergeFrom(from._internal_parental_control_info());
    }
  }
}

void AccountState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountState::CopyFrom(const AccountState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(game_level_info_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(game_accounts_)) return false;
  if (_internal_has_account_level_info()) {
    if (!account_level_info_->IsInitialized()) return false;
  }
  return true;
}

void AccountState::InternalSwap(AccountState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_level_info_.InternalSwap(&other->game_level_info_);
  game_status_.InternalSwap(&other->game_status_);
  game_accounts_.InternalSwap(&other->game_accounts_);
  swap(account_level_info_, other->account_level_info_);
  swap(privacy_info_, other->privacy_info_);
  swap(parental_control_info_, other->parental_control_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountStateTagged::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_AccountStateTagged_default_instance_._instance.get_mutable()->account_state_ = const_cast< ::bgs::protocol::account::v1::AccountState*>(
      ::bgs::protocol::account::v1::AccountState::internal_default_instance());
  ::bgs::protocol::account::v1::_AccountStateTagged_default_instance_._instance.get_mutable()->account_tags_ = const_cast< ::bgs::protocol::account::v1::AccountFieldTags*>(
      ::bgs::protocol::account::v1::AccountFieldTags::internal_default_instance());
}
class AccountStateTagged::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountStateTagged>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountState& account_state(const AccountStateTagged* msg);
  static void set_has_account_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::AccountFieldTags& account_tags(const AccountStateTagged* msg);
  static void set_has_account_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountState&
AccountStateTagged::_Internal::account_state(const AccountStateTagged* msg) {
  return *msg->account_state_;
}
const ::bgs::protocol::account::v1::AccountFieldTags&
AccountStateTagged::_Internal::account_tags(const AccountStateTagged* msg) {
  return *msg->account_tags_;
}
AccountStateTagged::AccountStateTagged()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AccountStateTagged)
}
AccountStateTagged::AccountStateTagged(const AccountStateTagged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_state()) {
    account_state_ = new ::bgs::protocol::account::v1::AccountState(*from.account_state_);
  } else {
    account_state_ = nullptr;
  }
  if (from._internal_has_account_tags()) {
    account_tags_ = new ::bgs::protocol::account::v1::AccountFieldTags(*from.account_tags_);
  } else {
    account_tags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AccountStateTagged)
}

void AccountStateTagged::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ::memset(&account_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_tags_) -
      reinterpret_cast<char*>(&account_state_)) + sizeof(account_tags_));
}

AccountStateTagged::~AccountStateTagged() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AccountStateTagged)
  SharedDtor();
}

void AccountStateTagged::SharedDtor() {
  if (this != internal_default_instance()) delete account_state_;
  if (this != internal_default_instance()) delete account_tags_;
}

void AccountStateTagged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountStateTagged& AccountStateTagged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AccountStateTagged::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AccountStateTagged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_state_ != nullptr);
      account_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(account_tags_ != nullptr);
      account_tags_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountStateTagged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountState account_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountStateTagged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AccountStateTagged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountState account_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_state(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::account_tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AccountStateTagged)
  return target;
}

size_t AccountStateTagged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AccountStateTagged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountState account_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_state_);
    }

    // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_tags_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountStateTagged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AccountStateTagged)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountStateTagged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountStateTagged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AccountStateTagged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AccountStateTagged)
    MergeFrom(*source);
  }
}

void AccountStateTagged::MergeFrom(const AccountStateTagged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AccountStateTagged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_state()->::bgs::protocol::account::v1::AccountState::MergeFrom(from._internal_account_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_account_tags()->::bgs::protocol::account::v1::AccountFieldTags::MergeFrom(from._internal_account_tags());
    }
  }
}

void AccountStateTagged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AccountStateTagged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountStateTagged::CopyFrom(const AccountStateTagged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AccountStateTagged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountStateTagged::IsInitialized() const {
  if (_internal_has_account_state()) {
    if (!account_state_->IsInitialized()) return false;
  }
  return true;
}

void AccountStateTagged::InternalSwap(AccountStateTagged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_state_, other->account_state_);
  swap(account_tags_, other->account_tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountStateTagged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountState::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GameAccountState_default_instance_._instance.get_mutable()->game_level_info_ = const_cast< ::bgs::protocol::account::v1::GameLevelInfo*>(
      ::bgs::protocol::account::v1::GameLevelInfo::internal_default_instance());
  ::bgs::protocol::account::v1::_GameAccountState_default_instance_._instance.get_mutable()->game_time_info_ = const_cast< ::bgs::protocol::account::v1::GameTimeInfo*>(
      ::bgs::protocol::account::v1::GameTimeInfo::internal_default_instance());
  ::bgs::protocol::account::v1::_GameAccountState_default_instance_._instance.get_mutable()->game_status_ = const_cast< ::bgs::protocol::account::v1::GameStatus*>(
      ::bgs::protocol::account::v1::GameStatus::internal_default_instance());
  ::bgs::protocol::account::v1::_GameAccountState_default_instance_._instance.get_mutable()->raf_info_ = const_cast< ::bgs::protocol::account::v1::RAFInfo*>(
      ::bgs::protocol::account::v1::RAFInfo::internal_default_instance());
}
class GameAccountState::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountState>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameLevelInfo& game_level_info(const GameAccountState* msg);
  static void set_has_game_level_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::GameTimeInfo& game_time_info(const GameAccountState* msg);
  static void set_has_game_time_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::account::v1::GameStatus& game_status(const GameAccountState* msg);
  static void set_has_game_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::account::v1::RAFInfo& raf_info(const GameAccountState* msg);
  static void set_has_raf_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::account::v1::GameLevelInfo&
GameAccountState::_Internal::game_level_info(const GameAccountState* msg) {
  return *msg->game_level_info_;
}
const ::bgs::protocol::account::v1::GameTimeInfo&
GameAccountState::_Internal::game_time_info(const GameAccountState* msg) {
  return *msg->game_time_info_;
}
const ::bgs::protocol::account::v1::GameStatus&
GameAccountState::_Internal::game_status(const GameAccountState* msg) {
  return *msg->game_status_;
}
const ::bgs::protocol::account::v1::RAFInfo&
GameAccountState::_Internal::raf_info(const GameAccountState* msg) {
  return *msg->raf_info_;
}
GameAccountState::GameAccountState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountState)
}
GameAccountState::GameAccountState(const GameAccountState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_game_level_info()) {
    game_level_info_ = new ::bgs::protocol::account::v1::GameLevelInfo(*from.game_level_info_);
  } else {
    game_level_info_ = nullptr;
  }
  if (from._internal_has_game_time_info()) {
    game_time_info_ = new ::bgs::protocol::account::v1::GameTimeInfo(*from.game_time_info_);
  } else {
    game_time_info_ = nullptr;
  }
  if (from._internal_has_game_status()) {
    game_status_ = new ::bgs::protocol::account::v1::GameStatus(*from.game_status_);
  } else {
    game_status_ = nullptr;
  }
  if (from._internal_has_raf_info()) {
    raf_info_ = new ::bgs::protocol::account::v1::RAFInfo(*from.raf_info_);
  } else {
    raf_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountState)
}

void GameAccountState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ::memset(&game_level_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raf_info_) -
      reinterpret_cast<char*>(&game_level_info_)) + sizeof(raf_info_));
}

GameAccountState::~GameAccountState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountState)
  SharedDtor();
}

void GameAccountState::SharedDtor() {
  if (this != internal_default_instance()) delete game_level_info_;
  if (this != internal_default_instance()) delete game_time_info_;
  if (this != internal_default_instance()) delete game_status_;
  if (this != internal_default_instance()) delete raf_info_;
}

void GameAccountState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountState& GameAccountState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountState_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameAccountState::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(game_level_info_ != nullptr);
      game_level_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_time_info_ != nullptr);
      game_time_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(game_status_ != nullptr);
      game_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(raf_info_ != nullptr);
      raf_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameLevelInfo game_level_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_level_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameTimeInfo game_time_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_time_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameStatus game_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.RAFInfo raf_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_raf_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameLevelInfo game_level_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_level_info(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameTimeInfo game_time_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_time_info(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameStatus game_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::game_status(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.RAFInfo raf_info = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::raf_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountState)
  return target;
}

size_t GameAccountState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.account.v1.GameLevelInfo game_level_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_level_info_);
    }

    // optional .bgs.protocol.account.v1.GameTimeInfo game_time_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_time_info_);
    }

    // optional .bgs.protocol.account.v1.GameStatus game_status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_status_);
    }

    // optional .bgs.protocol.account.v1.RAFInfo raf_info = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *raf_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountState)
    MergeFrom(*source);
  }
}

void GameAccountState::MergeFrom(const GameAccountState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_level_info()->::bgs::protocol::account::v1::GameLevelInfo::MergeFrom(from._internal_game_level_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_time_info()->::bgs::protocol::account::v1::GameTimeInfo::MergeFrom(from._internal_game_time_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_game_status()->::bgs::protocol::account::v1::GameStatus::MergeFrom(from._internal_game_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_raf_info()->::bgs::protocol::account::v1::RAFInfo::MergeFrom(from._internal_raf_info());
    }
  }
}

void GameAccountState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountState::CopyFrom(const GameAccountState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountState::IsInitialized() const {
  if (_internal_has_game_level_info()) {
    if (!game_level_info_->IsInitialized()) return false;
  }
  return true;
}

void GameAccountState::InternalSwap(GameAccountState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_level_info_, other->game_level_info_);
  swap(game_time_info_, other->game_time_info_);
  swap(game_status_, other->game_status_);
  swap(raf_info_, other->raf_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAccountStateTagged::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_GameAccountStateTagged_default_instance_._instance.get_mutable()->game_account_state_ = const_cast< ::bgs::protocol::account::v1::GameAccountState*>(
      ::bgs::protocol::account::v1::GameAccountState::internal_default_instance());
  ::bgs::protocol::account::v1::_GameAccountStateTagged_default_instance_._instance.get_mutable()->game_account_tags_ = const_cast< ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      ::bgs::protocol::account::v1::GameAccountFieldTags::internal_default_instance());
}
class GameAccountStateTagged::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAccountStateTagged>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountState& game_account_state(const GameAccountStateTagged* msg);
  static void set_has_game_account_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::GameAccountFieldTags& game_account_tags(const GameAccountStateTagged* msg);
  static void set_has_game_account_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::GameAccountState&
GameAccountStateTagged::_Internal::game_account_state(const GameAccountStateTagged* msg) {
  return *msg->game_account_state_;
}
const ::bgs::protocol::account::v1::GameAccountFieldTags&
GameAccountStateTagged::_Internal::game_account_tags(const GameAccountStateTagged* msg) {
  return *msg->game_account_tags_;
}
GameAccountStateTagged::GameAccountStateTagged()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.GameAccountStateTagged)
}
GameAccountStateTagged::GameAccountStateTagged(const GameAccountStateTagged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_game_account_state()) {
    game_account_state_ = new ::bgs::protocol::account::v1::GameAccountState(*from.game_account_state_);
  } else {
    game_account_state_ = nullptr;
  }
  if (from._internal_has_game_account_tags()) {
    game_account_tags_ = new ::bgs::protocol::account::v1::GameAccountFieldTags(*from.game_account_tags_);
  } else {
    game_account_tags_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.GameAccountStateTagged)
}

void GameAccountStateTagged::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameAccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  ::memset(&game_account_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_account_tags_) -
      reinterpret_cast<char*>(&game_account_state_)) + sizeof(game_account_tags_));
}

GameAccountStateTagged::~GameAccountStateTagged() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.GameAccountStateTagged)
  SharedDtor();
}

void GameAccountStateTagged::SharedDtor() {
  if (this != internal_default_instance()) delete game_account_state_;
  if (this != internal_default_instance()) delete game_account_tags_;
}

void GameAccountStateTagged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAccountStateTagged& GameAccountStateTagged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAccountStateTagged_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GameAccountStateTagged::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.GameAccountStateTagged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(game_account_state_ != nullptr);
      game_account_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_account_tags_ != nullptr);
      game_account_tags_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GameAccountStateTagged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAccountStateTagged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.GameAccountStateTagged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_account_state(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_account_tags(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.GameAccountStateTagged)
  return target;
}

size_t GameAccountStateTagged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.GameAccountStateTagged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_state_);
    }

    // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_tags_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAccountStateTagged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.GameAccountStateTagged)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAccountStateTagged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAccountStateTagged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.GameAccountStateTagged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.GameAccountStateTagged)
    MergeFrom(*source);
  }
}

void GameAccountStateTagged::MergeFrom(const GameAccountStateTagged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.GameAccountStateTagged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game_account_state()->::bgs::protocol::account::v1::GameAccountState::MergeFrom(from._internal_game_account_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_account_tags()->::bgs::protocol::account::v1::GameAccountFieldTags::MergeFrom(from._internal_game_account_tags());
    }
  }
}

void GameAccountStateTagged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.GameAccountStateTagged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountStateTagged::CopyFrom(const GameAccountStateTagged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.GameAccountStateTagged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountStateTagged::IsInitialized() const {
  if (_internal_has_game_account_state()) {
    if (!game_account_state_->IsInitialized()) return false;
  }
  return true;
}

void GameAccountStateTagged::InternalSwap(GameAccountStateTagged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_account_state_, other->game_account_state_);
  swap(game_account_tags_, other->game_account_tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAccountStateTagged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthorizedData::InitAsDefaultInstance() {
}
class AuthorizedData::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthorizedData>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AuthorizedData::AuthorizedData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.AuthorizedData)
}
AuthorizedData::AuthorizedData(const AuthorizedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      license_(from.license_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.AuthorizedData)
}

void AuthorizedData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthorizedData_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthorizedData::~AuthorizedData() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.AuthorizedData)
  SharedDtor();
}

void AuthorizedData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthorizedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthorizedData& AuthorizedData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthorizedData_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AuthorizedData::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.AuthorizedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AuthorizedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.AuthorizedData.data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 license = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_license(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_license(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthorizedData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.AuthorizedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.AuthorizedData.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated uint32 license = 2;
  for (int i = 0, n = this->_internal_license_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_license(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.AuthorizedData)
  return target;
}

size_t AuthorizedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.AuthorizedData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 license = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->license_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_license_size());
    total_size += data_size;
  }

  // optional string data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthorizedData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.AuthorizedData)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthorizedData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthorizedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.AuthorizedData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.AuthorizedData)
    MergeFrom(*source);
  }
}

void AuthorizedData::MergeFrom(const AuthorizedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.AuthorizedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  license_.MergeFrom(from.license_);
  if (from._internal_has_data()) {
    _has_bits_[0] |= 0x00000001u;
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void AuthorizedData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.AuthorizedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizedData::CopyFrom(const AuthorizedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.AuthorizedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizedData::IsInitialized() const {
  return true;
}

void AuthorizedData::InternalSwap(AuthorizedData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  license_.InternalSwap(&other->license_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorizedData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IgrId::InitAsDefaultInstance() {
  ::bgs::protocol::account::v1::_IgrId_default_instance_.game_account_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
  ::bgs::protocol::account::v1::_IgrId_default_instance_.external_id_ = 0u;
}
class IgrId::_Internal {
 public:
  using HasBits = decltype(std::declval<IgrId>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& game_account(const IgrId* msg);
};

const ::bgs::protocol::account::v1::GameAccountHandle&
IgrId::_Internal::game_account(const IgrId* msg) {
  return *msg->type_.game_account_;
}
void IgrId::set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (game_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account, submessage_arena);
    }
    set_has_game_account();
    type_.game_account_ = game_account;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.IgrId.game_account)
}
IgrId::IgrId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.IgrId)
}
IgrId::IgrId(const IgrId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kGameAccount: {
      _internal_mutable_game_account()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_game_account());
      break;
    }
    case kExternalId: {
      _internal_set_external_id(from._internal_external_id());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.IgrId)
}

void IgrId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IgrId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  clear_has_type();
}

IgrId::~IgrId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.IgrId)
  SharedDtor();
}

void IgrId::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void IgrId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IgrId& IgrId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IgrId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void IgrId::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:bgs.protocol.account.v1.IgrId)
  switch (type_case()) {
    case kGameAccount: {
      delete type_.game_account_;
      break;
    }
    case kExternalId: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void IgrId::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.IgrId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IgrId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 external_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _internal_set_external_id(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IgrId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.IgrId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kGameAccount: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::game_account(this), target, stream);
      break;
    }
    case kExternalId: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_external_id(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.IgrId)
  return target;
}

size_t IgrId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.IgrId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
    case kGameAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.game_account_);
      break;
    }
    // optional fixed32 external_id = 2;
    case kExternalId: {
      total_size += 1 + 4;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IgrId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.IgrId)
  GOOGLE_DCHECK_NE(&from, this);
  const IgrId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IgrId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.IgrId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.IgrId)
    MergeFrom(*source);
  }
}

void IgrId::MergeFrom(const IgrId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.IgrId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kGameAccount: {
      _internal_mutable_game_account()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_game_account());
      break;
    }
    case kExternalId: {
      _internal_set_external_id(from._internal_external_id());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void IgrId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.IgrId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IgrId::CopyFrom(const IgrId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.IgrId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IgrId::IsInitialized() const {
  switch (type_case()) {
    case kGameAccount: {
      if (has_game_account()) {
        if (!this->game_account().IsInitialized()) return false;
      }
      break;
    }
    case kExternalId: {
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void IgrId::InternalSwap(IgrId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IgrId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IgrAddress::InitAsDefaultInstance() {
}
class IgrAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<IgrAddress>()._has_bits_);
  static void set_has_client_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IgrAddress::IgrAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.account.v1.IgrAddress)
}
IgrAddress::IgrAddress(const IgrAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_address()) {
    client_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_address_);
  }
  region_ = from.region_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.account.v1.IgrAddress)
}

void IgrAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IgrAddress_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  client_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_ = 0u;
}

IgrAddress::~IgrAddress() {
  // @@protoc_insertion_point(destructor:bgs.protocol.account.v1.IgrAddress)
  SharedDtor();
}

void IgrAddress::SharedDtor() {
  client_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IgrAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IgrAddress& IgrAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IgrAddress_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void IgrAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.account.v1.IgrAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_address_.ClearNonDefaultToEmptyNoArena();
  }
  region_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IgrAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string client_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.account.v1.IgrAddress.client_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IgrAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.account.v1.IgrAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_address().data(), static_cast<int>(this->_internal_client_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.account.v1.IgrAddress.client_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_address(), target);
  }

  // optional uint32 region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.account.v1.IgrAddress)
  return target;
}

size_t IgrAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.account.v1.IgrAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string client_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_address());
    }

    // optional uint32 region = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IgrAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.account.v1.IgrAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const IgrAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IgrAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.account.v1.IgrAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.account.v1.IgrAddress)
    MergeFrom(*source);
  }
}

void IgrAddress::MergeFrom(const IgrAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.account.v1.IgrAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      region_ = from.region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IgrAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.account.v1.IgrAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IgrAddress::CopyFrom(const IgrAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.account.v1.IgrAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IgrAddress::IsInitialized() const {
  return true;
}

void IgrAddress::InternalSwap(IgrAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_address_.Swap(&other->client_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IgrAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace account
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountId* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountId >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountId >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountLicense* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountLicense >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountHandle* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountHandle >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountReference* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountReference >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountReference >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::Identity* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::Identity >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::Identity >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::ProgramTag* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::ProgramTag >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::ProgramTag >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::RegionTag* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::RegionTag >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::RegionTag >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountFieldTags* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountFieldTags >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountFieldTags >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountFieldTags* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountFieldTags >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountFieldTags >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountFieldOptions* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountFieldOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountFieldOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountFieldOptions* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountFieldOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountFieldOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::SubscriberReference* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::SubscriberReference >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::SubscriberReference >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountLevelInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountLevelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountLevelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::PrivacyInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::PrivacyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::PrivacyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::ParentalControlInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::ParentalControlInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::ParentalControlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameLevelInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameLevelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameLevelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameTimeInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameTimeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameTimeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameTimeRemainingInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameTimeRemainingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameTimeRemainingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameStatus* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameStatus >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::RAFInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::RAFInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::RAFInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameSessionInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameSessionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameSessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameSessionUpdateInfo* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameSessionUpdateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameSessionUpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameSessionLocation* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameSessionLocation >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameSessionLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::CAIS* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::CAIS >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::CAIS >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountList* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountList >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountList >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountState* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountState >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountState >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AccountStateTagged* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AccountStateTagged >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AccountStateTagged >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountState* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountState >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountState >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::GameAccountStateTagged* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountStateTagged >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::GameAccountStateTagged >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::AuthorizedData* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::AuthorizedData >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::AuthorizedData >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::IgrId* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::IgrId >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::IgrId >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::account::v1::IgrAddress* Arena::CreateMaybeMessage< ::bgs::protocol::account::v1::IgrAddress >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::account::v1::IgrAddress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
