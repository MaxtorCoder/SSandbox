// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/account_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/entity_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace account {
namespace v1 {
class AccountFieldOptions;
class AccountFieldOptionsDefaultTypeInternal;
extern AccountFieldOptionsDefaultTypeInternal _AccountFieldOptions_default_instance_;
class AccountFieldTags;
class AccountFieldTagsDefaultTypeInternal;
extern AccountFieldTagsDefaultTypeInternal _AccountFieldTags_default_instance_;
class AccountId;
class AccountIdDefaultTypeInternal;
extern AccountIdDefaultTypeInternal _AccountId_default_instance_;
class AccountLevelInfo;
class AccountLevelInfoDefaultTypeInternal;
extern AccountLevelInfoDefaultTypeInternal _AccountLevelInfo_default_instance_;
class AccountLicense;
class AccountLicenseDefaultTypeInternal;
extern AccountLicenseDefaultTypeInternal _AccountLicense_default_instance_;
class AccountReference;
class AccountReferenceDefaultTypeInternal;
extern AccountReferenceDefaultTypeInternal _AccountReference_default_instance_;
class AccountState;
class AccountStateDefaultTypeInternal;
extern AccountStateDefaultTypeInternal _AccountState_default_instance_;
class AccountStateTagged;
class AccountStateTaggedDefaultTypeInternal;
extern AccountStateTaggedDefaultTypeInternal _AccountStateTagged_default_instance_;
class AuthorizedData;
class AuthorizedDataDefaultTypeInternal;
extern AuthorizedDataDefaultTypeInternal _AuthorizedData_default_instance_;
class CAIS;
class CAISDefaultTypeInternal;
extern CAISDefaultTypeInternal _CAIS_default_instance_;
class GameAccountFieldOptions;
class GameAccountFieldOptionsDefaultTypeInternal;
extern GameAccountFieldOptionsDefaultTypeInternal _GameAccountFieldOptions_default_instance_;
class GameAccountFieldTags;
class GameAccountFieldTagsDefaultTypeInternal;
extern GameAccountFieldTagsDefaultTypeInternal _GameAccountFieldTags_default_instance_;
class GameAccountHandle;
class GameAccountHandleDefaultTypeInternal;
extern GameAccountHandleDefaultTypeInternal _GameAccountHandle_default_instance_;
class GameAccountList;
class GameAccountListDefaultTypeInternal;
extern GameAccountListDefaultTypeInternal _GameAccountList_default_instance_;
class GameAccountState;
class GameAccountStateDefaultTypeInternal;
extern GameAccountStateDefaultTypeInternal _GameAccountState_default_instance_;
class GameAccountStateTagged;
class GameAccountStateTaggedDefaultTypeInternal;
extern GameAccountStateTaggedDefaultTypeInternal _GameAccountStateTagged_default_instance_;
class GameLevelInfo;
class GameLevelInfoDefaultTypeInternal;
extern GameLevelInfoDefaultTypeInternal _GameLevelInfo_default_instance_;
class GameSessionInfo;
class GameSessionInfoDefaultTypeInternal;
extern GameSessionInfoDefaultTypeInternal _GameSessionInfo_default_instance_;
class GameSessionLocation;
class GameSessionLocationDefaultTypeInternal;
extern GameSessionLocationDefaultTypeInternal _GameSessionLocation_default_instance_;
class GameSessionUpdateInfo;
class GameSessionUpdateInfoDefaultTypeInternal;
extern GameSessionUpdateInfoDefaultTypeInternal _GameSessionUpdateInfo_default_instance_;
class GameStatus;
class GameStatusDefaultTypeInternal;
extern GameStatusDefaultTypeInternal _GameStatus_default_instance_;
class GameTimeInfo;
class GameTimeInfoDefaultTypeInternal;
extern GameTimeInfoDefaultTypeInternal _GameTimeInfo_default_instance_;
class GameTimeRemainingInfo;
class GameTimeRemainingInfoDefaultTypeInternal;
extern GameTimeRemainingInfoDefaultTypeInternal _GameTimeRemainingInfo_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class IgrAddress;
class IgrAddressDefaultTypeInternal;
extern IgrAddressDefaultTypeInternal _IgrAddress_default_instance_;
class IgrId;
class IgrIdDefaultTypeInternal;
extern IgrIdDefaultTypeInternal _IgrId_default_instance_;
class ParentalControlInfo;
class ParentalControlInfoDefaultTypeInternal;
extern ParentalControlInfoDefaultTypeInternal _ParentalControlInfo_default_instance_;
class PrivacyInfo;
class PrivacyInfoDefaultTypeInternal;
extern PrivacyInfoDefaultTypeInternal _PrivacyInfo_default_instance_;
class ProgramTag;
class ProgramTagDefaultTypeInternal;
extern ProgramTagDefaultTypeInternal _ProgramTag_default_instance_;
class RAFInfo;
class RAFInfoDefaultTypeInternal;
extern RAFInfoDefaultTypeInternal _RAFInfo_default_instance_;
class RegionTag;
class RegionTagDefaultTypeInternal;
extern RegionTagDefaultTypeInternal _RegionTag_default_instance_;
class SubscriberReference;
class SubscriberReferenceDefaultTypeInternal;
extern SubscriberReferenceDefaultTypeInternal _SubscriberReference_default_instance_;
}  // namespace v1
}  // namespace account
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::account::v1::AccountFieldOptions* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldOptions>(Arena*);
template<> ::bgs::protocol::account::v1::AccountFieldTags* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldTags>(Arena*);
template<> ::bgs::protocol::account::v1::AccountId* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(Arena*);
template<> ::bgs::protocol::account::v1::AccountLevelInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountLevelInfo>(Arena*);
template<> ::bgs::protocol::account::v1::AccountLicense* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountLicense>(Arena*);
template<> ::bgs::protocol::account::v1::AccountReference* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountReference>(Arena*);
template<> ::bgs::protocol::account::v1::AccountState* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountState>(Arena*);
template<> ::bgs::protocol::account::v1::AccountStateTagged* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AccountStateTagged>(Arena*);
template<> ::bgs::protocol::account::v1::AuthorizedData* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::AuthorizedData>(Arena*);
template<> ::bgs::protocol::account::v1::CAIS* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::CAIS>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountFieldOptions* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldOptions>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountFieldTags* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldTags>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountHandle* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountList* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountList>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountState* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountState>(Arena*);
template<> ::bgs::protocol::account::v1::GameAccountStateTagged* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountStateTagged>(Arena*);
template<> ::bgs::protocol::account::v1::GameLevelInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameLevelInfo>(Arena*);
template<> ::bgs::protocol::account::v1::GameSessionInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameSessionInfo>(Arena*);
template<> ::bgs::protocol::account::v1::GameSessionLocation* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameSessionLocation>(Arena*);
template<> ::bgs::protocol::account::v1::GameSessionUpdateInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameSessionUpdateInfo>(Arena*);
template<> ::bgs::protocol::account::v1::GameStatus* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameStatus>(Arena*);
template<> ::bgs::protocol::account::v1::GameTimeInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameTimeInfo>(Arena*);
template<> ::bgs::protocol::account::v1::GameTimeRemainingInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::GameTimeRemainingInfo>(Arena*);
template<> ::bgs::protocol::account::v1::Identity* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::Identity>(Arena*);
template<> ::bgs::protocol::account::v1::IgrAddress* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::IgrAddress>(Arena*);
template<> ::bgs::protocol::account::v1::IgrId* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::IgrId>(Arena*);
template<> ::bgs::protocol::account::v1::ParentalControlInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::ParentalControlInfo>(Arena*);
template<> ::bgs::protocol::account::v1::PrivacyInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::PrivacyInfo>(Arena*);
template<> ::bgs::protocol::account::v1::ProgramTag* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::ProgramTag>(Arena*);
template<> ::bgs::protocol::account::v1::RAFInfo* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::RAFInfo>(Arena*);
template<> ::bgs::protocol::account::v1::RegionTag* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::RegionTag>(Arena*);
template<> ::bgs::protocol::account::v1::SubscriberReference* Arena::CreateMaybeMessage<::bgs::protocol::account::v1::SubscriberReference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace account {
namespace v1 {

enum PrivacyInfo_GameInfoPrivacy : int {
  PrivacyInfo_GameInfoPrivacy_PRIVACY_ME = 0,
  PrivacyInfo_GameInfoPrivacy_PRIVACY_FRIENDS = 1,
  PrivacyInfo_GameInfoPrivacy_PRIVACY_EVERYONE = 2
};
bool PrivacyInfo_GameInfoPrivacy_IsValid(int value);
constexpr PrivacyInfo_GameInfoPrivacy PrivacyInfo_GameInfoPrivacy_GameInfoPrivacy_MIN = PrivacyInfo_GameInfoPrivacy_PRIVACY_ME;
constexpr PrivacyInfo_GameInfoPrivacy PrivacyInfo_GameInfoPrivacy_GameInfoPrivacy_MAX = PrivacyInfo_GameInfoPrivacy_PRIVACY_EVERYONE;
constexpr int PrivacyInfo_GameInfoPrivacy_GameInfoPrivacy_ARRAYSIZE = PrivacyInfo_GameInfoPrivacy_GameInfoPrivacy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrivacyInfo_GameInfoPrivacy_descriptor();
template<typename T>
inline const std::string& PrivacyInfo_GameInfoPrivacy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrivacyInfo_GameInfoPrivacy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrivacyInfo_GameInfoPrivacy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrivacyInfo_GameInfoPrivacy_descriptor(), enum_t_value);
}
inline bool PrivacyInfo_GameInfoPrivacy_Parse(
    const std::string& name, PrivacyInfo_GameInfoPrivacy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrivacyInfo_GameInfoPrivacy>(
    PrivacyInfo_GameInfoPrivacy_descriptor(), name, value);
}
enum IdentityVerificationStatus : int {
  IDENT_NO_DATA = 0,
  IDENT_PENDING = 1,
  IDENT_OVER_18 = 2,
  IDENT_UNDER_18 = 3,
  IDENT_FAILED = 4,
  IDENT_SUCCESS = 5,
  IDENT_SUCC_MNL = 6,
  IDENT_UNKNOWN = 7
};
bool IdentityVerificationStatus_IsValid(int value);
constexpr IdentityVerificationStatus IdentityVerificationStatus_MIN = IDENT_NO_DATA;
constexpr IdentityVerificationStatus IdentityVerificationStatus_MAX = IDENT_UNKNOWN;
constexpr int IdentityVerificationStatus_ARRAYSIZE = IdentityVerificationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IdentityVerificationStatus_descriptor();
template<typename T>
inline const std::string& IdentityVerificationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IdentityVerificationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IdentityVerificationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IdentityVerificationStatus_descriptor(), enum_t_value);
}
inline bool IdentityVerificationStatus_Parse(
    const std::string& name, IdentityVerificationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IdentityVerificationStatus>(
    IdentityVerificationStatus_descriptor(), name, value);
}
// ===================================================================

class AccountId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountId) */ {
 public:
  AccountId();
  virtual ~AccountId();

  AccountId(const AccountId& from);
  AccountId(AccountId&& from) noexcept
    : AccountId() {
    *this = ::std::move(from);
  }

  inline AccountId& operator=(const AccountId& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountId& operator=(AccountId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountId* internal_default_instance() {
    return reinterpret_cast<const AccountId*>(
               &_AccountId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountId& a, AccountId& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountId* New() const final {
    return CreateMaybeMessage<AccountId>(nullptr);
  }

  AccountId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountId& from);
  void MergeFrom(const AccountId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required fixed32 id = 1 [(.bgs.protocol.valid) = {
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AccountLicense :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountLicense) */ {
 public:
  AccountLicense();
  virtual ~AccountLicense();

  AccountLicense(const AccountLicense& from);
  AccountLicense(AccountLicense&& from) noexcept
    : AccountLicense() {
    *this = ::std::move(from);
  }

  inline AccountLicense& operator=(const AccountLicense& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLicense& operator=(AccountLicense&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountLicense& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountLicense* internal_default_instance() {
    return reinterpret_cast<const AccountLicense*>(
               &_AccountLicense_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountLicense& a, AccountLicense& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLicense* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountLicense* New() const final {
    return CreateMaybeMessage<AccountLicense>(nullptr);
  }

  AccountLicense* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountLicense>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountLicense& from);
  void MergeFrom(const AccountLicense& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLicense* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountLicense";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpiresFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional uint64 expires = 2;
  bool has_expires() const;
  private:
  bool _internal_has_expires() const;
  public:
  void clear_expires();
  ::PROTOBUF_NAMESPACE_ID::uint64 expires() const;
  void set_expires(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expires() const;
  void _internal_set_expires(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountLicense)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expires_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameAccountHandle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountHandle) */ {
 public:
  GameAccountHandle();
  virtual ~GameAccountHandle();

  GameAccountHandle(const GameAccountHandle& from);
  GameAccountHandle(GameAccountHandle&& from) noexcept
    : GameAccountHandle() {
    *this = ::std::move(from);
  }

  inline GameAccountHandle& operator=(const GameAccountHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountHandle& operator=(GameAccountHandle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountHandle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountHandle* internal_default_instance() {
    return reinterpret_cast<const GameAccountHandle*>(
               &_GameAccountHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameAccountHandle& a, GameAccountHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountHandle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountHandle* New() const final {
    return CreateMaybeMessage<GameAccountHandle>(nullptr);
  }

  GameAccountHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountHandle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountHandle& from);
  void MergeFrom(const GameAccountHandle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountHandle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountHandle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProgramFieldNumber = 2,
    kRegionFieldNumber = 3,
  };
  // required fixed32 id = 1 [(.bgs.protocol.valid) = {
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required fixed32 program = 2 [(.bgs.protocol.valid) = {
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 region = 3 [(.bgs.protocol.valid) = {
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountHandle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AccountReference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountReference) */ {
 public:
  AccountReference();
  virtual ~AccountReference();

  AccountReference(const AccountReference& from);
  AccountReference(AccountReference&& from) noexcept
    : AccountReference() {
    *this = ::std::move(from);
  }

  inline AccountReference& operator=(const AccountReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountReference& operator=(AccountReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountReference* internal_default_instance() {
    return reinterpret_cast<const AccountReference*>(
               &_AccountReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccountReference& a, AccountReference& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountReference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountReference* New() const final {
    return CreateMaybeMessage<AccountReference>(nullptr);
  }

  AccountReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountReference& from);
  void MergeFrom(const AccountReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountReference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kBattleTagFieldNumber = 4,
    kHandleFieldNumber = 3,
    kIdFieldNumber = 1,
    kRegionFieldNumber = 10,
  };
  // optional string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string battle_tag = 4;
  bool has_battle_tag() const;
  private:
  bool _internal_has_battle_tag() const;
  public:
  void clear_battle_tag();
  const std::string& battle_tag() const;
  void set_battle_tag(const std::string& value);
  void set_battle_tag(std::string&& value);
  void set_battle_tag(const char* value);
  void set_battle_tag(const char* value, size_t size);
  std::string* mutable_battle_tag();
  std::string* release_battle_tag();
  void set_allocated_battle_tag(std::string* battle_tag);
  private:
  const std::string& _internal_battle_tag() const;
  void _internal_set_battle_tag(const std::string& value);
  std::string* _internal_mutable_battle_tag();
  public:

  // optional .bgs.protocol.account.v1.GameAccountHandle handle = 3;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::bgs::protocol::account::v1::GameAccountHandle& handle() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_handle();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_handle();
  void set_allocated_handle(::bgs::protocol::account::v1::GameAccountHandle* handle);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_handle() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_handle();
  public:

  // optional fixed32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 region = 10 [default = 0];
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountReference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_tag_;
  ::bgs::protocol::account::v1::GameAccountHandle* handle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Identity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(nullptr);
  }

  Identity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.Identity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kGameAccountFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.AccountId account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::bgs::protocol::account::v1::AccountId& account() const;
  ::bgs::protocol::account::v1::AccountId* release_account();
  ::bgs::protocol::account::v1::AccountId* mutable_account();
  void set_allocated_account(::bgs::protocol::account::v1::AccountId* account);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_account() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_account();
  public:

  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
  bool has_game_account() const;
  private:
  bool _internal_has_game_account() const;
  public:
  void clear_game_account();
  const ::bgs::protocol::account::v1::GameAccountHandle& game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_game_account();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_game_account();
  void set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_game_account();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.Identity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* account_;
  ::bgs::protocol::account::v1::GameAccountHandle* game_account_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ProgramTag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.ProgramTag) */ {
 public:
  ProgramTag();
  virtual ~ProgramTag();

  ProgramTag(const ProgramTag& from);
  ProgramTag(ProgramTag&& from) noexcept
    : ProgramTag() {
    *this = ::std::move(from);
  }

  inline ProgramTag& operator=(const ProgramTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramTag& operator=(ProgramTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgramTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramTag* internal_default_instance() {
    return reinterpret_cast<const ProgramTag*>(
               &_ProgramTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProgramTag& a, ProgramTag& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramTag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgramTag* New() const final {
    return CreateMaybeMessage<ProgramTag>(nullptr);
  }

  ProgramTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgramTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgramTag& from);
  void MergeFrom(const ProgramTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.ProgramTag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramFieldNumber = 1,
    kTagFieldNumber = 2,
  };
  // optional fixed32 program = 1;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 tag = 2;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.ProgramTag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class RegionTag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.RegionTag) */ {
 public:
  RegionTag();
  virtual ~RegionTag();

  RegionTag(const RegionTag& from);
  RegionTag(RegionTag&& from) noexcept
    : RegionTag() {
    *this = ::std::move(from);
  }

  inline RegionTag& operator=(const RegionTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionTag& operator=(RegionTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionTag* internal_default_instance() {
    return reinterpret_cast<const RegionTag*>(
               &_RegionTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegionTag& a, RegionTag& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionTag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionTag* New() const final {
    return CreateMaybeMessage<RegionTag>(nullptr);
  }

  RegionTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionTag& from);
  void MergeFrom(const RegionTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.RegionTag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kTagFieldNumber = 2,
  };
  // optional fixed32 region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 tag = 2;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.RegionTag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AccountFieldTags :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountFieldTags) */ {
 public:
  AccountFieldTags();
  virtual ~AccountFieldTags();

  AccountFieldTags(const AccountFieldTags& from);
  AccountFieldTags(AccountFieldTags&& from) noexcept
    : AccountFieldTags() {
    *this = ::std::move(from);
  }

  inline AccountFieldTags& operator=(const AccountFieldTags& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountFieldTags& operator=(AccountFieldTags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountFieldTags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountFieldTags* internal_default_instance() {
    return reinterpret_cast<const AccountFieldTags*>(
               &_AccountFieldTags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AccountFieldTags& a, AccountFieldTags& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountFieldTags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountFieldTags* New() const final {
    return CreateMaybeMessage<AccountFieldTags>(nullptr);
  }

  AccountFieldTags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountFieldTags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountFieldTags& from);
  void MergeFrom(const AccountFieldTags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountFieldTags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountFieldTags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameLevelInfoTagsFieldNumber = 7,
    kGameStatusTagsFieldNumber = 9,
    kGameAccountTagsFieldNumber = 11,
    kAccountLevelInfoTagFieldNumber = 2,
    kPrivacyInfoTagFieldNumber = 3,
    kParentalControlInfoTagFieldNumber = 4,
  };
  // repeated .bgs.protocol.account.v1.ProgramTag game_level_info_tags = 7;
  int game_level_info_tags_size() const;
  private:
  int _internal_game_level_info_tags_size() const;
  public:
  void clear_game_level_info_tags();
  ::bgs::protocol::account::v1::ProgramTag* mutable_game_level_info_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag >*
      mutable_game_level_info_tags();
  private:
  const ::bgs::protocol::account::v1::ProgramTag& _internal_game_level_info_tags(int index) const;
  ::bgs::protocol::account::v1::ProgramTag* _internal_add_game_level_info_tags();
  public:
  const ::bgs::protocol::account::v1::ProgramTag& game_level_info_tags(int index) const;
  ::bgs::protocol::account::v1::ProgramTag* add_game_level_info_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag >&
      game_level_info_tags() const;

  // repeated .bgs.protocol.account.v1.ProgramTag game_status_tags = 9;
  int game_status_tags_size() const;
  private:
  int _internal_game_status_tags_size() const;
  public:
  void clear_game_status_tags();
  ::bgs::protocol::account::v1::ProgramTag* mutable_game_status_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag >*
      mutable_game_status_tags();
  private:
  const ::bgs::protocol::account::v1::ProgramTag& _internal_game_status_tags(int index) const;
  ::bgs::protocol::account::v1::ProgramTag* _internal_add_game_status_tags();
  public:
  const ::bgs::protocol::account::v1::ProgramTag& game_status_tags(int index) const;
  ::bgs::protocol::account::v1::ProgramTag* add_game_status_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag >&
      game_status_tags() const;

  // repeated .bgs.protocol.account.v1.RegionTag game_account_tags = 11;
  int game_account_tags_size() const;
  private:
  int _internal_game_account_tags_size() const;
  public:
  void clear_game_account_tags();
  ::bgs::protocol::account::v1::RegionTag* mutable_game_account_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::RegionTag >*
      mutable_game_account_tags();
  private:
  const ::bgs::protocol::account::v1::RegionTag& _internal_game_account_tags(int index) const;
  ::bgs::protocol::account::v1::RegionTag* _internal_add_game_account_tags();
  public:
  const ::bgs::protocol::account::v1::RegionTag& game_account_tags(int index) const;
  ::bgs::protocol::account::v1::RegionTag* add_game_account_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::RegionTag >&
      game_account_tags() const;

  // optional fixed32 account_level_info_tag = 2;
  bool has_account_level_info_tag() const;
  private:
  bool _internal_has_account_level_info_tag() const;
  public:
  void clear_account_level_info_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_level_info_tag() const;
  void set_account_level_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_level_info_tag() const;
  void _internal_set_account_level_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 privacy_info_tag = 3;
  bool has_privacy_info_tag() const;
  private:
  bool _internal_has_privacy_info_tag() const;
  public:
  void clear_privacy_info_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 privacy_info_tag() const;
  void set_privacy_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_privacy_info_tag() const;
  void _internal_set_privacy_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 parental_control_info_tag = 4;
  bool has_parental_control_info_tag() const;
  private:
  bool _internal_has_parental_control_info_tag() const;
  public:
  void clear_parental_control_info_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 parental_control_info_tag() const;
  void set_parental_control_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parental_control_info_tag() const;
  void _internal_set_parental_control_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountFieldTags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag > game_level_info_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag > game_status_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::RegionTag > game_account_tags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_level_info_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 privacy_info_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parental_control_info_tag_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameAccountFieldTags :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountFieldTags) */ {
 public:
  GameAccountFieldTags();
  virtual ~GameAccountFieldTags();

  GameAccountFieldTags(const GameAccountFieldTags& from);
  GameAccountFieldTags(GameAccountFieldTags&& from) noexcept
    : GameAccountFieldTags() {
    *this = ::std::move(from);
  }

  inline GameAccountFieldTags& operator=(const GameAccountFieldTags& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountFieldTags& operator=(GameAccountFieldTags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountFieldTags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountFieldTags* internal_default_instance() {
    return reinterpret_cast<const GameAccountFieldTags*>(
               &_GameAccountFieldTags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameAccountFieldTags& a, GameAccountFieldTags& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountFieldTags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountFieldTags* New() const final {
    return CreateMaybeMessage<GameAccountFieldTags>(nullptr);
  }

  GameAccountFieldTags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountFieldTags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountFieldTags& from);
  void MergeFrom(const GameAccountFieldTags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountFieldTags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountFieldTags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameLevelInfoTagFieldNumber = 2,
    kGameTimeInfoTagFieldNumber = 3,
    kGameStatusTagFieldNumber = 4,
    kRafInfoTagFieldNumber = 5,
  };
  // optional fixed32 game_level_info_tag = 2;
  bool has_game_level_info_tag() const;
  private:
  bool _internal_has_game_level_info_tag() const;
  public:
  void clear_game_level_info_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_level_info_tag() const;
  void set_game_level_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_level_info_tag() const;
  void _internal_set_game_level_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 game_time_info_tag = 3;
  bool has_game_time_info_tag() const;
  private:
  bool _internal_has_game_time_info_tag() const;
  public:
  void clear_game_time_info_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_time_info_tag() const;
  void set_game_time_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_time_info_tag() const;
  void _internal_set_game_time_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 game_status_tag = 4;
  bool has_game_status_tag() const;
  private:
  bool _internal_has_game_status_tag() const;
  public:
  void clear_game_status_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_status_tag() const;
  void set_game_status_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_status_tag() const;
  void _internal_set_game_status_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 raf_info_tag = 5;
  bool has_raf_info_tag() const;
  private:
  bool _internal_has_raf_info_tag() const;
  public:
  void clear_raf_info_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 raf_info_tag() const;
  void set_raf_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_raf_info_tag() const;
  void _internal_set_raf_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountFieldTags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_level_info_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_time_info_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_status_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 raf_info_tag_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AccountFieldOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountFieldOptions) */ {
 public:
  AccountFieldOptions();
  virtual ~AccountFieldOptions();

  AccountFieldOptions(const AccountFieldOptions& from);
  AccountFieldOptions(AccountFieldOptions&& from) noexcept
    : AccountFieldOptions() {
    *this = ::std::move(from);
  }

  inline AccountFieldOptions& operator=(const AccountFieldOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountFieldOptions& operator=(AccountFieldOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountFieldOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountFieldOptions* internal_default_instance() {
    return reinterpret_cast<const AccountFieldOptions*>(
               &_AccountFieldOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AccountFieldOptions& a, AccountFieldOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountFieldOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountFieldOptions* New() const final {
    return CreateMaybeMessage<AccountFieldOptions>(nullptr);
  }

  AccountFieldOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountFieldOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountFieldOptions& from);
  void MergeFrom(const AccountFieldOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountFieldOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountFieldOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllFieldsFieldNumber = 1,
    kFieldAccountLevelInfoFieldNumber = 2,
    kFieldPrivacyInfoFieldNumber = 3,
    kFieldParentalControlInfoFieldNumber = 4,
    kFieldGameLevelInfoFieldNumber = 6,
    kFieldGameStatusFieldNumber = 7,
    kFieldGameAccountsFieldNumber = 8,
  };
  // optional bool all_fields = 1;
  bool has_all_fields() const;
  private:
  bool _internal_has_all_fields() const;
  public:
  void clear_all_fields();
  bool all_fields() const;
  void set_all_fields(bool value);
  private:
  bool _internal_all_fields() const;
  void _internal_set_all_fields(bool value);
  public:

  // optional bool field_account_level_info = 2;
  bool has_field_account_level_info() const;
  private:
  bool _internal_has_field_account_level_info() const;
  public:
  void clear_field_account_level_info();
  bool field_account_level_info() const;
  void set_field_account_level_info(bool value);
  private:
  bool _internal_field_account_level_info() const;
  void _internal_set_field_account_level_info(bool value);
  public:

  // optional bool field_privacy_info = 3;
  bool has_field_privacy_info() const;
  private:
  bool _internal_has_field_privacy_info() const;
  public:
  void clear_field_privacy_info();
  bool field_privacy_info() const;
  void set_field_privacy_info(bool value);
  private:
  bool _internal_field_privacy_info() const;
  void _internal_set_field_privacy_info(bool value);
  public:

  // optional bool field_parental_control_info = 4;
  bool has_field_parental_control_info() const;
  private:
  bool _internal_has_field_parental_control_info() const;
  public:
  void clear_field_parental_control_info();
  bool field_parental_control_info() const;
  void set_field_parental_control_info(bool value);
  private:
  bool _internal_field_parental_control_info() const;
  void _internal_set_field_parental_control_info(bool value);
  public:

  // optional bool field_game_level_info = 6;
  bool has_field_game_level_info() const;
  private:
  bool _internal_has_field_game_level_info() const;
  public:
  void clear_field_game_level_info();
  bool field_game_level_info() const;
  void set_field_game_level_info(bool value);
  private:
  bool _internal_field_game_level_info() const;
  void _internal_set_field_game_level_info(bool value);
  public:

  // optional bool field_game_status = 7;
  bool has_field_game_status() const;
  private:
  bool _internal_has_field_game_status() const;
  public:
  void clear_field_game_status();
  bool field_game_status() const;
  void set_field_game_status(bool value);
  private:
  bool _internal_field_game_status() const;
  void _internal_set_field_game_status(bool value);
  public:

  // optional bool field_game_accounts = 8;
  bool has_field_game_accounts() const;
  private:
  bool _internal_has_field_game_accounts() const;
  public:
  void clear_field_game_accounts();
  bool field_game_accounts() const;
  void set_field_game_accounts(bool value);
  private:
  bool _internal_field_game_accounts() const;
  void _internal_set_field_game_accounts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountFieldOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool all_fields_;
  bool field_account_level_info_;
  bool field_privacy_info_;
  bool field_parental_control_info_;
  bool field_game_level_info_;
  bool field_game_status_;
  bool field_game_accounts_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameAccountFieldOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountFieldOptions) */ {
 public:
  GameAccountFieldOptions();
  virtual ~GameAccountFieldOptions();

  GameAccountFieldOptions(const GameAccountFieldOptions& from);
  GameAccountFieldOptions(GameAccountFieldOptions&& from) noexcept
    : GameAccountFieldOptions() {
    *this = ::std::move(from);
  }

  inline GameAccountFieldOptions& operator=(const GameAccountFieldOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountFieldOptions& operator=(GameAccountFieldOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountFieldOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountFieldOptions* internal_default_instance() {
    return reinterpret_cast<const GameAccountFieldOptions*>(
               &_GameAccountFieldOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameAccountFieldOptions& a, GameAccountFieldOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountFieldOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountFieldOptions* New() const final {
    return CreateMaybeMessage<GameAccountFieldOptions>(nullptr);
  }

  GameAccountFieldOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountFieldOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountFieldOptions& from);
  void MergeFrom(const GameAccountFieldOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountFieldOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountFieldOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllFieldsFieldNumber = 1,
    kFieldGameLevelInfoFieldNumber = 2,
    kFieldGameTimeInfoFieldNumber = 3,
    kFieldGameStatusFieldNumber = 4,
    kFieldRafInfoFieldNumber = 5,
  };
  // optional bool all_fields = 1;
  bool has_all_fields() const;
  private:
  bool _internal_has_all_fields() const;
  public:
  void clear_all_fields();
  bool all_fields() const;
  void set_all_fields(bool value);
  private:
  bool _internal_all_fields() const;
  void _internal_set_all_fields(bool value);
  public:

  // optional bool field_game_level_info = 2;
  bool has_field_game_level_info() const;
  private:
  bool _internal_has_field_game_level_info() const;
  public:
  void clear_field_game_level_info();
  bool field_game_level_info() const;
  void set_field_game_level_info(bool value);
  private:
  bool _internal_field_game_level_info() const;
  void _internal_set_field_game_level_info(bool value);
  public:

  // optional bool field_game_time_info = 3;
  bool has_field_game_time_info() const;
  private:
  bool _internal_has_field_game_time_info() const;
  public:
  void clear_field_game_time_info();
  bool field_game_time_info() const;
  void set_field_game_time_info(bool value);
  private:
  bool _internal_field_game_time_info() const;
  void _internal_set_field_game_time_info(bool value);
  public:

  // optional bool field_game_status = 4;
  bool has_field_game_status() const;
  private:
  bool _internal_has_field_game_status() const;
  public:
  void clear_field_game_status();
  bool field_game_status() const;
  void set_field_game_status(bool value);
  private:
  bool _internal_field_game_status() const;
  void _internal_set_field_game_status(bool value);
  public:

  // optional bool field_raf_info = 5;
  bool has_field_raf_info() const;
  private:
  bool _internal_has_field_raf_info() const;
  public:
  void clear_field_raf_info();
  bool field_raf_info() const;
  void set_field_raf_info(bool value);
  private:
  bool _internal_field_raf_info() const;
  void _internal_set_field_raf_info(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountFieldOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool all_fields_;
  bool field_game_level_info_;
  bool field_game_time_info_;
  bool field_game_status_;
  bool field_raf_info_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SubscriberReference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.SubscriberReference) */ {
 public:
  SubscriberReference();
  virtual ~SubscriberReference();

  SubscriberReference(const SubscriberReference& from);
  SubscriberReference(SubscriberReference&& from) noexcept
    : SubscriberReference() {
    *this = ::std::move(from);
  }

  inline SubscriberReference& operator=(const SubscriberReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriberReference& operator=(SubscriberReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriberReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriberReference* internal_default_instance() {
    return reinterpret_cast<const SubscriberReference*>(
               &_SubscriberReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubscriberReference& a, SubscriberReference& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriberReference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriberReference* New() const final {
    return CreateMaybeMessage<SubscriberReference>(nullptr);
  }

  SubscriberReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriberReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriberReference& from);
  void MergeFrom(const SubscriberReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriberReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.SubscriberReference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 2,
    kAccountOptionsFieldNumber = 3,
    kAccountTagsFieldNumber = 4,
    kGameAccountOptionsFieldNumber = 5,
    kGameAccountTagsFieldNumber = 6,
    kObjectIdFieldNumber = 1,
    kSubscriberIdFieldNumber = 7,
  };
  // optional .bgs.protocol.EntityId entity_id = 2;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::bgs::protocol::EntityId& entity_id() const;
  ::bgs::protocol::EntityId* release_entity_id();
  ::bgs::protocol::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::bgs::protocol::EntityId* entity_id);
  private:
  const ::bgs::protocol::EntityId& _internal_entity_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_entity_id();
  public:

  // optional .bgs.protocol.account.v1.AccountFieldOptions account_options = 3;
  bool has_account_options() const;
  private:
  bool _internal_has_account_options() const;
  public:
  void clear_account_options();
  const ::bgs::protocol::account::v1::AccountFieldOptions& account_options() const;
  ::bgs::protocol::account::v1::AccountFieldOptions* release_account_options();
  ::bgs::protocol::account::v1::AccountFieldOptions* mutable_account_options();
  void set_allocated_account_options(::bgs::protocol::account::v1::AccountFieldOptions* account_options);
  private:
  const ::bgs::protocol::account::v1::AccountFieldOptions& _internal_account_options() const;
  ::bgs::protocol::account::v1::AccountFieldOptions* _internal_mutable_account_options();
  public:

  // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 4;
  bool has_account_tags() const;
  private:
  bool _internal_has_account_tags() const;
  public:
  void clear_account_tags();
  const ::bgs::protocol::account::v1::AccountFieldTags& account_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* release_account_tags();
  ::bgs::protocol::account::v1::AccountFieldTags* mutable_account_tags();
  void set_allocated_account_tags(::bgs::protocol::account::v1::AccountFieldTags* account_tags);
  private:
  const ::bgs::protocol::account::v1::AccountFieldTags& _internal_account_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* _internal_mutable_account_tags();
  public:

  // optional .bgs.protocol.account.v1.GameAccountFieldOptions game_account_options = 5;
  bool has_game_account_options() const;
  private:
  bool _internal_has_game_account_options() const;
  public:
  void clear_game_account_options();
  const ::bgs::protocol::account::v1::GameAccountFieldOptions& game_account_options() const;
  ::bgs::protocol::account::v1::GameAccountFieldOptions* release_game_account_options();
  ::bgs::protocol::account::v1::GameAccountFieldOptions* mutable_game_account_options();
  void set_allocated_game_account_options(::bgs::protocol::account::v1::GameAccountFieldOptions* game_account_options);
  private:
  const ::bgs::protocol::account::v1::GameAccountFieldOptions& _internal_game_account_options() const;
  ::bgs::protocol::account::v1::GameAccountFieldOptions* _internal_mutable_game_account_options();
  public:

  // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 6;
  bool has_game_account_tags() const;
  private:
  bool _internal_has_game_account_tags() const;
  public:
  void clear_game_account_tags();
  const ::bgs::protocol::account::v1::GameAccountFieldTags& game_account_tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* release_game_account_tags();
  ::bgs::protocol::account::v1::GameAccountFieldTags* mutable_game_account_tags();
  void set_allocated_game_account_tags(::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags);
  private:
  const ::bgs::protocol::account::v1::GameAccountFieldTags& _internal_game_account_tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* _internal_mutable_game_account_tags();
  public:

  // optional uint64 object_id = 1 [default = 0];
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 subscriber_id = 7 [default = 0];
  bool has_subscriber_id() const;
  private:
  bool _internal_has_subscriber_id() const;
  public:
  void clear_subscriber_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_id() const;
  void set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subscriber_id() const;
  void _internal_set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.SubscriberReference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* entity_id_;
  ::bgs::protocol::account::v1::AccountFieldOptions* account_options_;
  ::bgs::protocol::account::v1::AccountFieldTags* account_tags_;
  ::bgs::protocol::account::v1::GameAccountFieldOptions* game_account_options_;
  ::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subscriber_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AccountLevelInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountLevelInfo) */ {
 public:
  AccountLevelInfo();
  virtual ~AccountLevelInfo();

  AccountLevelInfo(const AccountLevelInfo& from);
  AccountLevelInfo(AccountLevelInfo&& from) noexcept
    : AccountLevelInfo() {
    *this = ::std::move(from);
  }

  inline AccountLevelInfo& operator=(const AccountLevelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLevelInfo& operator=(AccountLevelInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountLevelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountLevelInfo* internal_default_instance() {
    return reinterpret_cast<const AccountLevelInfo*>(
               &_AccountLevelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AccountLevelInfo& a, AccountLevelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLevelInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountLevelInfo* New() const final {
    return CreateMaybeMessage<AccountLevelInfo>(nullptr);
  }

  AccountLevelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountLevelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountLevelInfo& from);
  void MergeFrom(const AccountLevelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLevelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountLevelInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicensesFieldNumber = 3,
    kCountryFieldNumber = 5,
    kFullNameFieldNumber = 7,
    kBattleTagFieldNumber = 8,
    kEmailFieldNumber = 13,
    kDefaultCurrencyFieldNumber = 4,
    kPreferredRegionFieldNumber = 6,
    kMutedFieldNumber = 9,
    kManualReviewFieldNumber = 10,
    kAccountPaidAnyFieldNumber = 11,
    kHeadlessAccountFieldNumber = 14,
    kIdentityCheckStatusFieldNumber = 12,
    kTestAccountFieldNumber = 15,
    kIsSmsProtectedFieldNumber = 17,
    kRatingsBoardMinimumAgeFieldNumber = 18,
  };
  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 3;
  int licenses_size() const;
  private:
  int _internal_licenses_size() const;
  public:
  void clear_licenses();
  ::bgs::protocol::account::v1::AccountLicense* mutable_licenses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >*
      mutable_licenses();
  private:
  const ::bgs::protocol::account::v1::AccountLicense& _internal_licenses(int index) const;
  ::bgs::protocol::account::v1::AccountLicense* _internal_add_licenses();
  public:
  const ::bgs::protocol::account::v1::AccountLicense& licenses(int index) const;
  ::bgs::protocol::account::v1::AccountLicense* add_licenses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >&
      licenses() const;

  // optional string country = 5;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // optional string full_name = 7;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // optional string battle_tag = 8;
  bool has_battle_tag() const;
  private:
  bool _internal_has_battle_tag() const;
  public:
  void clear_battle_tag();
  const std::string& battle_tag() const;
  void set_battle_tag(const std::string& value);
  void set_battle_tag(std::string&& value);
  void set_battle_tag(const char* value);
  void set_battle_tag(const char* value, size_t size);
  std::string* mutable_battle_tag();
  std::string* release_battle_tag();
  void set_allocated_battle_tag(std::string* battle_tag);
  private:
  const std::string& _internal_battle_tag() const;
  void _internal_set_battle_tag(const std::string& value);
  std::string* _internal_mutable_battle_tag();
  public:

  // optional string email = 13;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional fixed32 default_currency = 4;
  bool has_default_currency() const;
  private:
  bool _internal_has_default_currency() const;
  public:
  void clear_default_currency();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_currency() const;
  void set_default_currency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_currency() const;
  void _internal_set_default_currency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 preferred_region = 6;
  bool has_preferred_region() const;
  private:
  bool _internal_has_preferred_region() const;
  public:
  void clear_preferred_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 preferred_region() const;
  void set_preferred_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preferred_region() const;
  void _internal_set_preferred_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool muted = 9;
  bool has_muted() const;
  private:
  bool _internal_has_muted() const;
  public:
  void clear_muted();
  bool muted() const;
  void set_muted(bool value);
  private:
  bool _internal_muted() const;
  void _internal_set_muted(bool value);
  public:

  // optional bool manual_review = 10;
  bool has_manual_review() const;
  private:
  bool _internal_has_manual_review() const;
  public:
  void clear_manual_review();
  bool manual_review() const;
  void set_manual_review(bool value);
  private:
  bool _internal_manual_review() const;
  void _internal_set_manual_review(bool value);
  public:

  // optional bool account_paid_any = 11;
  bool has_account_paid_any() const;
  private:
  bool _internal_has_account_paid_any() const;
  public:
  void clear_account_paid_any();
  bool account_paid_any() const;
  void set_account_paid_any(bool value);
  private:
  bool _internal_account_paid_any() const;
  void _internal_set_account_paid_any(bool value);
  public:

  // optional bool headless_account = 14;
  bool has_headless_account() const;
  private:
  bool _internal_has_headless_account() const;
  public:
  void clear_headless_account();
  bool headless_account() const;
  void set_headless_account(bool value);
  private:
  bool _internal_headless_account() const;
  void _internal_set_headless_account(bool value);
  public:

  // optional .bgs.protocol.account.v1.IdentityVerificationStatus identity_check_status = 12 [default = IDENT_NO_DATA];
  bool has_identity_check_status() const;
  private:
  bool _internal_has_identity_check_status() const;
  public:
  void clear_identity_check_status();
  ::bgs::protocol::account::v1::IdentityVerificationStatus identity_check_status() const;
  void set_identity_check_status(::bgs::protocol::account::v1::IdentityVerificationStatus value);
  private:
  ::bgs::protocol::account::v1::IdentityVerificationStatus _internal_identity_check_status() const;
  void _internal_set_identity_check_status(::bgs::protocol::account::v1::IdentityVerificationStatus value);
  public:

  // optional bool test_account = 15;
  bool has_test_account() const;
  private:
  bool _internal_has_test_account() const;
  public:
  void clear_test_account();
  bool test_account() const;
  void set_test_account(bool value);
  private:
  bool _internal_test_account() const;
  void _internal_set_test_account(bool value);
  public:

  // optional bool is_sms_protected = 17;
  bool has_is_sms_protected() const;
  private:
  bool _internal_has_is_sms_protected() const;
  public:
  void clear_is_sms_protected();
  bool is_sms_protected() const;
  void set_is_sms_protected(bool value);
  private:
  bool _internal_is_sms_protected() const;
  void _internal_set_is_sms_protected(bool value);
  public:

  // optional uint32 ratings_board_minimum_age = 18;
  bool has_ratings_board_minimum_age() const;
  private:
  bool _internal_has_ratings_board_minimum_age() const;
  public:
  void clear_ratings_board_minimum_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 ratings_board_minimum_age() const;
  void set_ratings_board_minimum_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ratings_board_minimum_age() const;
  void _internal_set_ratings_board_minimum_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountLevelInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense > licenses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_currency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preferred_region_;
  bool muted_;
  bool manual_review_;
  bool account_paid_any_;
  bool headless_account_;
  int identity_check_status_;
  bool test_account_;
  bool is_sms_protected_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ratings_board_minimum_age_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class PrivacyInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.PrivacyInfo) */ {
 public:
  PrivacyInfo();
  virtual ~PrivacyInfo();

  PrivacyInfo(const PrivacyInfo& from);
  PrivacyInfo(PrivacyInfo&& from) noexcept
    : PrivacyInfo() {
    *this = ::std::move(from);
  }

  inline PrivacyInfo& operator=(const PrivacyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivacyInfo& operator=(PrivacyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivacyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyInfo* internal_default_instance() {
    return reinterpret_cast<const PrivacyInfo*>(
               &_PrivacyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PrivacyInfo& a, PrivacyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivacyInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivacyInfo* New() const final {
    return CreateMaybeMessage<PrivacyInfo>(nullptr);
  }

  PrivacyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivacyInfo& from);
  void MergeFrom(const PrivacyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.PrivacyInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PrivacyInfo_GameInfoPrivacy GameInfoPrivacy;
  static constexpr GameInfoPrivacy PRIVACY_ME =
    PrivacyInfo_GameInfoPrivacy_PRIVACY_ME;
  static constexpr GameInfoPrivacy PRIVACY_FRIENDS =
    PrivacyInfo_GameInfoPrivacy_PRIVACY_FRIENDS;
  static constexpr GameInfoPrivacy PRIVACY_EVERYONE =
    PrivacyInfo_GameInfoPrivacy_PRIVACY_EVERYONE;
  static inline bool GameInfoPrivacy_IsValid(int value) {
    return PrivacyInfo_GameInfoPrivacy_IsValid(value);
  }
  static constexpr GameInfoPrivacy GameInfoPrivacy_MIN =
    PrivacyInfo_GameInfoPrivacy_GameInfoPrivacy_MIN;
  static constexpr GameInfoPrivacy GameInfoPrivacy_MAX =
    PrivacyInfo_GameInfoPrivacy_GameInfoPrivacy_MAX;
  static constexpr int GameInfoPrivacy_ARRAYSIZE =
    PrivacyInfo_GameInfoPrivacy_GameInfoPrivacy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GameInfoPrivacy_descriptor() {
    return PrivacyInfo_GameInfoPrivacy_descriptor();
  }
  template<typename T>
  static inline const std::string& GameInfoPrivacy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GameInfoPrivacy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GameInfoPrivacy_Name.");
    return PrivacyInfo_GameInfoPrivacy_Name(enum_t_value);
  }
  static inline bool GameInfoPrivacy_Parse(const std::string& name,
      GameInfoPrivacy* value) {
    return PrivacyInfo_GameInfoPrivacy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIsUsingRidFieldNumber = 3,
    kIsVisibleForViewFriendsFieldNumber = 4,
    kIsHiddenFromFriendFinderFieldNumber = 5,
    kOnlyAllowFriendWhispersFieldNumber = 7,
    kGameInfoPrivacyFieldNumber = 6,
  };
  // optional bool is_using_rid = 3;
  bool has_is_using_rid() const;
  private:
  bool _internal_has_is_using_rid() const;
  public:
  void clear_is_using_rid();
  bool is_using_rid() const;
  void set_is_using_rid(bool value);
  private:
  bool _internal_is_using_rid() const;
  void _internal_set_is_using_rid(bool value);
  public:

  // optional bool is_visible_for_view_friends = 4;
  bool has_is_visible_for_view_friends() const;
  private:
  bool _internal_has_is_visible_for_view_friends() const;
  public:
  void clear_is_visible_for_view_friends();
  bool is_visible_for_view_friends() const;
  void set_is_visible_for_view_friends(bool value);
  private:
  bool _internal_is_visible_for_view_friends() const;
  void _internal_set_is_visible_for_view_friends(bool value);
  public:

  // optional bool is_hidden_from_friend_finder = 5;
  bool has_is_hidden_from_friend_finder() const;
  private:
  bool _internal_has_is_hidden_from_friend_finder() const;
  public:
  void clear_is_hidden_from_friend_finder();
  bool is_hidden_from_friend_finder() const;
  void set_is_hidden_from_friend_finder(bool value);
  private:
  bool _internal_is_hidden_from_friend_finder() const;
  void _internal_set_is_hidden_from_friend_finder(bool value);
  public:

  // optional bool only_allow_friend_whispers = 7;
  bool has_only_allow_friend_whispers() const;
  private:
  bool _internal_has_only_allow_friend_whispers() const;
  public:
  void clear_only_allow_friend_whispers();
  bool only_allow_friend_whispers() const;
  void set_only_allow_friend_whispers(bool value);
  private:
  bool _internal_only_allow_friend_whispers() const;
  void _internal_set_only_allow_friend_whispers(bool value);
  public:

  // optional .bgs.protocol.account.v1.PrivacyInfo.GameInfoPrivacy game_info_privacy = 6 [default = PRIVACY_FRIENDS];
  bool has_game_info_privacy() const;
  private:
  bool _internal_has_game_info_privacy() const;
  public:
  void clear_game_info_privacy();
  ::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy game_info_privacy() const;
  void set_game_info_privacy(::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy value);
  private:
  ::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy _internal_game_info_privacy() const;
  void _internal_set_game_info_privacy(::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.PrivacyInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_using_rid_;
  bool is_visible_for_view_friends_;
  bool is_hidden_from_friend_finder_;
  bool only_allow_friend_whispers_;
  int game_info_privacy_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ParentalControlInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.ParentalControlInfo) */ {
 public:
  ParentalControlInfo();
  virtual ~ParentalControlInfo();

  ParentalControlInfo(const ParentalControlInfo& from);
  ParentalControlInfo(ParentalControlInfo&& from) noexcept
    : ParentalControlInfo() {
    *this = ::std::move(from);
  }

  inline ParentalControlInfo& operator=(const ParentalControlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParentalControlInfo& operator=(ParentalControlInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParentalControlInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParentalControlInfo* internal_default_instance() {
    return reinterpret_cast<const ParentalControlInfo*>(
               &_ParentalControlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ParentalControlInfo& a, ParentalControlInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ParentalControlInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParentalControlInfo* New() const final {
    return CreateMaybeMessage<ParentalControlInfo>(nullptr);
  }

  ParentalControlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParentalControlInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParentalControlInfo& from);
  void MergeFrom(const ParentalControlInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentalControlInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.ParentalControlInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayScheduleFieldNumber = 8,
    kTimezoneFieldNumber = 3,
    kMinutesPerDayFieldNumber = 4,
    kMinutesPerWeekFieldNumber = 5,
    kCanReceiveVoiceFieldNumber = 6,
    kCanSendVoiceFieldNumber = 7,
    kCanJoinGroupFieldNumber = 9,
    kCanUseProfileFieldNumber = 10,
  };
  // repeated bool play_schedule = 8;
  int play_schedule_size() const;
  private:
  int _internal_play_schedule_size() const;
  public:
  void clear_play_schedule();
  private:
  bool _internal_play_schedule(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_play_schedule() const;
  void _internal_add_play_schedule(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_play_schedule();
  public:
  bool play_schedule(int index) const;
  void set_play_schedule(int index, bool value);
  void add_play_schedule(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      play_schedule() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_play_schedule();

  // optional string timezone = 3;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // optional uint32 minutes_per_day = 4;
  bool has_minutes_per_day() const;
  private:
  bool _internal_has_minutes_per_day() const;
  public:
  void clear_minutes_per_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_per_day() const;
  void set_minutes_per_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minutes_per_day() const;
  void _internal_set_minutes_per_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minutes_per_week = 5;
  bool has_minutes_per_week() const;
  private:
  bool _internal_has_minutes_per_week() const;
  public:
  void clear_minutes_per_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_per_week() const;
  void set_minutes_per_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minutes_per_week() const;
  void _internal_set_minutes_per_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool can_receive_voice = 6;
  bool has_can_receive_voice() const;
  private:
  bool _internal_has_can_receive_voice() const;
  public:
  void clear_can_receive_voice();
  bool can_receive_voice() const;
  void set_can_receive_voice(bool value);
  private:
  bool _internal_can_receive_voice() const;
  void _internal_set_can_receive_voice(bool value);
  public:

  // optional bool can_send_voice = 7;
  bool has_can_send_voice() const;
  private:
  bool _internal_has_can_send_voice() const;
  public:
  void clear_can_send_voice();
  bool can_send_voice() const;
  void set_can_send_voice(bool value);
  private:
  bool _internal_can_send_voice() const;
  void _internal_set_can_send_voice(bool value);
  public:

  // optional bool can_join_group = 9;
  bool has_can_join_group() const;
  private:
  bool _internal_has_can_join_group() const;
  public:
  void clear_can_join_group();
  bool can_join_group() const;
  void set_can_join_group(bool value);
  private:
  bool _internal_can_join_group() const;
  void _internal_set_can_join_group(bool value);
  public:

  // optional bool can_use_profile = 10;
  bool has_can_use_profile() const;
  private:
  bool _internal_has_can_use_profile() const;
  public:
  void clear_can_use_profile();
  bool can_use_profile() const;
  void set_can_use_profile(bool value);
  private:
  bool _internal_can_use_profile() const;
  void _internal_set_can_use_profile(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.ParentalControlInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > play_schedule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_per_day_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_per_week_;
  bool can_receive_voice_;
  bool can_send_voice_;
  bool can_join_group_;
  bool can_use_profile_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameLevelInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameLevelInfo) */ {
 public:
  GameLevelInfo();
  virtual ~GameLevelInfo();

  GameLevelInfo(const GameLevelInfo& from);
  GameLevelInfo(GameLevelInfo&& from) noexcept
    : GameLevelInfo() {
    *this = ::std::move(from);
  }

  inline GameLevelInfo& operator=(const GameLevelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameLevelInfo& operator=(GameLevelInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameLevelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameLevelInfo* internal_default_instance() {
    return reinterpret_cast<const GameLevelInfo*>(
               &_GameLevelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GameLevelInfo& a, GameLevelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameLevelInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameLevelInfo* New() const final {
    return CreateMaybeMessage<GameLevelInfo>(nullptr);
  }

  GameLevelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameLevelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameLevelInfo& from);
  void MergeFrom(const GameLevelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameLevelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameLevelInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicensesFieldNumber = 10,
    kNameFieldNumber = 8,
    kIsTrialFieldNumber = 4,
    kIsLifetimeFieldNumber = 5,
    kIsRestrictedFieldNumber = 6,
    kIsBetaFieldNumber = 7,
    kProgramFieldNumber = 9,
    kRealmPermissionsFieldNumber = 11,
  };
  // repeated .bgs.protocol.account.v1.AccountLicense licenses = 10;
  int licenses_size() const;
  private:
  int _internal_licenses_size() const;
  public:
  void clear_licenses();
  ::bgs::protocol::account::v1::AccountLicense* mutable_licenses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >*
      mutable_licenses();
  private:
  const ::bgs::protocol::account::v1::AccountLicense& _internal_licenses(int index) const;
  ::bgs::protocol::account::v1::AccountLicense* _internal_add_licenses();
  public:
  const ::bgs::protocol::account::v1::AccountLicense& licenses(int index) const;
  ::bgs::protocol::account::v1::AccountLicense* add_licenses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >&
      licenses() const;

  // optional string name = 8;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool is_trial = 4;
  bool has_is_trial() const;
  private:
  bool _internal_has_is_trial() const;
  public:
  void clear_is_trial();
  bool is_trial() const;
  void set_is_trial(bool value);
  private:
  bool _internal_is_trial() const;
  void _internal_set_is_trial(bool value);
  public:

  // optional bool is_lifetime = 5;
  bool has_is_lifetime() const;
  private:
  bool _internal_has_is_lifetime() const;
  public:
  void clear_is_lifetime();
  bool is_lifetime() const;
  void set_is_lifetime(bool value);
  private:
  bool _internal_is_lifetime() const;
  void _internal_set_is_lifetime(bool value);
  public:

  // optional bool is_restricted = 6;
  bool has_is_restricted() const;
  private:
  bool _internal_has_is_restricted() const;
  public:
  void clear_is_restricted();
  bool is_restricted() const;
  void set_is_restricted(bool value);
  private:
  bool _internal_is_restricted() const;
  void _internal_set_is_restricted(bool value);
  public:

  // optional bool is_beta = 7;
  bool has_is_beta() const;
  private:
  bool _internal_has_is_beta() const;
  public:
  void clear_is_beta();
  bool is_beta() const;
  void set_is_beta(bool value);
  private:
  bool _internal_is_beta() const;
  void _internal_set_is_beta(bool value);
  public:

  // optional fixed32 program = 9;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 realm_permissions = 11;
  bool has_realm_permissions() const;
  private:
  bool _internal_has_realm_permissions() const;
  public:
  void clear_realm_permissions();
  ::PROTOBUF_NAMESPACE_ID::uint32 realm_permissions() const;
  void set_realm_permissions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_realm_permissions() const;
  void _internal_set_realm_permissions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameLevelInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense > licenses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_trial_;
  bool is_lifetime_;
  bool is_restricted_;
  bool is_beta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 realm_permissions_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameTimeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameTimeInfo) */ {
 public:
  GameTimeInfo();
  virtual ~GameTimeInfo();

  GameTimeInfo(const GameTimeInfo& from);
  GameTimeInfo(GameTimeInfo&& from) noexcept
    : GameTimeInfo() {
    *this = ::std::move(from);
  }

  inline GameTimeInfo& operator=(const GameTimeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameTimeInfo& operator=(GameTimeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameTimeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameTimeInfo* internal_default_instance() {
    return reinterpret_cast<const GameTimeInfo*>(
               &_GameTimeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GameTimeInfo& a, GameTimeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameTimeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameTimeInfo* New() const final {
    return CreateMaybeMessage<GameTimeInfo>(nullptr);
  }

  GameTimeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameTimeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameTimeInfo& from);
  void MergeFrom(const GameTimeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameTimeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameTimeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayTimeExpiresFieldNumber = 5,
    kIsUnlimitedPlayTimeFieldNumber = 3,
    kIsSubscriptionFieldNumber = 6,
    kIsRecurringSubscriptionFieldNumber = 7,
  };
  // optional uint64 play_time_expires = 5;
  bool has_play_time_expires() const;
  private:
  bool _internal_has_play_time_expires() const;
  public:
  void clear_play_time_expires();
  ::PROTOBUF_NAMESPACE_ID::uint64 play_time_expires() const;
  void set_play_time_expires(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_play_time_expires() const;
  void _internal_set_play_time_expires(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_unlimited_play_time = 3;
  bool has_is_unlimited_play_time() const;
  private:
  bool _internal_has_is_unlimited_play_time() const;
  public:
  void clear_is_unlimited_play_time();
  bool is_unlimited_play_time() const;
  void set_is_unlimited_play_time(bool value);
  private:
  bool _internal_is_unlimited_play_time() const;
  void _internal_set_is_unlimited_play_time(bool value);
  public:

  // optional bool is_subscription = 6;
  bool has_is_subscription() const;
  private:
  bool _internal_has_is_subscription() const;
  public:
  void clear_is_subscription();
  bool is_subscription() const;
  void set_is_subscription(bool value);
  private:
  bool _internal_is_subscription() const;
  void _internal_set_is_subscription(bool value);
  public:

  // optional bool is_recurring_subscription = 7;
  bool has_is_recurring_subscription() const;
  private:
  bool _internal_has_is_recurring_subscription() const;
  public:
  void clear_is_recurring_subscription();
  bool is_recurring_subscription() const;
  void set_is_recurring_subscription(bool value);
  private:
  bool _internal_is_recurring_subscription() const;
  void _internal_set_is_recurring_subscription(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameTimeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 play_time_expires_;
  bool is_unlimited_play_time_;
  bool is_subscription_;
  bool is_recurring_subscription_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameTimeRemainingInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameTimeRemainingInfo) */ {
 public:
  GameTimeRemainingInfo();
  virtual ~GameTimeRemainingInfo();

  GameTimeRemainingInfo(const GameTimeRemainingInfo& from);
  GameTimeRemainingInfo(GameTimeRemainingInfo&& from) noexcept
    : GameTimeRemainingInfo() {
    *this = ::std::move(from);
  }

  inline GameTimeRemainingInfo& operator=(const GameTimeRemainingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameTimeRemainingInfo& operator=(GameTimeRemainingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameTimeRemainingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameTimeRemainingInfo* internal_default_instance() {
    return reinterpret_cast<const GameTimeRemainingInfo*>(
               &_GameTimeRemainingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GameTimeRemainingInfo& a, GameTimeRemainingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameTimeRemainingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameTimeRemainingInfo* New() const final {
    return CreateMaybeMessage<GameTimeRemainingInfo>(nullptr);
  }

  GameTimeRemainingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameTimeRemainingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameTimeRemainingInfo& from);
  void MergeFrom(const GameTimeRemainingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameTimeRemainingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameTimeRemainingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinutesRemainingFieldNumber = 1,
    kParentalDailyMinutesRemainingFieldNumber = 2,
    kParentalWeeklyMinutesRemainingFieldNumber = 3,
    kSecondsRemainingUntilKickFieldNumber = 4,
  };
  // optional uint32 minutes_remaining = 1;
  bool has_minutes_remaining() const;
  private:
  bool _internal_has_minutes_remaining() const;
  public:
  void clear_minutes_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_remaining() const;
  void set_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minutes_remaining() const;
  void _internal_set_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 parental_daily_minutes_remaining = 2;
  bool has_parental_daily_minutes_remaining() const;
  private:
  bool _internal_has_parental_daily_minutes_remaining() const;
  public:
  void clear_parental_daily_minutes_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 parental_daily_minutes_remaining() const;
  void set_parental_daily_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parental_daily_minutes_remaining() const;
  void _internal_set_parental_daily_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 parental_weekly_minutes_remaining = 3;
  bool has_parental_weekly_minutes_remaining() const;
  private:
  bool _internal_has_parental_weekly_minutes_remaining() const;
  public:
  void clear_parental_weekly_minutes_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 parental_weekly_minutes_remaining() const;
  void set_parental_weekly_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parental_weekly_minutes_remaining() const;
  void _internal_set_parental_weekly_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 seconds_remaining_until_kick = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_seconds_remaining_until_kick() const;
  private:
  bool _internal_has_seconds_remaining_until_kick() const;
  public:
  PROTOBUF_DEPRECATED void clear_seconds_remaining_until_kick();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 seconds_remaining_until_kick() const;
  PROTOBUF_DEPRECATED void set_seconds_remaining_until_kick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seconds_remaining_until_kick() const;
  void _internal_set_seconds_remaining_until_kick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameTimeRemainingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_remaining_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parental_daily_minutes_remaining_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parental_weekly_minutes_remaining_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_remaining_until_kick_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameStatus) */ {
 public:
  GameStatus();
  virtual ~GameStatus();

  GameStatus(const GameStatus& from);
  GameStatus(GameStatus&& from) noexcept
    : GameStatus() {
    *this = ::std::move(from);
  }

  inline GameStatus& operator=(const GameStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStatus& operator=(GameStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStatus* internal_default_instance() {
    return reinterpret_cast<const GameStatus*>(
               &_GameStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GameStatus& a, GameStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStatus* New() const final {
    return CreateMaybeMessage<GameStatus>(nullptr);
  }

  GameStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStatus& from);
  void MergeFrom(const GameStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuspensionExpiresFieldNumber = 6,
    kIsSuspendedFieldNumber = 4,
    kIsBannedFieldNumber = 5,
    kIsLockedFieldNumber = 8,
    kIsBamUnlockableFieldNumber = 9,
    kProgramFieldNumber = 7,
  };
  // optional uint64 suspension_expires = 6;
  bool has_suspension_expires() const;
  private:
  bool _internal_has_suspension_expires() const;
  public:
  void clear_suspension_expires();
  ::PROTOBUF_NAMESPACE_ID::uint64 suspension_expires() const;
  void set_suspension_expires(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_suspension_expires() const;
  void _internal_set_suspension_expires(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_suspended = 4;
  bool has_is_suspended() const;
  private:
  bool _internal_has_is_suspended() const;
  public:
  void clear_is_suspended();
  bool is_suspended() const;
  void set_is_suspended(bool value);
  private:
  bool _internal_is_suspended() const;
  void _internal_set_is_suspended(bool value);
  public:

  // optional bool is_banned = 5;
  bool has_is_banned() const;
  private:
  bool _internal_has_is_banned() const;
  public:
  void clear_is_banned();
  bool is_banned() const;
  void set_is_banned(bool value);
  private:
  bool _internal_is_banned() const;
  void _internal_set_is_banned(bool value);
  public:

  // optional bool is_locked = 8;
  bool has_is_locked() const;
  private:
  bool _internal_has_is_locked() const;
  public:
  void clear_is_locked();
  bool is_locked() const;
  void set_is_locked(bool value);
  private:
  bool _internal_is_locked() const;
  void _internal_set_is_locked(bool value);
  public:

  // optional bool is_bam_unlockable = 9;
  bool has_is_bam_unlockable() const;
  private:
  bool _internal_has_is_bam_unlockable() const;
  public:
  void clear_is_bam_unlockable();
  bool is_bam_unlockable() const;
  void set_is_bam_unlockable(bool value);
  private:
  bool _internal_is_bam_unlockable() const;
  void _internal_set_is_bam_unlockable(bool value);
  public:

  // optional fixed32 program = 7;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 suspension_expires_;
  bool is_suspended_;
  bool is_banned_;
  bool is_locked_;
  bool is_bam_unlockable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class RAFInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.RAFInfo) */ {
 public:
  RAFInfo();
  virtual ~RAFInfo();

  RAFInfo(const RAFInfo& from);
  RAFInfo(RAFInfo&& from) noexcept
    : RAFInfo() {
    *this = ::std::move(from);
  }

  inline RAFInfo& operator=(const RAFInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RAFInfo& operator=(RAFInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RAFInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RAFInfo* internal_default_instance() {
    return reinterpret_cast<const RAFInfo*>(
               &_RAFInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RAFInfo& a, RAFInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RAFInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RAFInfo* New() const final {
    return CreateMaybeMessage<RAFInfo>(nullptr);
  }

  RAFInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RAFInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RAFInfo& from);
  void MergeFrom(const RAFInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RAFInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.RAFInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRafInfoFieldNumber = 1,
  };
  // optional bytes raf_info = 1;
  bool has_raf_info() const;
  private:
  bool _internal_has_raf_info() const;
  public:
  void clear_raf_info();
  const std::string& raf_info() const;
  void set_raf_info(const std::string& value);
  void set_raf_info(std::string&& value);
  void set_raf_info(const char* value);
  void set_raf_info(const void* value, size_t size);
  std::string* mutable_raf_info();
  std::string* release_raf_info();
  void set_allocated_raf_info(std::string* raf_info);
  private:
  const std::string& _internal_raf_info() const;
  void _internal_set_raf_info(const std::string& value);
  std::string* _internal_mutable_raf_info();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.RAFInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raf_info_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameSessionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameSessionInfo) */ {
 public:
  GameSessionInfo();
  virtual ~GameSessionInfo();

  GameSessionInfo(const GameSessionInfo& from);
  GameSessionInfo(GameSessionInfo&& from) noexcept
    : GameSessionInfo() {
    *this = ::std::move(from);
  }

  inline GameSessionInfo& operator=(const GameSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameSessionInfo& operator=(GameSessionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameSessionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSessionInfo* internal_default_instance() {
    return reinterpret_cast<const GameSessionInfo*>(
               &_GameSessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GameSessionInfo& a, GameSessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameSessionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameSessionInfo* New() const final {
    return CreateMaybeMessage<GameSessionInfo>(nullptr);
  }

  GameSessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameSessionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameSessionInfo& from);
  void MergeFrom(const GameSessionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSessionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameSessionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 4,
    kIgrIdFieldNumber = 9,
    kStartTimeFieldNumber = 3,
    kHasBenefactorFieldNumber = 5,
    kIsUsingIgrFieldNumber = 6,
    kParentalControlsActiveFieldNumber = 7,
    kStartTimeSecFieldNumber = 8,
  };
  // optional .bgs.protocol.account.v1.GameSessionLocation location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::bgs::protocol::account::v1::GameSessionLocation& location() const;
  ::bgs::protocol::account::v1::GameSessionLocation* release_location();
  ::bgs::protocol::account::v1::GameSessionLocation* mutable_location();
  void set_allocated_location(::bgs::protocol::account::v1::GameSessionLocation* location);
  private:
  const ::bgs::protocol::account::v1::GameSessionLocation& _internal_location() const;
  ::bgs::protocol::account::v1::GameSessionLocation* _internal_mutable_location();
  public:

  // optional .bgs.protocol.account.v1.IgrId igr_id = 9;
  bool has_igr_id() const;
  private:
  bool _internal_has_igr_id() const;
  public:
  void clear_igr_id();
  const ::bgs::protocol::account::v1::IgrId& igr_id() const;
  ::bgs::protocol::account::v1::IgrId* release_igr_id();
  ::bgs::protocol::account::v1::IgrId* mutable_igr_id();
  void set_allocated_igr_id(::bgs::protocol::account::v1::IgrId* igr_id);
  private:
  const ::bgs::protocol::account::v1::IgrId& _internal_igr_id() const;
  ::bgs::protocol::account::v1::IgrId* _internal_mutable_igr_id();
  public:

  // optional uint32 start_time = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  PROTOBUF_DEPRECATED void clear_start_time();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 start_time() const;
  PROTOBUF_DEPRECATED void set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool has_benefactor = 5;
  bool has_has_benefactor() const;
  private:
  bool _internal_has_has_benefactor() const;
  public:
  void clear_has_benefactor();
  bool has_benefactor() const;
  void set_has_benefactor(bool value);
  private:
  bool _internal_has_benefactor() const;
  void _internal_set_has_benefactor(bool value);
  public:

  // optional bool is_using_igr = 6;
  bool has_is_using_igr() const;
  private:
  bool _internal_has_is_using_igr() const;
  public:
  void clear_is_using_igr();
  bool is_using_igr() const;
  void set_is_using_igr(bool value);
  private:
  bool _internal_is_using_igr() const;
  void _internal_set_is_using_igr(bool value);
  public:

  // optional bool parental_controls_active = 7;
  bool has_parental_controls_active() const;
  private:
  bool _internal_has_parental_controls_active() const;
  public:
  void clear_parental_controls_active();
  bool parental_controls_active() const;
  void set_parental_controls_active(bool value);
  private:
  bool _internal_parental_controls_active() const;
  void _internal_set_parental_controls_active(bool value);
  public:

  // optional uint64 start_time_sec = 8;
  bool has_start_time_sec() const;
  private:
  bool _internal_has_start_time_sec() const;
  public:
  void clear_start_time_sec();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_sec() const;
  void set_start_time_sec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_sec() const;
  void _internal_set_start_time_sec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameSessionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameSessionLocation* location_;
  ::bgs::protocol::account::v1::IgrId* igr_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_;
  bool has_benefactor_;
  bool is_using_igr_;
  bool parental_controls_active_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_sec_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameSessionUpdateInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameSessionUpdateInfo) */ {
 public:
  GameSessionUpdateInfo();
  virtual ~GameSessionUpdateInfo();

  GameSessionUpdateInfo(const GameSessionUpdateInfo& from);
  GameSessionUpdateInfo(GameSessionUpdateInfo&& from) noexcept
    : GameSessionUpdateInfo() {
    *this = ::std::move(from);
  }

  inline GameSessionUpdateInfo& operator=(const GameSessionUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameSessionUpdateInfo& operator=(GameSessionUpdateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameSessionUpdateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSessionUpdateInfo* internal_default_instance() {
    return reinterpret_cast<const GameSessionUpdateInfo*>(
               &_GameSessionUpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GameSessionUpdateInfo& a, GameSessionUpdateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameSessionUpdateInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameSessionUpdateInfo* New() const final {
    return CreateMaybeMessage<GameSessionUpdateInfo>(nullptr);
  }

  GameSessionUpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameSessionUpdateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameSessionUpdateInfo& from);
  void MergeFrom(const GameSessionUpdateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSessionUpdateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameSessionUpdateInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaisFieldNumber = 8,
  };
  // optional .bgs.protocol.account.v1.CAIS cais = 8;
  bool has_cais() const;
  private:
  bool _internal_has_cais() const;
  public:
  void clear_cais();
  const ::bgs::protocol::account::v1::CAIS& cais() const;
  ::bgs::protocol::account::v1::CAIS* release_cais();
  ::bgs::protocol::account::v1::CAIS* mutable_cais();
  void set_allocated_cais(::bgs::protocol::account::v1::CAIS* cais);
  private:
  const ::bgs::protocol::account::v1::CAIS& _internal_cais() const;
  ::bgs::protocol::account::v1::CAIS* _internal_mutable_cais();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameSessionUpdateInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::CAIS* cais_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameSessionLocation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameSessionLocation) */ {
 public:
  GameSessionLocation();
  virtual ~GameSessionLocation();

  GameSessionLocation(const GameSessionLocation& from);
  GameSessionLocation(GameSessionLocation&& from) noexcept
    : GameSessionLocation() {
    *this = ::std::move(from);
  }

  inline GameSessionLocation& operator=(const GameSessionLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameSessionLocation& operator=(GameSessionLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameSessionLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSessionLocation* internal_default_instance() {
    return reinterpret_cast<const GameSessionLocation*>(
               &_GameSessionLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GameSessionLocation& a, GameSessionLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(GameSessionLocation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameSessionLocation* New() const final {
    return CreateMaybeMessage<GameSessionLocation>(nullptr);
  }

  GameSessionLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameSessionLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameSessionLocation& from);
  void MergeFrom(const GameSessionLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSessionLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameSessionLocation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kCityFieldNumber = 3,
    kCountryFieldNumber = 2,
  };
  // optional string ip_address = 1;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // optional string city = 3;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional uint32 country = 2;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  ::PROTOBUF_NAMESPACE_ID::uint32 country() const;
  void set_country(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_country() const;
  void _internal_set_country(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameSessionLocation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::uint32 country_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class CAIS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.CAIS) */ {
 public:
  CAIS();
  virtual ~CAIS();

  CAIS(const CAIS& from);
  CAIS(CAIS&& from) noexcept
    : CAIS() {
    *this = ::std::move(from);
  }

  inline CAIS& operator=(const CAIS& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAIS& operator=(CAIS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAIS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAIS* internal_default_instance() {
    return reinterpret_cast<const CAIS*>(
               &_CAIS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CAIS& a, CAIS& b) {
    a.Swap(&b);
  }
  inline void Swap(CAIS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAIS* New() const final {
    return CreateMaybeMessage<CAIS>(nullptr);
  }

  CAIS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAIS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAIS& from);
  void MergeFrom(const CAIS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAIS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.CAIS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayedMinutesFieldNumber = 1,
    kRestedMinutesFieldNumber = 2,
    kLastHeardTimeFieldNumber = 3,
  };
  // optional uint32 played_minutes = 1;
  bool has_played_minutes() const;
  private:
  bool _internal_has_played_minutes() const;
  public:
  void clear_played_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 played_minutes() const;
  void set_played_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_played_minutes() const;
  void _internal_set_played_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rested_minutes = 2;
  bool has_rested_minutes() const;
  private:
  bool _internal_has_rested_minutes() const;
  public:
  void clear_rested_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 rested_minutes() const;
  void set_rested_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rested_minutes() const;
  void _internal_set_rested_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 last_heard_time = 3;
  bool has_last_heard_time() const;
  private:
  bool _internal_has_last_heard_time() const;
  public:
  void clear_last_heard_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_heard_time() const;
  void set_last_heard_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_heard_time() const;
  void _internal_set_last_heard_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.CAIS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 played_minutes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rested_minutes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_heard_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameAccountList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountList) */ {
 public:
  GameAccountList();
  virtual ~GameAccountList();

  GameAccountList(const GameAccountList& from);
  GameAccountList(GameAccountList&& from) noexcept
    : GameAccountList() {
    *this = ::std::move(from);
  }

  inline GameAccountList& operator=(const GameAccountList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountList& operator=(GameAccountList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountList* internal_default_instance() {
    return reinterpret_cast<const GameAccountList*>(
               &_GameAccountList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GameAccountList& a, GameAccountList& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountList* New() const final {
    return CreateMaybeMessage<GameAccountList>(nullptr);
  }

  GameAccountList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountList& from);
  void MergeFrom(const GameAccountList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 4,
    kRegionFieldNumber = 3,
  };
  // repeated .bgs.protocol.account.v1.GameAccountHandle handle = 4;
  int handle_size() const;
  private:
  int _internal_handle_size() const;
  public:
  void clear_handle();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_handle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountHandle >*
      mutable_handle();
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_handle(int index) const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_add_handle();
  public:
  const ::bgs::protocol::account::v1::GameAccountHandle& handle(int index) const;
  ::bgs::protocol::account::v1::GameAccountHandle* add_handle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountHandle >&
      handle() const;

  // optional uint32 region = 3;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountHandle > handle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AccountState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountState) */ {
 public:
  AccountState();
  virtual ~AccountState();

  AccountState(const AccountState& from);
  AccountState(AccountState&& from) noexcept
    : AccountState() {
    *this = ::std::move(from);
  }

  inline AccountState& operator=(const AccountState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountState& operator=(AccountState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountState* internal_default_instance() {
    return reinterpret_cast<const AccountState*>(
               &_AccountState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(AccountState& a, AccountState& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountState* New() const final {
    return CreateMaybeMessage<AccountState>(nullptr);
  }

  AccountState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountState& from);
  void MergeFrom(const AccountState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameLevelInfoFieldNumber = 5,
    kGameStatusFieldNumber = 6,
    kGameAccountsFieldNumber = 7,
    kAccountLevelInfoFieldNumber = 1,
    kPrivacyInfoFieldNumber = 2,
    kParentalControlInfoFieldNumber = 3,
  };
  // repeated .bgs.protocol.account.v1.GameLevelInfo game_level_info = 5;
  int game_level_info_size() const;
  private:
  int _internal_game_level_info_size() const;
  public:
  void clear_game_level_info();
  ::bgs::protocol::account::v1::GameLevelInfo* mutable_game_level_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameLevelInfo >*
      mutable_game_level_info();
  private:
  const ::bgs::protocol::account::v1::GameLevelInfo& _internal_game_level_info(int index) const;
  ::bgs::protocol::account::v1::GameLevelInfo* _internal_add_game_level_info();
  public:
  const ::bgs::protocol::account::v1::GameLevelInfo& game_level_info(int index) const;
  ::bgs::protocol::account::v1::GameLevelInfo* add_game_level_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameLevelInfo >&
      game_level_info() const;

  // repeated .bgs.protocol.account.v1.GameStatus game_status = 6;
  int game_status_size() const;
  private:
  int _internal_game_status_size() const;
  public:
  void clear_game_status();
  ::bgs::protocol::account::v1::GameStatus* mutable_game_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameStatus >*
      mutable_game_status();
  private:
  const ::bgs::protocol::account::v1::GameStatus& _internal_game_status(int index) const;
  ::bgs::protocol::account::v1::GameStatus* _internal_add_game_status();
  public:
  const ::bgs::protocol::account::v1::GameStatus& game_status(int index) const;
  ::bgs::protocol::account::v1::GameStatus* add_game_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameStatus >&
      game_status() const;

  // repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 7;
  int game_accounts_size() const;
  private:
  int _internal_game_accounts_size() const;
  public:
  void clear_game_accounts();
  ::bgs::protocol::account::v1::GameAccountList* mutable_game_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList >*
      mutable_game_accounts();
  private:
  const ::bgs::protocol::account::v1::GameAccountList& _internal_game_accounts(int index) const;
  ::bgs::protocol::account::v1::GameAccountList* _internal_add_game_accounts();
  public:
  const ::bgs::protocol::account::v1::GameAccountList& game_accounts(int index) const;
  ::bgs::protocol::account::v1::GameAccountList* add_game_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList >&
      game_accounts() const;

  // optional .bgs.protocol.account.v1.AccountLevelInfo account_level_info = 1;
  bool has_account_level_info() const;
  private:
  bool _internal_has_account_level_info() const;
  public:
  void clear_account_level_info();
  const ::bgs::protocol::account::v1::AccountLevelInfo& account_level_info() const;
  ::bgs::protocol::account::v1::AccountLevelInfo* release_account_level_info();
  ::bgs::protocol::account::v1::AccountLevelInfo* mutable_account_level_info();
  void set_allocated_account_level_info(::bgs::protocol::account::v1::AccountLevelInfo* account_level_info);
  private:
  const ::bgs::protocol::account::v1::AccountLevelInfo& _internal_account_level_info() const;
  ::bgs::protocol::account::v1::AccountLevelInfo* _internal_mutable_account_level_info();
  public:

  // optional .bgs.protocol.account.v1.PrivacyInfo privacy_info = 2;
  bool has_privacy_info() const;
  private:
  bool _internal_has_privacy_info() const;
  public:
  void clear_privacy_info();
  const ::bgs::protocol::account::v1::PrivacyInfo& privacy_info() const;
  ::bgs::protocol::account::v1::PrivacyInfo* release_privacy_info();
  ::bgs::protocol::account::v1::PrivacyInfo* mutable_privacy_info();
  void set_allocated_privacy_info(::bgs::protocol::account::v1::PrivacyInfo* privacy_info);
  private:
  const ::bgs::protocol::account::v1::PrivacyInfo& _internal_privacy_info() const;
  ::bgs::protocol::account::v1::PrivacyInfo* _internal_mutable_privacy_info();
  public:

  // optional .bgs.protocol.account.v1.ParentalControlInfo parental_control_info = 3;
  bool has_parental_control_info() const;
  private:
  bool _internal_has_parental_control_info() const;
  public:
  void clear_parental_control_info();
  const ::bgs::protocol::account::v1::ParentalControlInfo& parental_control_info() const;
  ::bgs::protocol::account::v1::ParentalControlInfo* release_parental_control_info();
  ::bgs::protocol::account::v1::ParentalControlInfo* mutable_parental_control_info();
  void set_allocated_parental_control_info(::bgs::protocol::account::v1::ParentalControlInfo* parental_control_info);
  private:
  const ::bgs::protocol::account::v1::ParentalControlInfo& _internal_parental_control_info() const;
  ::bgs::protocol::account::v1::ParentalControlInfo* _internal_mutable_parental_control_info();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameLevelInfo > game_level_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameStatus > game_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList > game_accounts_;
  ::bgs::protocol::account::v1::AccountLevelInfo* account_level_info_;
  ::bgs::protocol::account::v1::PrivacyInfo* privacy_info_;
  ::bgs::protocol::account::v1::ParentalControlInfo* parental_control_info_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AccountStateTagged :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AccountStateTagged) */ {
 public:
  AccountStateTagged();
  virtual ~AccountStateTagged();

  AccountStateTagged(const AccountStateTagged& from);
  AccountStateTagged(AccountStateTagged&& from) noexcept
    : AccountStateTagged() {
    *this = ::std::move(from);
  }

  inline AccountStateTagged& operator=(const AccountStateTagged& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountStateTagged& operator=(AccountStateTagged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountStateTagged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountStateTagged* internal_default_instance() {
    return reinterpret_cast<const AccountStateTagged*>(
               &_AccountStateTagged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(AccountStateTagged& a, AccountStateTagged& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountStateTagged* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountStateTagged* New() const final {
    return CreateMaybeMessage<AccountStateTagged>(nullptr);
  }

  AccountStateTagged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountStateTagged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountStateTagged& from);
  void MergeFrom(const AccountStateTagged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountStateTagged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AccountStateTagged";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountStateFieldNumber = 1,
    kAccountTagsFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.AccountState account_state = 1;
  bool has_account_state() const;
  private:
  bool _internal_has_account_state() const;
  public:
  void clear_account_state();
  const ::bgs::protocol::account::v1::AccountState& account_state() const;
  ::bgs::protocol::account::v1::AccountState* release_account_state();
  ::bgs::protocol::account::v1::AccountState* mutable_account_state();
  void set_allocated_account_state(::bgs::protocol::account::v1::AccountState* account_state);
  private:
  const ::bgs::protocol::account::v1::AccountState& _internal_account_state() const;
  ::bgs::protocol::account::v1::AccountState* _internal_mutable_account_state();
  public:

  // optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 2;
  bool has_account_tags() const;
  private:
  bool _internal_has_account_tags() const;
  public:
  void clear_account_tags();
  const ::bgs::protocol::account::v1::AccountFieldTags& account_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* release_account_tags();
  ::bgs::protocol::account::v1::AccountFieldTags* mutable_account_tags();
  void set_allocated_account_tags(::bgs::protocol::account::v1::AccountFieldTags* account_tags);
  private:
  const ::bgs::protocol::account::v1::AccountFieldTags& _internal_account_tags() const;
  ::bgs::protocol::account::v1::AccountFieldTags* _internal_mutable_account_tags();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AccountStateTagged)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountState* account_state_;
  ::bgs::protocol::account::v1::AccountFieldTags* account_tags_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameAccountState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountState) */ {
 public:
  GameAccountState();
  virtual ~GameAccountState();

  GameAccountState(const GameAccountState& from);
  GameAccountState(GameAccountState&& from) noexcept
    : GameAccountState() {
    *this = ::std::move(from);
  }

  inline GameAccountState& operator=(const GameAccountState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountState& operator=(GameAccountState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountState* internal_default_instance() {
    return reinterpret_cast<const GameAccountState*>(
               &_GameAccountState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GameAccountState& a, GameAccountState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountState* New() const final {
    return CreateMaybeMessage<GameAccountState>(nullptr);
  }

  GameAccountState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountState& from);
  void MergeFrom(const GameAccountState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameLevelInfoFieldNumber = 1,
    kGameTimeInfoFieldNumber = 2,
    kGameStatusFieldNumber = 3,
    kRafInfoFieldNumber = 4,
  };
  // optional .bgs.protocol.account.v1.GameLevelInfo game_level_info = 1;
  bool has_game_level_info() const;
  private:
  bool _internal_has_game_level_info() const;
  public:
  void clear_game_level_info();
  const ::bgs::protocol::account::v1::GameLevelInfo& game_level_info() const;
  ::bgs::protocol::account::v1::GameLevelInfo* release_game_level_info();
  ::bgs::protocol::account::v1::GameLevelInfo* mutable_game_level_info();
  void set_allocated_game_level_info(::bgs::protocol::account::v1::GameLevelInfo* game_level_info);
  private:
  const ::bgs::protocol::account::v1::GameLevelInfo& _internal_game_level_info() const;
  ::bgs::protocol::account::v1::GameLevelInfo* _internal_mutable_game_level_info();
  public:

  // optional .bgs.protocol.account.v1.GameTimeInfo game_time_info = 2;
  bool has_game_time_info() const;
  private:
  bool _internal_has_game_time_info() const;
  public:
  void clear_game_time_info();
  const ::bgs::protocol::account::v1::GameTimeInfo& game_time_info() const;
  ::bgs::protocol::account::v1::GameTimeInfo* release_game_time_info();
  ::bgs::protocol::account::v1::GameTimeInfo* mutable_game_time_info();
  void set_allocated_game_time_info(::bgs::protocol::account::v1::GameTimeInfo* game_time_info);
  private:
  const ::bgs::protocol::account::v1::GameTimeInfo& _internal_game_time_info() const;
  ::bgs::protocol::account::v1::GameTimeInfo* _internal_mutable_game_time_info();
  public:

  // optional .bgs.protocol.account.v1.GameStatus game_status = 3;
  bool has_game_status() const;
  private:
  bool _internal_has_game_status() const;
  public:
  void clear_game_status();
  const ::bgs::protocol::account::v1::GameStatus& game_status() const;
  ::bgs::protocol::account::v1::GameStatus* release_game_status();
  ::bgs::protocol::account::v1::GameStatus* mutable_game_status();
  void set_allocated_game_status(::bgs::protocol::account::v1::GameStatus* game_status);
  private:
  const ::bgs::protocol::account::v1::GameStatus& _internal_game_status() const;
  ::bgs::protocol::account::v1::GameStatus* _internal_mutable_game_status();
  public:

  // optional .bgs.protocol.account.v1.RAFInfo raf_info = 4;
  bool has_raf_info() const;
  private:
  bool _internal_has_raf_info() const;
  public:
  void clear_raf_info();
  const ::bgs::protocol::account::v1::RAFInfo& raf_info() const;
  ::bgs::protocol::account::v1::RAFInfo* release_raf_info();
  ::bgs::protocol::account::v1::RAFInfo* mutable_raf_info();
  void set_allocated_raf_info(::bgs::protocol::account::v1::RAFInfo* raf_info);
  private:
  const ::bgs::protocol::account::v1::RAFInfo& _internal_raf_info() const;
  ::bgs::protocol::account::v1::RAFInfo* _internal_mutable_raf_info();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameLevelInfo* game_level_info_;
  ::bgs::protocol::account::v1::GameTimeInfo* game_time_info_;
  ::bgs::protocol::account::v1::GameStatus* game_status_;
  ::bgs::protocol::account::v1::RAFInfo* raf_info_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class GameAccountStateTagged :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.GameAccountStateTagged) */ {
 public:
  GameAccountStateTagged();
  virtual ~GameAccountStateTagged();

  GameAccountStateTagged(const GameAccountStateTagged& from);
  GameAccountStateTagged(GameAccountStateTagged&& from) noexcept
    : GameAccountStateTagged() {
    *this = ::std::move(from);
  }

  inline GameAccountStateTagged& operator=(const GameAccountStateTagged& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAccountStateTagged& operator=(GameAccountStateTagged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameAccountStateTagged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAccountStateTagged* internal_default_instance() {
    return reinterpret_cast<const GameAccountStateTagged*>(
               &_GameAccountStateTagged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GameAccountStateTagged& a, GameAccountStateTagged& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAccountStateTagged* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameAccountStateTagged* New() const final {
    return CreateMaybeMessage<GameAccountStateTagged>(nullptr);
  }

  GameAccountStateTagged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameAccountStateTagged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameAccountStateTagged& from);
  void MergeFrom(const GameAccountStateTagged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAccountStateTagged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.GameAccountStateTagged";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccountStateFieldNumber = 1,
    kGameAccountTagsFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
  bool has_game_account_state() const;
  private:
  bool _internal_has_game_account_state() const;
  public:
  void clear_game_account_state();
  const ::bgs::protocol::account::v1::GameAccountState& game_account_state() const;
  ::bgs::protocol::account::v1::GameAccountState* release_game_account_state();
  ::bgs::protocol::account::v1::GameAccountState* mutable_game_account_state();
  void set_allocated_game_account_state(::bgs::protocol::account::v1::GameAccountState* game_account_state);
  private:
  const ::bgs::protocol::account::v1::GameAccountState& _internal_game_account_state() const;
  ::bgs::protocol::account::v1::GameAccountState* _internal_mutable_game_account_state();
  public:

  // optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 2;
  bool has_game_account_tags() const;
  private:
  bool _internal_has_game_account_tags() const;
  public:
  void clear_game_account_tags();
  const ::bgs::protocol::account::v1::GameAccountFieldTags& game_account_tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* release_game_account_tags();
  ::bgs::protocol::account::v1::GameAccountFieldTags* mutable_game_account_tags();
  void set_allocated_game_account_tags(::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags);
  private:
  const ::bgs::protocol::account::v1::GameAccountFieldTags& _internal_game_account_tags() const;
  ::bgs::protocol::account::v1::GameAccountFieldTags* _internal_mutable_game_account_tags();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.GameAccountStateTagged)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameAccountState* game_account_state_;
  ::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AuthorizedData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.AuthorizedData) */ {
 public:
  AuthorizedData();
  virtual ~AuthorizedData();

  AuthorizedData(const AuthorizedData& from);
  AuthorizedData(AuthorizedData&& from) noexcept
    : AuthorizedData() {
    *this = ::std::move(from);
  }

  inline AuthorizedData& operator=(const AuthorizedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizedData& operator=(AuthorizedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizedData* internal_default_instance() {
    return reinterpret_cast<const AuthorizedData*>(
               &_AuthorizedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AuthorizedData& a, AuthorizedData& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorizedData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorizedData* New() const final {
    return CreateMaybeMessage<AuthorizedData>(nullptr);
  }

  AuthorizedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizedData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizedData& from);
  void MergeFrom(const AuthorizedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.AuthorizedData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicenseFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // repeated uint32 license = 2;
  int license_size() const;
  private:
  int _internal_license_size() const;
  public:
  void clear_license();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_license(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_license() const;
  void _internal_add_license(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_license();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 license(int index) const;
  void set_license(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_license(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      license() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_license();

  // optional string data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.AuthorizedData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > license_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class IgrId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.IgrId) */ {
 public:
  IgrId();
  virtual ~IgrId();

  IgrId(const IgrId& from);
  IgrId(IgrId&& from) noexcept
    : IgrId() {
    *this = ::std::move(from);
  }

  inline IgrId& operator=(const IgrId& from) {
    CopyFrom(from);
    return *this;
  }
  inline IgrId& operator=(IgrId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IgrId& default_instance();

  enum TypeCase {
    kGameAccount = 1,
    kExternalId = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IgrId* internal_default_instance() {
    return reinterpret_cast<const IgrId*>(
               &_IgrId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(IgrId& a, IgrId& b) {
    a.Swap(&b);
  }
  inline void Swap(IgrId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IgrId* New() const final {
    return CreateMaybeMessage<IgrId>(nullptr);
  }

  IgrId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IgrId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IgrId& from);
  void MergeFrom(const IgrId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IgrId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.IgrId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAccountFieldNumber = 1,
    kExternalIdFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
  bool has_game_account() const;
  private:
  bool _internal_has_game_account() const;
  public:
  void clear_game_account();
  const ::bgs::protocol::account::v1::GameAccountHandle& game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_game_account();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_game_account();
  void set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_game_account();
  public:

  // optional fixed32 external_id = 2;
  bool has_external_id() const;
  private:
  bool _internal_has_external_id() const;
  public:
  void clear_external_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 external_id() const;
  void set_external_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_external_id() const;
  void _internal_set_external_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.IgrId)
 private:
  class _Internal;
  void set_has_game_account();
  void set_has_external_id();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union TypeUnion {
    TypeUnion() {}
    ::bgs::protocol::account::v1::GameAccountHandle* game_account_;
    ::PROTOBUF_NAMESPACE_ID::uint32 external_id_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class IgrAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.account.v1.IgrAddress) */ {
 public:
  IgrAddress();
  virtual ~IgrAddress();

  IgrAddress(const IgrAddress& from);
  IgrAddress(IgrAddress&& from) noexcept
    : IgrAddress() {
    *this = ::std::move(from);
  }

  inline IgrAddress& operator=(const IgrAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline IgrAddress& operator=(IgrAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IgrAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IgrAddress* internal_default_instance() {
    return reinterpret_cast<const IgrAddress*>(
               &_IgrAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(IgrAddress& a, IgrAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(IgrAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IgrAddress* New() const final {
    return CreateMaybeMessage<IgrAddress>(nullptr);
  }

  IgrAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IgrAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IgrAddress& from);
  void MergeFrom(const IgrAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IgrAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.account.v1.IgrAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientAddressFieldNumber = 1,
    kRegionFieldNumber = 2,
  };
  // optional string client_address = 1;
  bool has_client_address() const;
  private:
  bool _internal_has_client_address() const;
  public:
  void clear_client_address();
  const std::string& client_address() const;
  void set_client_address(const std::string& value);
  void set_client_address(std::string&& value);
  void set_client_address(const char* value);
  void set_client_address(const char* value, size_t size);
  std::string* mutable_client_address();
  std::string* release_client_address();
  void set_allocated_client_address(std::string* client_address);
  private:
  const std::string& _internal_client_address() const;
  void _internal_set_client_address(const std::string& value);
  std::string* _internal_mutable_client_address();
  public:

  // optional uint32 region = 2;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.account.v1.IgrAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountId

// required fixed32 id = 1 [(.bgs.protocol.valid) = {
inline bool AccountId::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountId::has_id() const {
  return _internal_has_id();
}
inline void AccountId::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountId::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountId.id)
  return _internal_id();
}
inline void AccountId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void AccountId::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountId.id)
}

// -------------------------------------------------------------------

// AccountLicense

// required uint32 id = 1;
inline bool AccountLicense::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountLicense::has_id() const {
  return _internal_has_id();
}
inline void AccountLicense::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLicense::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLicense::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLicense.id)
  return _internal_id();
}
inline void AccountLicense::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void AccountLicense::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLicense.id)
}

// optional uint64 expires = 2;
inline bool AccountLicense::_internal_has_expires() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountLicense::has_expires() const {
  return _internal_has_expires();
}
inline void AccountLicense::clear_expires() {
  expires_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountLicense::_internal_expires() const {
  return expires_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountLicense::expires() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLicense.expires)
  return _internal_expires();
}
inline void AccountLicense::_internal_set_expires(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  expires_ = value;
}
inline void AccountLicense::set_expires(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLicense.expires)
}

// -------------------------------------------------------------------

// GameAccountHandle

// required fixed32 id = 1 [(.bgs.protocol.valid) = {
inline bool GameAccountHandle::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameAccountHandle::has_id() const {
  return _internal_has_id();
}
inline void GameAccountHandle::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountHandle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountHandle::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountHandle.id)
  return _internal_id();
}
inline void GameAccountHandle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void GameAccountHandle::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountHandle.id)
}

// required fixed32 program = 2 [(.bgs.protocol.valid) = {
inline bool GameAccountHandle::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameAccountHandle::has_program() const {
  return _internal_has_program();
}
inline void GameAccountHandle::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountHandle::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountHandle::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountHandle.program)
  return _internal_program();
}
inline void GameAccountHandle::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  program_ = value;
}
inline void GameAccountHandle::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountHandle.program)
}

// required uint32 region = 3 [(.bgs.protocol.valid) = {
inline bool GameAccountHandle::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameAccountHandle::has_region() const {
  return _internal_has_region();
}
inline void GameAccountHandle::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountHandle::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountHandle::region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountHandle.region)
  return _internal_region();
}
inline void GameAccountHandle::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  region_ = value;
}
inline void GameAccountHandle::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountHandle.region)
}

// -------------------------------------------------------------------

// AccountReference

// optional fixed32 id = 1;
inline bool AccountReference::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountReference::has_id() const {
  return _internal_has_id();
}
inline void AccountReference::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountReference::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountReference::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountReference.id)
  return _internal_id();
}
inline void AccountReference::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void AccountReference::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountReference.id)
}

// optional string email = 2;
inline bool AccountReference::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountReference::has_email() const {
  return _internal_has_email();
}
inline void AccountReference::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountReference::email() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountReference.email)
  return _internal_email();
}
inline void AccountReference::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountReference.email)
}
inline std::string* AccountReference::mutable_email() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountReference.email)
  return _internal_mutable_email();
}
inline const std::string& AccountReference::_internal_email() const {
  return email_.GetNoArena();
}
inline void AccountReference::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountReference::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.AccountReference.email)
}
inline void AccountReference::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.AccountReference.email)
}
inline void AccountReference::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.AccountReference.email)
}
inline std::string* AccountReference::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountReference::release_email() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountReference.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountReference::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountReference.email)
}

// optional .bgs.protocol.account.v1.GameAccountHandle handle = 3;
inline bool AccountReference::_internal_has_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || handle_ != nullptr);
  return value;
}
inline bool AccountReference::has_handle() const {
  return _internal_has_handle();
}
inline void AccountReference::clear_handle() {
  if (handle_ != nullptr) handle_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& AccountReference::_internal_handle() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = handle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& AccountReference::handle() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountReference.handle)
  return _internal_handle();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* AccountReference::release_handle() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountReference.handle)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* AccountReference::_internal_mutable_handle() {
  _has_bits_[0] |= 0x00000004u;
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    handle_ = p;
  }
  return handle_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* AccountReference::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountReference.handle)
  return _internal_mutable_handle();
}
inline void AccountReference::set_allocated_handle(::bgs::protocol::account::v1::GameAccountHandle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete handle_;
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountReference.handle)
}

// optional string battle_tag = 4;
inline bool AccountReference::_internal_has_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountReference::has_battle_tag() const {
  return _internal_has_battle_tag();
}
inline void AccountReference::clear_battle_tag() {
  battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountReference::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountReference.battle_tag)
  return _internal_battle_tag();
}
inline void AccountReference::set_battle_tag(const std::string& value) {
  _internal_set_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountReference.battle_tag)
}
inline std::string* AccountReference::mutable_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountReference.battle_tag)
  return _internal_mutable_battle_tag();
}
inline const std::string& AccountReference::_internal_battle_tag() const {
  return battle_tag_.GetNoArena();
}
inline void AccountReference::_internal_set_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountReference::set_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.AccountReference.battle_tag)
}
inline void AccountReference::set_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.AccountReference.battle_tag)
}
inline void AccountReference::set_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.AccountReference.battle_tag)
}
inline std::string* AccountReference::_internal_mutable_battle_tag() {
  _has_bits_[0] |= 0x00000002u;
  return battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountReference::release_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountReference.battle_tag)
  if (!_internal_has_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountReference::set_allocated_battle_tag(std::string* battle_tag) {
  if (battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountReference.battle_tag)
}

// optional uint32 region = 10 [default = 0];
inline bool AccountReference::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccountReference::has_region() const {
  return _internal_has_region();
}
inline void AccountReference::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountReference::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountReference::region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountReference.region)
  return _internal_region();
}
inline void AccountReference::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  region_ = value;
}
inline void AccountReference::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountReference.region)
}

// -------------------------------------------------------------------

// Identity

// optional .bgs.protocol.account.v1.AccountId account = 1;
inline bool Identity::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_ != nullptr);
  return value;
}
inline bool Identity::has_account() const {
  return _internal_has_account();
}
inline void Identity::clear_account() {
  if (account_ != nullptr) account_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::account::v1::AccountId& Identity::_internal_account() const {
  const ::bgs::protocol::account::v1::AccountId* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& Identity::account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.Identity.account)
  return _internal_account();
}
inline ::bgs::protocol::account::v1::AccountId* Identity::release_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.Identity.account)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* Identity::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    account_ = p;
  }
  return account_;
}
inline ::bgs::protocol::account::v1::AccountId* Identity::mutable_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.Identity.account)
  return _internal_mutable_account();
}
inline void Identity::set_allocated_account(::bgs::protocol::account::v1::AccountId* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.Identity.account)
}

// optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
inline bool Identity::_internal_has_game_account() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_account_ != nullptr);
  return value;
}
inline bool Identity::has_game_account() const {
  return _internal_has_game_account();
}
inline void Identity::clear_game_account() {
  if (game_account_ != nullptr) game_account_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& Identity::_internal_game_account() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = game_account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& Identity::game_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.Identity.game_account)
  return _internal_game_account();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* Identity::release_game_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.Identity.game_account)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = game_account_;
  game_account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* Identity::_internal_mutable_game_account() {
  _has_bits_[0] |= 0x00000002u;
  if (game_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    game_account_ = p;
  }
  return game_account_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* Identity::mutable_game_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.Identity.game_account)
  return _internal_mutable_game_account();
}
inline void Identity::set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_account_;
  }
  if (game_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_account_ = game_account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.Identity.game_account)
}

// -------------------------------------------------------------------

// ProgramTag

// optional fixed32 program = 1;
inline bool ProgramTag::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProgramTag::has_program() const {
  return _internal_has_program();
}
inline void ProgramTag::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgramTag::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgramTag::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ProgramTag.program)
  return _internal_program();
}
inline void ProgramTag::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  program_ = value;
}
inline void ProgramTag::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ProgramTag.program)
}

// optional fixed32 tag = 2;
inline bool ProgramTag::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProgramTag::has_tag() const {
  return _internal_has_tag();
}
inline void ProgramTag::clear_tag() {
  tag_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgramTag::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgramTag::tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ProgramTag.tag)
  return _internal_tag();
}
inline void ProgramTag::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tag_ = value;
}
inline void ProgramTag::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ProgramTag.tag)
}

// -------------------------------------------------------------------

// RegionTag

// optional fixed32 region = 1;
inline bool RegionTag::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionTag::has_region() const {
  return _internal_has_region();
}
inline void RegionTag::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionTag::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionTag::region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.RegionTag.region)
  return _internal_region();
}
inline void RegionTag::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  region_ = value;
}
inline void RegionTag::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.RegionTag.region)
}

// optional fixed32 tag = 2;
inline bool RegionTag::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionTag::has_tag() const {
  return _internal_has_tag();
}
inline void RegionTag::clear_tag() {
  tag_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionTag::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionTag::tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.RegionTag.tag)
  return _internal_tag();
}
inline void RegionTag::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tag_ = value;
}
inline void RegionTag::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.RegionTag.tag)
}

// -------------------------------------------------------------------

// AccountFieldTags

// optional fixed32 account_level_info_tag = 2;
inline bool AccountFieldTags::_internal_has_account_level_info_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountFieldTags::has_account_level_info_tag() const {
  return _internal_has_account_level_info_tag();
}
inline void AccountFieldTags::clear_account_level_info_tag() {
  account_level_info_tag_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountFieldTags::_internal_account_level_info_tag() const {
  return account_level_info_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountFieldTags::account_level_info_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldTags.account_level_info_tag)
  return _internal_account_level_info_tag();
}
inline void AccountFieldTags::_internal_set_account_level_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_level_info_tag_ = value;
}
inline void AccountFieldTags::set_account_level_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_level_info_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldTags.account_level_info_tag)
}

// optional fixed32 privacy_info_tag = 3;
inline bool AccountFieldTags::_internal_has_privacy_info_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountFieldTags::has_privacy_info_tag() const {
  return _internal_has_privacy_info_tag();
}
inline void AccountFieldTags::clear_privacy_info_tag() {
  privacy_info_tag_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountFieldTags::_internal_privacy_info_tag() const {
  return privacy_info_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountFieldTags::privacy_info_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldTags.privacy_info_tag)
  return _internal_privacy_info_tag();
}
inline void AccountFieldTags::_internal_set_privacy_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  privacy_info_tag_ = value;
}
inline void AccountFieldTags::set_privacy_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_privacy_info_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldTags.privacy_info_tag)
}

// optional fixed32 parental_control_info_tag = 4;
inline bool AccountFieldTags::_internal_has_parental_control_info_tag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountFieldTags::has_parental_control_info_tag() const {
  return _internal_has_parental_control_info_tag();
}
inline void AccountFieldTags::clear_parental_control_info_tag() {
  parental_control_info_tag_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountFieldTags::_internal_parental_control_info_tag() const {
  return parental_control_info_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountFieldTags::parental_control_info_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldTags.parental_control_info_tag)
  return _internal_parental_control_info_tag();
}
inline void AccountFieldTags::_internal_set_parental_control_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  parental_control_info_tag_ = value;
}
inline void AccountFieldTags::set_parental_control_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parental_control_info_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldTags.parental_control_info_tag)
}

// repeated .bgs.protocol.account.v1.ProgramTag game_level_info_tags = 7;
inline int AccountFieldTags::_internal_game_level_info_tags_size() const {
  return game_level_info_tags_.size();
}
inline int AccountFieldTags::game_level_info_tags_size() const {
  return _internal_game_level_info_tags_size();
}
inline void AccountFieldTags::clear_game_level_info_tags() {
  game_level_info_tags_.Clear();
}
inline ::bgs::protocol::account::v1::ProgramTag* AccountFieldTags::mutable_game_level_info_tags(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountFieldTags.game_level_info_tags)
  return game_level_info_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag >*
AccountFieldTags::mutable_game_level_info_tags() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.AccountFieldTags.game_level_info_tags)
  return &game_level_info_tags_;
}
inline const ::bgs::protocol::account::v1::ProgramTag& AccountFieldTags::_internal_game_level_info_tags(int index) const {
  return game_level_info_tags_.Get(index);
}
inline const ::bgs::protocol::account::v1::ProgramTag& AccountFieldTags::game_level_info_tags(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldTags.game_level_info_tags)
  return _internal_game_level_info_tags(index);
}
inline ::bgs::protocol::account::v1::ProgramTag* AccountFieldTags::_internal_add_game_level_info_tags() {
  return game_level_info_tags_.Add();
}
inline ::bgs::protocol::account::v1::ProgramTag* AccountFieldTags::add_game_level_info_tags() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.AccountFieldTags.game_level_info_tags)
  return _internal_add_game_level_info_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag >&
AccountFieldTags::game_level_info_tags() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.AccountFieldTags.game_level_info_tags)
  return game_level_info_tags_;
}

// repeated .bgs.protocol.account.v1.ProgramTag game_status_tags = 9;
inline int AccountFieldTags::_internal_game_status_tags_size() const {
  return game_status_tags_.size();
}
inline int AccountFieldTags::game_status_tags_size() const {
  return _internal_game_status_tags_size();
}
inline void AccountFieldTags::clear_game_status_tags() {
  game_status_tags_.Clear();
}
inline ::bgs::protocol::account::v1::ProgramTag* AccountFieldTags::mutable_game_status_tags(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountFieldTags.game_status_tags)
  return game_status_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag >*
AccountFieldTags::mutable_game_status_tags() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.AccountFieldTags.game_status_tags)
  return &game_status_tags_;
}
inline const ::bgs::protocol::account::v1::ProgramTag& AccountFieldTags::_internal_game_status_tags(int index) const {
  return game_status_tags_.Get(index);
}
inline const ::bgs::protocol::account::v1::ProgramTag& AccountFieldTags::game_status_tags(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldTags.game_status_tags)
  return _internal_game_status_tags(index);
}
inline ::bgs::protocol::account::v1::ProgramTag* AccountFieldTags::_internal_add_game_status_tags() {
  return game_status_tags_.Add();
}
inline ::bgs::protocol::account::v1::ProgramTag* AccountFieldTags::add_game_status_tags() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.AccountFieldTags.game_status_tags)
  return _internal_add_game_status_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::ProgramTag >&
AccountFieldTags::game_status_tags() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.AccountFieldTags.game_status_tags)
  return game_status_tags_;
}

// repeated .bgs.protocol.account.v1.RegionTag game_account_tags = 11;
inline int AccountFieldTags::_internal_game_account_tags_size() const {
  return game_account_tags_.size();
}
inline int AccountFieldTags::game_account_tags_size() const {
  return _internal_game_account_tags_size();
}
inline void AccountFieldTags::clear_game_account_tags() {
  game_account_tags_.Clear();
}
inline ::bgs::protocol::account::v1::RegionTag* AccountFieldTags::mutable_game_account_tags(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountFieldTags.game_account_tags)
  return game_account_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::RegionTag >*
AccountFieldTags::mutable_game_account_tags() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.AccountFieldTags.game_account_tags)
  return &game_account_tags_;
}
inline const ::bgs::protocol::account::v1::RegionTag& AccountFieldTags::_internal_game_account_tags(int index) const {
  return game_account_tags_.Get(index);
}
inline const ::bgs::protocol::account::v1::RegionTag& AccountFieldTags::game_account_tags(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldTags.game_account_tags)
  return _internal_game_account_tags(index);
}
inline ::bgs::protocol::account::v1::RegionTag* AccountFieldTags::_internal_add_game_account_tags() {
  return game_account_tags_.Add();
}
inline ::bgs::protocol::account::v1::RegionTag* AccountFieldTags::add_game_account_tags() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.AccountFieldTags.game_account_tags)
  return _internal_add_game_account_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::RegionTag >&
AccountFieldTags::game_account_tags() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.AccountFieldTags.game_account_tags)
  return game_account_tags_;
}

// -------------------------------------------------------------------

// GameAccountFieldTags

// optional fixed32 game_level_info_tag = 2;
inline bool GameAccountFieldTags::_internal_has_game_level_info_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameAccountFieldTags::has_game_level_info_tag() const {
  return _internal_has_game_level_info_tag();
}
inline void GameAccountFieldTags::clear_game_level_info_tag() {
  game_level_info_tag_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountFieldTags::_internal_game_level_info_tag() const {
  return game_level_info_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountFieldTags::game_level_info_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldTags.game_level_info_tag)
  return _internal_game_level_info_tag();
}
inline void GameAccountFieldTags::_internal_set_game_level_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_level_info_tag_ = value;
}
inline void GameAccountFieldTags::set_game_level_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_level_info_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldTags.game_level_info_tag)
}

// optional fixed32 game_time_info_tag = 3;
inline bool GameAccountFieldTags::_internal_has_game_time_info_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameAccountFieldTags::has_game_time_info_tag() const {
  return _internal_has_game_time_info_tag();
}
inline void GameAccountFieldTags::clear_game_time_info_tag() {
  game_time_info_tag_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountFieldTags::_internal_game_time_info_tag() const {
  return game_time_info_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountFieldTags::game_time_info_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldTags.game_time_info_tag)
  return _internal_game_time_info_tag();
}
inline void GameAccountFieldTags::_internal_set_game_time_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  game_time_info_tag_ = value;
}
inline void GameAccountFieldTags::set_game_time_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_time_info_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldTags.game_time_info_tag)
}

// optional fixed32 game_status_tag = 4;
inline bool GameAccountFieldTags::_internal_has_game_status_tag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameAccountFieldTags::has_game_status_tag() const {
  return _internal_has_game_status_tag();
}
inline void GameAccountFieldTags::clear_game_status_tag() {
  game_status_tag_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountFieldTags::_internal_game_status_tag() const {
  return game_status_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountFieldTags::game_status_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldTags.game_status_tag)
  return _internal_game_status_tag();
}
inline void GameAccountFieldTags::_internal_set_game_status_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  game_status_tag_ = value;
}
inline void GameAccountFieldTags::set_game_status_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_status_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldTags.game_status_tag)
}

// optional fixed32 raf_info_tag = 5;
inline bool GameAccountFieldTags::_internal_has_raf_info_tag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameAccountFieldTags::has_raf_info_tag() const {
  return _internal_has_raf_info_tag();
}
inline void GameAccountFieldTags::clear_raf_info_tag() {
  raf_info_tag_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountFieldTags::_internal_raf_info_tag() const {
  return raf_info_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountFieldTags::raf_info_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldTags.raf_info_tag)
  return _internal_raf_info_tag();
}
inline void GameAccountFieldTags::_internal_set_raf_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  raf_info_tag_ = value;
}
inline void GameAccountFieldTags::set_raf_info_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_raf_info_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldTags.raf_info_tag)
}

// -------------------------------------------------------------------

// AccountFieldOptions

// optional bool all_fields = 1;
inline bool AccountFieldOptions::_internal_has_all_fields() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountFieldOptions::has_all_fields() const {
  return _internal_has_all_fields();
}
inline void AccountFieldOptions::clear_all_fields() {
  all_fields_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AccountFieldOptions::_internal_all_fields() const {
  return all_fields_;
}
inline bool AccountFieldOptions::all_fields() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldOptions.all_fields)
  return _internal_all_fields();
}
inline void AccountFieldOptions::_internal_set_all_fields(bool value) {
  _has_bits_[0] |= 0x00000001u;
  all_fields_ = value;
}
inline void AccountFieldOptions::set_all_fields(bool value) {
  _internal_set_all_fields(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldOptions.all_fields)
}

// optional bool field_account_level_info = 2;
inline bool AccountFieldOptions::_internal_has_field_account_level_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountFieldOptions::has_field_account_level_info() const {
  return _internal_has_field_account_level_info();
}
inline void AccountFieldOptions::clear_field_account_level_info() {
  field_account_level_info_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AccountFieldOptions::_internal_field_account_level_info() const {
  return field_account_level_info_;
}
inline bool AccountFieldOptions::field_account_level_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldOptions.field_account_level_info)
  return _internal_field_account_level_info();
}
inline void AccountFieldOptions::_internal_set_field_account_level_info(bool value) {
  _has_bits_[0] |= 0x00000002u;
  field_account_level_info_ = value;
}
inline void AccountFieldOptions::set_field_account_level_info(bool value) {
  _internal_set_field_account_level_info(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldOptions.field_account_level_info)
}

// optional bool field_privacy_info = 3;
inline bool AccountFieldOptions::_internal_has_field_privacy_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountFieldOptions::has_field_privacy_info() const {
  return _internal_has_field_privacy_info();
}
inline void AccountFieldOptions::clear_field_privacy_info() {
  field_privacy_info_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AccountFieldOptions::_internal_field_privacy_info() const {
  return field_privacy_info_;
}
inline bool AccountFieldOptions::field_privacy_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldOptions.field_privacy_info)
  return _internal_field_privacy_info();
}
inline void AccountFieldOptions::_internal_set_field_privacy_info(bool value) {
  _has_bits_[0] |= 0x00000004u;
  field_privacy_info_ = value;
}
inline void AccountFieldOptions::set_field_privacy_info(bool value) {
  _internal_set_field_privacy_info(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldOptions.field_privacy_info)
}

// optional bool field_parental_control_info = 4;
inline bool AccountFieldOptions::_internal_has_field_parental_control_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountFieldOptions::has_field_parental_control_info() const {
  return _internal_has_field_parental_control_info();
}
inline void AccountFieldOptions::clear_field_parental_control_info() {
  field_parental_control_info_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AccountFieldOptions::_internal_field_parental_control_info() const {
  return field_parental_control_info_;
}
inline bool AccountFieldOptions::field_parental_control_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldOptions.field_parental_control_info)
  return _internal_field_parental_control_info();
}
inline void AccountFieldOptions::_internal_set_field_parental_control_info(bool value) {
  _has_bits_[0] |= 0x00000008u;
  field_parental_control_info_ = value;
}
inline void AccountFieldOptions::set_field_parental_control_info(bool value) {
  _internal_set_field_parental_control_info(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldOptions.field_parental_control_info)
}

// optional bool field_game_level_info = 6;
inline bool AccountFieldOptions::_internal_has_field_game_level_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccountFieldOptions::has_field_game_level_info() const {
  return _internal_has_field_game_level_info();
}
inline void AccountFieldOptions::clear_field_game_level_info() {
  field_game_level_info_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool AccountFieldOptions::_internal_field_game_level_info() const {
  return field_game_level_info_;
}
inline bool AccountFieldOptions::field_game_level_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldOptions.field_game_level_info)
  return _internal_field_game_level_info();
}
inline void AccountFieldOptions::_internal_set_field_game_level_info(bool value) {
  _has_bits_[0] |= 0x00000010u;
  field_game_level_info_ = value;
}
inline void AccountFieldOptions::set_field_game_level_info(bool value) {
  _internal_set_field_game_level_info(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldOptions.field_game_level_info)
}

// optional bool field_game_status = 7;
inline bool AccountFieldOptions::_internal_has_field_game_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AccountFieldOptions::has_field_game_status() const {
  return _internal_has_field_game_status();
}
inline void AccountFieldOptions::clear_field_game_status() {
  field_game_status_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool AccountFieldOptions::_internal_field_game_status() const {
  return field_game_status_;
}
inline bool AccountFieldOptions::field_game_status() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldOptions.field_game_status)
  return _internal_field_game_status();
}
inline void AccountFieldOptions::_internal_set_field_game_status(bool value) {
  _has_bits_[0] |= 0x00000020u;
  field_game_status_ = value;
}
inline void AccountFieldOptions::set_field_game_status(bool value) {
  _internal_set_field_game_status(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldOptions.field_game_status)
}

// optional bool field_game_accounts = 8;
inline bool AccountFieldOptions::_internal_has_field_game_accounts() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AccountFieldOptions::has_field_game_accounts() const {
  return _internal_has_field_game_accounts();
}
inline void AccountFieldOptions::clear_field_game_accounts() {
  field_game_accounts_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool AccountFieldOptions::_internal_field_game_accounts() const {
  return field_game_accounts_;
}
inline bool AccountFieldOptions::field_game_accounts() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountFieldOptions.field_game_accounts)
  return _internal_field_game_accounts();
}
inline void AccountFieldOptions::_internal_set_field_game_accounts(bool value) {
  _has_bits_[0] |= 0x00000040u;
  field_game_accounts_ = value;
}
inline void AccountFieldOptions::set_field_game_accounts(bool value) {
  _internal_set_field_game_accounts(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountFieldOptions.field_game_accounts)
}

// -------------------------------------------------------------------

// GameAccountFieldOptions

// optional bool all_fields = 1;
inline bool GameAccountFieldOptions::_internal_has_all_fields() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameAccountFieldOptions::has_all_fields() const {
  return _internal_has_all_fields();
}
inline void GameAccountFieldOptions::clear_all_fields() {
  all_fields_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GameAccountFieldOptions::_internal_all_fields() const {
  return all_fields_;
}
inline bool GameAccountFieldOptions::all_fields() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldOptions.all_fields)
  return _internal_all_fields();
}
inline void GameAccountFieldOptions::_internal_set_all_fields(bool value) {
  _has_bits_[0] |= 0x00000001u;
  all_fields_ = value;
}
inline void GameAccountFieldOptions::set_all_fields(bool value) {
  _internal_set_all_fields(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldOptions.all_fields)
}

// optional bool field_game_level_info = 2;
inline bool GameAccountFieldOptions::_internal_has_field_game_level_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameAccountFieldOptions::has_field_game_level_info() const {
  return _internal_has_field_game_level_info();
}
inline void GameAccountFieldOptions::clear_field_game_level_info() {
  field_game_level_info_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GameAccountFieldOptions::_internal_field_game_level_info() const {
  return field_game_level_info_;
}
inline bool GameAccountFieldOptions::field_game_level_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldOptions.field_game_level_info)
  return _internal_field_game_level_info();
}
inline void GameAccountFieldOptions::_internal_set_field_game_level_info(bool value) {
  _has_bits_[0] |= 0x00000002u;
  field_game_level_info_ = value;
}
inline void GameAccountFieldOptions::set_field_game_level_info(bool value) {
  _internal_set_field_game_level_info(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldOptions.field_game_level_info)
}

// optional bool field_game_time_info = 3;
inline bool GameAccountFieldOptions::_internal_has_field_game_time_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameAccountFieldOptions::has_field_game_time_info() const {
  return _internal_has_field_game_time_info();
}
inline void GameAccountFieldOptions::clear_field_game_time_info() {
  field_game_time_info_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GameAccountFieldOptions::_internal_field_game_time_info() const {
  return field_game_time_info_;
}
inline bool GameAccountFieldOptions::field_game_time_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldOptions.field_game_time_info)
  return _internal_field_game_time_info();
}
inline void GameAccountFieldOptions::_internal_set_field_game_time_info(bool value) {
  _has_bits_[0] |= 0x00000004u;
  field_game_time_info_ = value;
}
inline void GameAccountFieldOptions::set_field_game_time_info(bool value) {
  _internal_set_field_game_time_info(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldOptions.field_game_time_info)
}

// optional bool field_game_status = 4;
inline bool GameAccountFieldOptions::_internal_has_field_game_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameAccountFieldOptions::has_field_game_status() const {
  return _internal_has_field_game_status();
}
inline void GameAccountFieldOptions::clear_field_game_status() {
  field_game_status_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GameAccountFieldOptions::_internal_field_game_status() const {
  return field_game_status_;
}
inline bool GameAccountFieldOptions::field_game_status() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldOptions.field_game_status)
  return _internal_field_game_status();
}
inline void GameAccountFieldOptions::_internal_set_field_game_status(bool value) {
  _has_bits_[0] |= 0x00000008u;
  field_game_status_ = value;
}
inline void GameAccountFieldOptions::set_field_game_status(bool value) {
  _internal_set_field_game_status(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldOptions.field_game_status)
}

// optional bool field_raf_info = 5;
inline bool GameAccountFieldOptions::_internal_has_field_raf_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameAccountFieldOptions::has_field_raf_info() const {
  return _internal_has_field_raf_info();
}
inline void GameAccountFieldOptions::clear_field_raf_info() {
  field_raf_info_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GameAccountFieldOptions::_internal_field_raf_info() const {
  return field_raf_info_;
}
inline bool GameAccountFieldOptions::field_raf_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountFieldOptions.field_raf_info)
  return _internal_field_raf_info();
}
inline void GameAccountFieldOptions::_internal_set_field_raf_info(bool value) {
  _has_bits_[0] |= 0x00000010u;
  field_raf_info_ = value;
}
inline void GameAccountFieldOptions::set_field_raf_info(bool value) {
  _internal_set_field_raf_info(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountFieldOptions.field_raf_info)
}

// -------------------------------------------------------------------

// SubscriberReference

// optional uint64 object_id = 1 [default = 0];
inline bool SubscriberReference::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SubscriberReference::has_object_id() const {
  return _internal_has_object_id();
}
inline void SubscriberReference::clear_object_id() {
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscriberReference::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscriberReference::object_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriberReference.object_id)
  return _internal_object_id();
}
inline void SubscriberReference::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  object_id_ = value;
}
inline void SubscriberReference::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.SubscriberReference.object_id)
}

// optional .bgs.protocol.EntityId entity_id = 2;
inline bool SubscriberReference::_internal_has_entity_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entity_id_ != nullptr);
  return value;
}
inline bool SubscriberReference::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::bgs::protocol::EntityId& SubscriberReference::_internal_entity_id() const {
  const ::bgs::protocol::EntityId* p = entity_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& SubscriberReference::entity_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriberReference.entity_id)
  return _internal_entity_id();
}
inline ::bgs::protocol::EntityId* SubscriberReference::release_entity_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.SubscriberReference.entity_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* SubscriberReference::_internal_mutable_entity_id() {
  _has_bits_[0] |= 0x00000001u;
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::bgs::protocol::EntityId* SubscriberReference::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.SubscriberReference.entity_id)
  return _internal_mutable_entity_id();
}
inline void SubscriberReference::set_allocated_entity_id(::bgs::protocol::EntityId* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.SubscriberReference.entity_id)
}

// optional .bgs.protocol.account.v1.AccountFieldOptions account_options = 3;
inline bool SubscriberReference::_internal_has_account_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || account_options_ != nullptr);
  return value;
}
inline bool SubscriberReference::has_account_options() const {
  return _internal_has_account_options();
}
inline void SubscriberReference::clear_account_options() {
  if (account_options_ != nullptr) account_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::account::v1::AccountFieldOptions& SubscriberReference::_internal_account_options() const {
  const ::bgs::protocol::account::v1::AccountFieldOptions* p = account_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountFieldOptions*>(
      &::bgs::protocol::account::v1::_AccountFieldOptions_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountFieldOptions& SubscriberReference::account_options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriberReference.account_options)
  return _internal_account_options();
}
inline ::bgs::protocol::account::v1::AccountFieldOptions* SubscriberReference::release_account_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.SubscriberReference.account_options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::AccountFieldOptions* temp = account_options_;
  account_options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountFieldOptions* SubscriberReference::_internal_mutable_account_options() {
  _has_bits_[0] |= 0x00000002u;
  if (account_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldOptions>(GetArenaNoVirtual());
    account_options_ = p;
  }
  return account_options_;
}
inline ::bgs::protocol::account::v1::AccountFieldOptions* SubscriberReference::mutable_account_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.SubscriberReference.account_options)
  return _internal_mutable_account_options();
}
inline void SubscriberReference::set_allocated_account_options(::bgs::protocol::account::v1::AccountFieldOptions* account_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_options_;
  }
  if (account_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_options_ = account_options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.SubscriberReference.account_options)
}

// optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 4;
inline bool SubscriberReference::_internal_has_account_tags() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || account_tags_ != nullptr);
  return value;
}
inline bool SubscriberReference::has_account_tags() const {
  return _internal_has_account_tags();
}
inline void SubscriberReference::clear_account_tags() {
  if (account_tags_ != nullptr) account_tags_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& SubscriberReference::_internal_account_tags() const {
  const ::bgs::protocol::account::v1::AccountFieldTags* p = account_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountFieldTags*>(
      &::bgs::protocol::account::v1::_AccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& SubscriberReference::account_tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriberReference.account_tags)
  return _internal_account_tags();
}
inline ::bgs::protocol::account::v1::AccountFieldTags* SubscriberReference::release_account_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.SubscriberReference.account_tags)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::account::v1::AccountFieldTags* temp = account_tags_;
  account_tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* SubscriberReference::_internal_mutable_account_tags() {
  _has_bits_[0] |= 0x00000004u;
  if (account_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldTags>(GetArenaNoVirtual());
    account_tags_ = p;
  }
  return account_tags_;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* SubscriberReference::mutable_account_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.SubscriberReference.account_tags)
  return _internal_mutable_account_tags();
}
inline void SubscriberReference::set_allocated_account_tags(::bgs::protocol::account::v1::AccountFieldTags* account_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_tags_;
  }
  if (account_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  account_tags_ = account_tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.SubscriberReference.account_tags)
}

// optional .bgs.protocol.account.v1.GameAccountFieldOptions game_account_options = 5;
inline bool SubscriberReference::_internal_has_game_account_options() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || game_account_options_ != nullptr);
  return value;
}
inline bool SubscriberReference::has_game_account_options() const {
  return _internal_has_game_account_options();
}
inline void SubscriberReference::clear_game_account_options() {
  if (game_account_options_ != nullptr) game_account_options_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::account::v1::GameAccountFieldOptions& SubscriberReference::_internal_game_account_options() const {
  const ::bgs::protocol::account::v1::GameAccountFieldOptions* p = game_account_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountFieldOptions*>(
      &::bgs::protocol::account::v1::_GameAccountFieldOptions_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountFieldOptions& SubscriberReference::game_account_options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriberReference.game_account_options)
  return _internal_game_account_options();
}
inline ::bgs::protocol::account::v1::GameAccountFieldOptions* SubscriberReference::release_game_account_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.SubscriberReference.game_account_options)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::account::v1::GameAccountFieldOptions* temp = game_account_options_;
  game_account_options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountFieldOptions* SubscriberReference::_internal_mutable_game_account_options() {
  _has_bits_[0] |= 0x00000008u;
  if (game_account_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldOptions>(GetArenaNoVirtual());
    game_account_options_ = p;
  }
  return game_account_options_;
}
inline ::bgs::protocol::account::v1::GameAccountFieldOptions* SubscriberReference::mutable_game_account_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.SubscriberReference.game_account_options)
  return _internal_mutable_game_account_options();
}
inline void SubscriberReference::set_allocated_game_account_options(::bgs::protocol::account::v1::GameAccountFieldOptions* game_account_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_account_options_;
  }
  if (game_account_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  game_account_options_ = game_account_options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.SubscriberReference.game_account_options)
}

// optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 6;
inline bool SubscriberReference::_internal_has_game_account_tags() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || game_account_tags_ != nullptr);
  return value;
}
inline bool SubscriberReference::has_game_account_tags() const {
  return _internal_has_game_account_tags();
}
inline void SubscriberReference::clear_game_account_tags() {
  if (game_account_tags_ != nullptr) game_account_tags_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& SubscriberReference::_internal_game_account_tags() const {
  const ::bgs::protocol::account::v1::GameAccountFieldTags* p = game_account_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      &::bgs::protocol::account::v1::_GameAccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& SubscriberReference::game_account_tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriberReference.game_account_tags)
  return _internal_game_account_tags();
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* SubscriberReference::release_game_account_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.SubscriberReference.game_account_tags)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::account::v1::GameAccountFieldTags* temp = game_account_tags_;
  game_account_tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* SubscriberReference::_internal_mutable_game_account_tags() {
  _has_bits_[0] |= 0x00000010u;
  if (game_account_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldTags>(GetArenaNoVirtual());
    game_account_tags_ = p;
  }
  return game_account_tags_;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* SubscriberReference::mutable_game_account_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.SubscriberReference.game_account_tags)
  return _internal_mutable_game_account_tags();
}
inline void SubscriberReference::set_allocated_game_account_tags(::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_account_tags_;
  }
  if (game_account_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  game_account_tags_ = game_account_tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.SubscriberReference.game_account_tags)
}

// optional uint64 subscriber_id = 7 [default = 0];
inline bool SubscriberReference::_internal_has_subscriber_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SubscriberReference::has_subscriber_id() const {
  return _internal_has_subscriber_id();
}
inline void SubscriberReference::clear_subscriber_id() {
  subscriber_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscriberReference::_internal_subscriber_id() const {
  return subscriber_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscriberReference::subscriber_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.SubscriberReference.subscriber_id)
  return _internal_subscriber_id();
}
inline void SubscriberReference::_internal_set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  subscriber_id_ = value;
}
inline void SubscriberReference::set_subscriber_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subscriber_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.SubscriberReference.subscriber_id)
}

// -------------------------------------------------------------------

// AccountLevelInfo

// repeated .bgs.protocol.account.v1.AccountLicense licenses = 3;
inline int AccountLevelInfo::_internal_licenses_size() const {
  return licenses_.size();
}
inline int AccountLevelInfo::licenses_size() const {
  return _internal_licenses_size();
}
inline void AccountLevelInfo::clear_licenses() {
  licenses_.Clear();
}
inline ::bgs::protocol::account::v1::AccountLicense* AccountLevelInfo::mutable_licenses(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountLevelInfo.licenses)
  return licenses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >*
AccountLevelInfo::mutable_licenses() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.AccountLevelInfo.licenses)
  return &licenses_;
}
inline const ::bgs::protocol::account::v1::AccountLicense& AccountLevelInfo::_internal_licenses(int index) const {
  return licenses_.Get(index);
}
inline const ::bgs::protocol::account::v1::AccountLicense& AccountLevelInfo::licenses(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.licenses)
  return _internal_licenses(index);
}
inline ::bgs::protocol::account::v1::AccountLicense* AccountLevelInfo::_internal_add_licenses() {
  return licenses_.Add();
}
inline ::bgs::protocol::account::v1::AccountLicense* AccountLevelInfo::add_licenses() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.AccountLevelInfo.licenses)
  return _internal_add_licenses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >&
AccountLevelInfo::licenses() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.AccountLevelInfo.licenses)
  return licenses_;
}

// optional fixed32 default_currency = 4;
inline bool AccountLevelInfo::_internal_has_default_currency() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_default_currency() const {
  return _internal_has_default_currency();
}
inline void AccountLevelInfo::clear_default_currency() {
  default_currency_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLevelInfo::_internal_default_currency() const {
  return default_currency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLevelInfo::default_currency() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.default_currency)
  return _internal_default_currency();
}
inline void AccountLevelInfo::_internal_set_default_currency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  default_currency_ = value;
}
inline void AccountLevelInfo::set_default_currency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_currency(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.default_currency)
}

// optional string country = 5;
inline bool AccountLevelInfo::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_country() const {
  return _internal_has_country();
}
inline void AccountLevelInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountLevelInfo::country() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.country)
  return _internal_country();
}
inline void AccountLevelInfo::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.country)
}
inline std::string* AccountLevelInfo::mutable_country() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountLevelInfo.country)
  return _internal_mutable_country();
}
inline const std::string& AccountLevelInfo::_internal_country() const {
  return country_.GetNoArena();
}
inline void AccountLevelInfo::_internal_set_country(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountLevelInfo::set_country(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.AccountLevelInfo.country)
}
inline void AccountLevelInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.AccountLevelInfo.country)
}
inline void AccountLevelInfo::set_country(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.AccountLevelInfo.country)
}
inline std::string* AccountLevelInfo::_internal_mutable_country() {
  _has_bits_[0] |= 0x00000001u;
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountLevelInfo::release_country() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountLevelInfo.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return country_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountLevelInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountLevelInfo.country)
}

// optional uint32 preferred_region = 6;
inline bool AccountLevelInfo::_internal_has_preferred_region() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_preferred_region() const {
  return _internal_has_preferred_region();
}
inline void AccountLevelInfo::clear_preferred_region() {
  preferred_region_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLevelInfo::_internal_preferred_region() const {
  return preferred_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLevelInfo::preferred_region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.preferred_region)
  return _internal_preferred_region();
}
inline void AccountLevelInfo::_internal_set_preferred_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  preferred_region_ = value;
}
inline void AccountLevelInfo::set_preferred_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preferred_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.preferred_region)
}

// optional string full_name = 7;
inline bool AccountLevelInfo::_internal_has_full_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_full_name() const {
  return _internal_has_full_name();
}
inline void AccountLevelInfo::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountLevelInfo::full_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.full_name)
  return _internal_full_name();
}
inline void AccountLevelInfo::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.full_name)
}
inline std::string* AccountLevelInfo::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountLevelInfo.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& AccountLevelInfo::_internal_full_name() const {
  return full_name_.GetNoArena();
}
inline void AccountLevelInfo::_internal_set_full_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountLevelInfo::set_full_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  full_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.AccountLevelInfo.full_name)
}
inline void AccountLevelInfo::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.AccountLevelInfo.full_name)
}
inline void AccountLevelInfo::set_full_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.AccountLevelInfo.full_name)
}
inline std::string* AccountLevelInfo::_internal_mutable_full_name() {
  _has_bits_[0] |= 0x00000002u;
  return full_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountLevelInfo::release_full_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountLevelInfo.full_name)
  if (!_internal_has_full_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return full_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountLevelInfo::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  full_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountLevelInfo.full_name)
}

// optional string battle_tag = 8;
inline bool AccountLevelInfo::_internal_has_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_battle_tag() const {
  return _internal_has_battle_tag();
}
inline void AccountLevelInfo::clear_battle_tag() {
  battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AccountLevelInfo::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.battle_tag)
  return _internal_battle_tag();
}
inline void AccountLevelInfo::set_battle_tag(const std::string& value) {
  _internal_set_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.battle_tag)
}
inline std::string* AccountLevelInfo::mutable_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountLevelInfo.battle_tag)
  return _internal_mutable_battle_tag();
}
inline const std::string& AccountLevelInfo::_internal_battle_tag() const {
  return battle_tag_.GetNoArena();
}
inline void AccountLevelInfo::_internal_set_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountLevelInfo::set_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.AccountLevelInfo.battle_tag)
}
inline void AccountLevelInfo::set_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.AccountLevelInfo.battle_tag)
}
inline void AccountLevelInfo::set_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.AccountLevelInfo.battle_tag)
}
inline std::string* AccountLevelInfo::_internal_mutable_battle_tag() {
  _has_bits_[0] |= 0x00000004u;
  return battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountLevelInfo::release_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountLevelInfo.battle_tag)
  if (!_internal_has_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountLevelInfo::set_allocated_battle_tag(std::string* battle_tag) {
  if (battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountLevelInfo.battle_tag)
}

// optional bool muted = 9;
inline bool AccountLevelInfo::_internal_has_muted() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_muted() const {
  return _internal_has_muted();
}
inline void AccountLevelInfo::clear_muted() {
  muted_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool AccountLevelInfo::_internal_muted() const {
  return muted_;
}
inline bool AccountLevelInfo::muted() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.muted)
  return _internal_muted();
}
inline void AccountLevelInfo::_internal_set_muted(bool value) {
  _has_bits_[0] |= 0x00000040u;
  muted_ = value;
}
inline void AccountLevelInfo::set_muted(bool value) {
  _internal_set_muted(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.muted)
}

// optional bool manual_review = 10;
inline bool AccountLevelInfo::_internal_has_manual_review() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_manual_review() const {
  return _internal_has_manual_review();
}
inline void AccountLevelInfo::clear_manual_review() {
  manual_review_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool AccountLevelInfo::_internal_manual_review() const {
  return manual_review_;
}
inline bool AccountLevelInfo::manual_review() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.manual_review)
  return _internal_manual_review();
}
inline void AccountLevelInfo::_internal_set_manual_review(bool value) {
  _has_bits_[0] |= 0x00000080u;
  manual_review_ = value;
}
inline void AccountLevelInfo::set_manual_review(bool value) {
  _internal_set_manual_review(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.manual_review)
}

// optional bool account_paid_any = 11;
inline bool AccountLevelInfo::_internal_has_account_paid_any() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_account_paid_any() const {
  return _internal_has_account_paid_any();
}
inline void AccountLevelInfo::clear_account_paid_any() {
  account_paid_any_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool AccountLevelInfo::_internal_account_paid_any() const {
  return account_paid_any_;
}
inline bool AccountLevelInfo::account_paid_any() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.account_paid_any)
  return _internal_account_paid_any();
}
inline void AccountLevelInfo::_internal_set_account_paid_any(bool value) {
  _has_bits_[0] |= 0x00000100u;
  account_paid_any_ = value;
}
inline void AccountLevelInfo::set_account_paid_any(bool value) {
  _internal_set_account_paid_any(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.account_paid_any)
}

// optional .bgs.protocol.account.v1.IdentityVerificationStatus identity_check_status = 12 [default = IDENT_NO_DATA];
inline bool AccountLevelInfo::_internal_has_identity_check_status() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_identity_check_status() const {
  return _internal_has_identity_check_status();
}
inline void AccountLevelInfo::clear_identity_check_status() {
  identity_check_status_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::bgs::protocol::account::v1::IdentityVerificationStatus AccountLevelInfo::_internal_identity_check_status() const {
  return static_cast< ::bgs::protocol::account::v1::IdentityVerificationStatus >(identity_check_status_);
}
inline ::bgs::protocol::account::v1::IdentityVerificationStatus AccountLevelInfo::identity_check_status() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.identity_check_status)
  return _internal_identity_check_status();
}
inline void AccountLevelInfo::_internal_set_identity_check_status(::bgs::protocol::account::v1::IdentityVerificationStatus value) {
  assert(::bgs::protocol::account::v1::IdentityVerificationStatus_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  identity_check_status_ = value;
}
inline void AccountLevelInfo::set_identity_check_status(::bgs::protocol::account::v1::IdentityVerificationStatus value) {
  _internal_set_identity_check_status(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.identity_check_status)
}

// optional string email = 13;
inline bool AccountLevelInfo::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_email() const {
  return _internal_has_email();
}
inline void AccountLevelInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AccountLevelInfo::email() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.email)
  return _internal_email();
}
inline void AccountLevelInfo::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.email)
}
inline std::string* AccountLevelInfo::mutable_email() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountLevelInfo.email)
  return _internal_mutable_email();
}
inline const std::string& AccountLevelInfo::_internal_email() const {
  return email_.GetNoArena();
}
inline void AccountLevelInfo::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountLevelInfo::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.AccountLevelInfo.email)
}
inline void AccountLevelInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.AccountLevelInfo.email)
}
inline void AccountLevelInfo::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.AccountLevelInfo.email)
}
inline std::string* AccountLevelInfo::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000008u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountLevelInfo::release_email() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountLevelInfo.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountLevelInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountLevelInfo.email)
}

// optional bool headless_account = 14;
inline bool AccountLevelInfo::_internal_has_headless_account() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_headless_account() const {
  return _internal_has_headless_account();
}
inline void AccountLevelInfo::clear_headless_account() {
  headless_account_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool AccountLevelInfo::_internal_headless_account() const {
  return headless_account_;
}
inline bool AccountLevelInfo::headless_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.headless_account)
  return _internal_headless_account();
}
inline void AccountLevelInfo::_internal_set_headless_account(bool value) {
  _has_bits_[0] |= 0x00000200u;
  headless_account_ = value;
}
inline void AccountLevelInfo::set_headless_account(bool value) {
  _internal_set_headless_account(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.headless_account)
}

// optional bool test_account = 15;
inline bool AccountLevelInfo::_internal_has_test_account() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_test_account() const {
  return _internal_has_test_account();
}
inline void AccountLevelInfo::clear_test_account() {
  test_account_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool AccountLevelInfo::_internal_test_account() const {
  return test_account_;
}
inline bool AccountLevelInfo::test_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.test_account)
  return _internal_test_account();
}
inline void AccountLevelInfo::_internal_set_test_account(bool value) {
  _has_bits_[0] |= 0x00000800u;
  test_account_ = value;
}
inline void AccountLevelInfo::set_test_account(bool value) {
  _internal_set_test_account(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.test_account)
}

// optional bool is_sms_protected = 17;
inline bool AccountLevelInfo::_internal_has_is_sms_protected() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_is_sms_protected() const {
  return _internal_has_is_sms_protected();
}
inline void AccountLevelInfo::clear_is_sms_protected() {
  is_sms_protected_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool AccountLevelInfo::_internal_is_sms_protected() const {
  return is_sms_protected_;
}
inline bool AccountLevelInfo::is_sms_protected() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.is_sms_protected)
  return _internal_is_sms_protected();
}
inline void AccountLevelInfo::_internal_set_is_sms_protected(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_sms_protected_ = value;
}
inline void AccountLevelInfo::set_is_sms_protected(bool value) {
  _internal_set_is_sms_protected(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.is_sms_protected)
}

// optional uint32 ratings_board_minimum_age = 18;
inline bool AccountLevelInfo::_internal_has_ratings_board_minimum_age() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AccountLevelInfo::has_ratings_board_minimum_age() const {
  return _internal_has_ratings_board_minimum_age();
}
inline void AccountLevelInfo::clear_ratings_board_minimum_age() {
  ratings_board_minimum_age_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLevelInfo::_internal_ratings_board_minimum_age() const {
  return ratings_board_minimum_age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountLevelInfo::ratings_board_minimum_age() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountLevelInfo.ratings_board_minimum_age)
  return _internal_ratings_board_minimum_age();
}
inline void AccountLevelInfo::_internal_set_ratings_board_minimum_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  ratings_board_minimum_age_ = value;
}
inline void AccountLevelInfo::set_ratings_board_minimum_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ratings_board_minimum_age(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AccountLevelInfo.ratings_board_minimum_age)
}

// -------------------------------------------------------------------

// PrivacyInfo

// optional bool is_using_rid = 3;
inline bool PrivacyInfo::_internal_has_is_using_rid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrivacyInfo::has_is_using_rid() const {
  return _internal_has_is_using_rid();
}
inline void PrivacyInfo::clear_is_using_rid() {
  is_using_rid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PrivacyInfo::_internal_is_using_rid() const {
  return is_using_rid_;
}
inline bool PrivacyInfo::is_using_rid() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.PrivacyInfo.is_using_rid)
  return _internal_is_using_rid();
}
inline void PrivacyInfo::_internal_set_is_using_rid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_using_rid_ = value;
}
inline void PrivacyInfo::set_is_using_rid(bool value) {
  _internal_set_is_using_rid(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.PrivacyInfo.is_using_rid)
}

// optional bool is_visible_for_view_friends = 4;
inline bool PrivacyInfo::_internal_has_is_visible_for_view_friends() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrivacyInfo::has_is_visible_for_view_friends() const {
  return _internal_has_is_visible_for_view_friends();
}
inline void PrivacyInfo::clear_is_visible_for_view_friends() {
  is_visible_for_view_friends_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PrivacyInfo::_internal_is_visible_for_view_friends() const {
  return is_visible_for_view_friends_;
}
inline bool PrivacyInfo::is_visible_for_view_friends() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.PrivacyInfo.is_visible_for_view_friends)
  return _internal_is_visible_for_view_friends();
}
inline void PrivacyInfo::_internal_set_is_visible_for_view_friends(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_visible_for_view_friends_ = value;
}
inline void PrivacyInfo::set_is_visible_for_view_friends(bool value) {
  _internal_set_is_visible_for_view_friends(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.PrivacyInfo.is_visible_for_view_friends)
}

// optional bool is_hidden_from_friend_finder = 5;
inline bool PrivacyInfo::_internal_has_is_hidden_from_friend_finder() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrivacyInfo::has_is_hidden_from_friend_finder() const {
  return _internal_has_is_hidden_from_friend_finder();
}
inline void PrivacyInfo::clear_is_hidden_from_friend_finder() {
  is_hidden_from_friend_finder_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PrivacyInfo::_internal_is_hidden_from_friend_finder() const {
  return is_hidden_from_friend_finder_;
}
inline bool PrivacyInfo::is_hidden_from_friend_finder() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.PrivacyInfo.is_hidden_from_friend_finder)
  return _internal_is_hidden_from_friend_finder();
}
inline void PrivacyInfo::_internal_set_is_hidden_from_friend_finder(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_hidden_from_friend_finder_ = value;
}
inline void PrivacyInfo::set_is_hidden_from_friend_finder(bool value) {
  _internal_set_is_hidden_from_friend_finder(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.PrivacyInfo.is_hidden_from_friend_finder)
}

// optional .bgs.protocol.account.v1.PrivacyInfo.GameInfoPrivacy game_info_privacy = 6 [default = PRIVACY_FRIENDS];
inline bool PrivacyInfo::_internal_has_game_info_privacy() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrivacyInfo::has_game_info_privacy() const {
  return _internal_has_game_info_privacy();
}
inline void PrivacyInfo::clear_game_info_privacy() {
  game_info_privacy_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy PrivacyInfo::_internal_game_info_privacy() const {
  return static_cast< ::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy >(game_info_privacy_);
}
inline ::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy PrivacyInfo::game_info_privacy() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.PrivacyInfo.game_info_privacy)
  return _internal_game_info_privacy();
}
inline void PrivacyInfo::_internal_set_game_info_privacy(::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy value) {
  assert(::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  game_info_privacy_ = value;
}
inline void PrivacyInfo::set_game_info_privacy(::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy value) {
  _internal_set_game_info_privacy(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.PrivacyInfo.game_info_privacy)
}

// optional bool only_allow_friend_whispers = 7;
inline bool PrivacyInfo::_internal_has_only_allow_friend_whispers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrivacyInfo::has_only_allow_friend_whispers() const {
  return _internal_has_only_allow_friend_whispers();
}
inline void PrivacyInfo::clear_only_allow_friend_whispers() {
  only_allow_friend_whispers_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PrivacyInfo::_internal_only_allow_friend_whispers() const {
  return only_allow_friend_whispers_;
}
inline bool PrivacyInfo::only_allow_friend_whispers() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.PrivacyInfo.only_allow_friend_whispers)
  return _internal_only_allow_friend_whispers();
}
inline void PrivacyInfo::_internal_set_only_allow_friend_whispers(bool value) {
  _has_bits_[0] |= 0x00000008u;
  only_allow_friend_whispers_ = value;
}
inline void PrivacyInfo::set_only_allow_friend_whispers(bool value) {
  _internal_set_only_allow_friend_whispers(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.PrivacyInfo.only_allow_friend_whispers)
}

// -------------------------------------------------------------------

// ParentalControlInfo

// optional string timezone = 3;
inline bool ParentalControlInfo::_internal_has_timezone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParentalControlInfo::has_timezone() const {
  return _internal_has_timezone();
}
inline void ParentalControlInfo::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParentalControlInfo::timezone() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ParentalControlInfo.timezone)
  return _internal_timezone();
}
inline void ParentalControlInfo::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ParentalControlInfo.timezone)
}
inline std::string* ParentalControlInfo::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.ParentalControlInfo.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& ParentalControlInfo::_internal_timezone() const {
  return timezone_.GetNoArena();
}
inline void ParentalControlInfo::_internal_set_timezone(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParentalControlInfo::set_timezone(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.ParentalControlInfo.timezone)
}
inline void ParentalControlInfo::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.ParentalControlInfo.timezone)
}
inline void ParentalControlInfo::set_timezone(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.ParentalControlInfo.timezone)
}
inline std::string* ParentalControlInfo::_internal_mutable_timezone() {
  _has_bits_[0] |= 0x00000001u;
  return timezone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParentalControlInfo::release_timezone() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.ParentalControlInfo.timezone)
  if (!_internal_has_timezone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timezone_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParentalControlInfo::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timezone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.ParentalControlInfo.timezone)
}

// optional uint32 minutes_per_day = 4;
inline bool ParentalControlInfo::_internal_has_minutes_per_day() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParentalControlInfo::has_minutes_per_day() const {
  return _internal_has_minutes_per_day();
}
inline void ParentalControlInfo::clear_minutes_per_day() {
  minutes_per_day_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParentalControlInfo::_internal_minutes_per_day() const {
  return minutes_per_day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParentalControlInfo::minutes_per_day() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ParentalControlInfo.minutes_per_day)
  return _internal_minutes_per_day();
}
inline void ParentalControlInfo::_internal_set_minutes_per_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  minutes_per_day_ = value;
}
inline void ParentalControlInfo::set_minutes_per_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minutes_per_day(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ParentalControlInfo.minutes_per_day)
}

// optional uint32 minutes_per_week = 5;
inline bool ParentalControlInfo::_internal_has_minutes_per_week() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParentalControlInfo::has_minutes_per_week() const {
  return _internal_has_minutes_per_week();
}
inline void ParentalControlInfo::clear_minutes_per_week() {
  minutes_per_week_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParentalControlInfo::_internal_minutes_per_week() const {
  return minutes_per_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParentalControlInfo::minutes_per_week() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ParentalControlInfo.minutes_per_week)
  return _internal_minutes_per_week();
}
inline void ParentalControlInfo::_internal_set_minutes_per_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  minutes_per_week_ = value;
}
inline void ParentalControlInfo::set_minutes_per_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minutes_per_week(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ParentalControlInfo.minutes_per_week)
}

// optional bool can_receive_voice = 6;
inline bool ParentalControlInfo::_internal_has_can_receive_voice() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParentalControlInfo::has_can_receive_voice() const {
  return _internal_has_can_receive_voice();
}
inline void ParentalControlInfo::clear_can_receive_voice() {
  can_receive_voice_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ParentalControlInfo::_internal_can_receive_voice() const {
  return can_receive_voice_;
}
inline bool ParentalControlInfo::can_receive_voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ParentalControlInfo.can_receive_voice)
  return _internal_can_receive_voice();
}
inline void ParentalControlInfo::_internal_set_can_receive_voice(bool value) {
  _has_bits_[0] |= 0x00000008u;
  can_receive_voice_ = value;
}
inline void ParentalControlInfo::set_can_receive_voice(bool value) {
  _internal_set_can_receive_voice(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ParentalControlInfo.can_receive_voice)
}

// optional bool can_send_voice = 7;
inline bool ParentalControlInfo::_internal_has_can_send_voice() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParentalControlInfo::has_can_send_voice() const {
  return _internal_has_can_send_voice();
}
inline void ParentalControlInfo::clear_can_send_voice() {
  can_send_voice_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ParentalControlInfo::_internal_can_send_voice() const {
  return can_send_voice_;
}
inline bool ParentalControlInfo::can_send_voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ParentalControlInfo.can_send_voice)
  return _internal_can_send_voice();
}
inline void ParentalControlInfo::_internal_set_can_send_voice(bool value) {
  _has_bits_[0] |= 0x00000010u;
  can_send_voice_ = value;
}
inline void ParentalControlInfo::set_can_send_voice(bool value) {
  _internal_set_can_send_voice(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ParentalControlInfo.can_send_voice)
}

// repeated bool play_schedule = 8;
inline int ParentalControlInfo::_internal_play_schedule_size() const {
  return play_schedule_.size();
}
inline int ParentalControlInfo::play_schedule_size() const {
  return _internal_play_schedule_size();
}
inline void ParentalControlInfo::clear_play_schedule() {
  play_schedule_.Clear();
}
inline bool ParentalControlInfo::_internal_play_schedule(int index) const {
  return play_schedule_.Get(index);
}
inline bool ParentalControlInfo::play_schedule(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ParentalControlInfo.play_schedule)
  return _internal_play_schedule(index);
}
inline void ParentalControlInfo::set_play_schedule(int index, bool value) {
  play_schedule_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ParentalControlInfo.play_schedule)
}
inline void ParentalControlInfo::_internal_add_play_schedule(bool value) {
  play_schedule_.Add(value);
}
inline void ParentalControlInfo::add_play_schedule(bool value) {
  _internal_add_play_schedule(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.ParentalControlInfo.play_schedule)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ParentalControlInfo::_internal_play_schedule() const {
  return play_schedule_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ParentalControlInfo::play_schedule() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.ParentalControlInfo.play_schedule)
  return _internal_play_schedule();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ParentalControlInfo::_internal_mutable_play_schedule() {
  return &play_schedule_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ParentalControlInfo::mutable_play_schedule() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.ParentalControlInfo.play_schedule)
  return _internal_mutable_play_schedule();
}

// optional bool can_join_group = 9;
inline bool ParentalControlInfo::_internal_has_can_join_group() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ParentalControlInfo::has_can_join_group() const {
  return _internal_has_can_join_group();
}
inline void ParentalControlInfo::clear_can_join_group() {
  can_join_group_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ParentalControlInfo::_internal_can_join_group() const {
  return can_join_group_;
}
inline bool ParentalControlInfo::can_join_group() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ParentalControlInfo.can_join_group)
  return _internal_can_join_group();
}
inline void ParentalControlInfo::_internal_set_can_join_group(bool value) {
  _has_bits_[0] |= 0x00000020u;
  can_join_group_ = value;
}
inline void ParentalControlInfo::set_can_join_group(bool value) {
  _internal_set_can_join_group(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ParentalControlInfo.can_join_group)
}

// optional bool can_use_profile = 10;
inline bool ParentalControlInfo::_internal_has_can_use_profile() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ParentalControlInfo::has_can_use_profile() const {
  return _internal_has_can_use_profile();
}
inline void ParentalControlInfo::clear_can_use_profile() {
  can_use_profile_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ParentalControlInfo::_internal_can_use_profile() const {
  return can_use_profile_;
}
inline bool ParentalControlInfo::can_use_profile() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.ParentalControlInfo.can_use_profile)
  return _internal_can_use_profile();
}
inline void ParentalControlInfo::_internal_set_can_use_profile(bool value) {
  _has_bits_[0] |= 0x00000040u;
  can_use_profile_ = value;
}
inline void ParentalControlInfo::set_can_use_profile(bool value) {
  _internal_set_can_use_profile(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.ParentalControlInfo.can_use_profile)
}

// -------------------------------------------------------------------

// GameLevelInfo

// optional bool is_trial = 4;
inline bool GameLevelInfo::_internal_has_is_trial() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameLevelInfo::has_is_trial() const {
  return _internal_has_is_trial();
}
inline void GameLevelInfo::clear_is_trial() {
  is_trial_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GameLevelInfo::_internal_is_trial() const {
  return is_trial_;
}
inline bool GameLevelInfo::is_trial() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameLevelInfo.is_trial)
  return _internal_is_trial();
}
inline void GameLevelInfo::_internal_set_is_trial(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_trial_ = value;
}
inline void GameLevelInfo::set_is_trial(bool value) {
  _internal_set_is_trial(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameLevelInfo.is_trial)
}

// optional bool is_lifetime = 5;
inline bool GameLevelInfo::_internal_has_is_lifetime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameLevelInfo::has_is_lifetime() const {
  return _internal_has_is_lifetime();
}
inline void GameLevelInfo::clear_is_lifetime() {
  is_lifetime_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GameLevelInfo::_internal_is_lifetime() const {
  return is_lifetime_;
}
inline bool GameLevelInfo::is_lifetime() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameLevelInfo.is_lifetime)
  return _internal_is_lifetime();
}
inline void GameLevelInfo::_internal_set_is_lifetime(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_lifetime_ = value;
}
inline void GameLevelInfo::set_is_lifetime(bool value) {
  _internal_set_is_lifetime(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameLevelInfo.is_lifetime)
}

// optional bool is_restricted = 6;
inline bool GameLevelInfo::_internal_has_is_restricted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameLevelInfo::has_is_restricted() const {
  return _internal_has_is_restricted();
}
inline void GameLevelInfo::clear_is_restricted() {
  is_restricted_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GameLevelInfo::_internal_is_restricted() const {
  return is_restricted_;
}
inline bool GameLevelInfo::is_restricted() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameLevelInfo.is_restricted)
  return _internal_is_restricted();
}
inline void GameLevelInfo::_internal_set_is_restricted(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_restricted_ = value;
}
inline void GameLevelInfo::set_is_restricted(bool value) {
  _internal_set_is_restricted(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameLevelInfo.is_restricted)
}

// optional bool is_beta = 7;
inline bool GameLevelInfo::_internal_has_is_beta() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameLevelInfo::has_is_beta() const {
  return _internal_has_is_beta();
}
inline void GameLevelInfo::clear_is_beta() {
  is_beta_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GameLevelInfo::_internal_is_beta() const {
  return is_beta_;
}
inline bool GameLevelInfo::is_beta() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameLevelInfo.is_beta)
  return _internal_is_beta();
}
inline void GameLevelInfo::_internal_set_is_beta(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_beta_ = value;
}
inline void GameLevelInfo::set_is_beta(bool value) {
  _internal_set_is_beta(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameLevelInfo.is_beta)
}

// optional string name = 8;
inline bool GameLevelInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameLevelInfo::has_name() const {
  return _internal_has_name();
}
inline void GameLevelInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameLevelInfo::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameLevelInfo.name)
  return _internal_name();
}
inline void GameLevelInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameLevelInfo.name)
}
inline std::string* GameLevelInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameLevelInfo.name)
  return _internal_mutable_name();
}
inline const std::string& GameLevelInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void GameLevelInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameLevelInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.GameLevelInfo.name)
}
inline void GameLevelInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.GameLevelInfo.name)
}
inline void GameLevelInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.GameLevelInfo.name)
}
inline std::string* GameLevelInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameLevelInfo::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameLevelInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameLevelInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameLevelInfo.name)
}

// optional fixed32 program = 9;
inline bool GameLevelInfo::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GameLevelInfo::has_program() const {
  return _internal_has_program();
}
inline void GameLevelInfo::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameLevelInfo::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameLevelInfo::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameLevelInfo.program)
  return _internal_program();
}
inline void GameLevelInfo::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  program_ = value;
}
inline void GameLevelInfo::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameLevelInfo.program)
}

// repeated .bgs.protocol.account.v1.AccountLicense licenses = 10;
inline int GameLevelInfo::_internal_licenses_size() const {
  return licenses_.size();
}
inline int GameLevelInfo::licenses_size() const {
  return _internal_licenses_size();
}
inline void GameLevelInfo::clear_licenses() {
  licenses_.Clear();
}
inline ::bgs::protocol::account::v1::AccountLicense* GameLevelInfo::mutable_licenses(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameLevelInfo.licenses)
  return licenses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >*
GameLevelInfo::mutable_licenses() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.GameLevelInfo.licenses)
  return &licenses_;
}
inline const ::bgs::protocol::account::v1::AccountLicense& GameLevelInfo::_internal_licenses(int index) const {
  return licenses_.Get(index);
}
inline const ::bgs::protocol::account::v1::AccountLicense& GameLevelInfo::licenses(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameLevelInfo.licenses)
  return _internal_licenses(index);
}
inline ::bgs::protocol::account::v1::AccountLicense* GameLevelInfo::_internal_add_licenses() {
  return licenses_.Add();
}
inline ::bgs::protocol::account::v1::AccountLicense* GameLevelInfo::add_licenses() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.GameLevelInfo.licenses)
  return _internal_add_licenses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::AccountLicense >&
GameLevelInfo::licenses() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.GameLevelInfo.licenses)
  return licenses_;
}

// optional uint32 realm_permissions = 11;
inline bool GameLevelInfo::_internal_has_realm_permissions() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GameLevelInfo::has_realm_permissions() const {
  return _internal_has_realm_permissions();
}
inline void GameLevelInfo::clear_realm_permissions() {
  realm_permissions_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameLevelInfo::_internal_realm_permissions() const {
  return realm_permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameLevelInfo::realm_permissions() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameLevelInfo.realm_permissions)
  return _internal_realm_permissions();
}
inline void GameLevelInfo::_internal_set_realm_permissions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  realm_permissions_ = value;
}
inline void GameLevelInfo::set_realm_permissions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_realm_permissions(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameLevelInfo.realm_permissions)
}

// -------------------------------------------------------------------

// GameTimeInfo

// optional bool is_unlimited_play_time = 3;
inline bool GameTimeInfo::_internal_has_is_unlimited_play_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameTimeInfo::has_is_unlimited_play_time() const {
  return _internal_has_is_unlimited_play_time();
}
inline void GameTimeInfo::clear_is_unlimited_play_time() {
  is_unlimited_play_time_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GameTimeInfo::_internal_is_unlimited_play_time() const {
  return is_unlimited_play_time_;
}
inline bool GameTimeInfo::is_unlimited_play_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameTimeInfo.is_unlimited_play_time)
  return _internal_is_unlimited_play_time();
}
inline void GameTimeInfo::_internal_set_is_unlimited_play_time(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_unlimited_play_time_ = value;
}
inline void GameTimeInfo::set_is_unlimited_play_time(bool value) {
  _internal_set_is_unlimited_play_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameTimeInfo.is_unlimited_play_time)
}

// optional uint64 play_time_expires = 5;
inline bool GameTimeInfo::_internal_has_play_time_expires() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameTimeInfo::has_play_time_expires() const {
  return _internal_has_play_time_expires();
}
inline void GameTimeInfo::clear_play_time_expires() {
  play_time_expires_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameTimeInfo::_internal_play_time_expires() const {
  return play_time_expires_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameTimeInfo::play_time_expires() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameTimeInfo.play_time_expires)
  return _internal_play_time_expires();
}
inline void GameTimeInfo::_internal_set_play_time_expires(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  play_time_expires_ = value;
}
inline void GameTimeInfo::set_play_time_expires(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_play_time_expires(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameTimeInfo.play_time_expires)
}

// optional bool is_subscription = 6;
inline bool GameTimeInfo::_internal_has_is_subscription() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameTimeInfo::has_is_subscription() const {
  return _internal_has_is_subscription();
}
inline void GameTimeInfo::clear_is_subscription() {
  is_subscription_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GameTimeInfo::_internal_is_subscription() const {
  return is_subscription_;
}
inline bool GameTimeInfo::is_subscription() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameTimeInfo.is_subscription)
  return _internal_is_subscription();
}
inline void GameTimeInfo::_internal_set_is_subscription(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_subscription_ = value;
}
inline void GameTimeInfo::set_is_subscription(bool value) {
  _internal_set_is_subscription(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameTimeInfo.is_subscription)
}

// optional bool is_recurring_subscription = 7;
inline bool GameTimeInfo::_internal_has_is_recurring_subscription() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameTimeInfo::has_is_recurring_subscription() const {
  return _internal_has_is_recurring_subscription();
}
inline void GameTimeInfo::clear_is_recurring_subscription() {
  is_recurring_subscription_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GameTimeInfo::_internal_is_recurring_subscription() const {
  return is_recurring_subscription_;
}
inline bool GameTimeInfo::is_recurring_subscription() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameTimeInfo.is_recurring_subscription)
  return _internal_is_recurring_subscription();
}
inline void GameTimeInfo::_internal_set_is_recurring_subscription(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_recurring_subscription_ = value;
}
inline void GameTimeInfo::set_is_recurring_subscription(bool value) {
  _internal_set_is_recurring_subscription(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameTimeInfo.is_recurring_subscription)
}

// -------------------------------------------------------------------

// GameTimeRemainingInfo

// optional uint32 minutes_remaining = 1;
inline bool GameTimeRemainingInfo::_internal_has_minutes_remaining() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameTimeRemainingInfo::has_minutes_remaining() const {
  return _internal_has_minutes_remaining();
}
inline void GameTimeRemainingInfo::clear_minutes_remaining() {
  minutes_remaining_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameTimeRemainingInfo::_internal_minutes_remaining() const {
  return minutes_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameTimeRemainingInfo::minutes_remaining() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameTimeRemainingInfo.minutes_remaining)
  return _internal_minutes_remaining();
}
inline void GameTimeRemainingInfo::_internal_set_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  minutes_remaining_ = value;
}
inline void GameTimeRemainingInfo::set_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minutes_remaining(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameTimeRemainingInfo.minutes_remaining)
}

// optional uint32 parental_daily_minutes_remaining = 2;
inline bool GameTimeRemainingInfo::_internal_has_parental_daily_minutes_remaining() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameTimeRemainingInfo::has_parental_daily_minutes_remaining() const {
  return _internal_has_parental_daily_minutes_remaining();
}
inline void GameTimeRemainingInfo::clear_parental_daily_minutes_remaining() {
  parental_daily_minutes_remaining_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameTimeRemainingInfo::_internal_parental_daily_minutes_remaining() const {
  return parental_daily_minutes_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameTimeRemainingInfo::parental_daily_minutes_remaining() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameTimeRemainingInfo.parental_daily_minutes_remaining)
  return _internal_parental_daily_minutes_remaining();
}
inline void GameTimeRemainingInfo::_internal_set_parental_daily_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  parental_daily_minutes_remaining_ = value;
}
inline void GameTimeRemainingInfo::set_parental_daily_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parental_daily_minutes_remaining(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameTimeRemainingInfo.parental_daily_minutes_remaining)
}

// optional uint32 parental_weekly_minutes_remaining = 3;
inline bool GameTimeRemainingInfo::_internal_has_parental_weekly_minutes_remaining() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameTimeRemainingInfo::has_parental_weekly_minutes_remaining() const {
  return _internal_has_parental_weekly_minutes_remaining();
}
inline void GameTimeRemainingInfo::clear_parental_weekly_minutes_remaining() {
  parental_weekly_minutes_remaining_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameTimeRemainingInfo::_internal_parental_weekly_minutes_remaining() const {
  return parental_weekly_minutes_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameTimeRemainingInfo::parental_weekly_minutes_remaining() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameTimeRemainingInfo.parental_weekly_minutes_remaining)
  return _internal_parental_weekly_minutes_remaining();
}
inline void GameTimeRemainingInfo::_internal_set_parental_weekly_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  parental_weekly_minutes_remaining_ = value;
}
inline void GameTimeRemainingInfo::set_parental_weekly_minutes_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parental_weekly_minutes_remaining(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameTimeRemainingInfo.parental_weekly_minutes_remaining)
}

// optional uint32 seconds_remaining_until_kick = 4 [deprecated = true];
inline bool GameTimeRemainingInfo::_internal_has_seconds_remaining_until_kick() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameTimeRemainingInfo::has_seconds_remaining_until_kick() const {
  return _internal_has_seconds_remaining_until_kick();
}
inline void GameTimeRemainingInfo::clear_seconds_remaining_until_kick() {
  seconds_remaining_until_kick_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameTimeRemainingInfo::_internal_seconds_remaining_until_kick() const {
  return seconds_remaining_until_kick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameTimeRemainingInfo::seconds_remaining_until_kick() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameTimeRemainingInfo.seconds_remaining_until_kick)
  return _internal_seconds_remaining_until_kick();
}
inline void GameTimeRemainingInfo::_internal_set_seconds_remaining_until_kick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seconds_remaining_until_kick_ = value;
}
inline void GameTimeRemainingInfo::set_seconds_remaining_until_kick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seconds_remaining_until_kick(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameTimeRemainingInfo.seconds_remaining_until_kick)
}

// -------------------------------------------------------------------

// GameStatus

// optional bool is_suspended = 4;
inline bool GameStatus::_internal_has_is_suspended() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameStatus::has_is_suspended() const {
  return _internal_has_is_suspended();
}
inline void GameStatus::clear_is_suspended() {
  is_suspended_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GameStatus::_internal_is_suspended() const {
  return is_suspended_;
}
inline bool GameStatus::is_suspended() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameStatus.is_suspended)
  return _internal_is_suspended();
}
inline void GameStatus::_internal_set_is_suspended(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_suspended_ = value;
}
inline void GameStatus::set_is_suspended(bool value) {
  _internal_set_is_suspended(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameStatus.is_suspended)
}

// optional bool is_banned = 5;
inline bool GameStatus::_internal_has_is_banned() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameStatus::has_is_banned() const {
  return _internal_has_is_banned();
}
inline void GameStatus::clear_is_banned() {
  is_banned_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GameStatus::_internal_is_banned() const {
  return is_banned_;
}
inline bool GameStatus::is_banned() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameStatus.is_banned)
  return _internal_is_banned();
}
inline void GameStatus::_internal_set_is_banned(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_banned_ = value;
}
inline void GameStatus::set_is_banned(bool value) {
  _internal_set_is_banned(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameStatus.is_banned)
}

// optional uint64 suspension_expires = 6;
inline bool GameStatus::_internal_has_suspension_expires() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameStatus::has_suspension_expires() const {
  return _internal_has_suspension_expires();
}
inline void GameStatus::clear_suspension_expires() {
  suspension_expires_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameStatus::_internal_suspension_expires() const {
  return suspension_expires_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameStatus::suspension_expires() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameStatus.suspension_expires)
  return _internal_suspension_expires();
}
inline void GameStatus::_internal_set_suspension_expires(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  suspension_expires_ = value;
}
inline void GameStatus::set_suspension_expires(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_suspension_expires(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameStatus.suspension_expires)
}

// optional fixed32 program = 7;
inline bool GameStatus::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GameStatus::has_program() const {
  return _internal_has_program();
}
inline void GameStatus::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameStatus::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameStatus::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameStatus.program)
  return _internal_program();
}
inline void GameStatus::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  program_ = value;
}
inline void GameStatus::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameStatus.program)
}

// optional bool is_locked = 8;
inline bool GameStatus::_internal_has_is_locked() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameStatus::has_is_locked() const {
  return _internal_has_is_locked();
}
inline void GameStatus::clear_is_locked() {
  is_locked_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GameStatus::_internal_is_locked() const {
  return is_locked_;
}
inline bool GameStatus::is_locked() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameStatus.is_locked)
  return _internal_is_locked();
}
inline void GameStatus::_internal_set_is_locked(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_locked_ = value;
}
inline void GameStatus::set_is_locked(bool value) {
  _internal_set_is_locked(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameStatus.is_locked)
}

// optional bool is_bam_unlockable = 9;
inline bool GameStatus::_internal_has_is_bam_unlockable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameStatus::has_is_bam_unlockable() const {
  return _internal_has_is_bam_unlockable();
}
inline void GameStatus::clear_is_bam_unlockable() {
  is_bam_unlockable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GameStatus::_internal_is_bam_unlockable() const {
  return is_bam_unlockable_;
}
inline bool GameStatus::is_bam_unlockable() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameStatus.is_bam_unlockable)
  return _internal_is_bam_unlockable();
}
inline void GameStatus::_internal_set_is_bam_unlockable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_bam_unlockable_ = value;
}
inline void GameStatus::set_is_bam_unlockable(bool value) {
  _internal_set_is_bam_unlockable(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameStatus.is_bam_unlockable)
}

// -------------------------------------------------------------------

// RAFInfo

// optional bytes raf_info = 1;
inline bool RAFInfo::_internal_has_raf_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RAFInfo::has_raf_info() const {
  return _internal_has_raf_info();
}
inline void RAFInfo::clear_raf_info() {
  raf_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RAFInfo::raf_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.RAFInfo.raf_info)
  return _internal_raf_info();
}
inline void RAFInfo::set_raf_info(const std::string& value) {
  _internal_set_raf_info(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.RAFInfo.raf_info)
}
inline std::string* RAFInfo::mutable_raf_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.RAFInfo.raf_info)
  return _internal_mutable_raf_info();
}
inline const std::string& RAFInfo::_internal_raf_info() const {
  return raf_info_.GetNoArena();
}
inline void RAFInfo::_internal_set_raf_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  raf_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RAFInfo::set_raf_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  raf_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.RAFInfo.raf_info)
}
inline void RAFInfo::set_raf_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  raf_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.RAFInfo.raf_info)
}
inline void RAFInfo::set_raf_info(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  raf_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.RAFInfo.raf_info)
}
inline std::string* RAFInfo::_internal_mutable_raf_info() {
  _has_bits_[0] |= 0x00000001u;
  return raf_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RAFInfo::release_raf_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.RAFInfo.raf_info)
  if (!_internal_has_raf_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return raf_info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RAFInfo::set_allocated_raf_info(std::string* raf_info) {
  if (raf_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raf_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raf_info);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.RAFInfo.raf_info)
}

// -------------------------------------------------------------------

// GameSessionInfo

// optional uint32 start_time = 3 [deprecated = true];
inline bool GameSessionInfo::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameSessionInfo::has_start_time() const {
  return _internal_has_start_time();
}
inline void GameSessionInfo::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameSessionInfo::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameSessionInfo::start_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionInfo.start_time)
  return _internal_start_time();
}
inline void GameSessionInfo::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_ = value;
}
inline void GameSessionInfo::set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameSessionInfo.start_time)
}

// optional .bgs.protocol.account.v1.GameSessionLocation location = 4;
inline bool GameSessionInfo::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool GameSessionInfo::has_location() const {
  return _internal_has_location();
}
inline void GameSessionInfo::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::account::v1::GameSessionLocation& GameSessionInfo::_internal_location() const {
  const ::bgs::protocol::account::v1::GameSessionLocation* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameSessionLocation*>(
      &::bgs::protocol::account::v1::_GameSessionLocation_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameSessionLocation& GameSessionInfo::location() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionInfo.location)
  return _internal_location();
}
inline ::bgs::protocol::account::v1::GameSessionLocation* GameSessionInfo::release_location() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameSessionInfo.location)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameSessionLocation* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameSessionLocation* GameSessionInfo::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000001u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameSessionLocation>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::bgs::protocol::account::v1::GameSessionLocation* GameSessionInfo::mutable_location() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameSessionInfo.location)
  return _internal_mutable_location();
}
inline void GameSessionInfo::set_allocated_location(::bgs::protocol::account::v1::GameSessionLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameSessionInfo.location)
}

// optional bool has_benefactor = 5;
inline bool GameSessionInfo::_internal_has_has_benefactor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameSessionInfo::has_has_benefactor() const {
  return _internal_has_has_benefactor();
}
inline void GameSessionInfo::clear_has_benefactor() {
  has_benefactor_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GameSessionInfo::_internal_has_benefactor() const {
  return has_benefactor_;
}
inline bool GameSessionInfo::has_benefactor() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionInfo.has_benefactor)
  return _internal_has_benefactor();
}
inline void GameSessionInfo::_internal_set_has_benefactor(bool value) {
  _has_bits_[0] |= 0x00000008u;
  has_benefactor_ = value;
}
inline void GameSessionInfo::set_has_benefactor(bool value) {
  _internal_set_has_benefactor(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameSessionInfo.has_benefactor)
}

// optional bool is_using_igr = 6;
inline bool GameSessionInfo::_internal_has_is_using_igr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameSessionInfo::has_is_using_igr() const {
  return _internal_has_is_using_igr();
}
inline void GameSessionInfo::clear_is_using_igr() {
  is_using_igr_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GameSessionInfo::_internal_is_using_igr() const {
  return is_using_igr_;
}
inline bool GameSessionInfo::is_using_igr() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionInfo.is_using_igr)
  return _internal_is_using_igr();
}
inline void GameSessionInfo::_internal_set_is_using_igr(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_using_igr_ = value;
}
inline void GameSessionInfo::set_is_using_igr(bool value) {
  _internal_set_is_using_igr(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameSessionInfo.is_using_igr)
}

// optional bool parental_controls_active = 7;
inline bool GameSessionInfo::_internal_has_parental_controls_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GameSessionInfo::has_parental_controls_active() const {
  return _internal_has_parental_controls_active();
}
inline void GameSessionInfo::clear_parental_controls_active() {
  parental_controls_active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool GameSessionInfo::_internal_parental_controls_active() const {
  return parental_controls_active_;
}
inline bool GameSessionInfo::parental_controls_active() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionInfo.parental_controls_active)
  return _internal_parental_controls_active();
}
inline void GameSessionInfo::_internal_set_parental_controls_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  parental_controls_active_ = value;
}
inline void GameSessionInfo::set_parental_controls_active(bool value) {
  _internal_set_parental_controls_active(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameSessionInfo.parental_controls_active)
}

// optional uint64 start_time_sec = 8;
inline bool GameSessionInfo::_internal_has_start_time_sec() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GameSessionInfo::has_start_time_sec() const {
  return _internal_has_start_time_sec();
}
inline void GameSessionInfo::clear_start_time_sec() {
  start_time_sec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameSessionInfo::_internal_start_time_sec() const {
  return start_time_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameSessionInfo::start_time_sec() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionInfo.start_time_sec)
  return _internal_start_time_sec();
}
inline void GameSessionInfo::_internal_set_start_time_sec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  start_time_sec_ = value;
}
inline void GameSessionInfo::set_start_time_sec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_sec(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameSessionInfo.start_time_sec)
}

// optional .bgs.protocol.account.v1.IgrId igr_id = 9;
inline bool GameSessionInfo::_internal_has_igr_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || igr_id_ != nullptr);
  return value;
}
inline bool GameSessionInfo::has_igr_id() const {
  return _internal_has_igr_id();
}
inline void GameSessionInfo::clear_igr_id() {
  if (igr_id_ != nullptr) igr_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::account::v1::IgrId& GameSessionInfo::_internal_igr_id() const {
  const ::bgs::protocol::account::v1::IgrId* p = igr_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::IgrId*>(
      &::bgs::protocol::account::v1::_IgrId_default_instance_);
}
inline const ::bgs::protocol::account::v1::IgrId& GameSessionInfo::igr_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionInfo.igr_id)
  return _internal_igr_id();
}
inline ::bgs::protocol::account::v1::IgrId* GameSessionInfo::release_igr_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameSessionInfo.igr_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::IgrId* temp = igr_id_;
  igr_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::IgrId* GameSessionInfo::_internal_mutable_igr_id() {
  _has_bits_[0] |= 0x00000002u;
  if (igr_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::IgrId>(GetArenaNoVirtual());
    igr_id_ = p;
  }
  return igr_id_;
}
inline ::bgs::protocol::account::v1::IgrId* GameSessionInfo::mutable_igr_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameSessionInfo.igr_id)
  return _internal_mutable_igr_id();
}
inline void GameSessionInfo::set_allocated_igr_id(::bgs::protocol::account::v1::IgrId* igr_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete igr_id_;
  }
  if (igr_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      igr_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, igr_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  igr_id_ = igr_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameSessionInfo.igr_id)
}

// -------------------------------------------------------------------

// GameSessionUpdateInfo

// optional .bgs.protocol.account.v1.CAIS cais = 8;
inline bool GameSessionUpdateInfo::_internal_has_cais() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cais_ != nullptr);
  return value;
}
inline bool GameSessionUpdateInfo::has_cais() const {
  return _internal_has_cais();
}
inline void GameSessionUpdateInfo::clear_cais() {
  if (cais_ != nullptr) cais_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::account::v1::CAIS& GameSessionUpdateInfo::_internal_cais() const {
  const ::bgs::protocol::account::v1::CAIS* p = cais_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::CAIS*>(
      &::bgs::protocol::account::v1::_CAIS_default_instance_);
}
inline const ::bgs::protocol::account::v1::CAIS& GameSessionUpdateInfo::cais() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionUpdateInfo.cais)
  return _internal_cais();
}
inline ::bgs::protocol::account::v1::CAIS* GameSessionUpdateInfo::release_cais() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameSessionUpdateInfo.cais)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::CAIS* temp = cais_;
  cais_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::CAIS* GameSessionUpdateInfo::_internal_mutable_cais() {
  _has_bits_[0] |= 0x00000001u;
  if (cais_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::CAIS>(GetArenaNoVirtual());
    cais_ = p;
  }
  return cais_;
}
inline ::bgs::protocol::account::v1::CAIS* GameSessionUpdateInfo::mutable_cais() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameSessionUpdateInfo.cais)
  return _internal_mutable_cais();
}
inline void GameSessionUpdateInfo::set_allocated_cais(::bgs::protocol::account::v1::CAIS* cais) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cais_;
  }
  if (cais) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cais = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cais, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cais_ = cais;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameSessionUpdateInfo.cais)
}

// -------------------------------------------------------------------

// GameSessionLocation

// optional string ip_address = 1;
inline bool GameSessionLocation::_internal_has_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameSessionLocation::has_ip_address() const {
  return _internal_has_ip_address();
}
inline void GameSessionLocation::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameSessionLocation::ip_address() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionLocation.ip_address)
  return _internal_ip_address();
}
inline void GameSessionLocation::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameSessionLocation.ip_address)
}
inline std::string* GameSessionLocation::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameSessionLocation.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& GameSessionLocation::_internal_ip_address() const {
  return ip_address_.GetNoArena();
}
inline void GameSessionLocation::_internal_set_ip_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameSessionLocation::set_ip_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.GameSessionLocation.ip_address)
}
inline void GameSessionLocation::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.GameSessionLocation.ip_address)
}
inline void GameSessionLocation::set_ip_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.GameSessionLocation.ip_address)
}
inline std::string* GameSessionLocation::_internal_mutable_ip_address() {
  _has_bits_[0] |= 0x00000001u;
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameSessionLocation::release_ip_address() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameSessionLocation.ip_address)
  if (!_internal_has_ip_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameSessionLocation::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameSessionLocation.ip_address)
}

// optional uint32 country = 2;
inline bool GameSessionLocation::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameSessionLocation::has_country() const {
  return _internal_has_country();
}
inline void GameSessionLocation::clear_country() {
  country_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameSessionLocation::_internal_country() const {
  return country_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameSessionLocation::country() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionLocation.country)
  return _internal_country();
}
inline void GameSessionLocation::_internal_set_country(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  country_ = value;
}
inline void GameSessionLocation::set_country(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameSessionLocation.country)
}

// optional string city = 3;
inline bool GameSessionLocation::_internal_has_city() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameSessionLocation::has_city() const {
  return _internal_has_city();
}
inline void GameSessionLocation::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameSessionLocation::city() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameSessionLocation.city)
  return _internal_city();
}
inline void GameSessionLocation::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameSessionLocation.city)
}
inline std::string* GameSessionLocation::mutable_city() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameSessionLocation.city)
  return _internal_mutable_city();
}
inline const std::string& GameSessionLocation::_internal_city() const {
  return city_.GetNoArena();
}
inline void GameSessionLocation::_internal_set_city(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameSessionLocation::set_city(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.GameSessionLocation.city)
}
inline void GameSessionLocation::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.GameSessionLocation.city)
}
inline void GameSessionLocation::set_city(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.GameSessionLocation.city)
}
inline std::string* GameSessionLocation::_internal_mutable_city() {
  _has_bits_[0] |= 0x00000002u;
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameSessionLocation::release_city() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameSessionLocation.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return city_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameSessionLocation::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameSessionLocation.city)
}

// -------------------------------------------------------------------

// CAIS

// optional uint32 played_minutes = 1;
inline bool CAIS::_internal_has_played_minutes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAIS::has_played_minutes() const {
  return _internal_has_played_minutes();
}
inline void CAIS::clear_played_minutes() {
  played_minutes_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAIS::_internal_played_minutes() const {
  return played_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAIS::played_minutes() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.CAIS.played_minutes)
  return _internal_played_minutes();
}
inline void CAIS::_internal_set_played_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  played_minutes_ = value;
}
inline void CAIS::set_played_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_played_minutes(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.CAIS.played_minutes)
}

// optional uint32 rested_minutes = 2;
inline bool CAIS::_internal_has_rested_minutes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAIS::has_rested_minutes() const {
  return _internal_has_rested_minutes();
}
inline void CAIS::clear_rested_minutes() {
  rested_minutes_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAIS::_internal_rested_minutes() const {
  return rested_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CAIS::rested_minutes() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.CAIS.rested_minutes)
  return _internal_rested_minutes();
}
inline void CAIS::_internal_set_rested_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rested_minutes_ = value;
}
inline void CAIS::set_rested_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rested_minutes(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.CAIS.rested_minutes)
}

// optional uint64 last_heard_time = 3;
inline bool CAIS::_internal_has_last_heard_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAIS::has_last_heard_time() const {
  return _internal_has_last_heard_time();
}
inline void CAIS::clear_last_heard_time() {
  last_heard_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CAIS::_internal_last_heard_time() const {
  return last_heard_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CAIS::last_heard_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.CAIS.last_heard_time)
  return _internal_last_heard_time();
}
inline void CAIS::_internal_set_last_heard_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_heard_time_ = value;
}
inline void CAIS::set_last_heard_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_heard_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.CAIS.last_heard_time)
}

// -------------------------------------------------------------------

// GameAccountList

// optional uint32 region = 3;
inline bool GameAccountList::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameAccountList::has_region() const {
  return _internal_has_region();
}
inline void GameAccountList::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountList::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameAccountList::region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountList.region)
  return _internal_region();
}
inline void GameAccountList::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  region_ = value;
}
inline void GameAccountList::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.GameAccountList.region)
}

// repeated .bgs.protocol.account.v1.GameAccountHandle handle = 4;
inline int GameAccountList::_internal_handle_size() const {
  return handle_.size();
}
inline int GameAccountList::handle_size() const {
  return _internal_handle_size();
}
inline void GameAccountList::clear_handle() {
  handle_.Clear();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountList::mutable_handle(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountList.handle)
  return handle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountHandle >*
GameAccountList::mutable_handle() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.GameAccountList.handle)
  return &handle_;
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& GameAccountList::_internal_handle(int index) const {
  return handle_.Get(index);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& GameAccountList::handle(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountList.handle)
  return _internal_handle(index);
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountList::_internal_add_handle() {
  return handle_.Add();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* GameAccountList::add_handle() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.GameAccountList.handle)
  return _internal_add_handle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountHandle >&
GameAccountList::handle() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.GameAccountList.handle)
  return handle_;
}

// -------------------------------------------------------------------

// AccountState

// optional .bgs.protocol.account.v1.AccountLevelInfo account_level_info = 1;
inline bool AccountState::_internal_has_account_level_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_level_info_ != nullptr);
  return value;
}
inline bool AccountState::has_account_level_info() const {
  return _internal_has_account_level_info();
}
inline void AccountState::clear_account_level_info() {
  if (account_level_info_ != nullptr) account_level_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::account::v1::AccountLevelInfo& AccountState::_internal_account_level_info() const {
  const ::bgs::protocol::account::v1::AccountLevelInfo* p = account_level_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountLevelInfo*>(
      &::bgs::protocol::account::v1::_AccountLevelInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountLevelInfo& AccountState::account_level_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountState.account_level_info)
  return _internal_account_level_info();
}
inline ::bgs::protocol::account::v1::AccountLevelInfo* AccountState::release_account_level_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountState.account_level_info)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountLevelInfo* temp = account_level_info_;
  account_level_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountLevelInfo* AccountState::_internal_mutable_account_level_info() {
  _has_bits_[0] |= 0x00000001u;
  if (account_level_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountLevelInfo>(GetArenaNoVirtual());
    account_level_info_ = p;
  }
  return account_level_info_;
}
inline ::bgs::protocol::account::v1::AccountLevelInfo* AccountState::mutable_account_level_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountState.account_level_info)
  return _internal_mutable_account_level_info();
}
inline void AccountState::set_allocated_account_level_info(::bgs::protocol::account::v1::AccountLevelInfo* account_level_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_level_info_;
  }
  if (account_level_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_level_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_level_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_level_info_ = account_level_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountState.account_level_info)
}

// optional .bgs.protocol.account.v1.PrivacyInfo privacy_info = 2;
inline bool AccountState::_internal_has_privacy_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || privacy_info_ != nullptr);
  return value;
}
inline bool AccountState::has_privacy_info() const {
  return _internal_has_privacy_info();
}
inline void AccountState::clear_privacy_info() {
  if (privacy_info_ != nullptr) privacy_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::account::v1::PrivacyInfo& AccountState::_internal_privacy_info() const {
  const ::bgs::protocol::account::v1::PrivacyInfo* p = privacy_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::PrivacyInfo*>(
      &::bgs::protocol::account::v1::_PrivacyInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::PrivacyInfo& AccountState::privacy_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountState.privacy_info)
  return _internal_privacy_info();
}
inline ::bgs::protocol::account::v1::PrivacyInfo* AccountState::release_privacy_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountState.privacy_info)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::PrivacyInfo* temp = privacy_info_;
  privacy_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::PrivacyInfo* AccountState::_internal_mutable_privacy_info() {
  _has_bits_[0] |= 0x00000002u;
  if (privacy_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::PrivacyInfo>(GetArenaNoVirtual());
    privacy_info_ = p;
  }
  return privacy_info_;
}
inline ::bgs::protocol::account::v1::PrivacyInfo* AccountState::mutable_privacy_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountState.privacy_info)
  return _internal_mutable_privacy_info();
}
inline void AccountState::set_allocated_privacy_info(::bgs::protocol::account::v1::PrivacyInfo* privacy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete privacy_info_;
  }
  if (privacy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      privacy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, privacy_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  privacy_info_ = privacy_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountState.privacy_info)
}

// optional .bgs.protocol.account.v1.ParentalControlInfo parental_control_info = 3;
inline bool AccountState::_internal_has_parental_control_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || parental_control_info_ != nullptr);
  return value;
}
inline bool AccountState::has_parental_control_info() const {
  return _internal_has_parental_control_info();
}
inline void AccountState::clear_parental_control_info() {
  if (parental_control_info_ != nullptr) parental_control_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::account::v1::ParentalControlInfo& AccountState::_internal_parental_control_info() const {
  const ::bgs::protocol::account::v1::ParentalControlInfo* p = parental_control_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::ParentalControlInfo*>(
      &::bgs::protocol::account::v1::_ParentalControlInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::ParentalControlInfo& AccountState::parental_control_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountState.parental_control_info)
  return _internal_parental_control_info();
}
inline ::bgs::protocol::account::v1::ParentalControlInfo* AccountState::release_parental_control_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountState.parental_control_info)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::account::v1::ParentalControlInfo* temp = parental_control_info_;
  parental_control_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::ParentalControlInfo* AccountState::_internal_mutable_parental_control_info() {
  _has_bits_[0] |= 0x00000004u;
  if (parental_control_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::ParentalControlInfo>(GetArenaNoVirtual());
    parental_control_info_ = p;
  }
  return parental_control_info_;
}
inline ::bgs::protocol::account::v1::ParentalControlInfo* AccountState::mutable_parental_control_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountState.parental_control_info)
  return _internal_mutable_parental_control_info();
}
inline void AccountState::set_allocated_parental_control_info(::bgs::protocol::account::v1::ParentalControlInfo* parental_control_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parental_control_info_;
  }
  if (parental_control_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parental_control_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parental_control_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parental_control_info_ = parental_control_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountState.parental_control_info)
}

// repeated .bgs.protocol.account.v1.GameLevelInfo game_level_info = 5;
inline int AccountState::_internal_game_level_info_size() const {
  return game_level_info_.size();
}
inline int AccountState::game_level_info_size() const {
  return _internal_game_level_info_size();
}
inline void AccountState::clear_game_level_info() {
  game_level_info_.Clear();
}
inline ::bgs::protocol::account::v1::GameLevelInfo* AccountState::mutable_game_level_info(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountState.game_level_info)
  return game_level_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameLevelInfo >*
AccountState::mutable_game_level_info() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.AccountState.game_level_info)
  return &game_level_info_;
}
inline const ::bgs::protocol::account::v1::GameLevelInfo& AccountState::_internal_game_level_info(int index) const {
  return game_level_info_.Get(index);
}
inline const ::bgs::protocol::account::v1::GameLevelInfo& AccountState::game_level_info(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountState.game_level_info)
  return _internal_game_level_info(index);
}
inline ::bgs::protocol::account::v1::GameLevelInfo* AccountState::_internal_add_game_level_info() {
  return game_level_info_.Add();
}
inline ::bgs::protocol::account::v1::GameLevelInfo* AccountState::add_game_level_info() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.AccountState.game_level_info)
  return _internal_add_game_level_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameLevelInfo >&
AccountState::game_level_info() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.AccountState.game_level_info)
  return game_level_info_;
}

// repeated .bgs.protocol.account.v1.GameStatus game_status = 6;
inline int AccountState::_internal_game_status_size() const {
  return game_status_.size();
}
inline int AccountState::game_status_size() const {
  return _internal_game_status_size();
}
inline void AccountState::clear_game_status() {
  game_status_.Clear();
}
inline ::bgs::protocol::account::v1::GameStatus* AccountState::mutable_game_status(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountState.game_status)
  return game_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameStatus >*
AccountState::mutable_game_status() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.AccountState.game_status)
  return &game_status_;
}
inline const ::bgs::protocol::account::v1::GameStatus& AccountState::_internal_game_status(int index) const {
  return game_status_.Get(index);
}
inline const ::bgs::protocol::account::v1::GameStatus& AccountState::game_status(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountState.game_status)
  return _internal_game_status(index);
}
inline ::bgs::protocol::account::v1::GameStatus* AccountState::_internal_add_game_status() {
  return game_status_.Add();
}
inline ::bgs::protocol::account::v1::GameStatus* AccountState::add_game_status() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.AccountState.game_status)
  return _internal_add_game_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameStatus >&
AccountState::game_status() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.AccountState.game_status)
  return game_status_;
}

// repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 7;
inline int AccountState::_internal_game_accounts_size() const {
  return game_accounts_.size();
}
inline int AccountState::game_accounts_size() const {
  return _internal_game_accounts_size();
}
inline void AccountState::clear_game_accounts() {
  game_accounts_.Clear();
}
inline ::bgs::protocol::account::v1::GameAccountList* AccountState::mutable_game_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountState.game_accounts)
  return game_accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList >*
AccountState::mutable_game_accounts() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.AccountState.game_accounts)
  return &game_accounts_;
}
inline const ::bgs::protocol::account::v1::GameAccountList& AccountState::_internal_game_accounts(int index) const {
  return game_accounts_.Get(index);
}
inline const ::bgs::protocol::account::v1::GameAccountList& AccountState::game_accounts(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountState.game_accounts)
  return _internal_game_accounts(index);
}
inline ::bgs::protocol::account::v1::GameAccountList* AccountState::_internal_add_game_accounts() {
  return game_accounts_.Add();
}
inline ::bgs::protocol::account::v1::GameAccountList* AccountState::add_game_accounts() {
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.AccountState.game_accounts)
  return _internal_add_game_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::account::v1::GameAccountList >&
AccountState::game_accounts() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.AccountState.game_accounts)
  return game_accounts_;
}

// -------------------------------------------------------------------

// AccountStateTagged

// optional .bgs.protocol.account.v1.AccountState account_state = 1;
inline bool AccountStateTagged::_internal_has_account_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_state_ != nullptr);
  return value;
}
inline bool AccountStateTagged::has_account_state() const {
  return _internal_has_account_state();
}
inline void AccountStateTagged::clear_account_state() {
  if (account_state_ != nullptr) account_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::account::v1::AccountState& AccountStateTagged::_internal_account_state() const {
  const ::bgs::protocol::account::v1::AccountState* p = account_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountState*>(
      &::bgs::protocol::account::v1::_AccountState_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountState& AccountStateTagged::account_state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountStateTagged.account_state)
  return _internal_account_state();
}
inline ::bgs::protocol::account::v1::AccountState* AccountStateTagged::release_account_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountStateTagged.account_state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountState* temp = account_state_;
  account_state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountState* AccountStateTagged::_internal_mutable_account_state() {
  _has_bits_[0] |= 0x00000001u;
  if (account_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountState>(GetArenaNoVirtual());
    account_state_ = p;
  }
  return account_state_;
}
inline ::bgs::protocol::account::v1::AccountState* AccountStateTagged::mutable_account_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountStateTagged.account_state)
  return _internal_mutable_account_state();
}
inline void AccountStateTagged::set_allocated_account_state(::bgs::protocol::account::v1::AccountState* account_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_state_;
  }
  if (account_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_state_ = account_state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountStateTagged.account_state)
}

// optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 2;
inline bool AccountStateTagged::_internal_has_account_tags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || account_tags_ != nullptr);
  return value;
}
inline bool AccountStateTagged::has_account_tags() const {
  return _internal_has_account_tags();
}
inline void AccountStateTagged::clear_account_tags() {
  if (account_tags_ != nullptr) account_tags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& AccountStateTagged::_internal_account_tags() const {
  const ::bgs::protocol::account::v1::AccountFieldTags* p = account_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountFieldTags*>(
      &::bgs::protocol::account::v1::_AccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountFieldTags& AccountStateTagged::account_tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AccountStateTagged.account_tags)
  return _internal_account_tags();
}
inline ::bgs::protocol::account::v1::AccountFieldTags* AccountStateTagged::release_account_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AccountStateTagged.account_tags)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::AccountFieldTags* temp = account_tags_;
  account_tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* AccountStateTagged::_internal_mutable_account_tags() {
  _has_bits_[0] |= 0x00000002u;
  if (account_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountFieldTags>(GetArenaNoVirtual());
    account_tags_ = p;
  }
  return account_tags_;
}
inline ::bgs::protocol::account::v1::AccountFieldTags* AccountStateTagged::mutable_account_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AccountStateTagged.account_tags)
  return _internal_mutable_account_tags();
}
inline void AccountStateTagged::set_allocated_account_tags(::bgs::protocol::account::v1::AccountFieldTags* account_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_tags_;
  }
  if (account_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_tags_ = account_tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AccountStateTagged.account_tags)
}

// -------------------------------------------------------------------

// GameAccountState

// optional .bgs.protocol.account.v1.GameLevelInfo game_level_info = 1;
inline bool GameAccountState::_internal_has_game_level_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_level_info_ != nullptr);
  return value;
}
inline bool GameAccountState::has_game_level_info() const {
  return _internal_has_game_level_info();
}
inline void GameAccountState::clear_game_level_info() {
  if (game_level_info_ != nullptr) game_level_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::account::v1::GameLevelInfo& GameAccountState::_internal_game_level_info() const {
  const ::bgs::protocol::account::v1::GameLevelInfo* p = game_level_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameLevelInfo*>(
      &::bgs::protocol::account::v1::_GameLevelInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameLevelInfo& GameAccountState::game_level_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountState.game_level_info)
  return _internal_game_level_info();
}
inline ::bgs::protocol::account::v1::GameLevelInfo* GameAccountState::release_game_level_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountState.game_level_info)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameLevelInfo* temp = game_level_info_;
  game_level_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameLevelInfo* GameAccountState::_internal_mutable_game_level_info() {
  _has_bits_[0] |= 0x00000001u;
  if (game_level_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameLevelInfo>(GetArenaNoVirtual());
    game_level_info_ = p;
  }
  return game_level_info_;
}
inline ::bgs::protocol::account::v1::GameLevelInfo* GameAccountState::mutable_game_level_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountState.game_level_info)
  return _internal_mutable_game_level_info();
}
inline void GameAccountState::set_allocated_game_level_info(::bgs::protocol::account::v1::GameLevelInfo* game_level_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_level_info_;
  }
  if (game_level_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_level_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_level_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_level_info_ = game_level_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountState.game_level_info)
}

// optional .bgs.protocol.account.v1.GameTimeInfo game_time_info = 2;
inline bool GameAccountState::_internal_has_game_time_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_time_info_ != nullptr);
  return value;
}
inline bool GameAccountState::has_game_time_info() const {
  return _internal_has_game_time_info();
}
inline void GameAccountState::clear_game_time_info() {
  if (game_time_info_ != nullptr) game_time_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::account::v1::GameTimeInfo& GameAccountState::_internal_game_time_info() const {
  const ::bgs::protocol::account::v1::GameTimeInfo* p = game_time_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameTimeInfo*>(
      &::bgs::protocol::account::v1::_GameTimeInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameTimeInfo& GameAccountState::game_time_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountState.game_time_info)
  return _internal_game_time_info();
}
inline ::bgs::protocol::account::v1::GameTimeInfo* GameAccountState::release_game_time_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountState.game_time_info)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameTimeInfo* temp = game_time_info_;
  game_time_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameTimeInfo* GameAccountState::_internal_mutable_game_time_info() {
  _has_bits_[0] |= 0x00000002u;
  if (game_time_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameTimeInfo>(GetArenaNoVirtual());
    game_time_info_ = p;
  }
  return game_time_info_;
}
inline ::bgs::protocol::account::v1::GameTimeInfo* GameAccountState::mutable_game_time_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountState.game_time_info)
  return _internal_mutable_game_time_info();
}
inline void GameAccountState::set_allocated_game_time_info(::bgs::protocol::account::v1::GameTimeInfo* game_time_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_time_info_;
  }
  if (game_time_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_time_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_time_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_time_info_ = game_time_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountState.game_time_info)
}

// optional .bgs.protocol.account.v1.GameStatus game_status = 3;
inline bool GameAccountState::_internal_has_game_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || game_status_ != nullptr);
  return value;
}
inline bool GameAccountState::has_game_status() const {
  return _internal_has_game_status();
}
inline void GameAccountState::clear_game_status() {
  if (game_status_ != nullptr) game_status_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::account::v1::GameStatus& GameAccountState::_internal_game_status() const {
  const ::bgs::protocol::account::v1::GameStatus* p = game_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameStatus*>(
      &::bgs::protocol::account::v1::_GameStatus_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameStatus& GameAccountState::game_status() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountState.game_status)
  return _internal_game_status();
}
inline ::bgs::protocol::account::v1::GameStatus* GameAccountState::release_game_status() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountState.game_status)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::account::v1::GameStatus* temp = game_status_;
  game_status_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameStatus* GameAccountState::_internal_mutable_game_status() {
  _has_bits_[0] |= 0x00000004u;
  if (game_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameStatus>(GetArenaNoVirtual());
    game_status_ = p;
  }
  return game_status_;
}
inline ::bgs::protocol::account::v1::GameStatus* GameAccountState::mutable_game_status() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountState.game_status)
  return _internal_mutable_game_status();
}
inline void GameAccountState::set_allocated_game_status(::bgs::protocol::account::v1::GameStatus* game_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_status_;
  }
  if (game_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  game_status_ = game_status;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountState.game_status)
}

// optional .bgs.protocol.account.v1.RAFInfo raf_info = 4;
inline bool GameAccountState::_internal_has_raf_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || raf_info_ != nullptr);
  return value;
}
inline bool GameAccountState::has_raf_info() const {
  return _internal_has_raf_info();
}
inline void GameAccountState::clear_raf_info() {
  if (raf_info_ != nullptr) raf_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::account::v1::RAFInfo& GameAccountState::_internal_raf_info() const {
  const ::bgs::protocol::account::v1::RAFInfo* p = raf_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::RAFInfo*>(
      &::bgs::protocol::account::v1::_RAFInfo_default_instance_);
}
inline const ::bgs::protocol::account::v1::RAFInfo& GameAccountState::raf_info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountState.raf_info)
  return _internal_raf_info();
}
inline ::bgs::protocol::account::v1::RAFInfo* GameAccountState::release_raf_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountState.raf_info)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::account::v1::RAFInfo* temp = raf_info_;
  raf_info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::RAFInfo* GameAccountState::_internal_mutable_raf_info() {
  _has_bits_[0] |= 0x00000008u;
  if (raf_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::RAFInfo>(GetArenaNoVirtual());
    raf_info_ = p;
  }
  return raf_info_;
}
inline ::bgs::protocol::account::v1::RAFInfo* GameAccountState::mutable_raf_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountState.raf_info)
  return _internal_mutable_raf_info();
}
inline void GameAccountState::set_allocated_raf_info(::bgs::protocol::account::v1::RAFInfo* raf_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete raf_info_;
  }
  if (raf_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raf_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raf_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  raf_info_ = raf_info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountState.raf_info)
}

// -------------------------------------------------------------------

// GameAccountStateTagged

// optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
inline bool GameAccountStateTagged::_internal_has_game_account_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || game_account_state_ != nullptr);
  return value;
}
inline bool GameAccountStateTagged::has_game_account_state() const {
  return _internal_has_game_account_state();
}
inline void GameAccountStateTagged::clear_game_account_state() {
  if (game_account_state_ != nullptr) game_account_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::account::v1::GameAccountState& GameAccountStateTagged::_internal_game_account_state() const {
  const ::bgs::protocol::account::v1::GameAccountState* p = game_account_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountState*>(
      &::bgs::protocol::account::v1::_GameAccountState_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountState& GameAccountStateTagged::game_account_state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountStateTagged.game_account_state)
  return _internal_game_account_state();
}
inline ::bgs::protocol::account::v1::GameAccountState* GameAccountStateTagged::release_game_account_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountStateTagged.game_account_state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameAccountState* temp = game_account_state_;
  game_account_state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountState* GameAccountStateTagged::_internal_mutable_game_account_state() {
  _has_bits_[0] |= 0x00000001u;
  if (game_account_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountState>(GetArenaNoVirtual());
    game_account_state_ = p;
  }
  return game_account_state_;
}
inline ::bgs::protocol::account::v1::GameAccountState* GameAccountStateTagged::mutable_game_account_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountStateTagged.game_account_state)
  return _internal_mutable_game_account_state();
}
inline void GameAccountStateTagged::set_allocated_game_account_state(::bgs::protocol::account::v1::GameAccountState* game_account_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_account_state_;
  }
  if (game_account_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_account_state_ = game_account_state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountStateTagged.game_account_state)
}

// optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 2;
inline bool GameAccountStateTagged::_internal_has_game_account_tags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_account_tags_ != nullptr);
  return value;
}
inline bool GameAccountStateTagged::has_game_account_tags() const {
  return _internal_has_game_account_tags();
}
inline void GameAccountStateTagged::clear_game_account_tags() {
  if (game_account_tags_ != nullptr) game_account_tags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& GameAccountStateTagged::_internal_game_account_tags() const {
  const ::bgs::protocol::account::v1::GameAccountFieldTags* p = game_account_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountFieldTags*>(
      &::bgs::protocol::account::v1::_GameAccountFieldTags_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountFieldTags& GameAccountStateTagged::game_account_tags() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.GameAccountStateTagged.game_account_tags)
  return _internal_game_account_tags();
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GameAccountStateTagged::release_game_account_tags() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.GameAccountStateTagged.game_account_tags)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameAccountFieldTags* temp = game_account_tags_;
  game_account_tags_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GameAccountStateTagged::_internal_mutable_game_account_tags() {
  _has_bits_[0] |= 0x00000002u;
  if (game_account_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountFieldTags>(GetArenaNoVirtual());
    game_account_tags_ = p;
  }
  return game_account_tags_;
}
inline ::bgs::protocol::account::v1::GameAccountFieldTags* GameAccountStateTagged::mutable_game_account_tags() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.GameAccountStateTagged.game_account_tags)
  return _internal_mutable_game_account_tags();
}
inline void GameAccountStateTagged::set_allocated_game_account_tags(::bgs::protocol::account::v1::GameAccountFieldTags* game_account_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_account_tags_;
  }
  if (game_account_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_tags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_account_tags_ = game_account_tags;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.GameAccountStateTagged.game_account_tags)
}

// -------------------------------------------------------------------

// AuthorizedData

// optional string data = 1;
inline bool AuthorizedData::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthorizedData::has_data() const {
  return _internal_has_data();
}
inline void AuthorizedData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthorizedData::data() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AuthorizedData.data)
  return _internal_data();
}
inline void AuthorizedData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AuthorizedData.data)
}
inline std::string* AuthorizedData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.AuthorizedData.data)
  return _internal_mutable_data();
}
inline const std::string& AuthorizedData::_internal_data() const {
  return data_.GetNoArena();
}
inline void AuthorizedData::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthorizedData::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.AuthorizedData.data)
}
inline void AuthorizedData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.AuthorizedData.data)
}
inline void AuthorizedData::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.AuthorizedData.data)
}
inline std::string* AuthorizedData::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthorizedData::release_data() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.AuthorizedData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorizedData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.AuthorizedData.data)
}

// repeated uint32 license = 2;
inline int AuthorizedData::_internal_license_size() const {
  return license_.size();
}
inline int AuthorizedData::license_size() const {
  return _internal_license_size();
}
inline void AuthorizedData::clear_license() {
  license_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthorizedData::_internal_license(int index) const {
  return license_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthorizedData::license(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.AuthorizedData.license)
  return _internal_license(index);
}
inline void AuthorizedData::set_license(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  license_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.AuthorizedData.license)
}
inline void AuthorizedData::_internal_add_license(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  license_.Add(value);
}
inline void AuthorizedData::add_license(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_license(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.account.v1.AuthorizedData.license)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AuthorizedData::_internal_license() const {
  return license_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AuthorizedData::license() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.account.v1.AuthorizedData.license)
  return _internal_license();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AuthorizedData::_internal_mutable_license() {
  return &license_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AuthorizedData::mutable_license() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.account.v1.AuthorizedData.license)
  return _internal_mutable_license();
}

// -------------------------------------------------------------------

// IgrId

// optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
inline bool IgrId::_internal_has_game_account() const {
  return type_case() == kGameAccount;
}
inline bool IgrId::has_game_account() const {
  return _internal_has_game_account();
}
inline void IgrId::set_has_game_account() {
  _oneof_case_[0] = kGameAccount;
}
inline void IgrId::clear_game_account() {
  if (_internal_has_game_account()) {
    delete type_.game_account_;
    clear_has_type();
  }
}
inline ::bgs::protocol::account::v1::GameAccountHandle* IgrId::release_game_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.IgrId.game_account)
  if (_internal_has_game_account()) {
    clear_has_type();
      ::bgs::protocol::account::v1::GameAccountHandle* temp = type_.game_account_;
    type_.game_account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& IgrId::_internal_game_account() const {
  return _internal_has_game_account()
      ? *type_.game_account_
      : *reinterpret_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(&::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& IgrId::game_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.IgrId.game_account)
  return _internal_game_account();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* IgrId::_internal_mutable_game_account() {
  if (!_internal_has_game_account()) {
    clear_type();
    set_has_game_account();
    type_.game_account_ = CreateMaybeMessage< ::bgs::protocol::account::v1::GameAccountHandle >(
        GetArenaNoVirtual());
  }
  return type_.game_account_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* IgrId::mutable_game_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.IgrId.game_account)
  return _internal_mutable_game_account();
}

// optional fixed32 external_id = 2;
inline bool IgrId::_internal_has_external_id() const {
  return type_case() == kExternalId;
}
inline bool IgrId::has_external_id() const {
  return _internal_has_external_id();
}
inline void IgrId::set_has_external_id() {
  _oneof_case_[0] = kExternalId;
}
inline void IgrId::clear_external_id() {
  if (_internal_has_external_id()) {
    type_.external_id_ = 0u;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IgrId::_internal_external_id() const {
  if (_internal_has_external_id()) {
    return type_.external_id_;
  }
  return 0u;
}
inline void IgrId::_internal_set_external_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_external_id()) {
    clear_type();
    set_has_external_id();
  }
  type_.external_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IgrId::external_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.IgrId.external_id)
  return _internal_external_id();
}
inline void IgrId::set_external_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_external_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.IgrId.external_id)
}

inline bool IgrId::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void IgrId::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline IgrId::TypeCase IgrId::type_case() const {
  return IgrId::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IgrAddress

// optional string client_address = 1;
inline bool IgrAddress::_internal_has_client_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IgrAddress::has_client_address() const {
  return _internal_has_client_address();
}
inline void IgrAddress::clear_client_address() {
  client_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IgrAddress::client_address() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.IgrAddress.client_address)
  return _internal_client_address();
}
inline void IgrAddress::set_client_address(const std::string& value) {
  _internal_set_client_address(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.IgrAddress.client_address)
}
inline std::string* IgrAddress::mutable_client_address() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.account.v1.IgrAddress.client_address)
  return _internal_mutable_client_address();
}
inline const std::string& IgrAddress::_internal_client_address() const {
  return client_address_.GetNoArena();
}
inline void IgrAddress::_internal_set_client_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IgrAddress::set_client_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.account.v1.IgrAddress.client_address)
}
inline void IgrAddress::set_client_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.account.v1.IgrAddress.client_address)
}
inline void IgrAddress::set_client_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.account.v1.IgrAddress.client_address)
}
inline std::string* IgrAddress::_internal_mutable_client_address() {
  _has_bits_[0] |= 0x00000001u;
  return client_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IgrAddress::release_client_address() {
  // @@protoc_insertion_point(field_release:bgs.protocol.account.v1.IgrAddress.client_address)
  if (!_internal_has_client_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IgrAddress::set_allocated_client_address(std::string* client_address) {
  if (client_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_address);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.account.v1.IgrAddress.client_address)
}

// optional uint32 region = 2;
inline bool IgrAddress::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IgrAddress::has_region() const {
  return _internal_has_region();
}
inline void IgrAddress::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IgrAddress::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IgrAddress::region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.account.v1.IgrAddress.region)
  return _internal_region();
}
inline void IgrAddress::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  region_ = value;
}
inline void IgrAddress::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.account.v1.IgrAddress.region)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace account
}  // namespace protocol
}  // namespace bgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy>() {
  return ::bgs::protocol::account::v1::PrivacyInfo_GameInfoPrivacy_descriptor();
}
template <> struct is_proto_enum< ::bgs::protocol::account::v1::IdentityVerificationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::account::v1::IdentityVerificationStatus>() {
  return ::bgs::protocol::account::v1::IdentityVerificationStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto
