// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/api/client/v2/attribute_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace v2 {
class Attribute;
class AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class AttributeFilter;
class AttributeFilterDefaultTypeInternal;
extern AttributeFilterDefaultTypeInternal _AttributeFilter_default_instance_;
class Variant;
class VariantDefaultTypeInternal;
extern VariantDefaultTypeInternal _Variant_default_instance_;
}  // namespace v2
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::v2::Attribute* Arena::CreateMaybeMessage<::bgs::protocol::v2::Attribute>(Arena*);
template<> ::bgs::protocol::v2::AttributeFilter* Arena::CreateMaybeMessage<::bgs::protocol::v2::AttributeFilter>(Arena*);
template<> ::bgs::protocol::v2::Variant* Arena::CreateMaybeMessage<::bgs::protocol::v2::Variant>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace v2 {

enum AttributeFilter_Operation : int {
  AttributeFilter_Operation_MATCH_NONE = 0,
  AttributeFilter_Operation_MATCH_ANY = 1,
  AttributeFilter_Operation_MATCH_ALL = 2,
  AttributeFilter_Operation_MATCH_ALL_MOST_SPECIFIC = 3
};
bool AttributeFilter_Operation_IsValid(int value);
constexpr AttributeFilter_Operation AttributeFilter_Operation_Operation_MIN = AttributeFilter_Operation_MATCH_NONE;
constexpr AttributeFilter_Operation AttributeFilter_Operation_Operation_MAX = AttributeFilter_Operation_MATCH_ALL_MOST_SPECIFIC;
constexpr int AttributeFilter_Operation_Operation_ARRAYSIZE = AttributeFilter_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeFilter_Operation_descriptor();
template<typename T>
inline const std::string& AttributeFilter_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttributeFilter_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttributeFilter_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttributeFilter_Operation_descriptor(), enum_t_value);
}
inline bool AttributeFilter_Operation_Parse(
    const std::string& name, AttributeFilter_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttributeFilter_Operation>(
    AttributeFilter_Operation_descriptor(), name, value);
}
// ===================================================================

class Variant :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.v2.Variant) */ {
 public:
  Variant();
  virtual ~Variant();

  Variant(const Variant& from);
  Variant(Variant&& from) noexcept
    : Variant() {
    *this = ::std::move(from);
  }

  inline Variant& operator=(const Variant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variant& operator=(Variant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Variant& default_instance();

  enum TypeCase {
    kBoolValue = 1,
    kIntValue = 2,
    kFloatValue = 3,
    kStringValue = 4,
    kBlobValue = 5,
    kUintValue = 6,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variant* internal_default_instance() {
    return reinterpret_cast<const Variant*>(
               &_Variant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Variant& a, Variant& b) {
    a.Swap(&b);
  }
  inline void Swap(Variant* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Variant* New() const final {
    return CreateMaybeMessage<Variant>(nullptr);
  }

  Variant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variant& from);
  void MergeFrom(const Variant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.v2.Variant";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kBlobValueFieldNumber = 5,
    kUintValueFieldNumber = 6,
  };
  // optional bool bool_value = 1;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional int64 int_value = 2;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double float_value = 3;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  double float_value() const;
  void set_float_value(double value);
  private:
  double _internal_float_value() const;
  void _internal_set_float_value(double value);
  public:

  // optional string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional bytes blob_value = 5;
  bool has_blob_value() const;
  private:
  bool _internal_has_blob_value() const;
  public:
  void clear_blob_value();
  const std::string& blob_value() const;
  void set_blob_value(const std::string& value);
  void set_blob_value(std::string&& value);
  void set_blob_value(const char* value);
  void set_blob_value(const void* value, size_t size);
  std::string* mutable_blob_value();
  std::string* release_blob_value();
  void set_allocated_blob_value(std::string* blob_value);
  private:
  const std::string& _internal_blob_value() const;
  void _internal_set_blob_value(const std::string& value);
  std::string* _internal_mutable_blob_value();
  public:

  // optional uint64 uint_value = 6;
  bool has_uint_value() const;
  private:
  bool _internal_has_uint_value() const;
  public:
  void clear_uint_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint_value() const;
  void set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint_value() const;
  void _internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:bgs.protocol.v2.Variant)
 private:
  class _Internal;
  void set_has_bool_value();
  void set_has_int_value();
  void set_has_float_value();
  void set_has_string_value();
  void set_has_blob_value();
  void set_has_uint_value();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union TypeUnion {
    TypeUnion() {}
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    double float_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint_value_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Attribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.v2.Attribute) */ {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attribute* New() const final {
    return CreateMaybeMessage<Attribute>(nullptr);
  }

  Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.v2.Attribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .bgs.protocol.v2.Variant value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::bgs::protocol::v2::Variant& value() const;
  ::bgs::protocol::v2::Variant* release_value();
  ::bgs::protocol::v2::Variant* mutable_value();
  void set_allocated_value(::bgs::protocol::v2::Variant* value);
  private:
  const ::bgs::protocol::v2::Variant& _internal_value() const;
  ::bgs::protocol::v2::Variant* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.v2.Attribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::bgs::protocol::v2::Variant* value_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AttributeFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.v2.AttributeFilter) */ {
 public:
  AttributeFilter();
  virtual ~AttributeFilter();

  AttributeFilter(const AttributeFilter& from);
  AttributeFilter(AttributeFilter&& from) noexcept
    : AttributeFilter() {
    *this = ::std::move(from);
  }

  inline AttributeFilter& operator=(const AttributeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeFilter& operator=(AttributeFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeFilter* internal_default_instance() {
    return reinterpret_cast<const AttributeFilter*>(
               &_AttributeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AttributeFilter& a, AttributeFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeFilter* New() const final {
    return CreateMaybeMessage<AttributeFilter>(nullptr);
  }

  AttributeFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeFilter& from);
  void MergeFrom(const AttributeFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.v2.AttributeFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AttributeFilter_Operation Operation;
  static constexpr Operation MATCH_NONE =
    AttributeFilter_Operation_MATCH_NONE;
  static constexpr Operation MATCH_ANY =
    AttributeFilter_Operation_MATCH_ANY;
  static constexpr Operation MATCH_ALL =
    AttributeFilter_Operation_MATCH_ALL;
  static constexpr Operation MATCH_ALL_MOST_SPECIFIC =
    AttributeFilter_Operation_MATCH_ALL_MOST_SPECIFIC;
  static inline bool Operation_IsValid(int value) {
    return AttributeFilter_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    AttributeFilter_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    AttributeFilter_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    AttributeFilter_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return AttributeFilter_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return AttributeFilter_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(const std::string& name,
      Operation* value) {
    return AttributeFilter_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional .bgs.protocol.v2.AttributeFilter.Operation op = 1 [default = MATCH_NONE];
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  ::bgs::protocol::v2::AttributeFilter_Operation op() const;
  void set_op(::bgs::protocol::v2::AttributeFilter_Operation value);
  private:
  ::bgs::protocol::v2::AttributeFilter_Operation _internal_op() const;
  void _internal_set_op(::bgs::protocol::v2::AttributeFilter_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.v2.AttributeFilter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  int op_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variant

// optional bool bool_value = 1;
inline bool Variant::_internal_has_bool_value() const {
  return type_case() == kBoolValue;
}
inline bool Variant::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Variant::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Variant::clear_bool_value() {
  if (_internal_has_bool_value()) {
    type_.bool_value_ = false;
    clear_has_type();
  }
}
inline bool Variant::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return type_.bool_value_;
  }
  return false;
}
inline void Variant::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_type();
    set_has_bool_value();
  }
  type_.bool_value_ = value;
}
inline bool Variant::bool_value() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.Variant.bool_value)
  return _internal_bool_value();
}
inline void Variant::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Variant.bool_value)
}

// optional int64 int_value = 2;
inline bool Variant::_internal_has_int_value() const {
  return type_case() == kIntValue;
}
inline bool Variant::has_int_value() const {
  return _internal_has_int_value();
}
inline void Variant::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Variant::clear_int_value() {
  if (_internal_has_int_value()) {
    type_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return type_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Variant::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_value()) {
    clear_type();
    set_has_int_value();
  }
  type_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::int_value() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.Variant.int_value)
  return _internal_int_value();
}
inline void Variant::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Variant.int_value)
}

// optional double float_value = 3;
inline bool Variant::_internal_has_float_value() const {
  return type_case() == kFloatValue;
}
inline bool Variant::has_float_value() const {
  return _internal_has_float_value();
}
inline void Variant::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Variant::clear_float_value() {
  if (_internal_has_float_value()) {
    type_.float_value_ = 0;
    clear_has_type();
  }
}
inline double Variant::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return type_.float_value_;
  }
  return 0;
}
inline void Variant::_internal_set_float_value(double value) {
  if (!_internal_has_float_value()) {
    clear_type();
    set_has_float_value();
  }
  type_.float_value_ = value;
}
inline double Variant::float_value() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.Variant.float_value)
  return _internal_float_value();
}
inline void Variant::set_float_value(double value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Variant.float_value)
}

// optional string string_value = 4;
inline bool Variant::_internal_has_string_value() const {
  return type_case() == kStringValue;
}
inline bool Variant::has_string_value() const {
  return _internal_has_string_value();
}
inline void Variant::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Variant::clear_string_value() {
  if (_internal_has_string_value()) {
    type_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const std::string& Variant::string_value() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.Variant.string_value)
  return _internal_string_value();
}
inline void Variant::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Variant.string_value)
}
inline std::string* Variant::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.v2.Variant.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& Variant::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return type_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variant::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Variant::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Variant.string_value)
  if (!_internal_has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.v2.Variant.string_value)
}
inline void Variant::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.v2.Variant.string_value)
}
inline void Variant::set_string_value(const char* value, size_t size) {
  if (!_internal_has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.v2.Variant.string_value)
}
inline std::string* Variant::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variant::release_string_value() {
  // @@protoc_insertion_point(field_release:bgs.protocol.v2.Variant.string_value)
  if (_internal_has_string_value()) {
    clear_has_type();
    return type_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Variant::set_allocated_string_value(std::string* string_value) {
  if (has_type()) {
    clear_type();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.v2.Variant.string_value)
}

// optional bytes blob_value = 5;
inline bool Variant::_internal_has_blob_value() const {
  return type_case() == kBlobValue;
}
inline bool Variant::has_blob_value() const {
  return _internal_has_blob_value();
}
inline void Variant::set_has_blob_value() {
  _oneof_case_[0] = kBlobValue;
}
inline void Variant::clear_blob_value() {
  if (_internal_has_blob_value()) {
    type_.blob_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const std::string& Variant::blob_value() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.Variant.blob_value)
  return _internal_blob_value();
}
inline void Variant::set_blob_value(const std::string& value) {
  _internal_set_blob_value(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Variant.blob_value)
}
inline std::string* Variant::mutable_blob_value() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.v2.Variant.blob_value)
  return _internal_mutable_blob_value();
}
inline const std::string& Variant::_internal_blob_value() const {
  if (_internal_has_blob_value()) {
    return type_.blob_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variant::_internal_set_blob_value(const std::string& value) {
  if (!_internal_has_blob_value()) {
    clear_type();
    set_has_blob_value();
    type_.blob_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.blob_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Variant::set_blob_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Variant.blob_value)
  if (!_internal_has_blob_value()) {
    clear_type();
    set_has_blob_value();
    type_.blob_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.blob_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.v2.Variant.blob_value)
}
inline void Variant::set_blob_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_blob_value()) {
    clear_type();
    set_has_blob_value();
    type_.blob_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.blob_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.v2.Variant.blob_value)
}
inline void Variant::set_blob_value(const void* value, size_t size) {
  if (!_internal_has_blob_value()) {
    clear_type();
    set_has_blob_value();
    type_.blob_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.blob_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.v2.Variant.blob_value)
}
inline std::string* Variant::_internal_mutable_blob_value() {
  if (!_internal_has_blob_value()) {
    clear_type();
    set_has_blob_value();
    type_.blob_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.blob_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variant::release_blob_value() {
  // @@protoc_insertion_point(field_release:bgs.protocol.v2.Variant.blob_value)
  if (_internal_has_blob_value()) {
    clear_has_type();
    return type_.blob_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Variant::set_allocated_blob_value(std::string* blob_value) {
  if (has_type()) {
    clear_type();
  }
  if (blob_value != nullptr) {
    set_has_blob_value();
    type_.blob_value_.UnsafeSetDefault(blob_value);
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.v2.Variant.blob_value)
}

// optional uint64 uint_value = 6;
inline bool Variant::_internal_has_uint_value() const {
  return type_case() == kUintValue;
}
inline bool Variant::has_uint_value() const {
  return _internal_has_uint_value();
}
inline void Variant::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
inline void Variant::clear_uint_value() {
  if (_internal_has_uint_value()) {
    type_.uint_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Variant::_internal_uint_value() const {
  if (_internal_has_uint_value()) {
    return type_.uint_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Variant::_internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint_value()) {
    clear_type();
    set_has_uint_value();
  }
  type_.uint_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Variant::uint_value() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.Variant.uint_value)
  return _internal_uint_value();
}
inline void Variant::set_uint_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint_value(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Variant.uint_value)
}

inline bool Variant::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Variant::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Variant::TypeCase Variant::type_case() const {
  return Variant::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Attribute

// optional string name = 1;
inline bool Attribute::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Attribute::has_name() const {
  return _internal_has_name();
}
inline void Attribute::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Attribute::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.Attribute.name)
  return _internal_name();
}
inline void Attribute::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.Attribute.name)
}
inline std::string* Attribute::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.v2.Attribute.name)
  return _internal_mutable_name();
}
inline const std::string& Attribute::_internal_name() const {
  return name_.GetNoArena();
}
inline void Attribute::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Attribute::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.v2.Attribute.name)
}
inline void Attribute::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.v2.Attribute.name)
}
inline void Attribute::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.v2.Attribute.name)
}
inline std::string* Attribute::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.v2.Attribute.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.v2.Attribute.name)
}

// optional .bgs.protocol.v2.Variant value = 2;
inline bool Attribute::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool Attribute::has_value() const {
  return _internal_has_value();
}
inline void Attribute::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::v2::Variant& Attribute::_internal_value() const {
  const ::bgs::protocol::v2::Variant* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::v2::Variant*>(
      &::bgs::protocol::v2::_Variant_default_instance_);
}
inline const ::bgs::protocol::v2::Variant& Attribute::value() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.Attribute.value)
  return _internal_value();
}
inline ::bgs::protocol::v2::Variant* Attribute::release_value() {
  // @@protoc_insertion_point(field_release:bgs.protocol.v2.Attribute.value)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::v2::Variant* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::bgs::protocol::v2::Variant* Attribute::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::v2::Variant>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::bgs::protocol::v2::Variant* Attribute::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.v2.Attribute.value)
  return _internal_mutable_value();
}
inline void Attribute::set_allocated_value(::bgs::protocol::v2::Variant* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.v2.Attribute.value)
}

// -------------------------------------------------------------------

// AttributeFilter

// optional .bgs.protocol.v2.AttributeFilter.Operation op = 1 [default = MATCH_NONE];
inline bool AttributeFilter::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AttributeFilter::has_op() const {
  return _internal_has_op();
}
inline void AttributeFilter::clear_op() {
  op_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::bgs::protocol::v2::AttributeFilter_Operation AttributeFilter::_internal_op() const {
  return static_cast< ::bgs::protocol::v2::AttributeFilter_Operation >(op_);
}
inline ::bgs::protocol::v2::AttributeFilter_Operation AttributeFilter::op() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.AttributeFilter.op)
  return _internal_op();
}
inline void AttributeFilter::_internal_set_op(::bgs::protocol::v2::AttributeFilter_Operation value) {
  assert(::bgs::protocol::v2::AttributeFilter_Operation_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  op_ = value;
}
inline void AttributeFilter::set_op(::bgs::protocol::v2::AttributeFilter_Operation value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.v2.AttributeFilter.op)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int AttributeFilter::_internal_attribute_size() const {
  return attribute_.size();
}
inline int AttributeFilter::attribute_size() const {
  return _internal_attribute_size();
}
inline void AttributeFilter::clear_attribute() {
  attribute_.Clear();
}
inline ::bgs::protocol::v2::Attribute* AttributeFilter::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.v2.AttributeFilter.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
AttributeFilter::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.v2.AttributeFilter.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& AttributeFilter::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& AttributeFilter::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.v2.AttributeFilter.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* AttributeFilter::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* AttributeFilter::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.v2.AttributeFilter.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
AttributeFilter::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.v2.AttributeFilter.attribute)
  return attribute_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace protocol
}  // namespace bgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bgs::protocol::v2::AttributeFilter_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::v2::AttributeFilter_Operation>() {
  return ::bgs::protocol::v2::AttributeFilter_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto
