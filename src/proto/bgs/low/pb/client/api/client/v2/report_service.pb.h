// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/api/client/v2/report_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/account_types.pb.h"
#include "bgs/low/pb/client/api/client/v2/report_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto;
namespace bgs {
namespace protocol {
namespace report {
namespace v2 {
class SubmitReportRequest;
class SubmitReportRequestDefaultTypeInternal;
extern SubmitReportRequestDefaultTypeInternal _SubmitReportRequest_default_instance_;
}  // namespace v2
}  // namespace report
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::report::v2::SubmitReportRequest* Arena::CreateMaybeMessage<::bgs::protocol::report::v2::SubmitReportRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace report {
namespace v2 {

// ===================================================================

class SubmitReportRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v2.SubmitReportRequest) */ {
 public:
  SubmitReportRequest();
  virtual ~SubmitReportRequest();

  SubmitReportRequest(const SubmitReportRequest& from);
  SubmitReportRequest(SubmitReportRequest&& from) noexcept
    : SubmitReportRequest() {
    *this = ::std::move(from);
  }

  inline SubmitReportRequest& operator=(const SubmitReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitReportRequest& operator=(SubmitReportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitReportRequest& default_instance();

  enum TypeCase {
    kUserOptions = 10,
    kClubOptions = 11,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitReportRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitReportRequest*>(
               &_SubmitReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmitReportRequest& a, SubmitReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitReportRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitReportRequest* New() const final {
    return CreateMaybeMessage<SubmitReportRequest>(nullptr);
  }

  SubmitReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitReportRequest& from);
  void MergeFrom(const SubmitReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v2.SubmitReportRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDescriptionFieldNumber = 2,
    kAgentIdFieldNumber = 1,
    kProgramFieldNumber = 3,
    kUserOptionsFieldNumber = 10,
    kClubOptionsFieldNumber = 11,
  };
  // optional string user_description = 2;
  bool has_user_description() const;
  private:
  bool _internal_has_user_description() const;
  public:
  void clear_user_description();
  const std::string& user_description() const;
  void set_user_description(const std::string& value);
  void set_user_description(std::string&& value);
  void set_user_description(const char* value);
  void set_user_description(const char* value, size_t size);
  std::string* mutable_user_description();
  std::string* release_user_description();
  void set_allocated_user_description(std::string* user_description);
  private:
  const std::string& _internal_user_description() const;
  void _internal_set_user_description(const std::string& value);
  std::string* _internal_mutable_user_description();
  public:

  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // optional uint32 program = 3;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .bgs.protocol.report.v2.UserOptions user_options = 10;
  bool has_user_options() const;
  private:
  bool _internal_has_user_options() const;
  public:
  void clear_user_options();
  const ::bgs::protocol::report::v2::UserOptions& user_options() const;
  ::bgs::protocol::report::v2::UserOptions* release_user_options();
  ::bgs::protocol::report::v2::UserOptions* mutable_user_options();
  void set_allocated_user_options(::bgs::protocol::report::v2::UserOptions* user_options);
  private:
  const ::bgs::protocol::report::v2::UserOptions& _internal_user_options() const;
  ::bgs::protocol::report::v2::UserOptions* _internal_mutable_user_options();
  public:

  // optional .bgs.protocol.report.v2.ClubOptions club_options = 11;
  bool has_club_options() const;
  private:
  bool _internal_has_club_options() const;
  public:
  void clear_club_options();
  const ::bgs::protocol::report::v2::ClubOptions& club_options() const;
  ::bgs::protocol::report::v2::ClubOptions* release_club_options();
  ::bgs::protocol::report::v2::ClubOptions* mutable_club_options();
  void set_allocated_club_options(::bgs::protocol::report::v2::ClubOptions* club_options);
  private:
  const ::bgs::protocol::report::v2::ClubOptions& _internal_club_options() const;
  ::bgs::protocol::report::v2::ClubOptions* _internal_mutable_club_options();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v2.SubmitReportRequest)
 private:
  class _Internal;
  void set_has_user_options();
  void set_has_club_options();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_description_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  union TypeUnion {
    TypeUnion() {}
    ::bgs::protocol::report::v2::UserOptions* user_options_;
    ::bgs::protocol::report::v2::ClubOptions* club_options_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmitReportRequest

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool SubmitReportRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SubmitReportRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& SubmitReportRequest::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& SubmitReportRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.SubmitReportRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* SubmitReportRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v2.SubmitReportRequest.agent_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* SubmitReportRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000002u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* SubmitReportRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v2.SubmitReportRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SubmitReportRequest::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v2.SubmitReportRequest.agent_id)
}

// optional string user_description = 2;
inline bool SubmitReportRequest::_internal_has_user_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubmitReportRequest::has_user_description() const {
  return _internal_has_user_description();
}
inline void SubmitReportRequest::clear_user_description() {
  user_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubmitReportRequest::user_description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.SubmitReportRequest.user_description)
  return _internal_user_description();
}
inline void SubmitReportRequest::set_user_description(const std::string& value) {
  _internal_set_user_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v2.SubmitReportRequest.user_description)
}
inline std::string* SubmitReportRequest::mutable_user_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v2.SubmitReportRequest.user_description)
  return _internal_mutable_user_description();
}
inline const std::string& SubmitReportRequest::_internal_user_description() const {
  return user_description_.GetNoArena();
}
inline void SubmitReportRequest::_internal_set_user_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubmitReportRequest::set_user_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.report.v2.SubmitReportRequest.user_description)
}
inline void SubmitReportRequest::set_user_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.report.v2.SubmitReportRequest.user_description)
}
inline void SubmitReportRequest::set_user_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.report.v2.SubmitReportRequest.user_description)
}
inline std::string* SubmitReportRequest::_internal_mutable_user_description() {
  _has_bits_[0] |= 0x00000001u;
  return user_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubmitReportRequest::release_user_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v2.SubmitReportRequest.user_description)
  if (!_internal_has_user_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitReportRequest::set_allocated_user_description(std::string* user_description) {
  if (user_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_description);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v2.SubmitReportRequest.user_description)
}

// optional uint32 program = 3;
inline bool SubmitReportRequest::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubmitReportRequest::has_program() const {
  return _internal_has_program();
}
inline void SubmitReportRequest::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubmitReportRequest::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubmitReportRequest::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.SubmitReportRequest.program)
  return _internal_program();
}
inline void SubmitReportRequest::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  program_ = value;
}
inline void SubmitReportRequest::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v2.SubmitReportRequest.program)
}

// optional .bgs.protocol.report.v2.UserOptions user_options = 10;
inline bool SubmitReportRequest::_internal_has_user_options() const {
  return type_case() == kUserOptions;
}
inline bool SubmitReportRequest::has_user_options() const {
  return _internal_has_user_options();
}
inline void SubmitReportRequest::set_has_user_options() {
  _oneof_case_[0] = kUserOptions;
}
inline ::bgs::protocol::report::v2::UserOptions* SubmitReportRequest::release_user_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v2.SubmitReportRequest.user_options)
  if (_internal_has_user_options()) {
    clear_has_type();
      ::bgs::protocol::report::v2::UserOptions* temp = type_.user_options_;
    type_.user_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v2::UserOptions& SubmitReportRequest::_internal_user_options() const {
  return _internal_has_user_options()
      ? *type_.user_options_
      : *reinterpret_cast< ::bgs::protocol::report::v2::UserOptions*>(&::bgs::protocol::report::v2::_UserOptions_default_instance_);
}
inline const ::bgs::protocol::report::v2::UserOptions& SubmitReportRequest::user_options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.SubmitReportRequest.user_options)
  return _internal_user_options();
}
inline ::bgs::protocol::report::v2::UserOptions* SubmitReportRequest::_internal_mutable_user_options() {
  if (!_internal_has_user_options()) {
    clear_type();
    set_has_user_options();
    type_.user_options_ = CreateMaybeMessage< ::bgs::protocol::report::v2::UserOptions >(
        GetArenaNoVirtual());
  }
  return type_.user_options_;
}
inline ::bgs::protocol::report::v2::UserOptions* SubmitReportRequest::mutable_user_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v2.SubmitReportRequest.user_options)
  return _internal_mutable_user_options();
}

// optional .bgs.protocol.report.v2.ClubOptions club_options = 11;
inline bool SubmitReportRequest::_internal_has_club_options() const {
  return type_case() == kClubOptions;
}
inline bool SubmitReportRequest::has_club_options() const {
  return _internal_has_club_options();
}
inline void SubmitReportRequest::set_has_club_options() {
  _oneof_case_[0] = kClubOptions;
}
inline ::bgs::protocol::report::v2::ClubOptions* SubmitReportRequest::release_club_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v2.SubmitReportRequest.club_options)
  if (_internal_has_club_options()) {
    clear_has_type();
      ::bgs::protocol::report::v2::ClubOptions* temp = type_.club_options_;
    type_.club_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v2::ClubOptions& SubmitReportRequest::_internal_club_options() const {
  return _internal_has_club_options()
      ? *type_.club_options_
      : *reinterpret_cast< ::bgs::protocol::report::v2::ClubOptions*>(&::bgs::protocol::report::v2::_ClubOptions_default_instance_);
}
inline const ::bgs::protocol::report::v2::ClubOptions& SubmitReportRequest::club_options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.SubmitReportRequest.club_options)
  return _internal_club_options();
}
inline ::bgs::protocol::report::v2::ClubOptions* SubmitReportRequest::_internal_mutable_club_options() {
  if (!_internal_has_club_options()) {
    clear_type();
    set_has_club_options();
    type_.club_options_ = CreateMaybeMessage< ::bgs::protocol::report::v2::ClubOptions >(
        GetArenaNoVirtual());
  }
  return type_.club_options_;
}
inline ::bgs::protocol::report::v2::ClubOptions* SubmitReportRequest::mutable_club_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v2.SubmitReportRequest.club_options)
  return _internal_mutable_club_options();
}

inline bool SubmitReportRequest::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void SubmitReportRequest::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline SubmitReportRequest::TypeCase SubmitReportRequest::type_case() const {
  return SubmitReportRequest::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace report
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5fservice_2eproto
