// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/api/client/v2/report_types.proto

#include "bgs/low/pb/client/api/client/v2/report_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace report {
namespace v2 {
class ReportItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportItem> _instance;
  const ::bgs::protocol::MessageId* message_id_;
} _ReportItem_default_instance_;
class UserOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserOptions> _instance;
} _UserOptions_default_instance_;
class ClubOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubOptions> _instance;
} _ClubOptions_default_instance_;
}  // namespace v2
}  // namespace report
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ClubOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v2::_ClubOptions_default_instance_;
    new (ptr) ::bgs::protocol::report::v2::ClubOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v2::ClubOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto}, {
      &scc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v2::_ReportItem_default_instance_;
    new (ptr) ::bgs::protocol::report::v2::ReportItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v2::ReportItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto}, {
      &scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UserOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v2::_UserOptions_default_instance_;
    new (ptr) ::bgs::protocol::report::v2::UserOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v2::UserOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UserOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ReportItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ReportItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ReportItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::bgs::protocol::report::v2::ReportItemDefaultTypeInternal, message_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ReportItem, type_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::UserOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::UserOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::UserOptions, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::UserOptions, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::UserOptions, source_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::UserOptions, item_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ClubOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ClubOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ClubOptions, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ClubOptions, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ClubOptions, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ClubOptions, source_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v2::ClubOptions, item_),
  1,
  2,
  3,
  4,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::report::v2::ReportItem)},
  { 8, 17, sizeof(::bgs::protocol::report::v2::UserOptions)},
  { 21, 31, sizeof(::bgs::protocol::report::v2::ClubOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v2::_ReportItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v2::_UserOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v2::_ClubOptions_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2bgs/low/pb/client/api/client/v2/report"
  "_types.proto\022\026bgs.protocol.report.v2\032%bg"
  "s/low/pb/client/account_types.proto\032!bgs"
  "/low/pb/client/rpc_types.proto\032%bgs/low/"
  "pb/client/message_types.proto\"C\n\nReportI"
  "tem\022-\n\nmessage_id\030\001 \001(\0132\027.bgs.protocol.M"
  "essageIdH\000B\006\n\004type\"\377\001\n\013UserOptions\0225\n\tta"
  "rget_id\030\001 \001(\0132\".bgs.protocol.account.v1."
  "AccountId\022@\n\004type\030\002 \001(\0162!.bgs.protocol.r"
  "eport.v2.IssueType:\017ISSUE_TYPE_SPAM\022E\n\006s"
  "ource\030\003 \001(\0162\".bgs.protocol.report.v2.Use"
  "rSource:\021USER_SOURCE_OTHER\0220\n\004item\030\004 \001(\013"
  "2\".bgs.protocol.report.v2.ReportItem\"\354\001\n"
  "\013ClubOptions\022\017\n\007club_id\030\001 \001(\004\022\021\n\tstream_"
  "id\030\002 \001(\004\022@\n\004type\030\003 \001(\0162!.bgs.protocol.re"
  "port.v2.IssueType:\017ISSUE_TYPE_SPAM\022E\n\006so"
  "urce\030\004 \001(\0162\".bgs.protocol.report.v2.Club"
  "Source:\021CLUB_SOURCE_OTHER\0220\n\004item\030\005 \001(\0132"
  "\".bgs.protocol.report.v2.ReportItem*\215\001\n\t"
  "IssueType\022\023\n\017ISSUE_TYPE_SPAM\020\000\022\031\n\025ISSUE_"
  "TYPE_HARASSMENT\020\001\022 \n\034ISSUE_TYPE_OFFENSIV"
  "E_CONTENT\020\003\022\026\n\022ISSUE_TYPE_HACKING\020\004\022\026\n\022I"
  "SSUE_TYPE_BOTTING\020\005*\301\001\n\nUserSource\022\025\n\021US"
  "ER_SOURCE_OTHER\020\000\022\027\n\023USER_SOURCE_WHISPER"
  "\020\001\022\027\n\023USER_SOURCE_PROFILE\020\002\022\032\n\026USER_SOUR"
  "CE_BATTLE_TAG\020\003\022\024\n\020USER_SOURCE_CHAT\020\004\022!\n"
  "\035USER_SOURCE_FRIEND_INVITATION\020\005\022\025\n\021USER"
  "_SOURCE_VOICE\020\006*t\n\nClubSource\022\025\n\021CLUB_SO"
  "URCE_OTHER\020\000\022\027\n\023CLUB_SOURCE_MESSAGE\020\001\022\031\n"
  "\025CLUB_SOURCE_CLUB_NAME\020\002\022\033\n\027CLUB_SOURCE_"
  "STREAM_NAME\020\003B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto_deps[3] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto_sccs[3] = {
  &scc_info_ClubOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base,
  &scc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base,
  &scc_info_UserOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto, "bgs/low/pb/client/api/client/v2/report_types.proto", 1218,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto, 3, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace report {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IssueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto[0];
}
bool IssueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto[1];
}
bool UserSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClubSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto[2];
}
bool ClubSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ReportItem::InitAsDefaultInstance() {
  ::bgs::protocol::report::v2::_ReportItem_default_instance_.message_id_ = const_cast< ::bgs::protocol::MessageId*>(
      ::bgs::protocol::MessageId::internal_default_instance());
}
class ReportItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportItem>()._has_bits_);
  static const ::bgs::protocol::MessageId& message_id(const ReportItem* msg);
};

const ::bgs::protocol::MessageId&
ReportItem::_Internal::message_id(const ReportItem* msg) {
  return *msg->type_.message_id_;
}
void ReportItem::set_allocated_message_id(::bgs::protocol::MessageId* message_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (message_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_id, submessage_arena);
    }
    set_has_message_id();
    type_.message_id_ = message_id;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v2.ReportItem.message_id)
}
void ReportItem::clear_message_id() {
  if (_internal_has_message_id()) {
    delete type_.message_id_;
    clear_has_type();
  }
}
ReportItem::ReportItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v2.ReportItem)
}
ReportItem::ReportItem(const ReportItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kMessageId: {
      _internal_mutable_message_id()->::bgs::protocol::MessageId::MergeFrom(from._internal_message_id());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v2.ReportItem)
}

void ReportItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base);
  clear_has_type();
}

ReportItem::~ReportItem() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v2.ReportItem)
  SharedDtor();
}

void ReportItem::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void ReportItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportItem& ReportItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportItem_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ReportItem::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:bgs.protocol.report.v2.ReportItem)
  switch (type_case()) {
    case kMessageId: {
      delete type_.message_id_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ReportItem::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v2.ReportItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReportItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.MessageId message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v2.ReportItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .bgs.protocol.MessageId message_id = 1;
  if (_internal_has_message_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v2.ReportItem)
  return target;
}

size_t ReportItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v2.ReportItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // optional .bgs.protocol.MessageId message_id = 1;
    case kMessageId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.message_id_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v2.ReportItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v2.ReportItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v2.ReportItem)
    MergeFrom(*source);
  }
}

void ReportItem::MergeFrom(const ReportItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v2.ReportItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kMessageId: {
      _internal_mutable_message_id()->::bgs::protocol::MessageId::MergeFrom(from._internal_message_id());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void ReportItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v2.ReportItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportItem::CopyFrom(const ReportItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v2.ReportItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportItem::IsInitialized() const {
  return true;
}

void ReportItem::InternalSwap(ReportItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserOptions::InitAsDefaultInstance() {
  ::bgs::protocol::report::v2::_UserOptions_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::report::v2::_UserOptions_default_instance_._instance.get_mutable()->item_ = const_cast< ::bgs::protocol::report::v2::ReportItem*>(
      ::bgs::protocol::report::v2::ReportItem::internal_default_instance());
}
class UserOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<UserOptions>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& target_id(const UserOptions* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::report::v2::ReportItem& item(const UserOptions* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
UserOptions::_Internal::target_id(const UserOptions* msg) {
  return *msg->target_id_;
}
const ::bgs::protocol::report::v2::ReportItem&
UserOptions::_Internal::item(const UserOptions* msg) {
  return *msg->item_;
}
void UserOptions::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UserOptions::UserOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v2.UserOptions)
}
UserOptions::UserOptions(const UserOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::account::v1::AccountId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::bgs::protocol::report::v2::ReportItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&type_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v2.UserOptions)
}

void UserOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base);
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(source_));
}

UserOptions::~UserOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v2.UserOptions)
  SharedDtor();
}

void UserOptions::SharedDtor() {
  if (this != internal_default_instance()) delete target_id_;
  if (this != internal_default_instance()) delete item_;
}

void UserOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserOptions& UserOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void UserOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v2.UserOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(item_ != nullptr);
      item_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&type_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v2.IssueType type = 2 [default = ISSUE_TYPE_SPAM];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::report::v2::IssueType_IsValid(val))) {
            _internal_set_type(static_cast<::bgs::protocol::report::v2::IssueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v2.UserSource source = 3 [default = USER_SOURCE_OTHER];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::report::v2::UserSource_IsValid(val))) {
            _internal_set_source(static_cast<::bgs::protocol::report::v2::UserSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v2.ReportItem item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v2.UserOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId target_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_id(this), target, stream);
  }

  // optional .bgs.protocol.report.v2.IssueType type = 2 [default = ISSUE_TYPE_SPAM];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .bgs.protocol.report.v2.UserSource source = 3 [default = USER_SOURCE_OTHER];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_source(), target);
  }

  // optional .bgs.protocol.report.v2.ReportItem item = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v2.UserOptions)
  return target;
}

size_t UserOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v2.UserOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.account.v1.AccountId target_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

    // optional .bgs.protocol.report.v2.ReportItem item = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional .bgs.protocol.report.v2.IssueType type = 2 [default = ISSUE_TYPE_SPAM];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .bgs.protocol.report.v2.UserSource source = 3 [default = USER_SOURCE_OTHER];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v2.UserOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const UserOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v2.UserOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v2.UserOptions)
    MergeFrom(*source);
  }
}

void UserOptions::MergeFrom(const UserOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v2.UserOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_item()->::bgs::protocol::report::v2::ReportItem::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v2.UserOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOptions::CopyFrom(const UserOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v2.UserOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOptions::IsInitialized() const {
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void UserOptions::InternalSwap(UserOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_id_, other->target_id_);
  swap(item_, other->item_);
  swap(type_, other->type_);
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubOptions::InitAsDefaultInstance() {
  ::bgs::protocol::report::v2::_ClubOptions_default_instance_._instance.get_mutable()->item_ = const_cast< ::bgs::protocol::report::v2::ReportItem*>(
      ::bgs::protocol::report::v2::ReportItem::internal_default_instance());
}
class ClubOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubOptions>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::report::v2::ReportItem& item(const ClubOptions* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::report::v2::ReportItem&
ClubOptions::_Internal::item(const ClubOptions* msg) {
  return *msg->item_;
}
ClubOptions::ClubOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v2.ClubOptions)
}
ClubOptions::ClubOptions(const ClubOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::bgs::protocol::report::v2::ReportItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v2.ClubOptions)
}

void ClubOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base);
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&item_)) + sizeof(source_));
}

ClubOptions::~ClubOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v2.ClubOptions)
  SharedDtor();
}

void ClubOptions::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
}

void ClubOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubOptions& ClubOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubOptions_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v2.ClubOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_ != nullptr);
    item_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v2.IssueType type = 3 [default = ISSUE_TYPE_SPAM];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::report::v2::IssueType_IsValid(val))) {
            _internal_set_type(static_cast<::bgs::protocol::report::v2::IssueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v2.ClubSource source = 4 [default = CLUB_SOURCE_OTHER];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::report::v2::ClubSource_IsValid(val))) {
            _internal_set_source(static_cast<::bgs::protocol::report::v2::ClubSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v2.ReportItem item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v2.ClubOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.report.v2.IssueType type = 3 [default = ISSUE_TYPE_SPAM];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .bgs.protocol.report.v2.ClubSource source = 4 [default = CLUB_SOURCE_OTHER];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_source(), target);
  }

  // optional .bgs.protocol.report.v2.ReportItem item = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v2.ClubOptions)
  return target;
}

size_t ClubOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v2.ClubOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .bgs.protocol.report.v2.ReportItem item = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional uint64 club_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional .bgs.protocol.report.v2.IssueType type = 3 [default = ISSUE_TYPE_SPAM];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .bgs.protocol.report.v2.ClubSource source = 4 [default = CLUB_SOURCE_OTHER];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v2.ClubOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v2.ClubOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v2.ClubOptions)
    MergeFrom(*source);
  }
}

void ClubOptions::MergeFrom(const ClubOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v2.ClubOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_item()->::bgs::protocol::report::v2::ReportItem::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v2.ClubOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubOptions::CopyFrom(const ClubOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v2.ClubOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubOptions::IsInitialized() const {
  return true;
}

void ClubOptions::InternalSwap(ClubOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_, other->item_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
  swap(type_, other->type_);
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace report
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v2::ReportItem* Arena::CreateMaybeMessage< ::bgs::protocol::report::v2::ReportItem >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v2::ReportItem >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v2::UserOptions* Arena::CreateMaybeMessage< ::bgs::protocol::report::v2::UserOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v2::UserOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v2::ClubOptions* Arena::CreateMaybeMessage< ::bgs::protocol::report::v2::ClubOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v2::ClubOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
