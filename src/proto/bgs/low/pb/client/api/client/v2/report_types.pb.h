// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/api/client/v2/report_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/account_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
#include "bgs/low/pb/client/message_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace report {
namespace v2 {
class ClubOptions;
class ClubOptionsDefaultTypeInternal;
extern ClubOptionsDefaultTypeInternal _ClubOptions_default_instance_;
class ReportItem;
class ReportItemDefaultTypeInternal;
extern ReportItemDefaultTypeInternal _ReportItem_default_instance_;
class UserOptions;
class UserOptionsDefaultTypeInternal;
extern UserOptionsDefaultTypeInternal _UserOptions_default_instance_;
}  // namespace v2
}  // namespace report
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::report::v2::ClubOptions* Arena::CreateMaybeMessage<::bgs::protocol::report::v2::ClubOptions>(Arena*);
template<> ::bgs::protocol::report::v2::ReportItem* Arena::CreateMaybeMessage<::bgs::protocol::report::v2::ReportItem>(Arena*);
template<> ::bgs::protocol::report::v2::UserOptions* Arena::CreateMaybeMessage<::bgs::protocol::report::v2::UserOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace report {
namespace v2 {

enum IssueType : int {
  ISSUE_TYPE_SPAM = 0,
  ISSUE_TYPE_HARASSMENT = 1,
  ISSUE_TYPE_OFFENSIVE_CONTENT = 3,
  ISSUE_TYPE_HACKING = 4,
  ISSUE_TYPE_BOTTING = 5
};
bool IssueType_IsValid(int value);
constexpr IssueType IssueType_MIN = ISSUE_TYPE_SPAM;
constexpr IssueType IssueType_MAX = ISSUE_TYPE_BOTTING;
constexpr int IssueType_ARRAYSIZE = IssueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IssueType_descriptor();
template<typename T>
inline const std::string& IssueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IssueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IssueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IssueType_descriptor(), enum_t_value);
}
inline bool IssueType_Parse(
    const std::string& name, IssueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IssueType>(
    IssueType_descriptor(), name, value);
}
enum UserSource : int {
  USER_SOURCE_OTHER = 0,
  USER_SOURCE_WHISPER = 1,
  USER_SOURCE_PROFILE = 2,
  USER_SOURCE_BATTLE_TAG = 3,
  USER_SOURCE_CHAT = 4,
  USER_SOURCE_FRIEND_INVITATION = 5,
  USER_SOURCE_VOICE = 6
};
bool UserSource_IsValid(int value);
constexpr UserSource UserSource_MIN = USER_SOURCE_OTHER;
constexpr UserSource UserSource_MAX = USER_SOURCE_VOICE;
constexpr int UserSource_ARRAYSIZE = UserSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSource_descriptor();
template<typename T>
inline const std::string& UserSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserSource_descriptor(), enum_t_value);
}
inline bool UserSource_Parse(
    const std::string& name, UserSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserSource>(
    UserSource_descriptor(), name, value);
}
enum ClubSource : int {
  CLUB_SOURCE_OTHER = 0,
  CLUB_SOURCE_MESSAGE = 1,
  CLUB_SOURCE_CLUB_NAME = 2,
  CLUB_SOURCE_STREAM_NAME = 3
};
bool ClubSource_IsValid(int value);
constexpr ClubSource ClubSource_MIN = CLUB_SOURCE_OTHER;
constexpr ClubSource ClubSource_MAX = CLUB_SOURCE_STREAM_NAME;
constexpr int ClubSource_ARRAYSIZE = ClubSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClubSource_descriptor();
template<typename T>
inline const std::string& ClubSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClubSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClubSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClubSource_descriptor(), enum_t_value);
}
inline bool ClubSource_Parse(
    const std::string& name, ClubSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClubSource>(
    ClubSource_descriptor(), name, value);
}
// ===================================================================

class ReportItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v2.ReportItem) */ {
 public:
  ReportItem();
  virtual ~ReportItem();

  ReportItem(const ReportItem& from);
  ReportItem(ReportItem&& from) noexcept
    : ReportItem() {
    *this = ::std::move(from);
  }

  inline ReportItem& operator=(const ReportItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportItem& operator=(ReportItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportItem& default_instance();

  enum TypeCase {
    kMessageId = 1,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportItem* internal_default_instance() {
    return reinterpret_cast<const ReportItem*>(
               &_ReportItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReportItem& a, ReportItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportItem* New() const final {
    return CreateMaybeMessage<ReportItem>(nullptr);
  }

  ReportItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportItem& from);
  void MergeFrom(const ReportItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v2.ReportItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // optional .bgs.protocol.MessageId message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const ::bgs::protocol::MessageId& message_id() const;
  ::bgs::protocol::MessageId* release_message_id();
  ::bgs::protocol::MessageId* mutable_message_id();
  void set_allocated_message_id(::bgs::protocol::MessageId* message_id);
  private:
  const ::bgs::protocol::MessageId& _internal_message_id() const;
  ::bgs::protocol::MessageId* _internal_mutable_message_id();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v2.ReportItem)
 private:
  class _Internal;
  void set_has_message_id();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union TypeUnion {
    TypeUnion() {}
    ::bgs::protocol::MessageId* message_id_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class UserOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v2.UserOptions) */ {
 public:
  UserOptions();
  virtual ~UserOptions();

  UserOptions(const UserOptions& from);
  UserOptions(UserOptions&& from) noexcept
    : UserOptions() {
    *this = ::std::move(from);
  }

  inline UserOptions& operator=(const UserOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOptions& operator=(UserOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserOptions* internal_default_instance() {
    return reinterpret_cast<const UserOptions*>(
               &_UserOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserOptions& a, UserOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserOptions* New() const final {
    return CreateMaybeMessage<UserOptions>(nullptr);
  }

  UserOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserOptions& from);
  void MergeFrom(const UserOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v2.UserOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kItemFieldNumber = 4,
    kTypeFieldNumber = 2,
    kSourceFieldNumber = 3,
  };
  // optional .bgs.protocol.account.v1.AccountId target_id = 1;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::account::v1::AccountId& target_id() const;
  ::bgs::protocol::account::v1::AccountId* release_target_id();
  ::bgs::protocol::account::v1::AccountId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::account::v1::AccountId* target_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_target_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_target_id();
  public:

  // optional .bgs.protocol.report.v2.ReportItem item = 4;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::bgs::protocol::report::v2::ReportItem& item() const;
  ::bgs::protocol::report::v2::ReportItem* release_item();
  ::bgs::protocol::report::v2::ReportItem* mutable_item();
  void set_allocated_item(::bgs::protocol::report::v2::ReportItem* item);
  private:
  const ::bgs::protocol::report::v2::ReportItem& _internal_item() const;
  ::bgs::protocol::report::v2::ReportItem* _internal_mutable_item();
  public:

  // optional .bgs.protocol.report.v2.IssueType type = 2 [default = ISSUE_TYPE_SPAM];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::bgs::protocol::report::v2::IssueType type() const;
  void set_type(::bgs::protocol::report::v2::IssueType value);
  private:
  ::bgs::protocol::report::v2::IssueType _internal_type() const;
  void _internal_set_type(::bgs::protocol::report::v2::IssueType value);
  public:

  // optional .bgs.protocol.report.v2.UserSource source = 3 [default = USER_SOURCE_OTHER];
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::bgs::protocol::report::v2::UserSource source() const;
  void set_source(::bgs::protocol::report::v2::UserSource value);
  private:
  ::bgs::protocol::report::v2::UserSource _internal_source() const;
  void _internal_set_source(::bgs::protocol::report::v2::UserSource value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v2.UserOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* target_id_;
  ::bgs::protocol::report::v2::ReportItem* item_;
  int type_;
  int source_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v2.ClubOptions) */ {
 public:
  ClubOptions();
  virtual ~ClubOptions();

  ClubOptions(const ClubOptions& from);
  ClubOptions(ClubOptions&& from) noexcept
    : ClubOptions() {
    *this = ::std::move(from);
  }

  inline ClubOptions& operator=(const ClubOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubOptions& operator=(ClubOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubOptions* internal_default_instance() {
    return reinterpret_cast<const ClubOptions*>(
               &_ClubOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClubOptions& a, ClubOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubOptions* New() const final {
    return CreateMaybeMessage<ClubOptions>(nullptr);
  }

  ClubOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubOptions& from);
  void MergeFrom(const ClubOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v2.ClubOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 5,
    kClubIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSourceFieldNumber = 4,
  };
  // optional .bgs.protocol.report.v2.ReportItem item = 5;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::bgs::protocol::report::v2::ReportItem& item() const;
  ::bgs::protocol::report::v2::ReportItem* release_item();
  ::bgs::protocol::report::v2::ReportItem* mutable_item();
  void set_allocated_item(::bgs::protocol::report::v2::ReportItem* item);
  private:
  const ::bgs::protocol::report::v2::ReportItem& _internal_item() const;
  ::bgs::protocol::report::v2::ReportItem* _internal_mutable_item();
  public:

  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 2;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.report.v2.IssueType type = 3 [default = ISSUE_TYPE_SPAM];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::bgs::protocol::report::v2::IssueType type() const;
  void set_type(::bgs::protocol::report::v2::IssueType value);
  private:
  ::bgs::protocol::report::v2::IssueType _internal_type() const;
  void _internal_set_type(::bgs::protocol::report::v2::IssueType value);
  public:

  // optional .bgs.protocol.report.v2.ClubSource source = 4 [default = CLUB_SOURCE_OTHER];
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::bgs::protocol::report::v2::ClubSource source() const;
  void set_source(::bgs::protocol::report::v2::ClubSource value);
  private:
  ::bgs::protocol::report::v2::ClubSource _internal_source() const;
  void _internal_set_source(::bgs::protocol::report::v2::ClubSource value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v2.ClubOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::report::v2::ReportItem* item_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  int type_;
  int source_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportItem

// optional .bgs.protocol.MessageId message_id = 1;
inline bool ReportItem::_internal_has_message_id() const {
  return type_case() == kMessageId;
}
inline bool ReportItem::has_message_id() const {
  return _internal_has_message_id();
}
inline void ReportItem::set_has_message_id() {
  _oneof_case_[0] = kMessageId;
}
inline ::bgs::protocol::MessageId* ReportItem::release_message_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v2.ReportItem.message_id)
  if (_internal_has_message_id()) {
    clear_has_type();
      ::bgs::protocol::MessageId* temp = type_.message_id_;
    type_.message_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::MessageId& ReportItem::_internal_message_id() const {
  return _internal_has_message_id()
      ? *type_.message_id_
      : *reinterpret_cast< ::bgs::protocol::MessageId*>(&::bgs::protocol::_MessageId_default_instance_);
}
inline const ::bgs::protocol::MessageId& ReportItem::message_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.ReportItem.message_id)
  return _internal_message_id();
}
inline ::bgs::protocol::MessageId* ReportItem::_internal_mutable_message_id() {
  if (!_internal_has_message_id()) {
    clear_type();
    set_has_message_id();
    type_.message_id_ = CreateMaybeMessage< ::bgs::protocol::MessageId >(
        GetArenaNoVirtual());
  }
  return type_.message_id_;
}
inline ::bgs::protocol::MessageId* ReportItem::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v2.ReportItem.message_id)
  return _internal_mutable_message_id();
}

inline bool ReportItem::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void ReportItem::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ReportItem::TypeCase ReportItem::type_case() const {
  return ReportItem::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserOptions

// optional .bgs.protocol.account.v1.AccountId target_id = 1;
inline bool UserOptions::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool UserOptions::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::account::v1::AccountId& UserOptions::_internal_target_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& UserOptions::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.UserOptions.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::account::v1::AccountId* UserOptions::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v2.UserOptions.target_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* UserOptions::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000001u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::account::v1::AccountId* UserOptions::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v2.UserOptions.target_id)
  return _internal_mutable_target_id();
}
inline void UserOptions::set_allocated_target_id(::bgs::protocol::account::v1::AccountId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v2.UserOptions.target_id)
}

// optional .bgs.protocol.report.v2.IssueType type = 2 [default = ISSUE_TYPE_SPAM];
inline bool UserOptions::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserOptions::has_type() const {
  return _internal_has_type();
}
inline void UserOptions::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::bgs::protocol::report::v2::IssueType UserOptions::_internal_type() const {
  return static_cast< ::bgs::protocol::report::v2::IssueType >(type_);
}
inline ::bgs::protocol::report::v2::IssueType UserOptions::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.UserOptions.type)
  return _internal_type();
}
inline void UserOptions::_internal_set_type(::bgs::protocol::report::v2::IssueType value) {
  assert(::bgs::protocol::report::v2::IssueType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void UserOptions::set_type(::bgs::protocol::report::v2::IssueType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v2.UserOptions.type)
}

// optional .bgs.protocol.report.v2.UserSource source = 3 [default = USER_SOURCE_OTHER];
inline bool UserOptions::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserOptions::has_source() const {
  return _internal_has_source();
}
inline void UserOptions::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::report::v2::UserSource UserOptions::_internal_source() const {
  return static_cast< ::bgs::protocol::report::v2::UserSource >(source_);
}
inline ::bgs::protocol::report::v2::UserSource UserOptions::source() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.UserOptions.source)
  return _internal_source();
}
inline void UserOptions::_internal_set_source(::bgs::protocol::report::v2::UserSource value) {
  assert(::bgs::protocol::report::v2::UserSource_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  source_ = value;
}
inline void UserOptions::set_source(::bgs::protocol::report::v2::UserSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v2.UserOptions.source)
}

// optional .bgs.protocol.report.v2.ReportItem item = 4;
inline bool UserOptions::_internal_has_item() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || item_ != nullptr);
  return value;
}
inline bool UserOptions::has_item() const {
  return _internal_has_item();
}
inline void UserOptions::clear_item() {
  if (item_ != nullptr) item_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::report::v2::ReportItem& UserOptions::_internal_item() const {
  const ::bgs::protocol::report::v2::ReportItem* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::report::v2::ReportItem*>(
      &::bgs::protocol::report::v2::_ReportItem_default_instance_);
}
inline const ::bgs::protocol::report::v2::ReportItem& UserOptions::item() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.UserOptions.item)
  return _internal_item();
}
inline ::bgs::protocol::report::v2::ReportItem* UserOptions::release_item() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v2.UserOptions.item)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::report::v2::ReportItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::bgs::protocol::report::v2::ReportItem* UserOptions::_internal_mutable_item() {
  _has_bits_[0] |= 0x00000002u;
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::report::v2::ReportItem>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::bgs::protocol::report::v2::ReportItem* UserOptions::mutable_item() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v2.UserOptions.item)
  return _internal_mutable_item();
}
inline void UserOptions::set_allocated_item(::bgs::protocol::report::v2::ReportItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v2.UserOptions.item)
}

// -------------------------------------------------------------------

// ClubOptions

// optional uint64 club_id = 1;
inline bool ClubOptions::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubOptions::has_club_id() const {
  return _internal_has_club_id();
}
inline void ClubOptions::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubOptions::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubOptions::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.ClubOptions.club_id)
  return _internal_club_id();
}
inline void ClubOptions::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void ClubOptions::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v2.ClubOptions.club_id)
}

// optional uint64 stream_id = 2;
inline bool ClubOptions::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClubOptions::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void ClubOptions::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubOptions::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubOptions::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.ClubOptions.stream_id)
  return _internal_stream_id();
}
inline void ClubOptions::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void ClubOptions::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v2.ClubOptions.stream_id)
}

// optional .bgs.protocol.report.v2.IssueType type = 3 [default = ISSUE_TYPE_SPAM];
inline bool ClubOptions::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClubOptions::has_type() const {
  return _internal_has_type();
}
inline void ClubOptions::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::report::v2::IssueType ClubOptions::_internal_type() const {
  return static_cast< ::bgs::protocol::report::v2::IssueType >(type_);
}
inline ::bgs::protocol::report::v2::IssueType ClubOptions::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.ClubOptions.type)
  return _internal_type();
}
inline void ClubOptions::_internal_set_type(::bgs::protocol::report::v2::IssueType value) {
  assert(::bgs::protocol::report::v2::IssueType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void ClubOptions::set_type(::bgs::protocol::report::v2::IssueType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v2.ClubOptions.type)
}

// optional .bgs.protocol.report.v2.ClubSource source = 4 [default = CLUB_SOURCE_OTHER];
inline bool ClubOptions::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClubOptions::has_source() const {
  return _internal_has_source();
}
inline void ClubOptions::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::bgs::protocol::report::v2::ClubSource ClubOptions::_internal_source() const {
  return static_cast< ::bgs::protocol::report::v2::ClubSource >(source_);
}
inline ::bgs::protocol::report::v2::ClubSource ClubOptions::source() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.ClubOptions.source)
  return _internal_source();
}
inline void ClubOptions::_internal_set_source(::bgs::protocol::report::v2::ClubSource value) {
  assert(::bgs::protocol::report::v2::ClubSource_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  source_ = value;
}
inline void ClubOptions::set_source(::bgs::protocol::report::v2::ClubSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v2.ClubOptions.source)
}

// optional .bgs.protocol.report.v2.ReportItem item = 5;
inline bool ClubOptions::_internal_has_item() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || item_ != nullptr);
  return value;
}
inline bool ClubOptions::has_item() const {
  return _internal_has_item();
}
inline void ClubOptions::clear_item() {
  if (item_ != nullptr) item_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::report::v2::ReportItem& ClubOptions::_internal_item() const {
  const ::bgs::protocol::report::v2::ReportItem* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::report::v2::ReportItem*>(
      &::bgs::protocol::report::v2::_ReportItem_default_instance_);
}
inline const ::bgs::protocol::report::v2::ReportItem& ClubOptions::item() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v2.ClubOptions.item)
  return _internal_item();
}
inline ::bgs::protocol::report::v2::ReportItem* ClubOptions::release_item() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v2.ClubOptions.item)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::report::v2::ReportItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::bgs::protocol::report::v2::ReportItem* ClubOptions::_internal_mutable_item() {
  _has_bits_[0] |= 0x00000001u;
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::report::v2::ReportItem>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::bgs::protocol::report::v2::ReportItem* ClubOptions::mutable_item() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v2.ClubOptions.item)
  return _internal_mutable_item();
}
inline void ClubOptions::set_allocated_item(::bgs::protocol::report::v2::ReportItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v2.ClubOptions.item)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace report
}  // namespace protocol
}  // namespace bgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bgs::protocol::report::v2::IssueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::report::v2::IssueType>() {
  return ::bgs::protocol::report::v2::IssueType_descriptor();
}
template <> struct is_proto_enum< ::bgs::protocol::report::v2::UserSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::report::v2::UserSource>() {
  return ::bgs::protocol::report::v2::UserSource_descriptor();
}
template <> struct is_proto_enum< ::bgs::protocol::report::v2::ClubSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::report::v2::ClubSource>() {
  return ::bgs::protocol::report::v2::ClubSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2freport_5ftypes_2eproto
