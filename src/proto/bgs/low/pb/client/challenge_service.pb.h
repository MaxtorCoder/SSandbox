// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/challenge_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto;
namespace bgs {
namespace protocol {
namespace challenge {
namespace v1 {
class ChallengeExternalRequest;
class ChallengeExternalRequestDefaultTypeInternal;
extern ChallengeExternalRequestDefaultTypeInternal _ChallengeExternalRequest_default_instance_;
class ChallengeExternalResult;
class ChallengeExternalResultDefaultTypeInternal;
extern ChallengeExternalResultDefaultTypeInternal _ChallengeExternalResult_default_instance_;
}  // namespace v1
}  // namespace challenge
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::challenge::v1::ChallengeExternalRequest* Arena::CreateMaybeMessage<::bgs::protocol::challenge::v1::ChallengeExternalRequest>(Arena*);
template<> ::bgs::protocol::challenge::v1::ChallengeExternalResult* Arena::CreateMaybeMessage<::bgs::protocol::challenge::v1::ChallengeExternalResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace challenge {
namespace v1 {

// ===================================================================

class ChallengeExternalRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.challenge.v1.ChallengeExternalRequest) */ {
 public:
  ChallengeExternalRequest();
  virtual ~ChallengeExternalRequest();

  ChallengeExternalRequest(const ChallengeExternalRequest& from);
  ChallengeExternalRequest(ChallengeExternalRequest&& from) noexcept
    : ChallengeExternalRequest() {
    *this = ::std::move(from);
  }

  inline ChallengeExternalRequest& operator=(const ChallengeExternalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeExternalRequest& operator=(ChallengeExternalRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeExternalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeExternalRequest* internal_default_instance() {
    return reinterpret_cast<const ChallengeExternalRequest*>(
               &_ChallengeExternalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChallengeExternalRequest& a, ChallengeExternalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeExternalRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeExternalRequest* New() const final {
    return CreateMaybeMessage<ChallengeExternalRequest>(nullptr);
  }

  ChallengeExternalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeExternalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeExternalRequest& from);
  void MergeFrom(const ChallengeExternalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeExternalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.challenge.v1.ChallengeExternalRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTokenFieldNumber = 1,
    kPayloadTypeFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // optional string request_token = 1;
  bool has_request_token() const;
  private:
  bool _internal_has_request_token() const;
  public:
  void clear_request_token();
  const std::string& request_token() const;
  void set_request_token(const std::string& value);
  void set_request_token(std::string&& value);
  void set_request_token(const char* value);
  void set_request_token(const char* value, size_t size);
  std::string* mutable_request_token();
  std::string* release_request_token();
  void set_allocated_request_token(std::string* request_token);
  private:
  const std::string& _internal_request_token() const;
  void _internal_set_request_token(const std::string& value);
  std::string* _internal_mutable_request_token();
  public:

  // optional string payload_type = 2;
  bool has_payload_type() const;
  private:
  bool _internal_has_payload_type() const;
  public:
  void clear_payload_type();
  const std::string& payload_type() const;
  void set_payload_type(const std::string& value);
  void set_payload_type(std::string&& value);
  void set_payload_type(const char* value);
  void set_payload_type(const char* value, size_t size);
  std::string* mutable_payload_type();
  std::string* release_payload_type();
  void set_allocated_payload_type(std::string* payload_type);
  private:
  const std::string& _internal_payload_type() const;
  void _internal_set_payload_type(const std::string& value);
  std::string* _internal_mutable_payload_type();
  public:

  // optional bytes payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.challenge.v1.ChallengeExternalRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ChallengeExternalResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.challenge.v1.ChallengeExternalResult) */ {
 public:
  ChallengeExternalResult();
  virtual ~ChallengeExternalResult();

  ChallengeExternalResult(const ChallengeExternalResult& from);
  ChallengeExternalResult(ChallengeExternalResult&& from) noexcept
    : ChallengeExternalResult() {
    *this = ::std::move(from);
  }

  inline ChallengeExternalResult& operator=(const ChallengeExternalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeExternalResult& operator=(ChallengeExternalResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeExternalResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeExternalResult* internal_default_instance() {
    return reinterpret_cast<const ChallengeExternalResult*>(
               &_ChallengeExternalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChallengeExternalResult& a, ChallengeExternalResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeExternalResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeExternalResult* New() const final {
    return CreateMaybeMessage<ChallengeExternalResult>(nullptr);
  }

  ChallengeExternalResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeExternalResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeExternalResult& from);
  void MergeFrom(const ChallengeExternalResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeExternalResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.challenge.v1.ChallengeExternalResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTokenFieldNumber = 1,
    kPassedFieldNumber = 2,
  };
  // optional string request_token = 1;
  bool has_request_token() const;
  private:
  bool _internal_has_request_token() const;
  public:
  void clear_request_token();
  const std::string& request_token() const;
  void set_request_token(const std::string& value);
  void set_request_token(std::string&& value);
  void set_request_token(const char* value);
  void set_request_token(const char* value, size_t size);
  std::string* mutable_request_token();
  std::string* release_request_token();
  void set_allocated_request_token(std::string* request_token);
  private:
  const std::string& _internal_request_token() const;
  void _internal_set_request_token(const std::string& value);
  std::string* _internal_mutable_request_token();
  public:

  // optional bool passed = 2 [default = true];
  bool has_passed() const;
  private:
  bool _internal_has_passed() const;
  public:
  void clear_passed();
  bool passed() const;
  void set_passed(bool value);
  private:
  bool _internal_passed() const;
  void _internal_set_passed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.challenge.v1.ChallengeExternalResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_token_;
  bool passed_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChallengeExternalRequest

// optional string request_token = 1;
inline bool ChallengeExternalRequest::_internal_has_request_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChallengeExternalRequest::has_request_token() const {
  return _internal_has_request_token();
}
inline void ChallengeExternalRequest::clear_request_token() {
  request_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChallengeExternalRequest::request_token() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.challenge.v1.ChallengeExternalRequest.request_token)
  return _internal_request_token();
}
inline void ChallengeExternalRequest::set_request_token(const std::string& value) {
  _internal_set_request_token(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.challenge.v1.ChallengeExternalRequest.request_token)
}
inline std::string* ChallengeExternalRequest::mutable_request_token() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.challenge.v1.ChallengeExternalRequest.request_token)
  return _internal_mutable_request_token();
}
inline const std::string& ChallengeExternalRequest::_internal_request_token() const {
  return request_token_.GetNoArena();
}
inline void ChallengeExternalRequest::_internal_set_request_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChallengeExternalRequest::set_request_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.challenge.v1.ChallengeExternalRequest.request_token)
}
inline void ChallengeExternalRequest::set_request_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.challenge.v1.ChallengeExternalRequest.request_token)
}
inline void ChallengeExternalRequest::set_request_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.challenge.v1.ChallengeExternalRequest.request_token)
}
inline std::string* ChallengeExternalRequest::_internal_mutable_request_token() {
  _has_bits_[0] |= 0x00000001u;
  return request_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeExternalRequest::release_request_token() {
  // @@protoc_insertion_point(field_release:bgs.protocol.challenge.v1.ChallengeExternalRequest.request_token)
  if (!_internal_has_request_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeExternalRequest::set_allocated_request_token(std::string* request_token) {
  if (request_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_token);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.challenge.v1.ChallengeExternalRequest.request_token)
}

// optional string payload_type = 2;
inline bool ChallengeExternalRequest::_internal_has_payload_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChallengeExternalRequest::has_payload_type() const {
  return _internal_has_payload_type();
}
inline void ChallengeExternalRequest::clear_payload_type() {
  payload_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChallengeExternalRequest::payload_type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload_type)
  return _internal_payload_type();
}
inline void ChallengeExternalRequest::set_payload_type(const std::string& value) {
  _internal_set_payload_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload_type)
}
inline std::string* ChallengeExternalRequest::mutable_payload_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload_type)
  return _internal_mutable_payload_type();
}
inline const std::string& ChallengeExternalRequest::_internal_payload_type() const {
  return payload_type_.GetNoArena();
}
inline void ChallengeExternalRequest::_internal_set_payload_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  payload_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChallengeExternalRequest::set_payload_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  payload_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload_type)
}
inline void ChallengeExternalRequest::set_payload_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  payload_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload_type)
}
inline void ChallengeExternalRequest::set_payload_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  payload_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload_type)
}
inline std::string* ChallengeExternalRequest::_internal_mutable_payload_type() {
  _has_bits_[0] |= 0x00000002u;
  return payload_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeExternalRequest::release_payload_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload_type)
  if (!_internal_has_payload_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return payload_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeExternalRequest::set_allocated_payload_type(std::string* payload_type) {
  if (payload_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payload_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload_type)
}

// optional bytes payload = 3;
inline bool ChallengeExternalRequest::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChallengeExternalRequest::has_payload() const {
  return _internal_has_payload();
}
inline void ChallengeExternalRequest::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChallengeExternalRequest::payload() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload)
  return _internal_payload();
}
inline void ChallengeExternalRequest::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload)
}
inline std::string* ChallengeExternalRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload)
  return _internal_mutable_payload();
}
inline const std::string& ChallengeExternalRequest::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void ChallengeExternalRequest::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChallengeExternalRequest::set_payload(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload)
}
inline void ChallengeExternalRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload)
}
inline void ChallengeExternalRequest::set_payload(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload)
}
inline std::string* ChallengeExternalRequest::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000004u;
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeExternalRequest::release_payload() {
  // @@protoc_insertion_point(field_release:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return payload_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeExternalRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.challenge.v1.ChallengeExternalRequest.payload)
}

// -------------------------------------------------------------------

// ChallengeExternalResult

// optional string request_token = 1;
inline bool ChallengeExternalResult::_internal_has_request_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChallengeExternalResult::has_request_token() const {
  return _internal_has_request_token();
}
inline void ChallengeExternalResult::clear_request_token() {
  request_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChallengeExternalResult::request_token() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.challenge.v1.ChallengeExternalResult.request_token)
  return _internal_request_token();
}
inline void ChallengeExternalResult::set_request_token(const std::string& value) {
  _internal_set_request_token(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.challenge.v1.ChallengeExternalResult.request_token)
}
inline std::string* ChallengeExternalResult::mutable_request_token() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.challenge.v1.ChallengeExternalResult.request_token)
  return _internal_mutable_request_token();
}
inline const std::string& ChallengeExternalResult::_internal_request_token() const {
  return request_token_.GetNoArena();
}
inline void ChallengeExternalResult::_internal_set_request_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChallengeExternalResult::set_request_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.challenge.v1.ChallengeExternalResult.request_token)
}
inline void ChallengeExternalResult::set_request_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.challenge.v1.ChallengeExternalResult.request_token)
}
inline void ChallengeExternalResult::set_request_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.challenge.v1.ChallengeExternalResult.request_token)
}
inline std::string* ChallengeExternalResult::_internal_mutable_request_token() {
  _has_bits_[0] |= 0x00000001u;
  return request_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeExternalResult::release_request_token() {
  // @@protoc_insertion_point(field_release:bgs.protocol.challenge.v1.ChallengeExternalResult.request_token)
  if (!_internal_has_request_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeExternalResult::set_allocated_request_token(std::string* request_token) {
  if (request_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_token);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.challenge.v1.ChallengeExternalResult.request_token)
}

// optional bool passed = 2 [default = true];
inline bool ChallengeExternalResult::_internal_has_passed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChallengeExternalResult::has_passed() const {
  return _internal_has_passed();
}
inline void ChallengeExternalResult::clear_passed() {
  passed_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ChallengeExternalResult::_internal_passed() const {
  return passed_;
}
inline bool ChallengeExternalResult::passed() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.challenge.v1.ChallengeExternalResult.passed)
  return _internal_passed();
}
inline void ChallengeExternalResult::_internal_set_passed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  passed_ = value;
}
inline void ChallengeExternalResult::set_passed(bool value) {
  _internal_set_passed(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.challenge.v1.ChallengeExternalResult.passed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace challenge
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fchallenge_5fservice_2eproto
