// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/channel_types.proto

#include "bgs/low/pb/client/channel_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttributeFilter_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Invitation_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelDescription_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Member_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberAccountInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace channel {
namespace v1 {
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class ListChannelsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListChannelsOptions> _instance;
} _ListChannelsOptions_default_instance_;
class ChannelDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescription> _instance;
} _ChannelDescription_default_instance_;
class ChannelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelInfo> _instance;
} _ChannelInfo_default_instance_;
class ChannelStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelState> _instance;
} _ChannelState_default_instance_;
class MemberAccountInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberAccountInfo> _instance;
} _MemberAccountInfo_default_instance_;
class MemberStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberState> _instance;
} _MemberState_default_instance_;
class MemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Member> _instance;
} _Member_default_instance_;
class SubscriberIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberId> _instance;
} _SubscriberId_default_instance_;
}  // namespace v1
}  // namespace channel
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ChannelDescription_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::channel::v1::_ChannelDescription_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::ChannelDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::ChannelDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelDescription_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelDescription_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ChannelInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::channel::v1::_ChannelInfo_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::ChannelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::ChannelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {
      &scc_info_ChannelDescription_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
      &scc_info_Member_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.DefaultConstruct();
  *::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get_mutable() = std::string("default", 7);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get_mutable());
  {
    void* ptr = &::bgs::protocol::channel::v1::_ChannelState_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::ChannelState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::ChannelState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,
      &scc_info_Invitation_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ListChannelsOptions_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::channel::v1::_ListChannelsOptions_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::ListChannelsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::ListChannelsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListChannelsOptions_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListChannelsOptions_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {
      &scc_info_AttributeFilter_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Member_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::channel::v1::_Member_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::Member();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::Member::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Member_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Member_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {
      &scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_MemberState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_MemberAccountInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::channel::v1::_MemberAccountInfo_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::MemberAccountInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::MemberAccountInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberAccountInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberAccountInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_MemberState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::channel::v1::_MemberState_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::MemberState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::MemberState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,
      &scc_info_MemberAccountInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Message_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::channel::v1::_Message_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Message_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Message_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscriberId_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::channel::v1::_SubscriberId_default_instance_;
    new (ptr) ::bgs::protocol::channel::v1::SubscriberId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::channel::v1::SubscriberId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubscriberId_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SubscriberId_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::Message, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::Message, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::Message, attribute_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, start_index_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, max_results_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, locale_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, capacity_full_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, attribute_filter_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ListChannelsOptions, channel_type_),
  3,
  7,
  0,
  4,
  5,
  6,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelDescription, channel_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelDescription, current_members_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelDescription, state_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelInfo, description_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelInfo, member_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, max_members_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, min_members_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, reason_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, privacy_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, channel_type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::ChannelState, subscribe_to_presence_),
  2,
  3,
  ~0u,
  ~0u,
  4,
  6,
  0,
  1,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberAccountInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberAccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberAccountInfo, battle_tag_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberState, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberState, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberState, privileges_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::MemberState, info_),
  ~0u,
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::Member, identity_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::Member, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::SubscriberId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::SubscriberId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::SubscriberId, account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::SubscriberId, game_account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::channel::v1::SubscriberId, process_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::bgs::protocol::channel::v1::Message)},
  { 7, 20, sizeof(::bgs::protocol::channel::v1::ListChannelsOptions)},
  { 28, 36, sizeof(::bgs::protocol::channel::v1::ChannelDescription)},
  { 39, 46, sizeof(::bgs::protocol::channel::v1::ChannelInfo)},
  { 48, 63, sizeof(::bgs::protocol::channel::v1::ChannelState)},
  { 73, 79, sizeof(::bgs::protocol::channel::v1::MemberAccountInfo)},
  { 80, 89, sizeof(::bgs::protocol::channel::v1::MemberState)},
  { 93, 100, sizeof(::bgs::protocol::channel::v1::Member)},
  { 102, 110, sizeof(::bgs::protocol::channel::v1::SubscriberId)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_ListChannelsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_ChannelDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_ChannelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_ChannelState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_MemberAccountInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_MemberState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::channel::v1::_SubscriberId_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%bgs/low/pb/client/channel_types.proto\022"
  "\027bgs.protocol.channel.v1\0320bgs/low/pb/cli"
  "ent/api/client/v1/channel_id.proto\032\'bgs/"
  "low/pb/client/attribute_types.proto\032$bgs"
  "/low/pb/client/entity_types.proto\032%bgs/l"
  "ow/pb/client/account_types.proto\032(bgs/lo"
  "w/pb/client/invitation_types.proto\032!bgs/"
  "low/pb/client/rpc_types.proto\"<\n\007Message"
  "\022*\n\tattribute\030\001 \003(\0132\027.bgs.protocol.Attri"
  "bute*\005\010d\020\221N\"\333\001\n\023ListChannelsOptions\022\026\n\013s"
  "tart_index\030\001 \001(\r:\0010\022\027\n\013max_results\030\002 \001(\r"
  ":\00216\022\014\n\004name\030\003 \001(\t\022\017\n\007program\030\004 \001(\007\022\016\n\006l"
  "ocale\030\005 \001(\007\022\025\n\rcapacity_full\030\006 \001(\r\0227\n\020at"
  "tribute_filter\030\007 \002(\0132\035.bgs.protocol.Attr"
  "ibuteFilter\022\024\n\014channel_type\030\010 \001(\t\"\217\001\n\022Ch"
  "annelDescription\022*\n\nchannel_id\030\001 \002(\0132\026.b"
  "gs.protocol.EntityId\022\027\n\017current_members\030"
  "\002 \001(\r\0224\n\005state\030\003 \001(\0132%.bgs.protocol.chan"
  "nel.v1.ChannelState\"\200\001\n\013ChannelInfo\022@\n\013d"
  "escription\030\001 \002(\0132+.bgs.protocol.channel."
  "v1.ChannelDescription\022/\n\006member\030\002 \003(\0132\037."
  "bgs.protocol.channel.v1.Member\"\377\003\n\014Chann"
  "elState\022\023\n\013max_members\030\001 \001(\r\022\023\n\013min_memb"
  "ers\030\002 \001(\r\022*\n\tattribute\030\003 \003(\0132\027.bgs.proto"
  "col.Attribute\022,\n\ninvitation\030\004 \003(\0132\030.bgs."
  "protocol.Invitation\022\016\n\006reason\030\006 \001(\r\022]\n\rp"
  "rivacy_level\030\007 \001(\01622.bgs.protocol.channe"
  "l.v1.ChannelState.PrivacyLevel:\022PRIVACY_"
  "LEVEL_OPEN\022\014\n\004name\030\010 \001(\t\022\035\n\014channel_type"
  "\030\n \001(\t:\007default\022\017\n\007program\030\013 \001(\007\022#\n\025subs"
  "cribe_to_presence\030\r \001(\010:\004true\"\221\001\n\014Privac"
  "yLevel\022\026\n\022PRIVACY_LEVEL_OPEN\020\001\022,\n(PRIVAC"
  "Y_LEVEL_OPEN_INVITATION_AND_FRIEND\020\002\022!\n\035"
  "PRIVACY_LEVEL_OPEN_INVITATION\020\003\022\030\n\024PRIVA"
  "CY_LEVEL_CLOSED\020\004*\005\010d\020\221N\"\'\n\021MemberAccoun"
  "tInfo\022\022\n\nbattle_tag\030\003 \001(\t\"\234\001\n\013MemberStat"
  "e\022*\n\tattribute\030\001 \003(\0132\027.bgs.protocol.Attr"
  "ibute\022\020\n\004role\030\002 \003(\rB\002\020\001\022\025\n\nprivileges\030\003 "
  "\001(\004:\0010\0228\n\004info\030\004 \001(\0132*.bgs.protocol.chan"
  "nel.v1.MemberAccountInfo\"g\n\006Member\022(\n\010id"
  "entity\030\001 \002(\0132\026.bgs.protocol.Identity\0223\n\005"
  "state\030\002 \002(\0132$.bgs.protocol.channel.v1.Me"
  "mberState\"\273\001\n\014SubscriberId\0227\n\007account\030\001 "
  "\001(\0132\".bgs.protocol.account.v1.AccountIdB"
  "\002\030\001\022@\n\014game_account\030\002 \001(\0132*.bgs.protocol"
  ".account.v1.GameAccountHandle\022(\n\007process"
  "\030\003 \001(\0132\027.bgs.protocol.ProcessId:\006\202\371+\002\020\001P"
  "\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto_deps[6] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv1_2fchannel_5fid_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto_sccs[9] = {
  &scc_info_ChannelDescription_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
  &scc_info_ChannelInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
  &scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
  &scc_info_ListChannelsOptions_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
  &scc_info_Member_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
  &scc_info_MemberAccountInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
  &scc_info_MemberState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
  &scc_info_Message_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
  &scc_info_SubscriberId_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto, "bgs/low/pb/client/channel_types.proto", 1881,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto_deps, 9, 6,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto, 9, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace channel {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelState_PrivacyLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto[0];
}
bool ChannelState_PrivacyLevel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN;
constexpr ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND;
constexpr ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN_INVITATION;
constexpr ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_CLOSED;
constexpr ChannelState_PrivacyLevel ChannelState::PrivacyLevel_MIN;
constexpr ChannelState_PrivacyLevel ChannelState::PrivacyLevel_MAX;
constexpr int ChannelState::PrivacyLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Message>()._has_bits_);
};

void Message::clear_attribute() {
  attribute_.Clear();
}
Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.Message)
  SharedDtor();
}

void Message::SharedDtor() {
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  attribute_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.Attribute attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 80008u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attribute(i), target, stream);
  }

  // Extension range [100, 10001)
  target = _extensions_._InternalSerialize(
      100, 10001, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.Message)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 1;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListChannelsOptions::InitAsDefaultInstance() {
  ::bgs::protocol::channel::v1::_ListChannelsOptions_default_instance_._instance.get_mutable()->attribute_filter_ = const_cast< ::bgs::protocol::AttributeFilter*>(
      ::bgs::protocol::AttributeFilter::internal_default_instance());
}
class ListChannelsOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ListChannelsOptions>()._has_bits_);
  static void set_has_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_results(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_capacity_full(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::bgs::protocol::AttributeFilter& attribute_filter(const ListChannelsOptions* msg);
  static void set_has_attribute_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::AttributeFilter&
ListChannelsOptions::_Internal::attribute_filter(const ListChannelsOptions* msg) {
  return *msg->attribute_filter_;
}
void ListChannelsOptions::clear_attribute_filter() {
  if (attribute_filter_ != nullptr) attribute_filter_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ListChannelsOptions::ListChannelsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.ListChannelsOptions)
}
ListChannelsOptions::ListChannelsOptions(const ListChannelsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  channel_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_type()) {
    channel_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_type_);
  }
  if (from._internal_has_attribute_filter()) {
    attribute_filter_ = new ::bgs::protocol::AttributeFilter(*from.attribute_filter_);
  } else {
    attribute_filter_ = nullptr;
  }
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.ListChannelsOptions)
}

void ListChannelsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListChannelsOptions_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&attribute_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_full_) -
      reinterpret_cast<char*>(&attribute_filter_)) + sizeof(capacity_full_));
  max_results_ = 16u;
}

ListChannelsOptions::~ListChannelsOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.ListChannelsOptions)
  SharedDtor();
}

void ListChannelsOptions::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attribute_filter_;
}

void ListChannelsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListChannelsOptions& ListChannelsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListChannelsOptions_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ListChannelsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.ListChannelsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(attribute_filter_ != nullptr);
      attribute_filter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&start_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capacity_full_) -
        reinterpret_cast<char*>(&start_index_)) + sizeof(capacity_full_));
    max_results_ = 16u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ListChannelsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 start_index = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_index(&has_bits);
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_results = 2 [default = 16];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_results(&has_bits);
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.channel.v1.ListChannelsOptions.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 locale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_locale(&has_bits);
          locale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 capacity_full = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_capacity_full(&has_bits);
          capacity_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.AttributeFilter attribute_filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string channel_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_channel_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.channel.v1.ListChannelsOptions.channel_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListChannelsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.ListChannelsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_index = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // optional uint32 max_results = 2 [default = 16];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_results(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.channel.v1.ListChannelsOptions.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional fixed32 program = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_program(), target);
  }

  // optional fixed32 locale = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_locale(), target);
  }

  // optional uint32 capacity_full = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_capacity_full(), target);
  }

  // required .bgs.protocol.AttributeFilter attribute_filter = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::attribute_filter(this), target, stream);
  }

  // optional string channel_type = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_type().data(), static_cast<int>(this->_internal_channel_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.channel.v1.ListChannelsOptions.channel_type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_channel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.ListChannelsOptions)
  return target;
}

size_t ListChannelsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.ListChannelsOptions)
  size_t total_size = 0;

  // required .bgs.protocol.AttributeFilter attribute_filter = 7;
  if (_internal_has_attribute_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string channel_type = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_type());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional uint32 start_index = 1 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_index());
    }

    // optional fixed32 program = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 locale = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 capacity_full = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_capacity_full());
    }

    // optional uint32 max_results = 2 [default = 16];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_results());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListChannelsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.ListChannelsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ListChannelsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListChannelsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.ListChannelsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.ListChannelsOptions)
    MergeFrom(*source);
  }
}

void ListChannelsOptions::MergeFrom(const ListChannelsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.ListChannelsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      channel_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_attribute_filter()->::bgs::protocol::AttributeFilter::MergeFrom(from._internal_attribute_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      start_index_ = from.start_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000020u) {
      locale_ = from.locale_;
    }
    if (cached_has_bits & 0x00000040u) {
      capacity_full_ = from.capacity_full_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_results_ = from.max_results_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListChannelsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.ListChannelsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChannelsOptions::CopyFrom(const ListChannelsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.ListChannelsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelsOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (_internal_has_attribute_filter()) {
    if (!attribute_filter_->IsInitialized()) return false;
  }
  return true;
}

void ListChannelsOptions::InternalSwap(ListChannelsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_type_.Swap(&other->channel_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attribute_filter_, other->attribute_filter_);
  swap(start_index_, other->start_index_);
  swap(program_, other->program_);
  swap(locale_, other->locale_);
  swap(capacity_full_, other->capacity_full_);
  swap(max_results_, other->max_results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChannelsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescription::InitAsDefaultInstance() {
  ::bgs::protocol::channel::v1::_ChannelDescription_default_instance_._instance.get_mutable()->channel_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::channel::v1::_ChannelDescription_default_instance_._instance.get_mutable()->state_ = const_cast< ::bgs::protocol::channel::v1::ChannelState*>(
      ::bgs::protocol::channel::v1::ChannelState::internal_default_instance());
}
class ChannelDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescription>()._has_bits_);
  static const ::bgs::protocol::EntityId& channel_id(const ChannelDescription* msg);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_members(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::channel::v1::ChannelState& state(const ChannelDescription* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
ChannelDescription::_Internal::channel_id(const ChannelDescription* msg) {
  return *msg->channel_id_;
}
const ::bgs::protocol::channel::v1::ChannelState&
ChannelDescription::_Internal::state(const ChannelDescription* msg) {
  return *msg->state_;
}
void ChannelDescription::clear_channel_id() {
  if (channel_id_ != nullptr) channel_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChannelDescription::ChannelDescription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.ChannelDescription)
}
ChannelDescription::ChannelDescription(const ChannelDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_channel_id()) {
    channel_id_ = new ::bgs::protocol::EntityId(*from.channel_id_);
  } else {
    channel_id_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::bgs::protocol::channel::v1::ChannelState(*from.state_);
  } else {
    state_ = nullptr;
  }
  current_members_ = from.current_members_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.ChannelDescription)
}

void ChannelDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescription_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_members_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(current_members_));
}

ChannelDescription::~ChannelDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.ChannelDescription)
  SharedDtor();
}

void ChannelDescription::SharedDtor() {
  if (this != internal_default_instance()) delete channel_id_;
  if (this != internal_default_instance()) delete state_;
}

void ChannelDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescription& ChannelDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescription_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.ChannelDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(channel_id_ != nullptr);
      channel_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
  }
  current_members_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.EntityId channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_current_members(&has_bits);
          current_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.channel.v1.ChannelState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.ChannelDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.EntityId channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel_id(this), target, stream);
  }

  // optional uint32 current_members = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_current_members(), target);
  }

  // optional .bgs.protocol.channel.v1.ChannelState state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.ChannelDescription)
  return target;
}

size_t ChannelDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.ChannelDescription)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId channel_id = 1;
  if (_internal_has_channel_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .bgs.protocol.channel.v1.ChannelState state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional uint32 current_members = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_members());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.ChannelDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.ChannelDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.ChannelDescription)
    MergeFrom(*source);
  }
}

void ChannelDescription::MergeFrom(const ChannelDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.ChannelDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_channel_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_channel_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_state()->::bgs::protocol::channel::v1::ChannelState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      current_members_ = from.current_members_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.ChannelDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescription::CopyFrom(const ChannelDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.ChannelDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_channel_id()) {
    if (!channel_id_->IsInitialized()) return false;
  }
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  return true;
}

void ChannelDescription::InternalSwap(ChannelDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_id_, other->channel_id_);
  swap(state_, other->state_);
  swap(current_members_, other->current_members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelInfo::InitAsDefaultInstance() {
  ::bgs::protocol::channel::v1::_ChannelInfo_default_instance_._instance.get_mutable()->description_ = const_cast< ::bgs::protocol::channel::v1::ChannelDescription*>(
      ::bgs::protocol::channel::v1::ChannelDescription::internal_default_instance());
}
class ChannelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelInfo>()._has_bits_);
  static const ::bgs::protocol::channel::v1::ChannelDescription& description(const ChannelInfo* msg);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::channel::v1::ChannelDescription&
ChannelInfo::_Internal::description(const ChannelInfo* msg) {
  return *msg->description_;
}
ChannelInfo::ChannelInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.ChannelInfo)
}
ChannelInfo::ChannelInfo(const ChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_description()) {
    description_ = new ::bgs::protocol::channel::v1::ChannelDescription(*from.description_);
  } else {
    description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.ChannelInfo)
}

void ChannelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  description_ = nullptr;
}

ChannelInfo::~ChannelInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.ChannelInfo)
  SharedDtor();
}

void ChannelInfo::SharedDtor() {
  if (this != internal_default_instance()) delete description_;
}

void ChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelInfo& ChannelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.ChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(description_ != nullptr);
    description_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.channel.v1.ChannelDescription description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.channel.v1.Member member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.ChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.channel.v1.ChannelDescription description = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::description(this), target, stream);
  }

  // repeated .bgs.protocol.channel.v1.Member member = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_member(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.ChannelInfo)
  return target;
}

size_t ChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.ChannelInfo)
  size_t total_size = 0;

  // required .bgs.protocol.channel.v1.ChannelDescription description = 1;
  if (_internal_has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.channel.v1.Member member = 2;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.ChannelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.ChannelInfo)
    MergeFrom(*source);
  }
}

void ChannelInfo::MergeFrom(const ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  if (from._internal_has_description()) {
    _internal_mutable_description()->::bgs::protocol::channel::v1::ChannelDescription::MergeFrom(from._internal_description());
  }
}

void ChannelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelInfo::CopyFrom(const ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(member_)) return false;
  if (_internal_has_description()) {
    if (!description_->IsInitialized()) return false;
  }
  return true;
}

void ChannelInfo::InternalSwap(ChannelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.InternalSwap(&other->member_);
  swap(description_, other->description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelState::InitAsDefaultInstance() {
}
class ChannelState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelState>()._has_bits_);
  static void set_has_max_members(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_members(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_subscribe_to_presence(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

void ChannelState::clear_attribute() {
  attribute_.Clear();
}
void ChannelState::clear_invitation() {
  invitation_.Clear();
}
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChannelState::_i_give_permission_to_break_this_code_default_channel_type_;
ChannelState::ChannelState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.ChannelState)
}
ChannelState::ChannelState(const ChannelState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      invitation_(from.invitation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  channel_type_.UnsafeSetDefault(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get());
  if (from._internal_has_channel_type()) {
    channel_type_.AssignWithDefault(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get(), from.channel_type_);
  }
  ::memcpy(&max_members_, &from.max_members_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscribe_to_presence_) -
    reinterpret_cast<char*>(&max_members_)) + sizeof(subscribe_to_presence_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.ChannelState)
}

void ChannelState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_type_.UnsafeSetDefault(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get());
  ::memset(&max_members_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_) -
      reinterpret_cast<char*>(&max_members_)) + sizeof(program_));
  privacy_level_ = 1;
  subscribe_to_presence_ = true;
}

ChannelState::~ChannelState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.ChannelState)
  SharedDtor();
}

void ChannelState::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_type_.DestroyNoArena(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get());
}

void ChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelState& ChannelState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.ChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  attribute_.Clear();
  invitation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_.UnsafeMutablePointer()->assign(*&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get());
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&max_members_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&program_) -
        reinterpret_cast<char*>(&max_members_)) + sizeof(program_));
    privacy_level_ = 1;
    subscribe_to_presence_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_members(&has_bits);
          max_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_members(&has_bits);
          min_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Invitation invitation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invitation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.channel.v1.ChannelState.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_OPEN];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::channel::v1::ChannelState_PrivacyLevel_IsValid(val))) {
            _internal_set_privacy_level(static_cast<::bgs::protocol::channel::v1::ChannelState_PrivacyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.channel.v1.ChannelState.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string channel_type = 10 [default = "default"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_channel_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.channel.v1.ChannelState.channel_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool subscribe_to_presence = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_subscribe_to_presence(&has_bits);
          subscribe_to_presence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 80008u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.ChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_members = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_members(), target);
  }

  // optional uint32 min_members = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min_members(), target);
  }

  // repeated .bgs.protocol.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  // repeated .bgs.protocol.Invitation invitation = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invitation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_invitation(i), target, stream);
  }

  // optional uint32 reason = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_reason(), target);
  }

  // optional .bgs.protocol.channel.v1.ChannelState.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_OPEN];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_privacy_level(), target);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.channel.v1.ChannelState.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // optional string channel_type = 10 [default = "default"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_type().data(), static_cast<int>(this->_internal_channel_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.channel.v1.ChannelState.channel_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_channel_type(), target);
  }

  // optional fixed32 program = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_program(), target);
  }

  // optional bool subscribe_to_presence = 13 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_subscribe_to_presence(), target);
  }

  // Extension range [100, 10001)
  target = _extensions_._InternalSerialize(
      100, 10001, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.ChannelState)
  return target;
}

size_t ChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.ChannelState)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.Invitation invitation = 4;
  total_size += 1UL * this->_internal_invitation_size();
  for (const auto& msg : this->invitation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string channel_type = 10 [default = "default"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_type());
    }

    // optional uint32 max_members = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_members());
    }

    // optional uint32 min_members = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_members());
    }

    // optional uint32 reason = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason());
    }

    // optional fixed32 program = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .bgs.protocol.channel.v1.ChannelState.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_OPEN];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_privacy_level());
    }

    // optional bool subscribe_to_presence = 13 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.ChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.ChannelState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.ChannelState)
    MergeFrom(*source);
  }
}

void ChannelState::MergeFrom(const ChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.ChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  invitation_.MergeFrom(from.invitation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      channel_type_.AssignWithDefault(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get(), from.channel_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_members_ = from.min_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000020u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000040u) {
      privacy_level_ = from.privacy_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      subscribe_to_presence_ = from.subscribe_to_presence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelState::CopyFrom(const ChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelState::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(invitation_)) return false;
  return true;
}

void ChannelState::InternalSwap(ChannelState* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  invitation_.InternalSwap(&other->invitation_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_type_.Swap(&other->channel_type_, &::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get(),
    GetArenaNoVirtual());
  swap(max_members_, other->max_members_);
  swap(min_members_, other->min_members_);
  swap(reason_, other->reason_);
  swap(program_, other->program_);
  swap(privacy_level_, other->privacy_level_);
  swap(subscribe_to_presence_, other->subscribe_to_presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberAccountInfo::InitAsDefaultInstance() {
}
class MemberAccountInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberAccountInfo>()._has_bits_);
  static void set_has_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MemberAccountInfo::MemberAccountInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.MemberAccountInfo)
}
MemberAccountInfo::MemberAccountInfo(const MemberAccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_battle_tag()) {
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.MemberAccountInfo)
}

void MemberAccountInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberAccountInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MemberAccountInfo::~MemberAccountInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.MemberAccountInfo)
  SharedDtor();
}

void MemberAccountInfo::SharedDtor() {
  battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemberAccountInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberAccountInfo& MemberAccountInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberAccountInfo_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void MemberAccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.MemberAccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    battle_tag_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberAccountInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string battle_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.channel.v1.MemberAccountInfo.battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberAccountInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.MemberAccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string battle_tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_battle_tag().data(), static_cast<int>(this->_internal_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.channel.v1.MemberAccountInfo.battle_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_battle_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.MemberAccountInfo)
  return target;
}

size_t MemberAccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.MemberAccountInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string battle_tag = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_battle_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberAccountInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.MemberAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberAccountInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberAccountInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.MemberAccountInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.MemberAccountInfo)
    MergeFrom(*source);
  }
}

void MemberAccountInfo::MergeFrom(const MemberAccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.MemberAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_battle_tag()) {
    _has_bits_[0] |= 0x00000001u;
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
}

void MemberAccountInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.MemberAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAccountInfo::CopyFrom(const MemberAccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.MemberAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAccountInfo::IsInitialized() const {
  return true;
}

void MemberAccountInfo::InternalSwap(MemberAccountInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  battle_tag_.Swap(&other->battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberAccountInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberState::InitAsDefaultInstance() {
  ::bgs::protocol::channel::v1::_MemberState_default_instance_._instance.get_mutable()->info_ = const_cast< ::bgs::protocol::channel::v1::MemberAccountInfo*>(
      ::bgs::protocol::channel::v1::MemberAccountInfo::internal_default_instance());
}
class MemberState::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberState>()._has_bits_);
  static void set_has_privileges(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::channel::v1::MemberAccountInfo& info(const MemberState* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::channel::v1::MemberAccountInfo&
MemberState::_Internal::info(const MemberState* msg) {
  return *msg->info_;
}
void MemberState::clear_attribute() {
  attribute_.Clear();
}
MemberState::MemberState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.MemberState)
}
MemberState::MemberState(const MemberState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::bgs::protocol::channel::v1::MemberAccountInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  privileges_ = from.privileges_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.MemberState)
}

void MemberState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privileges_) -
      reinterpret_cast<char*>(&info_)) + sizeof(privileges_));
}

MemberState::~MemberState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.MemberState)
  SharedDtor();
}

void MemberState::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MemberState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberState& MemberState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberState_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void MemberState::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.MemberState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  privileges_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.Attribute attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 privileges = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_privileges(&has_bits);
          privileges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.channel.v1.MemberAccountInfo info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.MemberState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attribute(i), target, stream);
  }

  // repeated uint32 role = 2 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_role(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 privileges = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_privileges(), target);
  }

  // optional .bgs.protocol.channel.v1.MemberAccountInfo info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.MemberState)
  return target;
}

size_t MemberState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.MemberState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 1;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 role = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.channel.v1.MemberAccountInfo info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional uint64 privileges = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_privileges());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.MemberState)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.MemberState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.MemberState)
    MergeFrom(*source);
  }
}

void MemberState::MergeFrom(const MemberState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.MemberState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  role_.MergeFrom(from.role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()->::bgs::protocol::channel::v1::MemberAccountInfo::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      privileges_ = from.privileges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.MemberState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberState::CopyFrom(const MemberState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.MemberState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  return true;
}

void MemberState::InternalSwap(MemberState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  role_.InternalSwap(&other->role_);
  swap(info_, other->info_);
  swap(privileges_, other->privileges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Member::InitAsDefaultInstance() {
  ::bgs::protocol::channel::v1::_Member_default_instance_._instance.get_mutable()->identity_ = const_cast< ::bgs::protocol::Identity*>(
      ::bgs::protocol::Identity::internal_default_instance());
  ::bgs::protocol::channel::v1::_Member_default_instance_._instance.get_mutable()->state_ = const_cast< ::bgs::protocol::channel::v1::MemberState*>(
      ::bgs::protocol::channel::v1::MemberState::internal_default_instance());
}
class Member::_Internal {
 public:
  using HasBits = decltype(std::declval<Member>()._has_bits_);
  static const ::bgs::protocol::Identity& identity(const Member* msg);
  static void set_has_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::channel::v1::MemberState& state(const Member* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::Identity&
Member::_Internal::identity(const Member* msg) {
  return *msg->identity_;
}
const ::bgs::protocol::channel::v1::MemberState&
Member::_Internal::state(const Member* msg) {
  return *msg->state_;
}
void Member::clear_identity() {
  if (identity_ != nullptr) identity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Member::Member()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.Member)
}
Member::Member(const Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_identity()) {
    identity_ = new ::bgs::protocol::Identity(*from.identity_);
  } else {
    identity_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::bgs::protocol::channel::v1::MemberState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.Member)
}

void Member::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Member_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  ::memset(&identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&identity_)) + sizeof(state_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  if (this != internal_default_instance()) delete identity_;
  if (this != internal_default_instance()) delete state_;
}

void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Member& Member::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Member_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(identity_ != nullptr);
      identity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.Identity identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.channel.v1.MemberState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.Identity identity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identity(this), target, stream);
  }

  // required .bgs.protocol.channel.v1.MemberState state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.Member)
  return target;
}

size_t Member::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.channel.v1.Member)
  size_t total_size = 0;

  if (_internal_has_identity()) {
    // required .bgs.protocol.Identity identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_);
  }

  if (_internal_has_state()) {
    // required .bgs.protocol.channel.v1.MemberState state = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  return total_size;
}
size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.Member)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .bgs.protocol.Identity identity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_);

    // required .bgs.protocol.channel.v1.MemberState state = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_identity()->::bgs::protocol::Identity::MergeFrom(from._internal_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_state()->::bgs::protocol::channel::v1::MemberState::MergeFrom(from._internal_state());
    }
  }
}

void Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_identity()) {
    if (!identity_->IsInitialized()) return false;
  }
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  return true;
}

void Member::InternalSwap(Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(identity_, other->identity_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriberId::InitAsDefaultInstance() {
  ::bgs::protocol::channel::v1::_SubscriberId_default_instance_._instance.get_mutable()->account_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::channel::v1::_SubscriberId_default_instance_._instance.get_mutable()->game_account_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
  ::bgs::protocol::channel::v1::_SubscriberId_default_instance_._instance.get_mutable()->process_ = const_cast< ::bgs::protocol::ProcessId*>(
      ::bgs::protocol::ProcessId::internal_default_instance());
}
class SubscriberId::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriberId>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& account(const SubscriberId* msg);
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::account::v1::GameAccountHandle& game_account(const SubscriberId* msg);
  static void set_has_game_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::ProcessId& process(const SubscriberId* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
SubscriberId::_Internal::account(const SubscriberId* msg) {
  return *msg->account_;
}
const ::bgs::protocol::account::v1::GameAccountHandle&
SubscriberId::_Internal::game_account(const SubscriberId* msg) {
  return *msg->game_account_;
}
const ::bgs::protocol::ProcessId&
SubscriberId::_Internal::process(const SubscriberId* msg) {
  return *msg->process_;
}
void SubscriberId::clear_account() {
  if (account_ != nullptr) account_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SubscriberId::clear_game_account() {
  if (game_account_ != nullptr) game_account_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SubscriberId::clear_process() {
  if (process_ != nullptr) process_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SubscriberId::SubscriberId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.channel.v1.SubscriberId)
}
SubscriberId::SubscriberId(const SubscriberId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::bgs::protocol::account::v1::AccountId(*from.account_);
  } else {
    account_ = nullptr;
  }
  if (from._internal_has_game_account()) {
    game_account_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.game_account_);
  } else {
    game_account_ = nullptr;
  }
  if (from._internal_has_process()) {
    process_ = new ::bgs::protocol::ProcessId(*from.process_);
  } else {
    process_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.channel.v1.SubscriberId)
}

void SubscriberId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriberId_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&process_) -
      reinterpret_cast<char*>(&account_)) + sizeof(process_));
}

SubscriberId::~SubscriberId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.channel.v1.SubscriberId)
  SharedDtor();
}

void SubscriberId::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
  if (this != internal_default_instance()) delete game_account_;
  if (this != internal_default_instance()) delete process_;
}

void SubscriberId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriberId& SubscriberId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriberId_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void SubscriberId::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.channel.v1.SubscriberId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_ != nullptr);
      account_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_account_ != nullptr);
      game_account_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(process_ != nullptr);
      process_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscriberId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId account = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ProcessId process = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriberId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.channel.v1.SubscriberId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId account = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_account(this), target, stream);
  }

  // optional .bgs.protocol.ProcessId process = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::process(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.channel.v1.SubscriberId)
  return target;
}

size_t SubscriberId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.channel.v1.SubscriberId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.account.v1.AccountId account = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_);
    }

    // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_);
    }

    // optional .bgs.protocol.ProcessId process = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.channel.v1.SubscriberId)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriberId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.channel.v1.SubscriberId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.channel.v1.SubscriberId)
    MergeFrom(*source);
  }
}

void SubscriberId::MergeFrom(const SubscriberId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.channel.v1.SubscriberId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_account()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_game_account());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_process()->::bgs::protocol::ProcessId::MergeFrom(from._internal_process());
    }
  }
}

void SubscriberId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.channel.v1.SubscriberId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberId::CopyFrom(const SubscriberId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.channel.v1.SubscriberId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberId::IsInitialized() const {
  if (_internal_has_account()) {
    if (!account_->IsInitialized()) return false;
  }
  if (_internal_has_game_account()) {
    if (!game_account_->IsInitialized()) return false;
  }
  if (_internal_has_process()) {
    if (!process_->IsInitialized()) return false;
  }
  return true;
}

void SubscriberId::InternalSwap(SubscriberId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_, other->account_);
  swap(game_account_, other->game_account_);
  swap(process_, other->process_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberId::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channel
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::Message* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::Message >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::ListChannelsOptions* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::ListChannelsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::ListChannelsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::ChannelDescription* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::ChannelDescription >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::ChannelDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::ChannelInfo* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::ChannelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::ChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::ChannelState* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::ChannelState >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::ChannelState >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::MemberAccountInfo* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::MemberAccountInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::MemberAccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::MemberState* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::MemberState >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::MemberState >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::Member* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::Member >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::Member >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::channel::v1::SubscriberId* Arena::CreateMaybeMessage< ::bgs::protocol::channel::v1::SubscriberId >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::channel::v1::SubscriberId >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
