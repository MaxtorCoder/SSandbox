// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/channel_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/api/client/v1/channel_id.pb.h"
#include "bgs/low/pb/client/attribute_types.pb.h"
#include "bgs/low/pb/client/entity_types.pb.h"
#include "bgs/low/pb/client/account_types.pb.h"
#include "bgs/low/pb/client/invitation_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace channel {
namespace v1 {
class ChannelDescription;
class ChannelDescriptionDefaultTypeInternal;
extern ChannelDescriptionDefaultTypeInternal _ChannelDescription_default_instance_;
class ChannelInfo;
class ChannelInfoDefaultTypeInternal;
extern ChannelInfoDefaultTypeInternal _ChannelInfo_default_instance_;
class ChannelState;
class ChannelStateDefaultTypeInternal;
extern ChannelStateDefaultTypeInternal _ChannelState_default_instance_;
class ListChannelsOptions;
class ListChannelsOptionsDefaultTypeInternal;
extern ListChannelsOptionsDefaultTypeInternal _ListChannelsOptions_default_instance_;
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class MemberAccountInfo;
class MemberAccountInfoDefaultTypeInternal;
extern MemberAccountInfoDefaultTypeInternal _MemberAccountInfo_default_instance_;
class MemberState;
class MemberStateDefaultTypeInternal;
extern MemberStateDefaultTypeInternal _MemberState_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class SubscriberId;
class SubscriberIdDefaultTypeInternal;
extern SubscriberIdDefaultTypeInternal _SubscriberId_default_instance_;
}  // namespace v1
}  // namespace channel
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::channel::v1::ChannelDescription* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::ChannelDescription>(Arena*);
template<> ::bgs::protocol::channel::v1::ChannelInfo* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::ChannelInfo>(Arena*);
template<> ::bgs::protocol::channel::v1::ChannelState* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::ChannelState>(Arena*);
template<> ::bgs::protocol::channel::v1::ListChannelsOptions* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::ListChannelsOptions>(Arena*);
template<> ::bgs::protocol::channel::v1::Member* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::Member>(Arena*);
template<> ::bgs::protocol::channel::v1::MemberAccountInfo* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::MemberAccountInfo>(Arena*);
template<> ::bgs::protocol::channel::v1::MemberState* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::MemberState>(Arena*);
template<> ::bgs::protocol::channel::v1::Message* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::Message>(Arena*);
template<> ::bgs::protocol::channel::v1::SubscriberId* Arena::CreateMaybeMessage<::bgs::protocol::channel::v1::SubscriberId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace channel {
namespace v1 {

enum ChannelState_PrivacyLevel : int {
  ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN = 1,
  ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND = 2,
  ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN_INVITATION = 3,
  ChannelState_PrivacyLevel_PRIVACY_LEVEL_CLOSED = 4
};
bool ChannelState_PrivacyLevel_IsValid(int value);
constexpr ChannelState_PrivacyLevel ChannelState_PrivacyLevel_PrivacyLevel_MIN = ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN;
constexpr ChannelState_PrivacyLevel ChannelState_PrivacyLevel_PrivacyLevel_MAX = ChannelState_PrivacyLevel_PRIVACY_LEVEL_CLOSED;
constexpr int ChannelState_PrivacyLevel_PrivacyLevel_ARRAYSIZE = ChannelState_PrivacyLevel_PrivacyLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelState_PrivacyLevel_descriptor();
template<typename T>
inline const std::string& ChannelState_PrivacyLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelState_PrivacyLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelState_PrivacyLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelState_PrivacyLevel_descriptor(), enum_t_value);
}
inline bool ChannelState_PrivacyLevel_Parse(
    const std::string& name, ChannelState_PrivacyLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelState_PrivacyLevel>(
    ChannelState_PrivacyLevel_descriptor(), name, value);
}
// ===================================================================

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
  };
  // repeated .bgs.protocol.Attribute attribute = 1;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Message)
  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ListChannelsOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.ListChannelsOptions) */ {
 public:
  ListChannelsOptions();
  virtual ~ListChannelsOptions();

  ListChannelsOptions(const ListChannelsOptions& from);
  ListChannelsOptions(ListChannelsOptions&& from) noexcept
    : ListChannelsOptions() {
    *this = ::std::move(from);
  }

  inline ListChannelsOptions& operator=(const ListChannelsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChannelsOptions& operator=(ListChannelsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListChannelsOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelsOptions* internal_default_instance() {
    return reinterpret_cast<const ListChannelsOptions*>(
               &_ListChannelsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListChannelsOptions& a, ListChannelsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChannelsOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListChannelsOptions* New() const final {
    return CreateMaybeMessage<ListChannelsOptions>(nullptr);
  }

  ListChannelsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListChannelsOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListChannelsOptions& from);
  void MergeFrom(const ListChannelsOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChannelsOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.ListChannelsOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kChannelTypeFieldNumber = 8,
    kAttributeFilterFieldNumber = 7,
    kStartIndexFieldNumber = 1,
    kProgramFieldNumber = 4,
    kLocaleFieldNumber = 5,
    kCapacityFullFieldNumber = 6,
    kMaxResultsFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string channel_type = 8;
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  const std::string& channel_type() const;
  void set_channel_type(const std::string& value);
  void set_channel_type(std::string&& value);
  void set_channel_type(const char* value);
  void set_channel_type(const char* value, size_t size);
  std::string* mutable_channel_type();
  std::string* release_channel_type();
  void set_allocated_channel_type(std::string* channel_type);
  private:
  const std::string& _internal_channel_type() const;
  void _internal_set_channel_type(const std::string& value);
  std::string* _internal_mutable_channel_type();
  public:

  // required .bgs.protocol.AttributeFilter attribute_filter = 7;
  bool has_attribute_filter() const;
  private:
  bool _internal_has_attribute_filter() const;
  public:
  void clear_attribute_filter();
  const ::bgs::protocol::AttributeFilter& attribute_filter() const;
  ::bgs::protocol::AttributeFilter* release_attribute_filter();
  ::bgs::protocol::AttributeFilter* mutable_attribute_filter();
  void set_allocated_attribute_filter(::bgs::protocol::AttributeFilter* attribute_filter);
  private:
  const ::bgs::protocol::AttributeFilter& _internal_attribute_filter() const;
  ::bgs::protocol::AttributeFilter* _internal_mutable_attribute_filter();
  public:

  // optional uint32 start_index = 1 [default = 0];
  bool has_start_index() const;
  private:
  bool _internal_has_start_index() const;
  public:
  void clear_start_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_index() const;
  void set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_index() const;
  void _internal_set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 program = 4;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 locale = 5;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  ::PROTOBUF_NAMESPACE_ID::uint32 locale() const;
  void set_locale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_locale() const;
  void _internal_set_locale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 capacity_full = 6;
  bool has_capacity_full() const;
  private:
  bool _internal_has_capacity_full() const;
  public:
  void clear_capacity_full();
  ::PROTOBUF_NAMESPACE_ID::uint32 capacity_full() const;
  void set_capacity_full(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_capacity_full() const;
  void _internal_set_capacity_full(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_results = 2 [default = 16];
  bool has_max_results() const;
  private:
  bool _internal_has_max_results() const;
  public:
  void clear_max_results();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_results() const;
  void set_max_results(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_results() const;
  void _internal_set_max_results(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.ListChannelsOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_type_;
  ::bgs::protocol::AttributeFilter* attribute_filter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  ::PROTOBUF_NAMESPACE_ID::uint32 locale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 capacity_full_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_results_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ChannelDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.ChannelDescription) */ {
 public:
  ChannelDescription();
  virtual ~ChannelDescription();

  ChannelDescription(const ChannelDescription& from);
  ChannelDescription(ChannelDescription&& from) noexcept
    : ChannelDescription() {
    *this = ::std::move(from);
  }

  inline ChannelDescription& operator=(const ChannelDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelDescription& operator=(ChannelDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelDescription* internal_default_instance() {
    return reinterpret_cast<const ChannelDescription*>(
               &_ChannelDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChannelDescription& a, ChannelDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelDescription* New() const final {
    return CreateMaybeMessage<ChannelDescription>(nullptr);
  }

  ChannelDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelDescription& from);
  void MergeFrom(const ChannelDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.ChannelDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kStateFieldNumber = 3,
    kCurrentMembersFieldNumber = 2,
  };
  // required .bgs.protocol.EntityId channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  const ::bgs::protocol::EntityId& channel_id() const;
  ::bgs::protocol::EntityId* release_channel_id();
  ::bgs::protocol::EntityId* mutable_channel_id();
  void set_allocated_channel_id(::bgs::protocol::EntityId* channel_id);
  private:
  const ::bgs::protocol::EntityId& _internal_channel_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_channel_id();
  public:

  // optional .bgs.protocol.channel.v1.ChannelState state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::bgs::protocol::channel::v1::ChannelState& state() const;
  ::bgs::protocol::channel::v1::ChannelState* release_state();
  ::bgs::protocol::channel::v1::ChannelState* mutable_state();
  void set_allocated_state(::bgs::protocol::channel::v1::ChannelState* state);
  private:
  const ::bgs::protocol::channel::v1::ChannelState& _internal_state() const;
  ::bgs::protocol::channel::v1::ChannelState* _internal_mutable_state();
  public:

  // optional uint32 current_members = 2;
  bool has_current_members() const;
  private:
  bool _internal_has_current_members() const;
  public:
  void clear_current_members();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_members() const;
  void set_current_members(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_members() const;
  void _internal_set_current_members(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.ChannelDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* channel_id_;
  ::bgs::protocol::channel::v1::ChannelState* state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_members_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ChannelInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.ChannelInfo) */ {
 public:
  ChannelInfo();
  virtual ~ChannelInfo();

  ChannelInfo(const ChannelInfo& from);
  ChannelInfo(ChannelInfo&& from) noexcept
    : ChannelInfo() {
    *this = ::std::move(from);
  }

  inline ChannelInfo& operator=(const ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelInfo& operator=(ChannelInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ChannelInfo*>(
               &_ChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChannelInfo& a, ChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelInfo* New() const final {
    return CreateMaybeMessage<ChannelInfo>(nullptr);
  }

  ChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelInfo& from);
  void MergeFrom(const ChannelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.ChannelInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 2,
    kDescriptionFieldNumber = 1,
  };
  // repeated .bgs.protocol.channel.v1.Member member = 2;
  int member_size() const;
  private:
  int _internal_member_size() const;
  public:
  void clear_member();
  ::bgs::protocol::channel::v1::Member* mutable_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::channel::v1::Member >*
      mutable_member();
  private:
  const ::bgs::protocol::channel::v1::Member& _internal_member(int index) const;
  ::bgs::protocol::channel::v1::Member* _internal_add_member();
  public:
  const ::bgs::protocol::channel::v1::Member& member(int index) const;
  ::bgs::protocol::channel::v1::Member* add_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::channel::v1::Member >&
      member() const;

  // required .bgs.protocol.channel.v1.ChannelDescription description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::bgs::protocol::channel::v1::ChannelDescription& description() const;
  ::bgs::protocol::channel::v1::ChannelDescription* release_description();
  ::bgs::protocol::channel::v1::ChannelDescription* mutable_description();
  void set_allocated_description(::bgs::protocol::channel::v1::ChannelDescription* description);
  private:
  const ::bgs::protocol::channel::v1::ChannelDescription& _internal_description() const;
  ::bgs::protocol::channel::v1::ChannelDescription* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.ChannelInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::channel::v1::Member > member_;
  ::bgs::protocol::channel::v1::ChannelDescription* description_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ChannelState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.ChannelState) */ {
 public:
  ChannelState();
  virtual ~ChannelState();

  ChannelState(const ChannelState& from);
  ChannelState(ChannelState&& from) noexcept
    : ChannelState() {
    *this = ::std::move(from);
  }

  inline ChannelState& operator=(const ChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelState& operator=(ChannelState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelState* internal_default_instance() {
    return reinterpret_cast<const ChannelState*>(
               &_ChannelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChannelState& a, ChannelState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelState* New() const final {
    return CreateMaybeMessage<ChannelState>(nullptr);
  }

  ChannelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelState& from);
  void MergeFrom(const ChannelState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.ChannelState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChannelState_PrivacyLevel PrivacyLevel;
  static constexpr PrivacyLevel PRIVACY_LEVEL_OPEN =
    ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN;
  static constexpr PrivacyLevel PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND =
    ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND;
  static constexpr PrivacyLevel PRIVACY_LEVEL_OPEN_INVITATION =
    ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN_INVITATION;
  static constexpr PrivacyLevel PRIVACY_LEVEL_CLOSED =
    ChannelState_PrivacyLevel_PRIVACY_LEVEL_CLOSED;
  static inline bool PrivacyLevel_IsValid(int value) {
    return ChannelState_PrivacyLevel_IsValid(value);
  }
  static constexpr PrivacyLevel PrivacyLevel_MIN =
    ChannelState_PrivacyLevel_PrivacyLevel_MIN;
  static constexpr PrivacyLevel PrivacyLevel_MAX =
    ChannelState_PrivacyLevel_PrivacyLevel_MAX;
  static constexpr int PrivacyLevel_ARRAYSIZE =
    ChannelState_PrivacyLevel_PrivacyLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PrivacyLevel_descriptor() {
    return ChannelState_PrivacyLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& PrivacyLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PrivacyLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PrivacyLevel_Name.");
    return ChannelState_PrivacyLevel_Name(enum_t_value);
  }
  static inline bool PrivacyLevel_Parse(const std::string& name,
      PrivacyLevel* value) {
    return ChannelState_PrivacyLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 3,
    kInvitationFieldNumber = 4,
    kNameFieldNumber = 8,
    kChannelTypeFieldNumber = 10,
    kMaxMembersFieldNumber = 1,
    kMinMembersFieldNumber = 2,
    kReasonFieldNumber = 6,
    kProgramFieldNumber = 11,
    kPrivacyLevelFieldNumber = 7,
    kSubscribeToPresenceFieldNumber = 13,
  };
  // repeated .bgs.protocol.Attribute attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  // repeated .bgs.protocol.Invitation invitation = 4;
  int invitation_size() const;
  private:
  int _internal_invitation_size() const;
  public:
  void clear_invitation();
  ::bgs::protocol::Invitation* mutable_invitation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Invitation >*
      mutable_invitation();
  private:
  const ::bgs::protocol::Invitation& _internal_invitation(int index) const;
  ::bgs::protocol::Invitation* _internal_add_invitation();
  public:
  const ::bgs::protocol::Invitation& invitation(int index) const;
  ::bgs::protocol::Invitation* add_invitation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Invitation >&
      invitation() const;

  // optional string name = 8;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string channel_type = 10 [default = "default"];
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  const std::string& channel_type() const;
  void set_channel_type(const std::string& value);
  void set_channel_type(std::string&& value);
  void set_channel_type(const char* value);
  void set_channel_type(const char* value, size_t size);
  std::string* mutable_channel_type();
  std::string* release_channel_type();
  void set_allocated_channel_type(std::string* channel_type);
  private:
  const std::string& _internal_channel_type() const;
  void _internal_set_channel_type(const std::string& value);
  std::string* _internal_mutable_channel_type();
  public:

  // optional uint32 max_members = 1;
  bool has_max_members() const;
  private:
  bool _internal_has_max_members() const;
  public:
  void clear_max_members();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_members() const;
  void set_max_members(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_members() const;
  void _internal_set_max_members(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_members = 2;
  bool has_min_members() const;
  private:
  bool _internal_has_min_members() const;
  public:
  void clear_min_members();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_members() const;
  void set_min_members(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_members() const;
  void _internal_set_min_members(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reason = 6;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 program = 11;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .bgs.protocol.channel.v1.ChannelState.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_OPEN];
  bool has_privacy_level() const;
  private:
  bool _internal_has_privacy_level() const;
  public:
  void clear_privacy_level();
  ::bgs::protocol::channel::v1::ChannelState_PrivacyLevel privacy_level() const;
  void set_privacy_level(::bgs::protocol::channel::v1::ChannelState_PrivacyLevel value);
  private:
  ::bgs::protocol::channel::v1::ChannelState_PrivacyLevel _internal_privacy_level() const;
  void _internal_set_privacy_level(::bgs::protocol::channel::v1::ChannelState_PrivacyLevel value);
  public:

  // optional bool subscribe_to_presence = 13 [default = true];
  bool has_subscribe_to_presence() const;
  private:
  bool _internal_has_subscribe_to_presence() const;
  public:
  void clear_subscribe_to_presence();
  bool subscribe_to_presence() const;
  void set_subscribe_to_presence(bool value);
  private:
  bool _internal_subscribe_to_presence() const;
  void _internal_set_subscribe_to_presence(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ChannelState)
  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.ChannelState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Invitation > invitation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_channel_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_members_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_members_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  int privacy_level_;
  bool subscribe_to_presence_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class MemberAccountInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.MemberAccountInfo) */ {
 public:
  MemberAccountInfo();
  virtual ~MemberAccountInfo();

  MemberAccountInfo(const MemberAccountInfo& from);
  MemberAccountInfo(MemberAccountInfo&& from) noexcept
    : MemberAccountInfo() {
    *this = ::std::move(from);
  }

  inline MemberAccountInfo& operator=(const MemberAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberAccountInfo& operator=(MemberAccountInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberAccountInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberAccountInfo* internal_default_instance() {
    return reinterpret_cast<const MemberAccountInfo*>(
               &_MemberAccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MemberAccountInfo& a, MemberAccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberAccountInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberAccountInfo* New() const final {
    return CreateMaybeMessage<MemberAccountInfo>(nullptr);
  }

  MemberAccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberAccountInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberAccountInfo& from);
  void MergeFrom(const MemberAccountInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberAccountInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.MemberAccountInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleTagFieldNumber = 3,
  };
  // optional string battle_tag = 3;
  bool has_battle_tag() const;
  private:
  bool _internal_has_battle_tag() const;
  public:
  void clear_battle_tag();
  const std::string& battle_tag() const;
  void set_battle_tag(const std::string& value);
  void set_battle_tag(std::string&& value);
  void set_battle_tag(const char* value);
  void set_battle_tag(const char* value, size_t size);
  std::string* mutable_battle_tag();
  std::string* release_battle_tag();
  void set_allocated_battle_tag(std::string* battle_tag);
  private:
  const std::string& _internal_battle_tag() const;
  void _internal_set_battle_tag(const std::string& value);
  std::string* _internal_mutable_battle_tag();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.MemberAccountInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_tag_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class MemberState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.MemberState) */ {
 public:
  MemberState();
  virtual ~MemberState();

  MemberState(const MemberState& from);
  MemberState(MemberState&& from) noexcept
    : MemberState() {
    *this = ::std::move(from);
  }

  inline MemberState& operator=(const MemberState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberState& operator=(MemberState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberState* internal_default_instance() {
    return reinterpret_cast<const MemberState*>(
               &_MemberState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MemberState& a, MemberState& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberState* New() const final {
    return CreateMaybeMessage<MemberState>(nullptr);
  }

  MemberState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberState& from);
  void MergeFrom(const MemberState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.MemberState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kRoleFieldNumber = 2,
    kInfoFieldNumber = 4,
    kPrivilegesFieldNumber = 3,
  };
  // repeated .bgs.protocol.Attribute attribute = 1;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  // repeated uint32 role = 2 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // optional .bgs.protocol.channel.v1.MemberAccountInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::bgs::protocol::channel::v1::MemberAccountInfo& info() const;
  ::bgs::protocol::channel::v1::MemberAccountInfo* release_info();
  ::bgs::protocol::channel::v1::MemberAccountInfo* mutable_info();
  void set_allocated_info(::bgs::protocol::channel::v1::MemberAccountInfo* info);
  private:
  const ::bgs::protocol::channel::v1::MemberAccountInfo& _internal_info() const;
  ::bgs::protocol::channel::v1::MemberAccountInfo* _internal_mutable_info();
  public:

  // optional uint64 privileges = 3 [default = 0];
  bool has_privileges() const;
  private:
  bool _internal_has_privileges() const;
  public:
  void clear_privileges();
  ::PROTOBUF_NAMESPACE_ID::uint64 privileges() const;
  void set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_privileges() const;
  void _internal_set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.MemberState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::bgs::protocol::channel::v1::MemberAccountInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 privileges_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Member :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.Member) */ {
 public:
  Member();
  virtual ~Member();

  Member(const Member& from);
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }
  inline void Swap(Member* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return CreateMaybeMessage<Member>(nullptr);
  }

  Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.Member";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // required .bgs.protocol.Identity identity = 1;
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;
  public:
  void clear_identity();
  const ::bgs::protocol::Identity& identity() const;
  ::bgs::protocol::Identity* release_identity();
  ::bgs::protocol::Identity* mutable_identity();
  void set_allocated_identity(::bgs::protocol::Identity* identity);
  private:
  const ::bgs::protocol::Identity& _internal_identity() const;
  ::bgs::protocol::Identity* _internal_mutable_identity();
  public:

  // required .bgs.protocol.channel.v1.MemberState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::bgs::protocol::channel::v1::MemberState& state() const;
  ::bgs::protocol::channel::v1::MemberState* release_state();
  ::bgs::protocol::channel::v1::MemberState* mutable_state();
  void set_allocated_state(::bgs::protocol::channel::v1::MemberState* state);
  private:
  const ::bgs::protocol::channel::v1::MemberState& _internal_state() const;
  ::bgs::protocol::channel::v1::MemberState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.Member)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::Identity* identity_;
  ::bgs::protocol::channel::v1::MemberState* state_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SubscriberId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.channel.v1.SubscriberId) */ {
 public:
  SubscriberId();
  virtual ~SubscriberId();

  SubscriberId(const SubscriberId& from);
  SubscriberId(SubscriberId&& from) noexcept
    : SubscriberId() {
    *this = ::std::move(from);
  }

  inline SubscriberId& operator=(const SubscriberId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriberId& operator=(SubscriberId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriberId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriberId* internal_default_instance() {
    return reinterpret_cast<const SubscriberId*>(
               &_SubscriberId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubscriberId& a, SubscriberId& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriberId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriberId* New() const final {
    return CreateMaybeMessage<SubscriberId>(nullptr);
  }

  SubscriberId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriberId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriberId& from);
  void MergeFrom(const SubscriberId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriberId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.channel.v1.SubscriberId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kGameAccountFieldNumber = 2,
    kProcessFieldNumber = 3,
  };
  // optional .bgs.protocol.account.v1.AccountId account = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  PROTOBUF_DEPRECATED void clear_account();
  PROTOBUF_DEPRECATED const ::bgs::protocol::account::v1::AccountId& account() const;
  PROTOBUF_DEPRECATED ::bgs::protocol::account::v1::AccountId* release_account();
  PROTOBUF_DEPRECATED ::bgs::protocol::account::v1::AccountId* mutable_account();
  PROTOBUF_DEPRECATED void set_allocated_account(::bgs::protocol::account::v1::AccountId* account);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_account() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_account();
  public:

  // optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
  bool has_game_account() const;
  private:
  bool _internal_has_game_account() const;
  public:
  void clear_game_account();
  const ::bgs::protocol::account::v1::GameAccountHandle& game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_game_account();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_game_account();
  void set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_game_account() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_game_account();
  public:

  // optional .bgs.protocol.ProcessId process = 3;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::bgs::protocol::ProcessId& process() const;
  ::bgs::protocol::ProcessId* release_process();
  ::bgs::protocol::ProcessId* mutable_process();
  void set_allocated_process(::bgs::protocol::ProcessId* process);
  private:
  const ::bgs::protocol::ProcessId& _internal_process() const;
  ::bgs::protocol::ProcessId* _internal_mutable_process();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.channel.v1.SubscriberId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* account_;
  ::bgs::protocol::account::v1::GameAccountHandle* game_account_;
  ::bgs::protocol::ProcessId* process_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// repeated .bgs.protocol.Attribute attribute = 1;
inline int Message::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Message::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* Message::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.Message.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
Message::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.channel.v1.Message.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& Message::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& Message::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.Message.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* Message::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* Message::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.channel.v1.Message.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
Message::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.channel.v1.Message.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// ListChannelsOptions

// optional uint32 start_index = 1 [default = 0];
inline bool ListChannelsOptions::_internal_has_start_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ListChannelsOptions::has_start_index() const {
  return _internal_has_start_index();
}
inline void ListChannelsOptions::clear_start_index() {
  start_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::_internal_start_index() const {
  return start_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::start_index() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ListChannelsOptions.start_index)
  return _internal_start_index();
}
inline void ListChannelsOptions::_internal_set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_index_ = value;
}
inline void ListChannelsOptions::set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ListChannelsOptions.start_index)
}

// optional uint32 max_results = 2 [default = 16];
inline bool ListChannelsOptions::_internal_has_max_results() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ListChannelsOptions::has_max_results() const {
  return _internal_has_max_results();
}
inline void ListChannelsOptions::clear_max_results() {
  max_results_ = 16u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::_internal_max_results() const {
  return max_results_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::max_results() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ListChannelsOptions.max_results)
  return _internal_max_results();
}
inline void ListChannelsOptions::_internal_set_max_results(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_results_ = value;
}
inline void ListChannelsOptions::set_max_results(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ListChannelsOptions.max_results)
}

// optional string name = 3;
inline bool ListChannelsOptions::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListChannelsOptions::has_name() const {
  return _internal_has_name();
}
inline void ListChannelsOptions::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListChannelsOptions::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ListChannelsOptions.name)
  return _internal_name();
}
inline void ListChannelsOptions::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ListChannelsOptions.name)
}
inline std::string* ListChannelsOptions::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ListChannelsOptions.name)
  return _internal_mutable_name();
}
inline const std::string& ListChannelsOptions::_internal_name() const {
  return name_.GetNoArena();
}
inline void ListChannelsOptions::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListChannelsOptions::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.channel.v1.ListChannelsOptions.name)
}
inline void ListChannelsOptions::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.channel.v1.ListChannelsOptions.name)
}
inline void ListChannelsOptions::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.channel.v1.ListChannelsOptions.name)
}
inline std::string* ListChannelsOptions::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListChannelsOptions::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.ListChannelsOptions.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListChannelsOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.ListChannelsOptions.name)
}

// optional fixed32 program = 4;
inline bool ListChannelsOptions::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ListChannelsOptions::has_program() const {
  return _internal_has_program();
}
inline void ListChannelsOptions::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ListChannelsOptions.program)
  return _internal_program();
}
inline void ListChannelsOptions::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  program_ = value;
}
inline void ListChannelsOptions::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ListChannelsOptions.program)
}

// optional fixed32 locale = 5;
inline bool ListChannelsOptions::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ListChannelsOptions::has_locale() const {
  return _internal_has_locale();
}
inline void ListChannelsOptions::clear_locale() {
  locale_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::_internal_locale() const {
  return locale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::locale() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ListChannelsOptions.locale)
  return _internal_locale();
}
inline void ListChannelsOptions::_internal_set_locale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  locale_ = value;
}
inline void ListChannelsOptions::set_locale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_locale(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ListChannelsOptions.locale)
}

// optional uint32 capacity_full = 6;
inline bool ListChannelsOptions::_internal_has_capacity_full() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ListChannelsOptions::has_capacity_full() const {
  return _internal_has_capacity_full();
}
inline void ListChannelsOptions::clear_capacity_full() {
  capacity_full_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::_internal_capacity_full() const {
  return capacity_full_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListChannelsOptions::capacity_full() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ListChannelsOptions.capacity_full)
  return _internal_capacity_full();
}
inline void ListChannelsOptions::_internal_set_capacity_full(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  capacity_full_ = value;
}
inline void ListChannelsOptions::set_capacity_full(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_capacity_full(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ListChannelsOptions.capacity_full)
}

// required .bgs.protocol.AttributeFilter attribute_filter = 7;
inline bool ListChannelsOptions::_internal_has_attribute_filter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || attribute_filter_ != nullptr);
  return value;
}
inline bool ListChannelsOptions::has_attribute_filter() const {
  return _internal_has_attribute_filter();
}
inline const ::bgs::protocol::AttributeFilter& ListChannelsOptions::_internal_attribute_filter() const {
  const ::bgs::protocol::AttributeFilter* p = attribute_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::AttributeFilter*>(
      &::bgs::protocol::_AttributeFilter_default_instance_);
}
inline const ::bgs::protocol::AttributeFilter& ListChannelsOptions::attribute_filter() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ListChannelsOptions.attribute_filter)
  return _internal_attribute_filter();
}
inline ::bgs::protocol::AttributeFilter* ListChannelsOptions::release_attribute_filter() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.ListChannelsOptions.attribute_filter)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::AttributeFilter* temp = attribute_filter_;
  attribute_filter_ = nullptr;
  return temp;
}
inline ::bgs::protocol::AttributeFilter* ListChannelsOptions::_internal_mutable_attribute_filter() {
  _has_bits_[0] |= 0x00000004u;
  if (attribute_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::AttributeFilter>(GetArenaNoVirtual());
    attribute_filter_ = p;
  }
  return attribute_filter_;
}
inline ::bgs::protocol::AttributeFilter* ListChannelsOptions::mutable_attribute_filter() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ListChannelsOptions.attribute_filter)
  return _internal_mutable_attribute_filter();
}
inline void ListChannelsOptions::set_allocated_attribute_filter(::bgs::protocol::AttributeFilter* attribute_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_filter_);
  }
  if (attribute_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attribute_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  attribute_filter_ = attribute_filter;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.ListChannelsOptions.attribute_filter)
}

// optional string channel_type = 8;
inline bool ListChannelsOptions::_internal_has_channel_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListChannelsOptions::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void ListChannelsOptions::clear_channel_type() {
  channel_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListChannelsOptions::channel_type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ListChannelsOptions.channel_type)
  return _internal_channel_type();
}
inline void ListChannelsOptions::set_channel_type(const std::string& value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ListChannelsOptions.channel_type)
}
inline std::string* ListChannelsOptions::mutable_channel_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ListChannelsOptions.channel_type)
  return _internal_mutable_channel_type();
}
inline const std::string& ListChannelsOptions::_internal_channel_type() const {
  return channel_type_.GetNoArena();
}
inline void ListChannelsOptions::_internal_set_channel_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListChannelsOptions::set_channel_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.channel.v1.ListChannelsOptions.channel_type)
}
inline void ListChannelsOptions::set_channel_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  channel_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.channel.v1.ListChannelsOptions.channel_type)
}
inline void ListChannelsOptions::set_channel_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  channel_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.channel.v1.ListChannelsOptions.channel_type)
}
inline std::string* ListChannelsOptions::_internal_mutable_channel_type() {
  _has_bits_[0] |= 0x00000002u;
  return channel_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListChannelsOptions::release_channel_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.ListChannelsOptions.channel_type)
  if (!_internal_has_channel_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return channel_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListChannelsOptions::set_allocated_channel_type(std::string* channel_type) {
  if (channel_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.ListChannelsOptions.channel_type)
}

// -------------------------------------------------------------------

// ChannelDescription

// required .bgs.protocol.EntityId channel_id = 1;
inline bool ChannelDescription::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || channel_id_ != nullptr);
  return value;
}
inline bool ChannelDescription::has_channel_id() const {
  return _internal_has_channel_id();
}
inline const ::bgs::protocol::EntityId& ChannelDescription::_internal_channel_id() const {
  const ::bgs::protocol::EntityId* p = channel_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& ChannelDescription::channel_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelDescription.channel_id)
  return _internal_channel_id();
}
inline ::bgs::protocol::EntityId* ChannelDescription::release_channel_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.ChannelDescription.channel_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = channel_id_;
  channel_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* ChannelDescription::_internal_mutable_channel_id() {
  _has_bits_[0] |= 0x00000001u;
  if (channel_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    channel_id_ = p;
  }
  return channel_id_;
}
inline ::bgs::protocol::EntityId* ChannelDescription::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ChannelDescription.channel_id)
  return _internal_mutable_channel_id();
}
inline void ChannelDescription::set_allocated_channel_id(::bgs::protocol::EntityId* channel_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_id_);
  }
  if (channel_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_id_ = channel_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.ChannelDescription.channel_id)
}

// optional uint32 current_members = 2;
inline bool ChannelDescription::_internal_has_current_members() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChannelDescription::has_current_members() const {
  return _internal_has_current_members();
}
inline void ChannelDescription::clear_current_members() {
  current_members_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelDescription::_internal_current_members() const {
  return current_members_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelDescription::current_members() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelDescription.current_members)
  return _internal_current_members();
}
inline void ChannelDescription::_internal_set_current_members(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  current_members_ = value;
}
inline void ChannelDescription::set_current_members(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_members(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelDescription.current_members)
}

// optional .bgs.protocol.channel.v1.ChannelState state = 3;
inline bool ChannelDescription::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool ChannelDescription::has_state() const {
  return _internal_has_state();
}
inline void ChannelDescription::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::channel::v1::ChannelState& ChannelDescription::_internal_state() const {
  const ::bgs::protocol::channel::v1::ChannelState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::channel::v1::ChannelState*>(
      &::bgs::protocol::channel::v1::_ChannelState_default_instance_);
}
inline const ::bgs::protocol::channel::v1::ChannelState& ChannelDescription::state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelDescription.state)
  return _internal_state();
}
inline ::bgs::protocol::channel::v1::ChannelState* ChannelDescription::release_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.ChannelDescription.state)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::channel::v1::ChannelState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::channel::v1::ChannelState* ChannelDescription::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000002u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::channel::v1::ChannelState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::bgs::protocol::channel::v1::ChannelState* ChannelDescription::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ChannelDescription.state)
  return _internal_mutable_state();
}
inline void ChannelDescription::set_allocated_state(::bgs::protocol::channel::v1::ChannelState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.ChannelDescription.state)
}

// -------------------------------------------------------------------

// ChannelInfo

// required .bgs.protocol.channel.v1.ChannelDescription description = 1;
inline bool ChannelInfo::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || description_ != nullptr);
  return value;
}
inline bool ChannelInfo::has_description() const {
  return _internal_has_description();
}
inline void ChannelInfo::clear_description() {
  if (description_ != nullptr) description_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::channel::v1::ChannelDescription& ChannelInfo::_internal_description() const {
  const ::bgs::protocol::channel::v1::ChannelDescription* p = description_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::channel::v1::ChannelDescription*>(
      &::bgs::protocol::channel::v1::_ChannelDescription_default_instance_);
}
inline const ::bgs::protocol::channel::v1::ChannelDescription& ChannelInfo::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelInfo.description)
  return _internal_description();
}
inline ::bgs::protocol::channel::v1::ChannelDescription* ChannelInfo::release_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.ChannelInfo.description)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::channel::v1::ChannelDescription* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::bgs::protocol::channel::v1::ChannelDescription* ChannelInfo::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::channel::v1::ChannelDescription>(GetArenaNoVirtual());
    description_ = p;
  }
  return description_;
}
inline ::bgs::protocol::channel::v1::ChannelDescription* ChannelInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ChannelInfo.description)
  return _internal_mutable_description();
}
inline void ChannelInfo::set_allocated_description(::bgs::protocol::channel::v1::ChannelDescription* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.ChannelInfo.description)
}

// repeated .bgs.protocol.channel.v1.Member member = 2;
inline int ChannelInfo::_internal_member_size() const {
  return member_.size();
}
inline int ChannelInfo::member_size() const {
  return _internal_member_size();
}
inline void ChannelInfo::clear_member() {
  member_.Clear();
}
inline ::bgs::protocol::channel::v1::Member* ChannelInfo::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ChannelInfo.member)
  return member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::channel::v1::Member >*
ChannelInfo::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.channel.v1.ChannelInfo.member)
  return &member_;
}
inline const ::bgs::protocol::channel::v1::Member& ChannelInfo::_internal_member(int index) const {
  return member_.Get(index);
}
inline const ::bgs::protocol::channel::v1::Member& ChannelInfo::member(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelInfo.member)
  return _internal_member(index);
}
inline ::bgs::protocol::channel::v1::Member* ChannelInfo::_internal_add_member() {
  return member_.Add();
}
inline ::bgs::protocol::channel::v1::Member* ChannelInfo::add_member() {
  // @@protoc_insertion_point(field_add:bgs.protocol.channel.v1.ChannelInfo.member)
  return _internal_add_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::channel::v1::Member >&
ChannelInfo::member() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.channel.v1.ChannelInfo.member)
  return member_;
}

// -------------------------------------------------------------------

// ChannelState

// optional uint32 max_members = 1;
inline bool ChannelState::_internal_has_max_members() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChannelState::has_max_members() const {
  return _internal_has_max_members();
}
inline void ChannelState::clear_max_members() {
  max_members_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelState::_internal_max_members() const {
  return max_members_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelState::max_members() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.max_members)
  return _internal_max_members();
}
inline void ChannelState::_internal_set_max_members(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_members_ = value;
}
inline void ChannelState::set_max_members(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_members(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelState.max_members)
}

// optional uint32 min_members = 2;
inline bool ChannelState::_internal_has_min_members() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChannelState::has_min_members() const {
  return _internal_has_min_members();
}
inline void ChannelState::clear_min_members() {
  min_members_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelState::_internal_min_members() const {
  return min_members_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelState::min_members() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.min_members)
  return _internal_min_members();
}
inline void ChannelState::_internal_set_min_members(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_members_ = value;
}
inline void ChannelState::set_min_members(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_members(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelState.min_members)
}

// repeated .bgs.protocol.Attribute attribute = 3;
inline int ChannelState::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ChannelState::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* ChannelState::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ChannelState.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
ChannelState::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.channel.v1.ChannelState.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& ChannelState::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& ChannelState::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* ChannelState::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* ChannelState::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.channel.v1.ChannelState.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
ChannelState::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.channel.v1.ChannelState.attribute)
  return attribute_;
}

// repeated .bgs.protocol.Invitation invitation = 4;
inline int ChannelState::_internal_invitation_size() const {
  return invitation_.size();
}
inline int ChannelState::invitation_size() const {
  return _internal_invitation_size();
}
inline ::bgs::protocol::Invitation* ChannelState::mutable_invitation(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ChannelState.invitation)
  return invitation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Invitation >*
ChannelState::mutable_invitation() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.channel.v1.ChannelState.invitation)
  return &invitation_;
}
inline const ::bgs::protocol::Invitation& ChannelState::_internal_invitation(int index) const {
  return invitation_.Get(index);
}
inline const ::bgs::protocol::Invitation& ChannelState::invitation(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.invitation)
  return _internal_invitation(index);
}
inline ::bgs::protocol::Invitation* ChannelState::_internal_add_invitation() {
  return invitation_.Add();
}
inline ::bgs::protocol::Invitation* ChannelState::add_invitation() {
  // @@protoc_insertion_point(field_add:bgs.protocol.channel.v1.ChannelState.invitation)
  return _internal_add_invitation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Invitation >&
ChannelState::invitation() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.channel.v1.ChannelState.invitation)
  return invitation_;
}

// optional uint32 reason = 6;
inline bool ChannelState::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChannelState::has_reason() const {
  return _internal_has_reason();
}
inline void ChannelState::clear_reason() {
  reason_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelState::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelState::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.reason)
  return _internal_reason();
}
inline void ChannelState::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  reason_ = value;
}
inline void ChannelState::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelState.reason)
}

// optional .bgs.protocol.channel.v1.ChannelState.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_OPEN];
inline bool ChannelState::_internal_has_privacy_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChannelState::has_privacy_level() const {
  return _internal_has_privacy_level();
}
inline void ChannelState::clear_privacy_level() {
  privacy_level_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::bgs::protocol::channel::v1::ChannelState_PrivacyLevel ChannelState::_internal_privacy_level() const {
  return static_cast< ::bgs::protocol::channel::v1::ChannelState_PrivacyLevel >(privacy_level_);
}
inline ::bgs::protocol::channel::v1::ChannelState_PrivacyLevel ChannelState::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.privacy_level)
  return _internal_privacy_level();
}
inline void ChannelState::_internal_set_privacy_level(::bgs::protocol::channel::v1::ChannelState_PrivacyLevel value) {
  assert(::bgs::protocol::channel::v1::ChannelState_PrivacyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  privacy_level_ = value;
}
inline void ChannelState::set_privacy_level(::bgs::protocol::channel::v1::ChannelState_PrivacyLevel value) {
  _internal_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelState.privacy_level)
}

// optional string name = 8;
inline bool ChannelState::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelState::has_name() const {
  return _internal_has_name();
}
inline void ChannelState::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelState::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.name)
  return _internal_name();
}
inline void ChannelState::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelState.name)
}
inline std::string* ChannelState::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ChannelState.name)
  return _internal_mutable_name();
}
inline const std::string& ChannelState::_internal_name() const {
  return name_.GetNoArena();
}
inline void ChannelState::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelState::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.channel.v1.ChannelState.name)
}
inline void ChannelState::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.channel.v1.ChannelState.name)
}
inline void ChannelState::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.channel.v1.ChannelState.name)
}
inline std::string* ChannelState::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelState::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.ChannelState.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.ChannelState.name)
}

// optional string channel_type = 10 [default = "default"];
inline bool ChannelState::_internal_has_channel_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelState::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void ChannelState::clear_channel_type() {
  channel_type_.ClearToDefaultNoArena(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChannelState::channel_type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.channel_type)
  return _internal_channel_type();
}
inline void ChannelState::set_channel_type(const std::string& value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelState.channel_type)
}
inline std::string* ChannelState::mutable_channel_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.ChannelState.channel_type)
  return _internal_mutable_channel_type();
}
inline const std::string& ChannelState::_internal_channel_type() const {
  return channel_type_.GetNoArena();
}
inline void ChannelState::_internal_set_channel_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_type_.SetNoArena(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get(), value);
}
inline void ChannelState::set_channel_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_type_.SetNoArena(
    &::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.channel.v1.ChannelState.channel_type)
}
inline void ChannelState::set_channel_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  channel_type_.SetNoArena(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.channel.v1.ChannelState.channel_type)
}
inline void ChannelState::set_channel_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  channel_type_.SetNoArena(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.channel.v1.ChannelState.channel_type)
}
inline std::string* ChannelState::_internal_mutable_channel_type() {
  _has_bits_[0] |= 0x00000002u;
  return channel_type_.MutableNoArena(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get());
}
inline std::string* ChannelState::release_channel_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.ChannelState.channel_type)
  if (!_internal_has_channel_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return channel_type_.ReleaseNonDefaultNoArena(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get());
}
inline void ChannelState::set_allocated_channel_type(std::string* channel_type) {
  if (channel_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_type_.SetAllocatedNoArena(&::bgs::protocol::channel::v1::ChannelState::_i_give_permission_to_break_this_code_default_channel_type_.get(), channel_type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.ChannelState.channel_type)
}

// optional fixed32 program = 11;
inline bool ChannelState::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChannelState::has_program() const {
  return _internal_has_program();
}
inline void ChannelState::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelState::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelState::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.program)
  return _internal_program();
}
inline void ChannelState::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  program_ = value;
}
inline void ChannelState::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelState.program)
}

// optional bool subscribe_to_presence = 13 [default = true];
inline bool ChannelState::_internal_has_subscribe_to_presence() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChannelState::has_subscribe_to_presence() const {
  return _internal_has_subscribe_to_presence();
}
inline void ChannelState::clear_subscribe_to_presence() {
  subscribe_to_presence_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ChannelState::_internal_subscribe_to_presence() const {
  return subscribe_to_presence_;
}
inline bool ChannelState::subscribe_to_presence() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.ChannelState.subscribe_to_presence)
  return _internal_subscribe_to_presence();
}
inline void ChannelState::_internal_set_subscribe_to_presence(bool value) {
  _has_bits_[0] |= 0x00000080u;
  subscribe_to_presence_ = value;
}
inline void ChannelState::set_subscribe_to_presence(bool value) {
  _internal_set_subscribe_to_presence(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.ChannelState.subscribe_to_presence)
}

// -------------------------------------------------------------------

// MemberAccountInfo

// optional string battle_tag = 3;
inline bool MemberAccountInfo::_internal_has_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemberAccountInfo::has_battle_tag() const {
  return _internal_has_battle_tag();
}
inline void MemberAccountInfo::clear_battle_tag() {
  battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemberAccountInfo::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.MemberAccountInfo.battle_tag)
  return _internal_battle_tag();
}
inline void MemberAccountInfo::set_battle_tag(const std::string& value) {
  _internal_set_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.MemberAccountInfo.battle_tag)
}
inline std::string* MemberAccountInfo::mutable_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.MemberAccountInfo.battle_tag)
  return _internal_mutable_battle_tag();
}
inline const std::string& MemberAccountInfo::_internal_battle_tag() const {
  return battle_tag_.GetNoArena();
}
inline void MemberAccountInfo::_internal_set_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MemberAccountInfo::set_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.channel.v1.MemberAccountInfo.battle_tag)
}
inline void MemberAccountInfo::set_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.channel.v1.MemberAccountInfo.battle_tag)
}
inline void MemberAccountInfo::set_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.channel.v1.MemberAccountInfo.battle_tag)
}
inline std::string* MemberAccountInfo::_internal_mutable_battle_tag() {
  _has_bits_[0] |= 0x00000001u;
  return battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberAccountInfo::release_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.MemberAccountInfo.battle_tag)
  if (!_internal_has_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberAccountInfo::set_allocated_battle_tag(std::string* battle_tag) {
  if (battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.MemberAccountInfo.battle_tag)
}

// -------------------------------------------------------------------

// MemberState

// repeated .bgs.protocol.Attribute attribute = 1;
inline int MemberState::_internal_attribute_size() const {
  return attribute_.size();
}
inline int MemberState::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* MemberState::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.MemberState.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
MemberState::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.channel.v1.MemberState.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& MemberState::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& MemberState::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.MemberState.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* MemberState::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* MemberState::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.channel.v1.MemberState.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
MemberState::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.channel.v1.MemberState.attribute)
  return attribute_;
}

// repeated uint32 role = 2 [packed = true];
inline int MemberState::_internal_role_size() const {
  return role_.size();
}
inline int MemberState::role_size() const {
  return _internal_role_size();
}
inline void MemberState::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberState::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberState::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.MemberState.role)
  return _internal_role(index);
}
inline void MemberState::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.MemberState.role)
}
inline void MemberState::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void MemberState::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.channel.v1.MemberState.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MemberState::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MemberState::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.channel.v1.MemberState.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MemberState::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MemberState::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.channel.v1.MemberState.role)
  return _internal_mutable_role();
}

// optional uint64 privileges = 3 [default = 0];
inline bool MemberState::_internal_has_privileges() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberState::has_privileges() const {
  return _internal_has_privileges();
}
inline void MemberState::clear_privileges() {
  privileges_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberState::_internal_privileges() const {
  return privileges_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberState::privileges() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.MemberState.privileges)
  return _internal_privileges();
}
inline void MemberState::_internal_set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  privileges_ = value;
}
inline void MemberState::set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_privileges(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.channel.v1.MemberState.privileges)
}

// optional .bgs.protocol.channel.v1.MemberAccountInfo info = 4;
inline bool MemberState::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool MemberState::has_info() const {
  return _internal_has_info();
}
inline void MemberState::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::channel::v1::MemberAccountInfo& MemberState::_internal_info() const {
  const ::bgs::protocol::channel::v1::MemberAccountInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::channel::v1::MemberAccountInfo*>(
      &::bgs::protocol::channel::v1::_MemberAccountInfo_default_instance_);
}
inline const ::bgs::protocol::channel::v1::MemberAccountInfo& MemberState::info() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.MemberState.info)
  return _internal_info();
}
inline ::bgs::protocol::channel::v1::MemberAccountInfo* MemberState::release_info() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.MemberState.info)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::channel::v1::MemberAccountInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::bgs::protocol::channel::v1::MemberAccountInfo* MemberState::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::channel::v1::MemberAccountInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::bgs::protocol::channel::v1::MemberAccountInfo* MemberState::mutable_info() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.MemberState.info)
  return _internal_mutable_info();
}
inline void MemberState::set_allocated_info(::bgs::protocol::channel::v1::MemberAccountInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.MemberState.info)
}

// -------------------------------------------------------------------

// Member

// required .bgs.protocol.Identity identity = 1;
inline bool Member::_internal_has_identity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || identity_ != nullptr);
  return value;
}
inline bool Member::has_identity() const {
  return _internal_has_identity();
}
inline const ::bgs::protocol::Identity& Member::_internal_identity() const {
  const ::bgs::protocol::Identity* p = identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::Identity*>(
      &::bgs::protocol::_Identity_default_instance_);
}
inline const ::bgs::protocol::Identity& Member::identity() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.Member.identity)
  return _internal_identity();
}
inline ::bgs::protocol::Identity* Member::release_identity() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.Member.identity)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::Identity* temp = identity_;
  identity_ = nullptr;
  return temp;
}
inline ::bgs::protocol::Identity* Member::_internal_mutable_identity() {
  _has_bits_[0] |= 0x00000001u;
  if (identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::Identity>(GetArenaNoVirtual());
    identity_ = p;
  }
  return identity_;
}
inline ::bgs::protocol::Identity* Member::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.Member.identity)
  return _internal_mutable_identity();
}
inline void Member::set_allocated_identity(::bgs::protocol::Identity* identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_);
  }
  if (identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.Member.identity)
}

// required .bgs.protocol.channel.v1.MemberState state = 2;
inline bool Member::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool Member::has_state() const {
  return _internal_has_state();
}
inline void Member::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::channel::v1::MemberState& Member::_internal_state() const {
  const ::bgs::protocol::channel::v1::MemberState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::channel::v1::MemberState*>(
      &::bgs::protocol::channel::v1::_MemberState_default_instance_);
}
inline const ::bgs::protocol::channel::v1::MemberState& Member::state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.Member.state)
  return _internal_state();
}
inline ::bgs::protocol::channel::v1::MemberState* Member::release_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.Member.state)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::channel::v1::MemberState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::channel::v1::MemberState* Member::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000002u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::channel::v1::MemberState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::bgs::protocol::channel::v1::MemberState* Member::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.Member.state)
  return _internal_mutable_state();
}
inline void Member::set_allocated_state(::bgs::protocol::channel::v1::MemberState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.Member.state)
}

// -------------------------------------------------------------------

// SubscriberId

// optional .bgs.protocol.account.v1.AccountId account = 1 [deprecated = true];
inline bool SubscriberId::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_ != nullptr);
  return value;
}
inline bool SubscriberId::has_account() const {
  return _internal_has_account();
}
inline const ::bgs::protocol::account::v1::AccountId& SubscriberId::_internal_account() const {
  const ::bgs::protocol::account::v1::AccountId* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& SubscriberId::account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.SubscriberId.account)
  return _internal_account();
}
inline ::bgs::protocol::account::v1::AccountId* SubscriberId::release_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.SubscriberId.account)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* SubscriberId::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    account_ = p;
  }
  return account_;
}
inline ::bgs::protocol::account::v1::AccountId* SubscriberId::mutable_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.SubscriberId.account)
  return _internal_mutable_account();
}
inline void SubscriberId::set_allocated_account(::bgs::protocol::account::v1::AccountId* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.SubscriberId.account)
}

// optional .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
inline bool SubscriberId::_internal_has_game_account() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_account_ != nullptr);
  return value;
}
inline bool SubscriberId::has_game_account() const {
  return _internal_has_game_account();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& SubscriberId::_internal_game_account() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = game_account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& SubscriberId::game_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.SubscriberId.game_account)
  return _internal_game_account();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* SubscriberId::release_game_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.SubscriberId.game_account)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = game_account_;
  game_account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* SubscriberId::_internal_mutable_game_account() {
  _has_bits_[0] |= 0x00000002u;
  if (game_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    game_account_ = p;
  }
  return game_account_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* SubscriberId::mutable_game_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.SubscriberId.game_account)
  return _internal_mutable_game_account();
}
inline void SubscriberId::set_allocated_game_account(::bgs::protocol::account::v1::GameAccountHandle* game_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_account_);
  }
  if (game_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_account_ = game_account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.SubscriberId.game_account)
}

// optional .bgs.protocol.ProcessId process = 3;
inline bool SubscriberId::_internal_has_process() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || process_ != nullptr);
  return value;
}
inline bool SubscriberId::has_process() const {
  return _internal_has_process();
}
inline const ::bgs::protocol::ProcessId& SubscriberId::_internal_process() const {
  const ::bgs::protocol::ProcessId* p = process_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ProcessId*>(
      &::bgs::protocol::_ProcessId_default_instance_);
}
inline const ::bgs::protocol::ProcessId& SubscriberId::process() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.channel.v1.SubscriberId.process)
  return _internal_process();
}
inline ::bgs::protocol::ProcessId* SubscriberId::release_process() {
  // @@protoc_insertion_point(field_release:bgs.protocol.channel.v1.SubscriberId.process)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::ProcessId* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ProcessId* SubscriberId::_internal_mutable_process() {
  _has_bits_[0] |= 0x00000004u;
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ProcessId>(GetArenaNoVirtual());
    process_ = p;
  }
  return process_;
}
inline ::bgs::protocol::ProcessId* SubscriberId::mutable_process() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.channel.v1.SubscriberId.process)
  return _internal_mutable_process();
}
inline void SubscriberId::set_allocated_process(::bgs::protocol::ProcessId* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_);
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.channel.v1.SubscriberId.process)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace channel
}  // namespace protocol
}  // namespace bgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bgs::protocol::channel::v1::ChannelState_PrivacyLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::channel::v1::ChannelState_PrivacyLevel>() {
  return ::bgs::protocol::channel::v1::ChannelState_PrivacyLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto
