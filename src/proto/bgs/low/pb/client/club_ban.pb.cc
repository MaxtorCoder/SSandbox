// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_ban.proto

#include "bgs/low/pb/client/club_ban.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class AddBanOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddBanOptions> _instance;
} _AddBanOptions_default_instance_;
class ClubBanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubBan> _instance;
} _ClubBan_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AddBanOptions_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AddBanOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AddBanOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AddBanOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddBanOptions_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddBanOptions_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubBan_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubBan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubBan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanOptions, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanOptions, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanOptions, reason_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBan, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBan, battle_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBan, creator_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBan, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBan, reason_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBan, creation_time_),
  2,
  0,
  3,
  ~0u,
  1,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::bgs::protocol::club::v1::AddBanOptions)},
  { 11, 22, sizeof(::bgs::protocol::club::v1::ClubBan)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AddBanOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubBan_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n bgs/low/pb/client/club_ban.proto\022\024bgs."
  "protocol.club.v1\032#bgs/low/pb/client/club"
  "_member.proto\0325bgs/low/pb/client/api/cli"
  "ent/v2/attribute_types.proto\"\201\001\n\rAddBanO"
  "ptions\0221\n\ttarget_id\030\001 \001(\0132\036.bgs.protocol"
  ".club.v1.MemberId\022-\n\tattribute\030\002 \003(\0132\032.b"
  "gs.protocol.v2.Attribute\022\016\n\006reason\030\003 \001(\t"
  "\"\331\001\n\007ClubBan\022*\n\002id\030\001 \001(\0132\036.bgs.protocol."
  "club.v1.MemberId\022\022\n\nbattle_tag\030\002 \001(\t\0228\n\007"
  "creator\030\003 \001(\0132\'.bgs.protocol.club.v1.Mem"
  "berDescription\022-\n\tattribute\030\004 \003(\0132\032.bgs."
  "protocol.v2.Attribute\022\016\n\006reason\030\005 \001(\t\022\025\n"
  "\rcreation_time\030\006 \001(\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto_deps[2] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto_sccs[2] = {
  &scc_info_AddBanOptions_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base,
  &scc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto, "bgs/low/pb/client/club_ban.proto", 500,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto, 2, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void AddBanOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_AddBanOptions_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class AddBanOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<AddBanOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& target_id(const AddBanOptions* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
AddBanOptions::_Internal::target_id(const AddBanOptions* msg) {
  return *msg->target_id_;
}
void AddBanOptions::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void AddBanOptions::clear_attribute() {
  attribute_.Clear();
}
AddBanOptions::AddBanOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AddBanOptions)
}
AddBanOptions::AddBanOptions(const AddBanOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::club::v1::MemberId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AddBanOptions)
}

void AddBanOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddBanOptions_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_id_ = nullptr;
}

AddBanOptions::~AddBanOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AddBanOptions)
  SharedDtor();
}

void AddBanOptions::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_id_;
}

void AddBanOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddBanOptions& AddBanOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddBanOptions_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base);
  return *internal_default_instance();
}


void AddBanOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AddBanOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddBanOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.AddBanOptions.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddBanOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AddBanOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_id(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.AddBanOptions.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AddBanOptions)
  return target;
}

size_t AddBanOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AddBanOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional .bgs.protocol.club.v1.MemberId target_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddBanOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AddBanOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBanOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddBanOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AddBanOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AddBanOptions)
    MergeFrom(*source);
  }
}

void AddBanOptions::MergeFrom(const AddBanOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AddBanOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_target_id());
    }
  }
}

void AddBanOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AddBanOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBanOptions::CopyFrom(const AddBanOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AddBanOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBanOptions::IsInitialized() const {
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void AddBanOptions::InternalSwap(AddBanOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_id_, other->target_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBanOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubBan::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubBan_default_instance_._instance.get_mutable()->id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubBan_default_instance_._instance.get_mutable()->creator_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
}
class ClubBan::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubBan>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& id(const ClubBan* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& creator(const ClubBan* msg);
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
ClubBan::_Internal::id(const ClubBan* msg) {
  return *msg->id_;
}
const ::bgs::protocol::club::v1::MemberDescription&
ClubBan::_Internal::creator(const ClubBan* msg) {
  return *msg->creator_;
}
void ClubBan::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ClubBan::clear_creator() {
  if (creator_ != nullptr) creator_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ClubBan::clear_attribute() {
  attribute_.Clear();
}
ClubBan::ClubBan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubBan)
}
ClubBan::ClubBan(const ClubBan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_battle_tag()) {
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from._internal_has_id()) {
    id_ = new ::bgs::protocol::club::v1::MemberId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_creator()) {
    creator_ = new ::bgs::protocol::club::v1::MemberDescription(*from.creator_);
  } else {
    creator_ = nullptr;
  }
  creation_time_ = from.creation_time_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubBan)
}

void ClubBan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creation_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(creation_time_));
}

ClubBan::~ClubBan() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubBan)
  SharedDtor();
}

void ClubBan::SharedDtor() {
  battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete creator_;
}

void ClubBan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubBan& ClubBan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base);
  return *internal_default_instance();
}


void ClubBan::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubBan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(creator_ != nullptr);
      creator_->Clear();
    }
  }
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubBan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battle_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubBan.battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription creator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_creator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubBan.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubBan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubBan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional string battle_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_battle_tag().data(), static_cast<int>(this->_internal_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubBan.battle_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_battle_tag(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription creator = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::creator(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribute(i), target, stream);
  }

  // optional string reason = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubBan.reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reason(), target);
  }

  // optional uint64 creation_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_creation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubBan)
  return target;
}

size_t ClubBan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubBan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string battle_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_battle_tag());
    }

    // optional string reason = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .bgs.protocol.club.v1.MemberDescription creator = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creator_);
    }

    // optional uint64 creation_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubBan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubBan)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubBan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubBan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubBan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubBan)
    MergeFrom(*source);
  }
}

void ClubBan::MergeFrom(const ClubBan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubBan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_creator()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_creator());
    }
    if (cached_has_bits & 0x00000010u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubBan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubBan::CopyFrom(const ClubBan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubBan::IsInitialized() const {
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  if (_internal_has_creator()) {
    if (!creator_->IsInitialized()) return false;
  }
  return true;
}

void ClubBan::InternalSwap(ClubBan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  battle_tag_.Swap(&other->battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(creator_, other->creator_);
  swap(creation_time_, other->creation_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubBan::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AddBanOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AddBanOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AddBanOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubBan* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubBan >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubBan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
