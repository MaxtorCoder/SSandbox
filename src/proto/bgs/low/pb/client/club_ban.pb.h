// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_ban.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_member.pb.h"
#include "bgs/low/pb/client/api/client/v2/attribute_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class AddBanOptions;
class AddBanOptionsDefaultTypeInternal;
extern AddBanOptionsDefaultTypeInternal _AddBanOptions_default_instance_;
class ClubBan;
class ClubBanDefaultTypeInternal;
extern ClubBanDefaultTypeInternal _ClubBan_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::AddBanOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AddBanOptions>(Arena*);
template<> ::bgs::protocol::club::v1::ClubBan* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubBan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class AddBanOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AddBanOptions) */ {
 public:
  AddBanOptions();
  virtual ~AddBanOptions();

  AddBanOptions(const AddBanOptions& from);
  AddBanOptions(AddBanOptions&& from) noexcept
    : AddBanOptions() {
    *this = ::std::move(from);
  }

  inline AddBanOptions& operator=(const AddBanOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBanOptions& operator=(AddBanOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddBanOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddBanOptions* internal_default_instance() {
    return reinterpret_cast<const AddBanOptions*>(
               &_AddBanOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddBanOptions& a, AddBanOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBanOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddBanOptions* New() const final {
    return CreateMaybeMessage<AddBanOptions>(nullptr);
  }

  AddBanOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddBanOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddBanOptions& from);
  void MergeFrom(const AddBanOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBanOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AddBanOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kReasonFieldNumber = 3,
    kTargetIdFieldNumber = 1,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string reason = 3;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::club::v1::MemberId& target_id() const;
  ::bgs::protocol::club::v1::MemberId* release_target_id();
  ::bgs::protocol::club::v1::MemberId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_target_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_target_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AddBanOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::bgs::protocol::club::v1::MemberId* target_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto;
};
// -------------------------------------------------------------------

class ClubBan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubBan) */ {
 public:
  ClubBan();
  virtual ~ClubBan();

  ClubBan(const ClubBan& from);
  ClubBan(ClubBan&& from) noexcept
    : ClubBan() {
    *this = ::std::move(from);
  }

  inline ClubBan& operator=(const ClubBan& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubBan& operator=(ClubBan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubBan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubBan* internal_default_instance() {
    return reinterpret_cast<const ClubBan*>(
               &_ClubBan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClubBan& a, ClubBan& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubBan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubBan* New() const final {
    return CreateMaybeMessage<ClubBan>(nullptr);
  }

  ClubBan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubBan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubBan& from);
  void MergeFrom(const ClubBan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubBan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubBan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 4,
    kBattleTagFieldNumber = 2,
    kReasonFieldNumber = 5,
    kIdFieldNumber = 1,
    kCreatorFieldNumber = 3,
    kCreationTimeFieldNumber = 6,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string battle_tag = 2;
  bool has_battle_tag() const;
  private:
  bool _internal_has_battle_tag() const;
  public:
  void clear_battle_tag();
  const std::string& battle_tag() const;
  void set_battle_tag(const std::string& value);
  void set_battle_tag(std::string&& value);
  void set_battle_tag(const char* value);
  void set_battle_tag(const char* value, size_t size);
  std::string* mutable_battle_tag();
  std::string* release_battle_tag();
  void set_allocated_battle_tag(std::string* battle_tag);
  private:
  const std::string& _internal_battle_tag() const;
  void _internal_set_battle_tag(const std::string& value);
  std::string* _internal_mutable_battle_tag();
  public:

  // optional string reason = 5;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // optional .bgs.protocol.club.v1.MemberId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bgs::protocol::club::v1::MemberId& id() const;
  ::bgs::protocol::club::v1::MemberId* release_id();
  ::bgs::protocol::club::v1::MemberId* mutable_id();
  void set_allocated_id(::bgs::protocol::club::v1::MemberId* id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_id();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription creator = 3;
  bool has_creator() const;
  private:
  bool _internal_has_creator() const;
  public:
  void clear_creator();
  const ::bgs::protocol::club::v1::MemberDescription& creator() const;
  ::bgs::protocol::club::v1::MemberDescription* release_creator();
  ::bgs::protocol::club::v1::MemberDescription* mutable_creator();
  void set_allocated_creator(::bgs::protocol::club::v1::MemberDescription* creator);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_creator() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_creator();
  public:

  // optional uint64 creation_time = 6;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubBan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::bgs::protocol::club::v1::MemberId* id_;
  ::bgs::protocol::club::v1::MemberDescription* creator_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddBanOptions

// optional .bgs.protocol.club.v1.MemberId target_id = 1;
inline bool AddBanOptions::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool AddBanOptions::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::club::v1::MemberId& AddBanOptions::_internal_target_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& AddBanOptions::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AddBanOptions.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::club::v1::MemberId* AddBanOptions::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AddBanOptions.target_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* AddBanOptions::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::club::v1::MemberId* AddBanOptions::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AddBanOptions.target_id)
  return _internal_mutable_target_id();
}
inline void AddBanOptions::set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AddBanOptions.target_id)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int AddBanOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int AddBanOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* AddBanOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AddBanOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
AddBanOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.AddBanOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& AddBanOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& AddBanOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AddBanOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* AddBanOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* AddBanOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.AddBanOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
AddBanOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.AddBanOptions.attribute)
  return attribute_;
}

// optional string reason = 3;
inline bool AddBanOptions::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddBanOptions::has_reason() const {
  return _internal_has_reason();
}
inline void AddBanOptions::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddBanOptions::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AddBanOptions.reason)
  return _internal_reason();
}
inline void AddBanOptions::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AddBanOptions.reason)
}
inline std::string* AddBanOptions::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AddBanOptions.reason)
  return _internal_mutable_reason();
}
inline const std::string& AddBanOptions::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void AddBanOptions::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddBanOptions::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.AddBanOptions.reason)
}
inline void AddBanOptions::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.AddBanOptions.reason)
}
inline void AddBanOptions::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.AddBanOptions.reason)
}
inline std::string* AddBanOptions::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddBanOptions::release_reason() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AddBanOptions.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddBanOptions::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AddBanOptions.reason)
}

// -------------------------------------------------------------------

// ClubBan

// optional .bgs.protocol.club.v1.MemberId id = 1;
inline bool ClubBan::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool ClubBan::has_id() const {
  return _internal_has_id();
}
inline const ::bgs::protocol::club::v1::MemberId& ClubBan::_internal_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& ClubBan::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBan.id)
  return _internal_id();
}
inline ::bgs::protocol::club::v1::MemberId* ClubBan::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubBan.id)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::MemberId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* ClubBan::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::bgs::protocol::club::v1::MemberId* ClubBan::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBan.id)
  return _internal_mutable_id();
}
inline void ClubBan::set_allocated_id(::bgs::protocol::club::v1::MemberId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubBan.id)
}

// optional string battle_tag = 2;
inline bool ClubBan::_internal_has_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubBan::has_battle_tag() const {
  return _internal_has_battle_tag();
}
inline void ClubBan::clear_battle_tag() {
  battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClubBan::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBan.battle_tag)
  return _internal_battle_tag();
}
inline void ClubBan::set_battle_tag(const std::string& value) {
  _internal_set_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubBan.battle_tag)
}
inline std::string* ClubBan::mutable_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBan.battle_tag)
  return _internal_mutable_battle_tag();
}
inline const std::string& ClubBan::_internal_battle_tag() const {
  return battle_tag_.GetNoArena();
}
inline void ClubBan::_internal_set_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubBan::set_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubBan.battle_tag)
}
inline void ClubBan::set_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubBan.battle_tag)
}
inline void ClubBan::set_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubBan.battle_tag)
}
inline std::string* ClubBan::_internal_mutable_battle_tag() {
  _has_bits_[0] |= 0x00000001u;
  return battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubBan::release_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubBan.battle_tag)
  if (!_internal_has_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubBan::set_allocated_battle_tag(std::string* battle_tag) {
  if (battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubBan.battle_tag)
}

// optional .bgs.protocol.club.v1.MemberDescription creator = 3;
inline bool ClubBan::_internal_has_creator() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || creator_ != nullptr);
  return value;
}
inline bool ClubBan::has_creator() const {
  return _internal_has_creator();
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubBan::_internal_creator() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = creator_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubBan::creator() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBan.creator)
  return _internal_creator();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubBan::release_creator() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubBan.creator)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::MemberDescription* temp = creator_;
  creator_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubBan::_internal_mutable_creator() {
  _has_bits_[0] |= 0x00000008u;
  if (creator_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    creator_ = p;
  }
  return creator_;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubBan::mutable_creator() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBan.creator)
  return _internal_mutable_creator();
}
inline void ClubBan::set_allocated_creator(::bgs::protocol::club::v1::MemberDescription* creator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creator_);
  }
  if (creator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      creator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  creator_ = creator;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubBan.creator)
}

// repeated .bgs.protocol.v2.Attribute attribute = 4;
inline int ClubBan::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ClubBan::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* ClubBan::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBan.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubBan::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubBan.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& ClubBan::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& ClubBan::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBan.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* ClubBan::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* ClubBan::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubBan.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubBan::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubBan.attribute)
  return attribute_;
}

// optional string reason = 5;
inline bool ClubBan::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubBan::has_reason() const {
  return _internal_has_reason();
}
inline void ClubBan::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClubBan::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBan.reason)
  return _internal_reason();
}
inline void ClubBan::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubBan.reason)
}
inline std::string* ClubBan::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBan.reason)
  return _internal_mutable_reason();
}
inline const std::string& ClubBan::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void ClubBan::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubBan::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubBan.reason)
}
inline void ClubBan::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubBan.reason)
}
inline void ClubBan::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubBan.reason)
}
inline std::string* ClubBan::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000002u;
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubBan::release_reason() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubBan.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubBan::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubBan.reason)
}

// optional uint64 creation_time = 6;
inline bool ClubBan::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClubBan::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void ClubBan::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubBan::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubBan::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBan.creation_time)
  return _internal_creation_time();
}
inline void ClubBan::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  creation_time_ = value;
}
inline void ClubBan::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubBan.creation_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto
