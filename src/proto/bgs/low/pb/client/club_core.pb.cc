// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_core.proto

#include "bgs/low/pb/client/club_core.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetBroadcastOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class AvatarIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvatarId> _instance;
} _AvatarId_default_instance_;
class SetBroadcastOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetBroadcastOptions> _instance;
} _SetBroadcastOptions_default_instance_;
class BroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Broadcast> _instance;
} _Broadcast_default_instance_;
class UniqueClubTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniqueClubType> _instance;
} _UniqueClubType_default_instance_;
class ClubCreateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubCreateOptions> _instance;
} _ClubCreateOptions_default_instance_;
class ClubDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Club> _instance;
} _Club_default_instance_;
class ClubDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubDescription> _instance;
} _ClubDescription_default_instance_;
class ClubViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubView> _instance;
} _ClubView_default_instance_;
class ClubStateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubStateOptions> _instance;
} _ClubStateOptions_default_instance_;
class ClubStateAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubStateAssignment> _instance;
} _ClubStateAssignment_default_instance_;
class StreamSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamSettings> _instance;
} _StreamSettings_default_instance_;
class ClubSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSettings> _instance;
} _ClubSettings_default_instance_;
class ClubSettingsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSettingsOptions> _instance;
} _ClubSettingsOptions_default_instance_;
class ClubSettingsAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSettingsAssignment> _instance;
} _ClubSettingsAssignment_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AvatarId_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AvatarId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AvatarId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {}};

static void InitDefaultsscc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_Broadcast_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::Broadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::Broadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_Club_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_Club_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::Club();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::Club::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Club_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Club_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
      &scc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base,
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_ClubCreateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubCreateOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubCreateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubCreateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ClubCreateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ClubCreateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
      &scc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubDescription_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSettings_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSettingsAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSettingsAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSettingsAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClubSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_ClubSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSettingsOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSettingsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSettingsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClubSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_ClubStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubStateAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubStateAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubStateAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ClubStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_ClubStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubStateOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubStateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubStateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ClubStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_SetBroadcastOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_ClubView_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubView_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubView::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubView_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubView_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {
      &scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SetBroadcastOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SetBroadcastOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SetBroadcastOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SetBroadcastOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetBroadcastOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetBroadcastOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {}};

static void InitDefaultsscc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamSettings_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {}};

static void InitDefaultsscc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UniqueClubType_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UniqueClubType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UniqueClubType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AvatarId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AvatarId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AvatarId, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetBroadcastOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetBroadcastOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetBroadcastOptions, content_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Broadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Broadcast, content_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Broadcast, creator_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Broadcast, creation_time_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UniqueClubType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UniqueClubType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UniqueClubType, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UniqueClubType, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, description_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, avatar_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, privacy_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, short_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, member_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubCreateOptions, stream_),
  3,
  ~0u,
  0,
  1,
  4,
  7,
  2,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, description_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, broadcast_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, avatar_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, privacy_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, visibility_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, member_count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, creation_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, stream_position_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, role_set_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, leader_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Club, short_name_),
  8,
  3,
  ~0u,
  0,
  1,
  4,
  5,
  9,
  10,
  12,
  11,
  6,
  7,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, description_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, avatar_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, privacy_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, visibility_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, member_count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, leader_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubDescription, creation_time_),
  4,
  2,
  0,
  1,
  3,
  5,
  6,
  8,
  ~0u,
  7,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubView, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubView, marker_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, description_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, broadcast_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, avatar_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, privacy_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, stream_position_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateOptions, short_name_),
  ~0u,
  0,
  1,
  3,
  4,
  6,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, description_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, broadcast_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, avatar_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, privacy_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, stream_position_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStateAssignment, short_name_),
  6,
  ~0u,
  0,
  1,
  3,
  4,
  7,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamSettings, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamSettings, filter_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettings, stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettings, stream_notification_filter_all_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettings, attribute_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsOptions, stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsOptions, settings_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsOptions, version_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsAssignment, stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSettingsAssignment, settings_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::bgs::protocol::club::v1::AvatarId)},
  { 7, 13, sizeof(::bgs::protocol::club::v1::SetBroadcastOptions)},
  { 14, 22, sizeof(::bgs::protocol::club::v1::Broadcast)},
  { 25, 32, sizeof(::bgs::protocol::club::v1::UniqueClubType)},
  { 34, 48, sizeof(::bgs::protocol::club::v1::ClubCreateOptions)},
  { 57, 77, sizeof(::bgs::protocol::club::v1::Club)},
  { 92, 107, sizeof(::bgs::protocol::club::v1::ClubDescription)},
  { 117, 124, sizeof(::bgs::protocol::club::v1::ClubView)},
  { 126, 139, sizeof(::bgs::protocol::club::v1::ClubStateOptions)},
  { 147, 161, sizeof(::bgs::protocol::club::v1::ClubStateAssignment)},
  { 170, 177, sizeof(::bgs::protocol::club::v1::StreamSettings)},
  { 179, 187, sizeof(::bgs::protocol::club::v1::ClubSettings)},
  { 190, 198, sizeof(::bgs::protocol::club::v1::ClubSettingsOptions)},
  { 201, 208, sizeof(::bgs::protocol::club::v1::ClubSettingsAssignment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AvatarId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SetBroadcastOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_Broadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UniqueClubType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubCreateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_Club_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubStateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubStateAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSettingsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSettingsAssignment_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!bgs/low/pb/client/club_core.proto\022\024bgs"
  ".protocol.club.v1\032!bgs/low/pb/client/clu"
  "b_enum.proto\032!bgs/low/pb/client/club_rol"
  "e.proto\032#bgs/low/pb/client/club_member.p"
  "roto\032#bgs/low/pb/client/club_stream.prot"
  "o\0325bgs/low/pb/client/api/client/v2/attri"
  "bute_types.proto\032(bgs/low/pb/client/even"
  "t_view_types.proto\"\026\n\010AvatarId\022\n\n\002id\030\001 \001"
  "(\r\"&\n\023SetBroadcastOptions\022\017\n\007content\030\001 \001"
  "(\t\"m\n\tBroadcast\022\017\n\007content\030\001 \001(\t\0228\n\007crea"
  "tor\030\002 \001(\0132\'.bgs.protocol.club.v1.MemberD"
  "escription\022\025\n\rcreation_time\030\003 \001(\004\"/\n\016Uni"
  "queClubType\022\017\n\007program\030\001 \001(\007\022\014\n\004name\030\002 \001"
  "(\t\"\244\003\n\021ClubCreateOptions\0222\n\004type\030\001 \001(\0132$"
  ".bgs.protocol.club.v1.UniqueClubType\022-\n\t"
  "attribute\030\002 \003(\0132\032.bgs.protocol.v2.Attrib"
  "ute\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022."
  "\n\006avatar\030\005 \001(\0132\036.bgs.protocol.club.v1.Av"
  "atarId\022O\n\rprivacy_level\030\006 \001(\0162\".bgs.prot"
  "ocol.club.v1.PrivacyLevel:\024PRIVACY_LEVEL"
  "_CLOSED\022\022\n\nshort_name\030\007 \001(\t\0229\n\006member\030\n "
  "\001(\0132).bgs.protocol.club.v1.CreateMemberO"
  "ptions\0229\n\006stream\030\013 \001(\0132).bgs.protocol.cl"
  "ub.v1.CreateStreamOptions\"\226\005\n\004Club\022\n\n\002id"
  "\030\001 \001(\004\0222\n\004type\030\002 \001(\0132$.bgs.protocol.club"
  ".v1.UniqueClubType\022-\n\tattribute\030\003 \003(\0132\032."
  "bgs.protocol.v2.Attribute\022\014\n\004name\030\004 \001(\t\022"
  "\023\n\013description\030\005 \001(\t\0222\n\tbroadcast\030\006 \001(\0132"
  "\037.bgs.protocol.club.v1.Broadcast\022.\n\006avat"
  "ar\030\007 \001(\0132\036.bgs.protocol.club.v1.AvatarId"
  "\022O\n\rprivacy_level\030\010 \001(\0162\".bgs.protocol.c"
  "lub.v1.PrivacyLevel:\024PRIVACY_LEVEL_CLOSE"
  "D\022Y\n\020visibility_level\030\t \001(\0162%.bgs.protoc"
  "ol.club.v1.VisibilityLevel:\030VISIBILITY_L"
  "EVEL_PRIVATE\022\024\n\014member_count\030\n \001(\r\022\025\n\rcr"
  "eation_time\030\013 \001(\004\022=\n\017stream_position\030\014 \001"
  "(\0132$.bgs.protocol.club.v1.StreamPosition"
  "\0223\n\010role_set\030\r \001(\0132!.bgs.protocol.club.v"
  "1.ClubRoleSet\0227\n\006leader\030\016 \003(\0132\'.bgs.prot"
  "ocol.club.v1.MemberDescription\022\022\n\nshort_"
  "name\030\017 \001(\t\"\266\003\n\017ClubDescription\022\n\n\002id\030\001 \001"
  "(\004\0222\n\004type\030\002 \001(\0132$.bgs.protocol.club.v1."
  "UniqueClubType\022\014\n\004name\030\003 \001(\t\022\023\n\013descript"
  "ion\030\004 \001(\t\022.\n\006avatar\030\005 \001(\0132\036.bgs.protocol"
  ".club.v1.AvatarId\022O\n\rprivacy_level\030\006 \001(\016"
  "2\".bgs.protocol.club.v1.PrivacyLevel:\024PR"
  "IVACY_LEVEL_CLOSED\022Y\n\020visibility_level\030\007"
  " \001(\0162%.bgs.protocol.club.v1.VisibilityLe"
  "vel:\030VISIBILITY_LEVEL_PRIVATE\022\024\n\014member_"
  "count\030\010 \001(\r\0227\n\006leader\030\t \003(\0132\'.bgs.protoc"
  "ol.club.v1.MemberDescription\022\025\n\rcreation"
  "_time\030\n \001(\004\"E\n\010ClubView\022\017\n\007club_id\030\001 \001(\004"
  "\022(\n\006marker\030\002 \001(\0132\030.bgs.protocol.ViewMark"
  "er\"\366\002\n\020ClubStateOptions\022-\n\tattribute\030\001 \003"
  "(\0132\032.bgs.protocol.v2.Attribute\022\014\n\004name\030\002"
  " \001(\t\022\023\n\013description\030\003 \001(\t\022<\n\tbroadcast\030\004"
  " \001(\0132).bgs.protocol.club.v1.SetBroadcast"
  "Options\022.\n\006avatar\030\005 \001(\0132\036.bgs.protocol.c"
  "lub.v1.AvatarId\022O\n\rprivacy_level\030\006 \001(\0162\""
  ".bgs.protocol.club.v1.PrivacyLevel:\024PRIV"
  "ACY_LEVEL_CLOSED\022=\n\017stream_position\030\007 \001("
  "\0132$.bgs.protocol.club.v1.StreamPosition\022"
  "\022\n\nshort_name\030\010 \001(\t\"\200\003\n\023ClubStateAssignm"
  "ent\022\017\n\007club_id\030\001 \001(\004\022-\n\tattribute\030\002 \003(\0132"
  "\032.bgs.protocol.v2.Attribute\022\014\n\004name\030\003 \001("
  "\t\022\023\n\013description\030\004 \001(\t\0222\n\tbroadcast\030\005 \001("
  "\0132\037.bgs.protocol.club.v1.Broadcast\022.\n\006av"
  "atar\030\006 \001(\0132\036.bgs.protocol.club.v1.Avatar"
  "Id\022O\n\rprivacy_level\030\007 \001(\0162\".bgs.protocol"
  ".club.v1.PrivacyLevel:\024PRIVACY_LEVEL_CLO"
  "SED\022=\n\017stream_position\030\010 \001(\0132$.bgs.proto"
  "col.club.v1.StreamPosition\022\022\n\nshort_name"
  "\030\t \001(\t\"\204\001\n\016StreamSettings\022\021\n\tstream_id\030\001"
  " \001(\004\022_\n\006filter\030\002 \001(\0162..bgs.protocol.club"
  ".v1.StreamNotificationFilter:\037STREAM_NOT"
  "IFICATION_FILTER_NONE\"\233\001\n\014ClubSettings\0224"
  "\n\006stream\030\001 \003(\0132$.bgs.protocol.club.v1.St"
  "reamSettings\022&\n\036stream_notification_filt"
  "er_all\030\002 \001(\010\022-\n\tattribute\030\003 \003(\0132\032.bgs.pr"
  "otocol.v2.Attribute\"\226\001\n\023ClubSettingsOpti"
  "ons\0228\n\006stream\030\001 \003(\0132$.bgs.protocol.club."
  "v1.StreamSettingsB\002\030\001\0224\n\010settings\030\002 \001(\0132"
  "\".bgs.protocol.club.v1.ClubSettings\022\017\n\007v"
  "ersion\030\003 \001(\r\"\210\001\n\026ClubSettingsAssignment\022"
  "8\n\006stream\030\001 \003(\0132$.bgs.protocol.club.v1.S"
  "treamSettingsB\002\030\001\0224\n\010settings\030\002 \001(\0132\".bg"
  "s.protocol.club.v1.ClubSettings"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto_deps[6] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fenum_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto_sccs[14] = {
  &scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_Club_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_ClubCreateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_ClubSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_ClubSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_ClubStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_ClubStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_ClubView_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_SetBroadcastOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
  &scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto, "bgs/low/pb/client/club_core.proto", 3471,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto_deps, 14, 6,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto, 14, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void AvatarId::InitAsDefaultInstance() {
}
class AvatarId::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarId>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AvatarId::AvatarId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AvatarId)
}
AvatarId::AvatarId(const AvatarId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AvatarId)
}

void AvatarId::SharedCtor() {
  id_ = 0u;
}

AvatarId::~AvatarId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AvatarId)
  SharedDtor();
}

void AvatarId::SharedDtor() {
}

void AvatarId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarId& AvatarId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvatarId_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void AvatarId::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AvatarId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AvatarId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvatarId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AvatarId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AvatarId)
  return target;
}

size_t AvatarId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AvatarId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AvatarId)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvatarId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AvatarId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AvatarId)
    MergeFrom(*source);
  }
}

void AvatarId::MergeFrom(const AvatarId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AvatarId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void AvatarId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AvatarId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarId::CopyFrom(const AvatarId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AvatarId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarId::IsInitialized() const {
  return true;
}

void AvatarId::InternalSwap(AvatarId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvatarId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetBroadcastOptions::InitAsDefaultInstance() {
}
class SetBroadcastOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<SetBroadcastOptions>()._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetBroadcastOptions::SetBroadcastOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SetBroadcastOptions)
}
SetBroadcastOptions::SetBroadcastOptions(const SetBroadcastOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SetBroadcastOptions)
}

void SetBroadcastOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetBroadcastOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetBroadcastOptions::~SetBroadcastOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SetBroadcastOptions)
  SharedDtor();
}

void SetBroadcastOptions::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetBroadcastOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetBroadcastOptions& SetBroadcastOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetBroadcastOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void SetBroadcastOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SetBroadcastOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetBroadcastOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.SetBroadcastOptions.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBroadcastOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SetBroadcastOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.SetBroadcastOptions.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SetBroadcastOptions)
  return target;
}

size_t SetBroadcastOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SetBroadcastOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string content = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBroadcastOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SetBroadcastOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBroadcastOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetBroadcastOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SetBroadcastOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SetBroadcastOptions)
    MergeFrom(*source);
  }
}

void SetBroadcastOptions::MergeFrom(const SetBroadcastOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SetBroadcastOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_content()) {
    _has_bits_[0] |= 0x00000001u;
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void SetBroadcastOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SetBroadcastOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBroadcastOptions::CopyFrom(const SetBroadcastOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SetBroadcastOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBroadcastOptions::IsInitialized() const {
  return true;
}

void SetBroadcastOptions::InternalSwap(SetBroadcastOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBroadcastOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Broadcast::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_Broadcast_default_instance_._instance.get_mutable()->creator_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
}
class Broadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<Broadcast>()._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& creator(const Broadcast* msg);
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberDescription&
Broadcast::_Internal::creator(const Broadcast* msg) {
  return *msg->creator_;
}
void Broadcast::clear_creator() {
  if (creator_ != nullptr) creator_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Broadcast::Broadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Broadcast)
}
Broadcast::Broadcast(const Broadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_creator()) {
    creator_ = new ::bgs::protocol::club::v1::MemberDescription(*from.creator_);
  } else {
    creator_ = nullptr;
  }
  creation_time_ = from.creation_time_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Broadcast)
}

void Broadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&creator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creation_time_) -
      reinterpret_cast<char*>(&creator_)) + sizeof(creation_time_));
}

Broadcast::~Broadcast() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Broadcast)
  SharedDtor();
}

void Broadcast::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creator_;
}

void Broadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Broadcast& Broadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Broadcast_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void Broadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.Broadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(creator_ != nullptr);
      creator_->Clear();
    }
  }
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Broadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.Broadcast.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_creator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Broadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.Broadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.Broadcast.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::creator(this), target, stream);
  }

  // optional uint64 creation_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_creation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.Broadcast)
  return target;
}

size_t Broadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.Broadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string content = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creator_);
    }

    // optional uint64 creation_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Broadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const Broadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Broadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.Broadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.Broadcast)
    MergeFrom(*source);
  }
}

void Broadcast::MergeFrom(const Broadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_creator()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_creator());
    }
    if (cached_has_bits & 0x00000004u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Broadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broadcast::CopyFrom(const Broadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast::IsInitialized() const {
  if (_internal_has_creator()) {
    if (!creator_->IsInitialized()) return false;
  }
  return true;
}

void Broadcast::InternalSwap(Broadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(creator_, other->creator_);
  swap(creation_time_, other->creation_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Broadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UniqueClubType::InitAsDefaultInstance() {
}
class UniqueClubType::_Internal {
 public:
  using HasBits = decltype(std::declval<UniqueClubType>()._has_bits_);
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UniqueClubType::UniqueClubType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UniqueClubType)
}
UniqueClubType::UniqueClubType(const UniqueClubType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  program_ = from.program_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UniqueClubType)
}

void UniqueClubType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_ = 0u;
}

UniqueClubType::~UniqueClubType() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UniqueClubType)
  SharedDtor();
}

void UniqueClubType::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UniqueClubType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniqueClubType& UniqueClubType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void UniqueClubType::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UniqueClubType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  program_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UniqueClubType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 program = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.UniqueClubType.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniqueClubType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UniqueClubType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 program = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_program(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.UniqueClubType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UniqueClubType)
  return target;
}

size_t UniqueClubType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UniqueClubType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed32 program = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniqueClubType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UniqueClubType)
  GOOGLE_DCHECK_NE(&from, this);
  const UniqueClubType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniqueClubType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UniqueClubType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UniqueClubType)
    MergeFrom(*source);
  }
}

void UniqueClubType::MergeFrom(const UniqueClubType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UniqueClubType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UniqueClubType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UniqueClubType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueClubType::CopyFrom(const UniqueClubType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UniqueClubType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueClubType::IsInitialized() const {
  return true;
}

void UniqueClubType::InternalSwap(UniqueClubType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniqueClubType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubCreateOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubCreateOptions_default_instance_._instance.get_mutable()->type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(
      ::bgs::protocol::club::v1::UniqueClubType::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubCreateOptions_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(
      ::bgs::protocol::club::v1::AvatarId::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubCreateOptions_default_instance_._instance.get_mutable()->member_ = const_cast< ::bgs::protocol::club::v1::CreateMemberOptions*>(
      ::bgs::protocol::club::v1::CreateMemberOptions::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubCreateOptions_default_instance_._instance.get_mutable()->stream_ = const_cast< ::bgs::protocol::club::v1::CreateStreamOptions*>(
      ::bgs::protocol::club::v1::CreateStreamOptions::internal_default_instance());
}
class ClubCreateOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubCreateOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::UniqueClubType& type(const ClubCreateOptions* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::AvatarId& avatar(const ClubCreateOptions* msg);
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::CreateMemberOptions& member(const ClubCreateOptions* msg);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::bgs::protocol::club::v1::CreateStreamOptions& stream(const ClubCreateOptions* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::bgs::protocol::club::v1::UniqueClubType&
ClubCreateOptions::_Internal::type(const ClubCreateOptions* msg) {
  return *msg->type_;
}
const ::bgs::protocol::club::v1::AvatarId&
ClubCreateOptions::_Internal::avatar(const ClubCreateOptions* msg) {
  return *msg->avatar_;
}
const ::bgs::protocol::club::v1::CreateMemberOptions&
ClubCreateOptions::_Internal::member(const ClubCreateOptions* msg) {
  return *msg->member_;
}
const ::bgs::protocol::club::v1::CreateStreamOptions&
ClubCreateOptions::_Internal::stream(const ClubCreateOptions* msg) {
  return *msg->stream_;
}
void ClubCreateOptions::clear_attribute() {
  attribute_.Clear();
}
void ClubCreateOptions::clear_member() {
  if (member_ != nullptr) member_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ClubCreateOptions::clear_stream() {
  if (stream_ != nullptr) stream_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
ClubCreateOptions::ClubCreateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubCreateOptions)
}
ClubCreateOptions::ClubCreateOptions(const ClubCreateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_name()) {
    short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
  }
  if (from._internal_has_type()) {
    type_ = new ::bgs::protocol::club::v1::UniqueClubType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_avatar()) {
    avatar_ = new ::bgs::protocol::club::v1::AvatarId(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  if (from._internal_has_member()) {
    member_ = new ::bgs::protocol::club::v1::CreateMemberOptions(*from.member_);
  } else {
    member_ = nullptr;
  }
  if (from._internal_has_stream()) {
    stream_ = new ::bgs::protocol::club::v1::CreateStreamOptions(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  privacy_level_ = from.privacy_level_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubCreateOptions)
}

void ClubCreateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubCreateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privacy_level_) -
      reinterpret_cast<char*>(&type_)) + sizeof(privacy_level_));
}

ClubCreateOptions::~ClubCreateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubCreateOptions)
  SharedDtor();
}

void ClubCreateOptions::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete avatar_;
  if (this != internal_default_instance()) delete member_;
  if (this != internal_default_instance()) delete stream_;
}

void ClubCreateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubCreateOptions& ClubCreateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubCreateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void ClubCreateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubCreateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      short_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(avatar_ != nullptr);
      avatar_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(member_ != nullptr);
      member_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(stream_ != nullptr);
      stream_->Clear();
    }
  }
  privacy_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubCreateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubCreateOptions.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubCreateOptions.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::PrivacyLevel_IsValid(val))) {
            _internal_set_privacy_level(static_cast<::bgs::protocol::club::v1::PrivacyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string short_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubCreateOptions.short_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubCreateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubCreateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubCreateOptions.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubCreateOptions.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::avatar(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_privacy_level(), target);
  }

  // optional string short_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubCreateOptions.short_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_short_name(), target);
  }

  // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::member(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubCreateOptions)
  return target;
}

size_t ClubCreateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubCreateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string short_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatar_);
    }

    // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_);
    }

    // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_);
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_privacy_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubCreateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubCreateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubCreateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubCreateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubCreateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubCreateOptions)
    MergeFrom(*source);
  }
}

void ClubCreateOptions::MergeFrom(const ClubCreateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubCreateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from._internal_avatar());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_member()->::bgs::protocol::club::v1::CreateMemberOptions::MergeFrom(from._internal_member());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_stream()->::bgs::protocol::club::v1::CreateStreamOptions::MergeFrom(from._internal_stream());
    }
    if (cached_has_bits & 0x00000080u) {
      privacy_level_ = from.privacy_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubCreateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubCreateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubCreateOptions::CopyFrom(const ClubCreateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubCreateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubCreateOptions::IsInitialized() const {
  if (_internal_has_member()) {
    if (!member_->IsInitialized()) return false;
  }
  return true;
}

void ClubCreateOptions::InternalSwap(ClubCreateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(avatar_, other->avatar_);
  swap(member_, other->member_);
  swap(stream_, other->stream_);
  swap(privacy_level_, other->privacy_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubCreateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Club::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_Club_default_instance_._instance.get_mutable()->type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(
      ::bgs::protocol::club::v1::UniqueClubType::internal_default_instance());
  ::bgs::protocol::club::v1::_Club_default_instance_._instance.get_mutable()->broadcast_ = const_cast< ::bgs::protocol::club::v1::Broadcast*>(
      ::bgs::protocol::club::v1::Broadcast::internal_default_instance());
  ::bgs::protocol::club::v1::_Club_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(
      ::bgs::protocol::club::v1::AvatarId::internal_default_instance());
  ::bgs::protocol::club::v1::_Club_default_instance_._instance.get_mutable()->stream_position_ = const_cast< ::bgs::protocol::club::v1::StreamPosition*>(
      ::bgs::protocol::club::v1::StreamPosition::internal_default_instance());
  ::bgs::protocol::club::v1::_Club_default_instance_._instance.get_mutable()->role_set_ = const_cast< ::bgs::protocol::club::v1::ClubRoleSet*>(
      ::bgs::protocol::club::v1::ClubRoleSet::internal_default_instance());
}
class Club::_Internal {
 public:
  using HasBits = decltype(std::declval<Club>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::bgs::protocol::club::v1::UniqueClubType& type(const Club* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::Broadcast& broadcast(const Club* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::club::v1::AvatarId& avatar(const Club* msg);
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_visibility_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::bgs::protocol::club::v1::StreamPosition& stream_position(const Club* msg);
  static void set_has_stream_position(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::bgs::protocol::club::v1::ClubRoleSet& role_set(const Club* msg);
  static void set_has_role_set(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::UniqueClubType&
Club::_Internal::type(const Club* msg) {
  return *msg->type_;
}
const ::bgs::protocol::club::v1::Broadcast&
Club::_Internal::broadcast(const Club* msg) {
  return *msg->broadcast_;
}
const ::bgs::protocol::club::v1::AvatarId&
Club::_Internal::avatar(const Club* msg) {
  return *msg->avatar_;
}
const ::bgs::protocol::club::v1::StreamPosition&
Club::_Internal::stream_position(const Club* msg) {
  return *msg->stream_position_;
}
const ::bgs::protocol::club::v1::ClubRoleSet&
Club::_Internal::role_set(const Club* msg) {
  return *msg->role_set_;
}
void Club::clear_attribute() {
  attribute_.Clear();
}
void Club::clear_stream_position() {
  if (stream_position_ != nullptr) stream_position_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Club::clear_role_set() {
  if (role_set_ != nullptr) role_set_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Club::clear_leader() {
  leader_.Clear();
}
Club::Club()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Club)
}
Club::Club(const Club& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      leader_(from.leader_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_name()) {
    short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
  }
  if (from._internal_has_type()) {
    type_ = new ::bgs::protocol::club::v1::UniqueClubType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::bgs::protocol::club::v1::Broadcast(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  if (from._internal_has_avatar()) {
    avatar_ = new ::bgs::protocol::club::v1::AvatarId(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  if (from._internal_has_stream_position()) {
    stream_position_ = new ::bgs::protocol::club::v1::StreamPosition(*from.stream_position_);
  } else {
    stream_position_ = nullptr;
  }
  if (from._internal_has_role_set()) {
    role_set_ = new ::bgs::protocol::club::v1::ClubRoleSet(*from.role_set_);
  } else {
    role_set_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Club)
}

void Club::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Club_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(member_count_));
}

Club::~Club() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Club)
  SharedDtor();
}

void Club::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete broadcast_;
  if (this != internal_default_instance()) delete avatar_;
  if (this != internal_default_instance()) delete stream_position_;
  if (this != internal_default_instance()) delete role_set_;
}

void Club::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Club& Club::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Club_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void Club::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.Club)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  leader_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      short_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(avatar_ != nullptr);
      avatar_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(stream_position_ != nullptr);
      stream_position_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(role_set_ != nullptr);
      role_set_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_count_) -
        reinterpret_cast<char*>(&id_)) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Club::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.Club.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.Club.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8 [default = PRIVACY_LEVEL_CLOSED];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::PrivacyLevel_IsValid(val))) {
            _internal_set_privacy_level(static_cast<::bgs::protocol::club::v1::PrivacyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9 [default = VISIBILITY_LEVEL_PRIVATE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::VisibilityLevel_IsValid(val))) {
            _internal_set_visibility_level(static_cast<::bgs::protocol::club::v1::VisibilityLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 member_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_member_count(&has_bits);
          member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leader(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string short_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.Club.short_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Club::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.Club)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.Club.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.Club.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::broadcast(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::avatar(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8 [default = PRIVACY_LEVEL_CLOSED];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_privacy_level(), target);
  }

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9 [default = VISIBILITY_LEVEL_PRIVATE];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_visibility_level(), target);
  }

  // optional uint32 member_count = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_member_count(), target);
  }

  // optional uint64 creation_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_creation_time(), target);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stream_position(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::role_set(this), target, stream);
  }

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leader_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_leader(i), target, stream);
  }

  // optional string short_name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.Club.short_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_short_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.Club)
  return target;
}

size_t Club::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.Club)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
  total_size += 1UL * this->_internal_leader_size();
  for (const auto& msg : this->leader_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string short_name = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatar_);
    }

    // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_position_);
    }

    // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *role_set_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8 [default = PRIVACY_LEVEL_CLOSED];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_privacy_level());
    }

    // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9 [default = VISIBILITY_LEVEL_PRIVATE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility_level());
    }

    // optional uint64 creation_time = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

    // optional uint32 member_count = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_member_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Club::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.Club)
  GOOGLE_DCHECK_NE(&from, this);
  const Club* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Club>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.Club)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.Club)
    MergeFrom(*source);
  }
}

void Club::MergeFrom(const Club& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.Club)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  leader_.MergeFrom(from.leader_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_broadcast()->::bgs::protocol::club::v1::Broadcast::MergeFrom(from._internal_broadcast());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from._internal_avatar());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_stream_position()->::bgs::protocol::club::v1::StreamPosition::MergeFrom(from._internal_stream_position());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_role_set()->::bgs::protocol::club::v1::ClubRoleSet::MergeFrom(from._internal_role_set());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      privacy_level_ = from.privacy_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      visibility_level_ = from.visibility_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Club::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.Club)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Club::CopyFrom(const Club& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.Club)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Club::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(leader_)) return false;
  if (_internal_has_broadcast()) {
    if (!broadcast_->IsInitialized()) return false;
  }
  return true;
}

void Club::InternalSwap(Club* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  leader_.InternalSwap(&other->leader_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(broadcast_, other->broadcast_);
  swap(avatar_, other->avatar_);
  swap(stream_position_, other->stream_position_);
  swap(role_set_, other->role_set_);
  swap(id_, other->id_);
  swap(privacy_level_, other->privacy_level_);
  swap(visibility_level_, other->visibility_level_);
  swap(creation_time_, other->creation_time_);
  swap(member_count_, other->member_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Club::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubDescription::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubDescription_default_instance_._instance.get_mutable()->type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(
      ::bgs::protocol::club::v1::UniqueClubType::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubDescription_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(
      ::bgs::protocol::club::v1::AvatarId::internal_default_instance());
}
class ClubDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubDescription>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::club::v1::UniqueClubType& type(const ClubDescription* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::AvatarId& avatar(const ClubDescription* msg);
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_visibility_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::bgs::protocol::club::v1::UniqueClubType&
ClubDescription::_Internal::type(const ClubDescription* msg) {
  return *msg->type_;
}
const ::bgs::protocol::club::v1::AvatarId&
ClubDescription::_Internal::avatar(const ClubDescription* msg) {
  return *msg->avatar_;
}
void ClubDescription::clear_leader() {
  leader_.Clear();
}
ClubDescription::ClubDescription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubDescription)
}
ClubDescription::ClubDescription(const ClubDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      leader_(from.leader_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_type()) {
    type_ = new ::bgs::protocol::club::v1::UniqueClubType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_avatar()) {
    avatar_ = new ::bgs::protocol::club::v1::AvatarId(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubDescription)
}

void ClubDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(member_count_));
}

ClubDescription::~ClubDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubDescription)
  SharedDtor();
}

void ClubDescription::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete avatar_;
}

void ClubDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubDescription& ClubDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void ClubDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(avatar_ != nullptr);
      avatar_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_time_) -
        reinterpret_cast<char*>(&id_)) + sizeof(creation_time_));
  }
  member_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubDescription.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubDescription.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::PrivacyLevel_IsValid(val))) {
            _internal_set_privacy_level(static_cast<::bgs::protocol::club::v1::PrivacyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7 [default = VISIBILITY_LEVEL_PRIVATE];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::VisibilityLevel_IsValid(val))) {
            _internal_set_visibility_level(static_cast<::bgs::protocol::club::v1::VisibilityLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 member_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_member_count(&has_bits);
          member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leader(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubDescription.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubDescription.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::avatar(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_privacy_level(), target);
  }

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7 [default = VISIBILITY_LEVEL_PRIVATE];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_visibility_level(), target);
  }

  // optional uint32 member_count = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_member_count(), target);
  }

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leader_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_leader(i), target, stream);
  }

  // optional uint64 creation_time = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_creation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubDescription)
  return target;
}

size_t ClubDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
  total_size += 1UL * this->_internal_leader_size();
  for (const auto& msg : this->leader_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatar_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_privacy_level());
    }

    // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7 [default = VISIBILITY_LEVEL_PRIVATE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility_level());
    }

    // optional uint64 creation_time = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

  }
  // optional uint32 member_count = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_member_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubDescription)
    MergeFrom(*source);
  }
}

void ClubDescription::MergeFrom(const ClubDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leader_.MergeFrom(from.leader_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from._internal_avatar());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      privacy_level_ = from.privacy_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      visibility_level_ = from.visibility_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_member_count(from._internal_member_count());
  }
}

void ClubDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubDescription::CopyFrom(const ClubDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubDescription::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(leader_)) return false;
  return true;
}

void ClubDescription::InternalSwap(ClubDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  leader_.InternalSwap(&other->leader_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(avatar_, other->avatar_);
  swap(id_, other->id_);
  swap(privacy_level_, other->privacy_level_);
  swap(visibility_level_, other->visibility_level_);
  swap(creation_time_, other->creation_time_);
  swap(member_count_, other->member_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubView::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubView_default_instance_._instance.get_mutable()->marker_ = const_cast< ::bgs::protocol::ViewMarker*>(
      ::bgs::protocol::ViewMarker::internal_default_instance());
}
class ClubView::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubView>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::ViewMarker& marker(const ClubView* msg);
  static void set_has_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::ViewMarker&
ClubView::_Internal::marker(const ClubView* msg) {
  return *msg->marker_;
}
void ClubView::clear_marker() {
  if (marker_ != nullptr) marker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClubView::ClubView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubView)
}
ClubView::ClubView(const ClubView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_marker()) {
    marker_ = new ::bgs::protocol::ViewMarker(*from.marker_);
  } else {
    marker_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubView)
}

void ClubView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubView_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  ::memset(&marker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&marker_)) + sizeof(club_id_));
}

ClubView::~ClubView() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubView)
  SharedDtor();
}

void ClubView::SharedDtor() {
  if (this != internal_default_instance()) delete marker_;
}

void ClubView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubView& ClubView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubView_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void ClubView::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(marker_ != nullptr);
    marker_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ViewMarker marker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.ViewMarker marker = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::marker(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubView)
  return target;
}

size_t ClubView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.ViewMarker marker = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *marker_);
    }

    // optional uint64 club_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubView)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubView)
    MergeFrom(*source);
  }
}

void ClubView::MergeFrom(const ClubView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_marker()->::bgs::protocol::ViewMarker::MergeFrom(from._internal_marker());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubView::CopyFrom(const ClubView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubView::IsInitialized() const {
  return true;
}

void ClubView::InternalSwap(ClubView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(marker_, other->marker_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubStateOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubStateOptions_default_instance_._instance.get_mutable()->broadcast_ = const_cast< ::bgs::protocol::club::v1::SetBroadcastOptions*>(
      ::bgs::protocol::club::v1::SetBroadcastOptions::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubStateOptions_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(
      ::bgs::protocol::club::v1::AvatarId::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubStateOptions_default_instance_._instance.get_mutable()->stream_position_ = const_cast< ::bgs::protocol::club::v1::StreamPosition*>(
      ::bgs::protocol::club::v1::StreamPosition::internal_default_instance());
}
class ClubStateOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubStateOptions>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::SetBroadcastOptions& broadcast(const ClubStateOptions* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::AvatarId& avatar(const ClubStateOptions* msg);
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::bgs::protocol::club::v1::StreamPosition& stream_position(const ClubStateOptions* msg);
  static void set_has_stream_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::SetBroadcastOptions&
ClubStateOptions::_Internal::broadcast(const ClubStateOptions* msg) {
  return *msg->broadcast_;
}
const ::bgs::protocol::club::v1::AvatarId&
ClubStateOptions::_Internal::avatar(const ClubStateOptions* msg) {
  return *msg->avatar_;
}
const ::bgs::protocol::club::v1::StreamPosition&
ClubStateOptions::_Internal::stream_position(const ClubStateOptions* msg) {
  return *msg->stream_position_;
}
void ClubStateOptions::clear_attribute() {
  attribute_.Clear();
}
void ClubStateOptions::clear_stream_position() {
  if (stream_position_ != nullptr) stream_position_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ClubStateOptions::ClubStateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStateOptions)
}
ClubStateOptions::ClubStateOptions(const ClubStateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_name()) {
    short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
  }
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::bgs::protocol::club::v1::SetBroadcastOptions(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  if (from._internal_has_avatar()) {
    avatar_ = new ::bgs::protocol::club::v1::AvatarId(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  if (from._internal_has_stream_position()) {
    stream_position_ = new ::bgs::protocol::club::v1::StreamPosition(*from.stream_position_);
  } else {
    stream_position_ = nullptr;
  }
  privacy_level_ = from.privacy_level_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStateOptions)
}

void ClubStateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privacy_level_) -
      reinterpret_cast<char*>(&broadcast_)) + sizeof(privacy_level_));
}

ClubStateOptions::~ClubStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStateOptions)
  SharedDtor();
}

void ClubStateOptions::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete broadcast_;
  if (this != internal_default_instance()) delete avatar_;
  if (this != internal_default_instance()) delete stream_position_;
}

void ClubStateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubStateOptions& ClubStateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void ClubStateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      short_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(avatar_ != nullptr);
      avatar_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(stream_position_ != nullptr);
      stream_position_->Clear();
    }
  }
  privacy_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubStateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.v2.Attribute attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubStateOptions.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubStateOptions.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::PrivacyLevel_IsValid(val))) {
            _internal_set_privacy_level(static_cast<::bgs::protocol::club::v1::PrivacyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string short_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubStateOptions.short_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubStateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attribute(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubStateOptions.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubStateOptions.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::broadcast(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::avatar(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_privacy_level(), target);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stream_position(this), target, stream);
  }

  // optional string short_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubStateOptions.short_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_short_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubStateOptions)
  return target;
}

size_t ClubStateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubStateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string short_name = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatar_);
    }

    // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_position_);
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_privacy_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubStateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubStateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubStateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubStateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubStateOptions)
    MergeFrom(*source);
  }
}

void ClubStateOptions::MergeFrom(const ClubStateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_broadcast()->::bgs::protocol::club::v1::SetBroadcastOptions::MergeFrom(from._internal_broadcast());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from._internal_avatar());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_stream_position()->::bgs::protocol::club::v1::StreamPosition::MergeFrom(from._internal_stream_position());
    }
    if (cached_has_bits & 0x00000040u) {
      privacy_level_ = from.privacy_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubStateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubStateOptions::CopyFrom(const ClubStateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubStateOptions::IsInitialized() const {
  return true;
}

void ClubStateOptions::InternalSwap(ClubStateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_, other->broadcast_);
  swap(avatar_, other->avatar_);
  swap(stream_position_, other->stream_position_);
  swap(privacy_level_, other->privacy_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubStateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubStateAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubStateAssignment_default_instance_._instance.get_mutable()->broadcast_ = const_cast< ::bgs::protocol::club::v1::Broadcast*>(
      ::bgs::protocol::club::v1::Broadcast::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubStateAssignment_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(
      ::bgs::protocol::club::v1::AvatarId::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubStateAssignment_default_instance_._instance.get_mutable()->stream_position_ = const_cast< ::bgs::protocol::club::v1::StreamPosition*>(
      ::bgs::protocol::club::v1::StreamPosition::internal_default_instance());
}
class ClubStateAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubStateAssignment>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::Broadcast& broadcast(const ClubStateAssignment* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::AvatarId& avatar(const ClubStateAssignment* msg);
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::bgs::protocol::club::v1::StreamPosition& stream_position(const ClubStateAssignment* msg);
  static void set_has_stream_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::Broadcast&
ClubStateAssignment::_Internal::broadcast(const ClubStateAssignment* msg) {
  return *msg->broadcast_;
}
const ::bgs::protocol::club::v1::AvatarId&
ClubStateAssignment::_Internal::avatar(const ClubStateAssignment* msg) {
  return *msg->avatar_;
}
const ::bgs::protocol::club::v1::StreamPosition&
ClubStateAssignment::_Internal::stream_position(const ClubStateAssignment* msg) {
  return *msg->stream_position_;
}
void ClubStateAssignment::clear_attribute() {
  attribute_.Clear();
}
void ClubStateAssignment::clear_stream_position() {
  if (stream_position_ != nullptr) stream_position_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ClubStateAssignment::ClubStateAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStateAssignment)
}
ClubStateAssignment::ClubStateAssignment(const ClubStateAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_name()) {
    short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
  }
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::bgs::protocol::club::v1::Broadcast(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  if (from._internal_has_avatar()) {
    avatar_ = new ::bgs::protocol::club::v1::AvatarId(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  if (from._internal_has_stream_position()) {
    stream_position_ = new ::bgs::protocol::club::v1::StreamPosition(*from.stream_position_);
  } else {
    stream_position_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&privacy_level_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(privacy_level_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStateAssignment)
}

void ClubStateAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privacy_level_) -
      reinterpret_cast<char*>(&broadcast_)) + sizeof(privacy_level_));
}

ClubStateAssignment::~ClubStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStateAssignment)
  SharedDtor();
}

void ClubStateAssignment::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete broadcast_;
  if (this != internal_default_instance()) delete avatar_;
  if (this != internal_default_instance()) delete stream_position_;
}

void ClubStateAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubStateAssignment& ClubStateAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void ClubStateAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubStateAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      short_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(broadcast_ != nullptr);
      broadcast_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(avatar_ != nullptr);
      avatar_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(stream_position_ != nullptr);
      stream_position_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&privacy_level_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(privacy_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubStateAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubStateAssignment.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubStateAssignment.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_CLOSED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::PrivacyLevel_IsValid(val))) {
            _internal_set_privacy_level(static_cast<::bgs::protocol::club::v1::PrivacyLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string short_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubStateAssignment.short_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubStateAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubStateAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubStateAssignment.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubStateAssignment.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::broadcast(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::avatar(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_CLOSED];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_privacy_level(), target);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stream_position(this), target, stream);
  }

  // optional string short_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubStateAssignment.short_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_short_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubStateAssignment)
  return target;
}

size_t ClubStateAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubStateAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string short_name = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatar_);
    }

    // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_position_);
    }

    // optional uint64 club_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_CLOSED];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_privacy_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubStateAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubStateAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubStateAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubStateAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubStateAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubStateAssignment)
    MergeFrom(*source);
  }
}

void ClubStateAssignment::MergeFrom(const ClubStateAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubStateAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      short_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.short_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_broadcast()->::bgs::protocol::club::v1::Broadcast::MergeFrom(from._internal_broadcast());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from._internal_avatar());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_stream_position()->::bgs::protocol::club::v1::StreamPosition::MergeFrom(from._internal_stream_position());
    }
    if (cached_has_bits & 0x00000040u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      privacy_level_ = from.privacy_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubStateAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubStateAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubStateAssignment::CopyFrom(const ClubStateAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubStateAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubStateAssignment::IsInitialized() const {
  if (_internal_has_broadcast()) {
    if (!broadcast_->IsInitialized()) return false;
  }
  return true;
}

void ClubStateAssignment::InternalSwap(ClubStateAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_, other->broadcast_);
  swap(avatar_, other->avatar_);
  swap(stream_position_, other->stream_position_);
  swap(club_id_, other->club_id_);
  swap(privacy_level_, other->privacy_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubStateAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamSettings::InitAsDefaultInstance() {
}
class StreamSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamSettings>()._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StreamSettings::StreamSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamSettings)
}
StreamSettings::StreamSettings(const StreamSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(filter_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamSettings)
}

void StreamSettings::SharedCtor() {
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(filter_));
}

StreamSettings::~StreamSettings() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamSettings)
  SharedDtor();
}

void StreamSettings::SharedDtor() {
}

void StreamSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamSettings& StreamSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void StreamSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(filter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2 [default = STREAM_NOTIFICATION_FILTER_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::StreamNotificationFilter_IsValid(val))) {
            _internal_set_filter(static_cast<::bgs::protocol::club::v1::StreamNotificationFilter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2 [default = STREAM_NOTIFICATION_FILTER_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamSettings)
  return target;
}

size_t StreamSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 stream_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2 [default = STREAM_NOTIFICATION_FILTER_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamSettings)
    MergeFrom(*source);
  }
}

void StreamSettings::MergeFrom(const StreamSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      filter_ = from.filter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSettings::CopyFrom(const StreamSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSettings::IsInitialized() const {
  return true;
}

void StreamSettings::InternalSwap(StreamSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stream_id_, other->stream_id_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubSettings::InitAsDefaultInstance() {
}
class ClubSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSettings>()._has_bits_);
  static void set_has_stream_notification_filter_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ClubSettings::clear_attribute() {
  attribute_.Clear();
}
ClubSettings::ClubSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSettings)
}
ClubSettings::ClubSettings(const ClubSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_(from.stream_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_notification_filter_all_ = from.stream_notification_filter_all_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSettings)
}

void ClubSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  stream_notification_filter_all_ = false;
}

ClubSettings::~ClubSettings() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSettings)
  SharedDtor();
}

void ClubSettings::SharedDtor() {
}

void ClubSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSettings& ClubSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void ClubSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.Clear();
  attribute_.Clear();
  stream_notification_filter_all_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool stream_notification_filter_all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_notification_filter_all(&has_bits);
          stream_notification_filter_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stream_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stream(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool stream_notification_filter_all = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_stream_notification_filter_all(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSettings)
  return target;
}

size_t ClubSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
  total_size += 1UL * this->_internal_stream_size();
  for (const auto& msg : this->stream_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool stream_notification_filter_all = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSettings)
    MergeFrom(*source);
  }
}

void ClubSettings::MergeFrom(const ClubSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_.MergeFrom(from.stream_);
  attribute_.MergeFrom(from.attribute_);
  if (from._internal_has_stream_notification_filter_all()) {
    _internal_set_stream_notification_filter_all(from._internal_stream_notification_filter_all());
  }
}

void ClubSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSettings::CopyFrom(const ClubSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSettings::IsInitialized() const {
  return true;
}

void ClubSettings::InternalSwap(ClubSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_.InternalSwap(&other->stream_);
  attribute_.InternalSwap(&other->attribute_);
  swap(stream_notification_filter_all_, other->stream_notification_filter_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubSettingsOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubSettingsOptions_default_instance_._instance.get_mutable()->settings_ = const_cast< ::bgs::protocol::club::v1::ClubSettings*>(
      ::bgs::protocol::club::v1::ClubSettings::internal_default_instance());
}
class ClubSettingsOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSettingsOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubSettings& settings(const ClubSettingsOptions* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::ClubSettings&
ClubSettingsOptions::_Internal::settings(const ClubSettingsOptions* msg) {
  return *msg->settings_;
}
ClubSettingsOptions::ClubSettingsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSettingsOptions)
}
ClubSettingsOptions::ClubSettingsOptions(const ClubSettingsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_(from.stream_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::bgs::protocol::club::v1::ClubSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSettingsOptions)
}

void ClubSettingsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(version_));
}

ClubSettingsOptions::~ClubSettingsOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSettingsOptions)
  SharedDtor();
}

void ClubSettingsOptions::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
}

void ClubSettingsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSettingsOptions& ClubSettingsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void ClubSettingsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSettingsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(settings_ != nullptr);
    settings_->Clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSettingsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSettingsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSettingsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stream_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stream(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settings(this), target, stream);
  }

  // optional uint32 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSettingsOptions)
  return target;
}

size_t ClubSettingsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSettingsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  total_size += 1UL * this->_internal_stream_size();
  for (const auto& msg : this->stream_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional uint32 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSettingsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSettingsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSettingsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSettingsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSettingsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSettingsOptions)
    MergeFrom(*source);
  }
}

void ClubSettingsOptions::MergeFrom(const ClubSettingsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSettingsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_.MergeFrom(from.stream_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_settings()->::bgs::protocol::club::v1::ClubSettings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubSettingsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSettingsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSettingsOptions::CopyFrom(const ClubSettingsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSettingsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSettingsOptions::IsInitialized() const {
  return true;
}

void ClubSettingsOptions::InternalSwap(ClubSettingsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_.InternalSwap(&other->stream_);
  swap(settings_, other->settings_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSettingsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubSettingsAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubSettingsAssignment_default_instance_._instance.get_mutable()->settings_ = const_cast< ::bgs::protocol::club::v1::ClubSettings*>(
      ::bgs::protocol::club::v1::ClubSettings::internal_default_instance());
}
class ClubSettingsAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSettingsAssignment>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubSettings& settings(const ClubSettingsAssignment* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubSettings&
ClubSettingsAssignment::_Internal::settings(const ClubSettingsAssignment* msg) {
  return *msg->settings_;
}
ClubSettingsAssignment::ClubSettingsAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSettingsAssignment)
}
ClubSettingsAssignment::ClubSettingsAssignment(const ClubSettingsAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_(from.stream_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::bgs::protocol::club::v1::ClubSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSettingsAssignment)
}

void ClubSettingsAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  settings_ = nullptr;
}

ClubSettingsAssignment::~ClubSettingsAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSettingsAssignment)
  SharedDtor();
}

void ClubSettingsAssignment::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
}

void ClubSettingsAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSettingsAssignment& ClubSettingsAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base);
  return *internal_default_instance();
}


void ClubSettingsAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(settings_ != nullptr);
    settings_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSettingsAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSettingsAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stream_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stream(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSettingsAssignment)
  return target;
}

size_t ClubSettingsAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  total_size += 1UL * this->_internal_stream_size();
  for (const auto& msg : this->stream_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSettingsAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSettingsAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSettingsAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSettingsAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSettingsAssignment)
    MergeFrom(*source);
  }
}

void ClubSettingsAssignment::MergeFrom(const ClubSettingsAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_.MergeFrom(from.stream_);
  if (from._internal_has_settings()) {
    _internal_mutable_settings()->::bgs::protocol::club::v1::ClubSettings::MergeFrom(from._internal_settings());
  }
}

void ClubSettingsAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSettingsAssignment::CopyFrom(const ClubSettingsAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSettingsAssignment::IsInitialized() const {
  return true;
}

void ClubSettingsAssignment::InternalSwap(ClubSettingsAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_.InternalSwap(&other->stream_);
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSettingsAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AvatarId* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AvatarId >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AvatarId >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SetBroadcastOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SetBroadcastOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SetBroadcastOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::Broadcast* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::Broadcast >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::Broadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UniqueClubType* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UniqueClubType >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UniqueClubType >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubCreateOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubCreateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubCreateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::Club* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::Club >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::Club >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubDescription* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubDescription >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubView* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubView >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubView >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubStateOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubStateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubStateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubStateAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubStateAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubStateAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamSettings* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamSettings >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSettings* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSettings >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSettingsOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSettingsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSettingsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSettingsAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSettingsAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSettingsAssignment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
