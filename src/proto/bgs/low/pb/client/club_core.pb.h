// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_core.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_enum.pb.h"
#include "bgs/low/pb/client/club_role.pb.h"
#include "bgs/low/pb/client/club_member.pb.h"
#include "bgs/low/pb/client/club_stream.pb.h"
#include "bgs/low/pb/client/api/client/v2/attribute_types.pb.h"
#include "bgs/low/pb/client/event_view_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class AvatarId;
class AvatarIdDefaultTypeInternal;
extern AvatarIdDefaultTypeInternal _AvatarId_default_instance_;
class Broadcast;
class BroadcastDefaultTypeInternal;
extern BroadcastDefaultTypeInternal _Broadcast_default_instance_;
class Club;
class ClubDefaultTypeInternal;
extern ClubDefaultTypeInternal _Club_default_instance_;
class ClubCreateOptions;
class ClubCreateOptionsDefaultTypeInternal;
extern ClubCreateOptionsDefaultTypeInternal _ClubCreateOptions_default_instance_;
class ClubDescription;
class ClubDescriptionDefaultTypeInternal;
extern ClubDescriptionDefaultTypeInternal _ClubDescription_default_instance_;
class ClubSettings;
class ClubSettingsDefaultTypeInternal;
extern ClubSettingsDefaultTypeInternal _ClubSettings_default_instance_;
class ClubSettingsAssignment;
class ClubSettingsAssignmentDefaultTypeInternal;
extern ClubSettingsAssignmentDefaultTypeInternal _ClubSettingsAssignment_default_instance_;
class ClubSettingsOptions;
class ClubSettingsOptionsDefaultTypeInternal;
extern ClubSettingsOptionsDefaultTypeInternal _ClubSettingsOptions_default_instance_;
class ClubStateAssignment;
class ClubStateAssignmentDefaultTypeInternal;
extern ClubStateAssignmentDefaultTypeInternal _ClubStateAssignment_default_instance_;
class ClubStateOptions;
class ClubStateOptionsDefaultTypeInternal;
extern ClubStateOptionsDefaultTypeInternal _ClubStateOptions_default_instance_;
class ClubView;
class ClubViewDefaultTypeInternal;
extern ClubViewDefaultTypeInternal _ClubView_default_instance_;
class SetBroadcastOptions;
class SetBroadcastOptionsDefaultTypeInternal;
extern SetBroadcastOptionsDefaultTypeInternal _SetBroadcastOptions_default_instance_;
class StreamSettings;
class StreamSettingsDefaultTypeInternal;
extern StreamSettingsDefaultTypeInternal _StreamSettings_default_instance_;
class UniqueClubType;
class UniqueClubTypeDefaultTypeInternal;
extern UniqueClubTypeDefaultTypeInternal _UniqueClubType_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::AvatarId* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AvatarId>(Arena*);
template<> ::bgs::protocol::club::v1::Broadcast* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::Broadcast>(Arena*);
template<> ::bgs::protocol::club::v1::Club* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::Club>(Arena*);
template<> ::bgs::protocol::club::v1::ClubCreateOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubCreateOptions>(Arena*);
template<> ::bgs::protocol::club::v1::ClubDescription* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubDescription>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSettings* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSettings>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSettingsAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSettingsAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSettingsOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSettingsOptions>(Arena*);
template<> ::bgs::protocol::club::v1::ClubStateAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubStateAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::ClubStateOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubStateOptions>(Arena*);
template<> ::bgs::protocol::club::v1::ClubView* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubView>(Arena*);
template<> ::bgs::protocol::club::v1::SetBroadcastOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SetBroadcastOptions>(Arena*);
template<> ::bgs::protocol::club::v1::StreamSettings* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamSettings>(Arena*);
template<> ::bgs::protocol::club::v1::UniqueClubType* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UniqueClubType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class AvatarId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AvatarId) */ {
 public:
  AvatarId();
  virtual ~AvatarId();

  AvatarId(const AvatarId& from);
  AvatarId(AvatarId&& from) noexcept
    : AvatarId() {
    *this = ::std::move(from);
  }

  inline AvatarId& operator=(const AvatarId& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvatarId& operator=(AvatarId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AvatarId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvatarId* internal_default_instance() {
    return reinterpret_cast<const AvatarId*>(
               &_AvatarId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AvatarId& a, AvatarId& b) {
    a.Swap(&b);
  }
  inline void Swap(AvatarId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AvatarId* New() const final {
    return CreateMaybeMessage<AvatarId>(nullptr);
  }

  AvatarId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AvatarId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AvatarId& from);
  void MergeFrom(const AvatarId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvatarId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AvatarId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AvatarId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class SetBroadcastOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SetBroadcastOptions) */ {
 public:
  SetBroadcastOptions();
  virtual ~SetBroadcastOptions();

  SetBroadcastOptions(const SetBroadcastOptions& from);
  SetBroadcastOptions(SetBroadcastOptions&& from) noexcept
    : SetBroadcastOptions() {
    *this = ::std::move(from);
  }

  inline SetBroadcastOptions& operator=(const SetBroadcastOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBroadcastOptions& operator=(SetBroadcastOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBroadcastOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBroadcastOptions* internal_default_instance() {
    return reinterpret_cast<const SetBroadcastOptions*>(
               &_SetBroadcastOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetBroadcastOptions& a, SetBroadcastOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBroadcastOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBroadcastOptions* New() const final {
    return CreateMaybeMessage<SetBroadcastOptions>(nullptr);
  }

  SetBroadcastOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBroadcastOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBroadcastOptions& from);
  void MergeFrom(const SetBroadcastOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBroadcastOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SetBroadcastOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // optional string content = 1;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SetBroadcastOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class Broadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.Broadcast) */ {
 public:
  Broadcast();
  virtual ~Broadcast();

  Broadcast(const Broadcast& from);
  Broadcast(Broadcast&& from) noexcept
    : Broadcast() {
    *this = ::std::move(from);
  }

  inline Broadcast& operator=(const Broadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline Broadcast& operator=(Broadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Broadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Broadcast* internal_default_instance() {
    return reinterpret_cast<const Broadcast*>(
               &_Broadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Broadcast& a, Broadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(Broadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Broadcast* New() const final {
    return CreateMaybeMessage<Broadcast>(nullptr);
  }

  Broadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Broadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Broadcast& from);
  void MergeFrom(const Broadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Broadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.Broadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kCreatorFieldNumber = 2,
    kCreationTimeFieldNumber = 3,
  };
  // optional string content = 1;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  bool has_creator() const;
  private:
  bool _internal_has_creator() const;
  public:
  void clear_creator();
  const ::bgs::protocol::club::v1::MemberDescription& creator() const;
  ::bgs::protocol::club::v1::MemberDescription* release_creator();
  ::bgs::protocol::club::v1::MemberDescription* mutable_creator();
  void set_allocated_creator(::bgs::protocol::club::v1::MemberDescription* creator);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_creator() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_creator();
  public:

  // optional uint64 creation_time = 3;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.Broadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::bgs::protocol::club::v1::MemberDescription* creator_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class UniqueClubType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UniqueClubType) */ {
 public:
  UniqueClubType();
  virtual ~UniqueClubType();

  UniqueClubType(const UniqueClubType& from);
  UniqueClubType(UniqueClubType&& from) noexcept
    : UniqueClubType() {
    *this = ::std::move(from);
  }

  inline UniqueClubType& operator=(const UniqueClubType& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniqueClubType& operator=(UniqueClubType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniqueClubType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniqueClubType* internal_default_instance() {
    return reinterpret_cast<const UniqueClubType*>(
               &_UniqueClubType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UniqueClubType& a, UniqueClubType& b) {
    a.Swap(&b);
  }
  inline void Swap(UniqueClubType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniqueClubType* New() const final {
    return CreateMaybeMessage<UniqueClubType>(nullptr);
  }

  UniqueClubType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniqueClubType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniqueClubType& from);
  void MergeFrom(const UniqueClubType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniqueClubType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UniqueClubType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kProgramFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional fixed32 program = 1;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UniqueClubType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class ClubCreateOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubCreateOptions) */ {
 public:
  ClubCreateOptions();
  virtual ~ClubCreateOptions();

  ClubCreateOptions(const ClubCreateOptions& from);
  ClubCreateOptions(ClubCreateOptions&& from) noexcept
    : ClubCreateOptions() {
    *this = ::std::move(from);
  }

  inline ClubCreateOptions& operator=(const ClubCreateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubCreateOptions& operator=(ClubCreateOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubCreateOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubCreateOptions* internal_default_instance() {
    return reinterpret_cast<const ClubCreateOptions*>(
               &_ClubCreateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClubCreateOptions& a, ClubCreateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubCreateOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubCreateOptions* New() const final {
    return CreateMaybeMessage<ClubCreateOptions>(nullptr);
  }

  ClubCreateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubCreateOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubCreateOptions& from);
  void MergeFrom(const ClubCreateOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubCreateOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubCreateOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kShortNameFieldNumber = 7,
    kTypeFieldNumber = 1,
    kAvatarFieldNumber = 5,
    kMemberFieldNumber = 10,
    kStreamFieldNumber = 11,
    kPrivacyLevelFieldNumber = 6,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string short_name = 7;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  void set_short_name(const std::string& value);
  void set_short_name(std::string&& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  std::string* mutable_short_name();
  std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  ::bgs::protocol::club::v1::UniqueClubType* release_type();
  ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);
  private:
  const ::bgs::protocol::club::v1::UniqueClubType& _internal_type() const;
  ::bgs::protocol::club::v1::UniqueClubType* _internal_mutable_type();
  public:

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  ::bgs::protocol::club::v1::AvatarId* release_avatar();
  ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);
  private:
  const ::bgs::protocol::club::v1::AvatarId& _internal_avatar() const;
  ::bgs::protocol::club::v1::AvatarId* _internal_mutable_avatar();
  public:

  // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
  bool has_member() const;
  private:
  bool _internal_has_member() const;
  public:
  void clear_member();
  const ::bgs::protocol::club::v1::CreateMemberOptions& member() const;
  ::bgs::protocol::club::v1::CreateMemberOptions* release_member();
  ::bgs::protocol::club::v1::CreateMemberOptions* mutable_member();
  void set_allocated_member(::bgs::protocol::club::v1::CreateMemberOptions* member);
  private:
  const ::bgs::protocol::club::v1::CreateMemberOptions& _internal_member() const;
  ::bgs::protocol::club::v1::CreateMemberOptions* _internal_mutable_member();
  public:

  // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::bgs::protocol::club::v1::CreateStreamOptions& stream() const;
  ::bgs::protocol::club::v1::CreateStreamOptions* release_stream();
  ::bgs::protocol::club::v1::CreateStreamOptions* mutable_stream();
  void set_allocated_stream(::bgs::protocol::club::v1::CreateStreamOptions* stream);
  private:
  const ::bgs::protocol::club::v1::CreateStreamOptions& _internal_stream() const;
  ::bgs::protocol::club::v1::CreateStreamOptions* _internal_mutable_stream();
  public:

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
  bool has_privacy_level() const;
  private:
  bool _internal_has_privacy_level() const;
  public:
  void clear_privacy_level();
  ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  private:
  ::bgs::protocol::club::v1::PrivacyLevel _internal_privacy_level() const;
  void _internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubCreateOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  ::bgs::protocol::club::v1::CreateMemberOptions* member_;
  ::bgs::protocol::club::v1::CreateStreamOptions* stream_;
  int privacy_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class Club :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.Club) */ {
 public:
  Club();
  virtual ~Club();

  Club(const Club& from);
  Club(Club&& from) noexcept
    : Club() {
    *this = ::std::move(from);
  }

  inline Club& operator=(const Club& from) {
    CopyFrom(from);
    return *this;
  }
  inline Club& operator=(Club&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Club& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Club* internal_default_instance() {
    return reinterpret_cast<const Club*>(
               &_Club_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Club& a, Club& b) {
    a.Swap(&b);
  }
  inline void Swap(Club* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Club* New() const final {
    return CreateMaybeMessage<Club>(nullptr);
  }

  Club* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Club>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Club& from);
  void MergeFrom(const Club& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Club* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.Club";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 3,
    kLeaderFieldNumber = 14,
    kNameFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kShortNameFieldNumber = 15,
    kTypeFieldNumber = 2,
    kBroadcastFieldNumber = 6,
    kAvatarFieldNumber = 7,
    kStreamPositionFieldNumber = 12,
    kRoleSetFieldNumber = 13,
    kIdFieldNumber = 1,
    kPrivacyLevelFieldNumber = 8,
    kVisibilityLevelFieldNumber = 9,
    kCreationTimeFieldNumber = 11,
    kMemberCountFieldNumber = 10,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
  int leader_size() const;
  private:
  int _internal_leader_size() const;
  public:
  void clear_leader();
  ::bgs::protocol::club::v1::MemberDescription* mutable_leader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >*
      mutable_leader();
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_leader(int index) const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_add_leader();
  public:
  const ::bgs::protocol::club::v1::MemberDescription& leader(int index) const;
  ::bgs::protocol::club::v1::MemberDescription* add_leader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >&
      leader() const;

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 5;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string short_name = 15;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  void set_short_name(const std::string& value);
  void set_short_name(std::string&& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  std::string* mutable_short_name();
  std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  ::bgs::protocol::club::v1::UniqueClubType* release_type();
  ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);
  private:
  const ::bgs::protocol::club::v1::UniqueClubType& _internal_type() const;
  ::bgs::protocol::club::v1::UniqueClubType* _internal_mutable_type();
  public:

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  const ::bgs::protocol::club::v1::Broadcast& broadcast() const;
  ::bgs::protocol::club::v1::Broadcast* release_broadcast();
  ::bgs::protocol::club::v1::Broadcast* mutable_broadcast();
  void set_allocated_broadcast(::bgs::protocol::club::v1::Broadcast* broadcast);
  private:
  const ::bgs::protocol::club::v1::Broadcast& _internal_broadcast() const;
  ::bgs::protocol::club::v1::Broadcast* _internal_mutable_broadcast();
  public:

  // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  ::bgs::protocol::club::v1::AvatarId* release_avatar();
  ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);
  private:
  const ::bgs::protocol::club::v1::AvatarId& _internal_avatar() const;
  ::bgs::protocol::club::v1::AvatarId* _internal_mutable_avatar();
  public:

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
  bool has_stream_position() const;
  private:
  bool _internal_has_stream_position() const;
  public:
  void clear_stream_position();
  const ::bgs::protocol::club::v1::StreamPosition& stream_position() const;
  ::bgs::protocol::club::v1::StreamPosition* release_stream_position();
  ::bgs::protocol::club::v1::StreamPosition* mutable_stream_position();
  void set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position);
  private:
  const ::bgs::protocol::club::v1::StreamPosition& _internal_stream_position() const;
  ::bgs::protocol::club::v1::StreamPosition* _internal_mutable_stream_position();
  public:

  // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
  bool has_role_set() const;
  private:
  bool _internal_has_role_set() const;
  public:
  void clear_role_set();
  const ::bgs::protocol::club::v1::ClubRoleSet& role_set() const;
  ::bgs::protocol::club::v1::ClubRoleSet* release_role_set();
  ::bgs::protocol::club::v1::ClubRoleSet* mutable_role_set();
  void set_allocated_role_set(::bgs::protocol::club::v1::ClubRoleSet* role_set);
  private:
  const ::bgs::protocol::club::v1::ClubRoleSet& _internal_role_set() const;
  ::bgs::protocol::club::v1::ClubRoleSet* _internal_mutable_role_set();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8 [default = PRIVACY_LEVEL_CLOSED];
  bool has_privacy_level() const;
  private:
  bool _internal_has_privacy_level() const;
  public:
  void clear_privacy_level();
  ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  private:
  ::bgs::protocol::club::v1::PrivacyLevel _internal_privacy_level() const;
  void _internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  public:

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9 [default = VISIBILITY_LEVEL_PRIVATE];
  bool has_visibility_level() const;
  private:
  bool _internal_has_visibility_level() const;
  public:
  void clear_visibility_level();
  ::bgs::protocol::club::v1::VisibilityLevel visibility_level() const;
  void set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value);
  private:
  ::bgs::protocol::club::v1::VisibilityLevel _internal_visibility_level() const;
  void _internal_set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value);
  public:

  // optional uint64 creation_time = 11;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 member_count = 10;
  bool has_member_count() const;
  private:
  bool _internal_has_member_count() const;
  public:
  void clear_member_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_count() const;
  void set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_count() const;
  void _internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.Club)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription > leader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  ::bgs::protocol::club::v1::Broadcast* broadcast_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  ::bgs::protocol::club::v1::StreamPosition* stream_position_;
  ::bgs::protocol::club::v1::ClubRoleSet* role_set_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int privacy_level_;
  int visibility_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_count_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class ClubDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubDescription) */ {
 public:
  ClubDescription();
  virtual ~ClubDescription();

  ClubDescription(const ClubDescription& from);
  ClubDescription(ClubDescription&& from) noexcept
    : ClubDescription() {
    *this = ::std::move(from);
  }

  inline ClubDescription& operator=(const ClubDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubDescription& operator=(ClubDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubDescription* internal_default_instance() {
    return reinterpret_cast<const ClubDescription*>(
               &_ClubDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClubDescription& a, ClubDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubDescription* New() const final {
    return CreateMaybeMessage<ClubDescription>(nullptr);
  }

  ClubDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubDescription& from);
  void MergeFrom(const ClubDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderFieldNumber = 9,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kTypeFieldNumber = 2,
    kAvatarFieldNumber = 5,
    kIdFieldNumber = 1,
    kPrivacyLevelFieldNumber = 6,
    kVisibilityLevelFieldNumber = 7,
    kCreationTimeFieldNumber = 10,
    kMemberCountFieldNumber = 8,
  };
  // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
  int leader_size() const;
  private:
  int _internal_leader_size() const;
  public:
  void clear_leader();
  ::bgs::protocol::club::v1::MemberDescription* mutable_leader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >*
      mutable_leader();
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_leader(int index) const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_add_leader();
  public:
  const ::bgs::protocol::club::v1::MemberDescription& leader(int index) const;
  ::bgs::protocol::club::v1::MemberDescription* add_leader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >&
      leader() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  ::bgs::protocol::club::v1::UniqueClubType* release_type();
  ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);
  private:
  const ::bgs::protocol::club::v1::UniqueClubType& _internal_type() const;
  ::bgs::protocol::club::v1::UniqueClubType* _internal_mutable_type();
  public:

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  ::bgs::protocol::club::v1::AvatarId* release_avatar();
  ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);
  private:
  const ::bgs::protocol::club::v1::AvatarId& _internal_avatar() const;
  ::bgs::protocol::club::v1::AvatarId* _internal_mutable_avatar();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
  bool has_privacy_level() const;
  private:
  bool _internal_has_privacy_level() const;
  public:
  void clear_privacy_level();
  ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  private:
  ::bgs::protocol::club::v1::PrivacyLevel _internal_privacy_level() const;
  void _internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  public:

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7 [default = VISIBILITY_LEVEL_PRIVATE];
  bool has_visibility_level() const;
  private:
  bool _internal_has_visibility_level() const;
  public:
  void clear_visibility_level();
  ::bgs::protocol::club::v1::VisibilityLevel visibility_level() const;
  void set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value);
  private:
  ::bgs::protocol::club::v1::VisibilityLevel _internal_visibility_level() const;
  void _internal_set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value);
  public:

  // optional uint64 creation_time = 10;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 member_count = 8;
  bool has_member_count() const;
  private:
  bool _internal_has_member_count() const;
  public:
  void clear_member_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_count() const;
  void set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_count() const;
  void _internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription > leader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int privacy_level_;
  int visibility_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_count_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class ClubView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubView) */ {
 public:
  ClubView();
  virtual ~ClubView();

  ClubView(const ClubView& from);
  ClubView(ClubView&& from) noexcept
    : ClubView() {
    *this = ::std::move(from);
  }

  inline ClubView& operator=(const ClubView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubView& operator=(ClubView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubView* internal_default_instance() {
    return reinterpret_cast<const ClubView*>(
               &_ClubView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClubView& a, ClubView& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubView* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubView* New() const final {
    return CreateMaybeMessage<ClubView>(nullptr);
  }

  ClubView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubView& from);
  void MergeFrom(const ClubView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkerFieldNumber = 2,
    kClubIdFieldNumber = 1,
  };
  // optional .bgs.protocol.ViewMarker marker = 2;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  const ::bgs::protocol::ViewMarker& marker() const;
  ::bgs::protocol::ViewMarker* release_marker();
  ::bgs::protocol::ViewMarker* mutable_marker();
  void set_allocated_marker(::bgs::protocol::ViewMarker* marker);
  private:
  const ::bgs::protocol::ViewMarker& _internal_marker() const;
  ::bgs::protocol::ViewMarker* _internal_mutable_marker();
  public:

  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubView)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::ViewMarker* marker_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class ClubStateOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubStateOptions) */ {
 public:
  ClubStateOptions();
  virtual ~ClubStateOptions();

  ClubStateOptions(const ClubStateOptions& from);
  ClubStateOptions(ClubStateOptions&& from) noexcept
    : ClubStateOptions() {
    *this = ::std::move(from);
  }

  inline ClubStateOptions& operator=(const ClubStateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubStateOptions& operator=(ClubStateOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubStateOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubStateOptions* internal_default_instance() {
    return reinterpret_cast<const ClubStateOptions*>(
               &_ClubStateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClubStateOptions& a, ClubStateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubStateOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubStateOptions* New() const final {
    return CreateMaybeMessage<ClubStateOptions>(nullptr);
  }

  ClubStateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubStateOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubStateOptions& from);
  void MergeFrom(const ClubStateOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubStateOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubStateOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kShortNameFieldNumber = 8,
    kBroadcastFieldNumber = 4,
    kAvatarFieldNumber = 5,
    kStreamPositionFieldNumber = 7,
    kPrivacyLevelFieldNumber = 6,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string short_name = 8;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  void set_short_name(const std::string& value);
  void set_short_name(std::string&& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  std::string* mutable_short_name();
  std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  const ::bgs::protocol::club::v1::SetBroadcastOptions& broadcast() const;
  ::bgs::protocol::club::v1::SetBroadcastOptions* release_broadcast();
  ::bgs::protocol::club::v1::SetBroadcastOptions* mutable_broadcast();
  void set_allocated_broadcast(::bgs::protocol::club::v1::SetBroadcastOptions* broadcast);
  private:
  const ::bgs::protocol::club::v1::SetBroadcastOptions& _internal_broadcast() const;
  ::bgs::protocol::club::v1::SetBroadcastOptions* _internal_mutable_broadcast();
  public:

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  ::bgs::protocol::club::v1::AvatarId* release_avatar();
  ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);
  private:
  const ::bgs::protocol::club::v1::AvatarId& _internal_avatar() const;
  ::bgs::protocol::club::v1::AvatarId* _internal_mutable_avatar();
  public:

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
  bool has_stream_position() const;
  private:
  bool _internal_has_stream_position() const;
  public:
  void clear_stream_position();
  const ::bgs::protocol::club::v1::StreamPosition& stream_position() const;
  ::bgs::protocol::club::v1::StreamPosition* release_stream_position();
  ::bgs::protocol::club::v1::StreamPosition* mutable_stream_position();
  void set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position);
  private:
  const ::bgs::protocol::club::v1::StreamPosition& _internal_stream_position() const;
  ::bgs::protocol::club::v1::StreamPosition* _internal_mutable_stream_position();
  public:

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
  bool has_privacy_level() const;
  private:
  bool _internal_has_privacy_level() const;
  public:
  void clear_privacy_level();
  ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  private:
  ::bgs::protocol::club::v1::PrivacyLevel _internal_privacy_level() const;
  void _internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubStateOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::bgs::protocol::club::v1::SetBroadcastOptions* broadcast_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  ::bgs::protocol::club::v1::StreamPosition* stream_position_;
  int privacy_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class ClubStateAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubStateAssignment) */ {
 public:
  ClubStateAssignment();
  virtual ~ClubStateAssignment();

  ClubStateAssignment(const ClubStateAssignment& from);
  ClubStateAssignment(ClubStateAssignment&& from) noexcept
    : ClubStateAssignment() {
    *this = ::std::move(from);
  }

  inline ClubStateAssignment& operator=(const ClubStateAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubStateAssignment& operator=(ClubStateAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubStateAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubStateAssignment* internal_default_instance() {
    return reinterpret_cast<const ClubStateAssignment*>(
               &_ClubStateAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClubStateAssignment& a, ClubStateAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubStateAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubStateAssignment* New() const final {
    return CreateMaybeMessage<ClubStateAssignment>(nullptr);
  }

  ClubStateAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubStateAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubStateAssignment& from);
  void MergeFrom(const ClubStateAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubStateAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubStateAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kShortNameFieldNumber = 9,
    kBroadcastFieldNumber = 5,
    kAvatarFieldNumber = 6,
    kStreamPositionFieldNumber = 8,
    kClubIdFieldNumber = 1,
    kPrivacyLevelFieldNumber = 7,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string short_name = 9;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  void set_short_name(const std::string& value);
  void set_short_name(std::string&& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  std::string* mutable_short_name();
  std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  const ::bgs::protocol::club::v1::Broadcast& broadcast() const;
  ::bgs::protocol::club::v1::Broadcast* release_broadcast();
  ::bgs::protocol::club::v1::Broadcast* mutable_broadcast();
  void set_allocated_broadcast(::bgs::protocol::club::v1::Broadcast* broadcast);
  private:
  const ::bgs::protocol::club::v1::Broadcast& _internal_broadcast() const;
  ::bgs::protocol::club::v1::Broadcast* _internal_mutable_broadcast();
  public:

  // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  ::bgs::protocol::club::v1::AvatarId* release_avatar();
  ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);
  private:
  const ::bgs::protocol::club::v1::AvatarId& _internal_avatar() const;
  ::bgs::protocol::club::v1::AvatarId* _internal_mutable_avatar();
  public:

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
  bool has_stream_position() const;
  private:
  bool _internal_has_stream_position() const;
  public:
  void clear_stream_position();
  const ::bgs::protocol::club::v1::StreamPosition& stream_position() const;
  ::bgs::protocol::club::v1::StreamPosition* release_stream_position();
  ::bgs::protocol::club::v1::StreamPosition* mutable_stream_position();
  void set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position);
  private:
  const ::bgs::protocol::club::v1::StreamPosition& _internal_stream_position() const;
  ::bgs::protocol::club::v1::StreamPosition* _internal_mutable_stream_position();
  public:

  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_CLOSED];
  bool has_privacy_level() const;
  private:
  bool _internal_has_privacy_level() const;
  public:
  void clear_privacy_level();
  ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  private:
  ::bgs::protocol::club::v1::PrivacyLevel _internal_privacy_level() const;
  void _internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubStateAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::bgs::protocol::club::v1::Broadcast* broadcast_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  ::bgs::protocol::club::v1::StreamPosition* stream_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  int privacy_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class StreamSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamSettings) */ {
 public:
  StreamSettings();
  virtual ~StreamSettings();

  StreamSettings(const StreamSettings& from);
  StreamSettings(StreamSettings&& from) noexcept
    : StreamSettings() {
    *this = ::std::move(from);
  }

  inline StreamSettings& operator=(const StreamSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamSettings& operator=(StreamSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSettings* internal_default_instance() {
    return reinterpret_cast<const StreamSettings*>(
               &_StreamSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamSettings& a, StreamSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamSettings* New() const final {
    return CreateMaybeMessage<StreamSettings>(nullptr);
  }

  StreamSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamSettings& from);
  void MergeFrom(const StreamSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kFilterFieldNumber = 2,
  };
  // optional uint64 stream_id = 1;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2 [default = STREAM_NOTIFICATION_FILTER_NONE];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  ::bgs::protocol::club::v1::StreamNotificationFilter filter() const;
  void set_filter(::bgs::protocol::club::v1::StreamNotificationFilter value);
  private:
  ::bgs::protocol::club::v1::StreamNotificationFilter _internal_filter() const;
  void _internal_set_filter(::bgs::protocol::club::v1::StreamNotificationFilter value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  int filter_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class ClubSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSettings) */ {
 public:
  ClubSettings();
  virtual ~ClubSettings();

  ClubSettings(const ClubSettings& from);
  ClubSettings(ClubSettings&& from) noexcept
    : ClubSettings() {
    *this = ::std::move(from);
  }

  inline ClubSettings& operator=(const ClubSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSettings& operator=(ClubSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSettings* internal_default_instance() {
    return reinterpret_cast<const ClubSettings*>(
               &_ClubSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClubSettings& a, ClubSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSettings* New() const final {
    return CreateMaybeMessage<ClubSettings>(nullptr);
  }

  ClubSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSettings& from);
  void MergeFrom(const ClubSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kAttributeFieldNumber = 3,
    kStreamNotificationFilterAllFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
  int stream_size() const;
  private:
  int _internal_stream_size() const;
  public:
  void clear_stream();
  ::bgs::protocol::club::v1::StreamSettings* mutable_stream(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
      mutable_stream();
  private:
  const ::bgs::protocol::club::v1::StreamSettings& _internal_stream(int index) const;
  ::bgs::protocol::club::v1::StreamSettings* _internal_add_stream();
  public:
  const ::bgs::protocol::club::v1::StreamSettings& stream(int index) const;
  ::bgs::protocol::club::v1::StreamSettings* add_stream();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
      stream() const;

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional bool stream_notification_filter_all = 2;
  bool has_stream_notification_filter_all() const;
  private:
  bool _internal_has_stream_notification_filter_all() const;
  public:
  void clear_stream_notification_filter_all();
  bool stream_notification_filter_all() const;
  void set_stream_notification_filter_all(bool value);
  private:
  bool _internal_stream_notification_filter_all() const;
  void _internal_set_stream_notification_filter_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings > stream_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  bool stream_notification_filter_all_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class ClubSettingsOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSettingsOptions) */ {
 public:
  ClubSettingsOptions();
  virtual ~ClubSettingsOptions();

  ClubSettingsOptions(const ClubSettingsOptions& from);
  ClubSettingsOptions(ClubSettingsOptions&& from) noexcept
    : ClubSettingsOptions() {
    *this = ::std::move(from);
  }

  inline ClubSettingsOptions& operator=(const ClubSettingsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSettingsOptions& operator=(ClubSettingsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSettingsOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSettingsOptions* internal_default_instance() {
    return reinterpret_cast<const ClubSettingsOptions*>(
               &_ClubSettingsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClubSettingsOptions& a, ClubSettingsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSettingsOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSettingsOptions* New() const final {
    return CreateMaybeMessage<ClubSettingsOptions>(nullptr);
  }

  ClubSettingsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSettingsOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSettingsOptions& from);
  void MergeFrom(const ClubSettingsOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSettingsOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSettingsOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kSettingsFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int stream_size() const;
  private:
  int _internal_stream_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_stream();
  PROTOBUF_DEPRECATED ::bgs::protocol::club::v1::StreamSettings* mutable_stream(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
      mutable_stream();
  private:
  const ::bgs::protocol::club::v1::StreamSettings& _internal_stream(int index) const;
  ::bgs::protocol::club::v1::StreamSettings* _internal_add_stream();
  public:
  PROTOBUF_DEPRECATED const ::bgs::protocol::club::v1::StreamSettings& stream(int index) const;
  PROTOBUF_DEPRECATED ::bgs::protocol::club::v1::StreamSettings* add_stream();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
      stream() const;

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::bgs::protocol::club::v1::ClubSettings& settings() const;
  ::bgs::protocol::club::v1::ClubSettings* release_settings();
  ::bgs::protocol::club::v1::ClubSettings* mutable_settings();
  void set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings);
  private:
  const ::bgs::protocol::club::v1::ClubSettings& _internal_settings() const;
  ::bgs::protocol::club::v1::ClubSettings* _internal_mutable_settings();
  public:

  // optional uint32 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSettingsOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings > stream_;
  ::bgs::protocol::club::v1::ClubSettings* settings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// -------------------------------------------------------------------

class ClubSettingsAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSettingsAssignment) */ {
 public:
  ClubSettingsAssignment();
  virtual ~ClubSettingsAssignment();

  ClubSettingsAssignment(const ClubSettingsAssignment& from);
  ClubSettingsAssignment(ClubSettingsAssignment&& from) noexcept
    : ClubSettingsAssignment() {
    *this = ::std::move(from);
  }

  inline ClubSettingsAssignment& operator=(const ClubSettingsAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSettingsAssignment& operator=(ClubSettingsAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSettingsAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSettingsAssignment* internal_default_instance() {
    return reinterpret_cast<const ClubSettingsAssignment*>(
               &_ClubSettingsAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ClubSettingsAssignment& a, ClubSettingsAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSettingsAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSettingsAssignment* New() const final {
    return CreateMaybeMessage<ClubSettingsAssignment>(nullptr);
  }

  ClubSettingsAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSettingsAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSettingsAssignment& from);
  void MergeFrom(const ClubSettingsAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSettingsAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSettingsAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kSettingsFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int stream_size() const;
  private:
  int _internal_stream_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_stream();
  PROTOBUF_DEPRECATED ::bgs::protocol::club::v1::StreamSettings* mutable_stream(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
      mutable_stream();
  private:
  const ::bgs::protocol::club::v1::StreamSettings& _internal_stream(int index) const;
  ::bgs::protocol::club::v1::StreamSettings* _internal_add_stream();
  public:
  PROTOBUF_DEPRECATED const ::bgs::protocol::club::v1::StreamSettings& stream(int index) const;
  PROTOBUF_DEPRECATED ::bgs::protocol::club::v1::StreamSettings* add_stream();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
      stream() const;

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::bgs::protocol::club::v1::ClubSettings& settings() const;
  ::bgs::protocol::club::v1::ClubSettings* release_settings();
  ::bgs::protocol::club::v1::ClubSettings* mutable_settings();
  void set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings);
  private:
  const ::bgs::protocol::club::v1::ClubSettings& _internal_settings() const;
  ::bgs::protocol::club::v1::ClubSettings* _internal_mutable_settings();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSettingsAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings > stream_;
  ::bgs::protocol::club::v1::ClubSettings* settings_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AvatarId

// optional uint32 id = 1;
inline bool AvatarId::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AvatarId::has_id() const {
  return _internal_has_id();
}
inline void AvatarId::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AvatarId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AvatarId::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AvatarId.id)
  return _internal_id();
}
inline void AvatarId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void AvatarId::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AvatarId.id)
}

// -------------------------------------------------------------------

// SetBroadcastOptions

// optional string content = 1;
inline bool SetBroadcastOptions::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetBroadcastOptions::has_content() const {
  return _internal_has_content();
}
inline void SetBroadcastOptions::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetBroadcastOptions::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetBroadcastOptions.content)
  return _internal_content();
}
inline void SetBroadcastOptions::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetBroadcastOptions.content)
}
inline std::string* SetBroadcastOptions::mutable_content() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SetBroadcastOptions.content)
  return _internal_mutable_content();
}
inline const std::string& SetBroadcastOptions::_internal_content() const {
  return content_.GetNoArena();
}
inline void SetBroadcastOptions::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetBroadcastOptions::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.SetBroadcastOptions.content)
}
inline void SetBroadcastOptions::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.SetBroadcastOptions.content)
}
inline void SetBroadcastOptions::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.SetBroadcastOptions.content)
}
inline std::string* SetBroadcastOptions::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetBroadcastOptions::release_content() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SetBroadcastOptions.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetBroadcastOptions::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SetBroadcastOptions.content)
}

// -------------------------------------------------------------------

// Broadcast

// optional string content = 1;
inline bool Broadcast::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Broadcast::has_content() const {
  return _internal_has_content();
}
inline void Broadcast::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Broadcast::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Broadcast.content)
  return _internal_content();
}
inline void Broadcast::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Broadcast.content)
}
inline std::string* Broadcast::mutable_content() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Broadcast.content)
  return _internal_mutable_content();
}
inline const std::string& Broadcast::_internal_content() const {
  return content_.GetNoArena();
}
inline void Broadcast::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Broadcast::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.Broadcast.content)
}
inline void Broadcast::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Broadcast.content)
}
inline void Broadcast::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Broadcast.content)
}
inline std::string* Broadcast::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Broadcast::release_content() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Broadcast.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Broadcast::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Broadcast.content)
}

// optional .bgs.protocol.club.v1.MemberDescription creator = 2;
inline bool Broadcast::_internal_has_creator() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || creator_ != nullptr);
  return value;
}
inline bool Broadcast::has_creator() const {
  return _internal_has_creator();
}
inline const ::bgs::protocol::club::v1::MemberDescription& Broadcast::_internal_creator() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = creator_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& Broadcast::creator() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Broadcast.creator)
  return _internal_creator();
}
inline ::bgs::protocol::club::v1::MemberDescription* Broadcast::release_creator() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Broadcast.creator)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberDescription* temp = creator_;
  creator_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* Broadcast::_internal_mutable_creator() {
  _has_bits_[0] |= 0x00000002u;
  if (creator_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    creator_ = p;
  }
  return creator_;
}
inline ::bgs::protocol::club::v1::MemberDescription* Broadcast::mutable_creator() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Broadcast.creator)
  return _internal_mutable_creator();
}
inline void Broadcast::set_allocated_creator(::bgs::protocol::club::v1::MemberDescription* creator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creator_);
  }
  if (creator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      creator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  creator_ = creator;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Broadcast.creator)
}

// optional uint64 creation_time = 3;
inline bool Broadcast::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Broadcast::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void Broadcast::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Broadcast::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Broadcast::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Broadcast.creation_time)
  return _internal_creation_time();
}
inline void Broadcast::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  creation_time_ = value;
}
inline void Broadcast::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Broadcast.creation_time)
}

// -------------------------------------------------------------------

// UniqueClubType

// optional fixed32 program = 1;
inline bool UniqueClubType::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UniqueClubType::has_program() const {
  return _internal_has_program();
}
inline void UniqueClubType::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UniqueClubType::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UniqueClubType::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UniqueClubType.program)
  return _internal_program();
}
inline void UniqueClubType::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  program_ = value;
}
inline void UniqueClubType::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UniqueClubType.program)
}

// optional string name = 2;
inline bool UniqueClubType::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UniqueClubType::has_name() const {
  return _internal_has_name();
}
inline void UniqueClubType::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UniqueClubType::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UniqueClubType.name)
  return _internal_name();
}
inline void UniqueClubType::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UniqueClubType.name)
}
inline std::string* UniqueClubType::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UniqueClubType.name)
  return _internal_mutable_name();
}
inline const std::string& UniqueClubType::_internal_name() const {
  return name_.GetNoArena();
}
inline void UniqueClubType::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UniqueClubType::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.UniqueClubType.name)
}
inline void UniqueClubType::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.UniqueClubType.name)
}
inline void UniqueClubType::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.UniqueClubType.name)
}
inline std::string* UniqueClubType::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniqueClubType::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UniqueClubType.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniqueClubType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UniqueClubType.name)
}

// -------------------------------------------------------------------

// ClubCreateOptions

// optional .bgs.protocol.club.v1.UniqueClubType type = 1;
inline bool ClubCreateOptions::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool ClubCreateOptions::has_type() const {
  return _internal_has_type();
}
inline void ClubCreateOptions::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::club::v1::UniqueClubType& ClubCreateOptions::_internal_type() const {
  const ::bgs::protocol::club::v1::UniqueClubType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::UniqueClubType*>(
      &::bgs::protocol::club::v1::_UniqueClubType_default_instance_);
}
inline const ::bgs::protocol::club::v1::UniqueClubType& ClubCreateOptions::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.type)
  return _internal_type();
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubCreateOptions::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubCreateOptions.type)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubCreateOptions::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000008u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::UniqueClubType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubCreateOptions::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.type)
  return _internal_mutable_type();
}
inline void ClubCreateOptions::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.type)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int ClubCreateOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ClubCreateOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* ClubCreateOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubCreateOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& ClubCreateOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& ClubCreateOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* ClubCreateOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* ClubCreateOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubCreateOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return attribute_;
}

// optional string name = 3;
inline bool ClubCreateOptions::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubCreateOptions::has_name() const {
  return _internal_has_name();
}
inline void ClubCreateOptions::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClubCreateOptions::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.name)
  return _internal_name();
}
inline void ClubCreateOptions::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubCreateOptions.name)
}
inline std::string* ClubCreateOptions::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.name)
  return _internal_mutable_name();
}
inline const std::string& ClubCreateOptions::_internal_name() const {
  return name_.GetNoArena();
}
inline void ClubCreateOptions::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubCreateOptions::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubCreateOptions.name)
}
inline void ClubCreateOptions::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubCreateOptions.name)
}
inline void ClubCreateOptions::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubCreateOptions.name)
}
inline std::string* ClubCreateOptions::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubCreateOptions::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubCreateOptions.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubCreateOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.name)
}

// optional string description = 4;
inline bool ClubCreateOptions::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubCreateOptions::has_description() const {
  return _internal_has_description();
}
inline void ClubCreateOptions::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClubCreateOptions::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.description)
  return _internal_description();
}
inline void ClubCreateOptions::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubCreateOptions.description)
}
inline std::string* ClubCreateOptions::mutable_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.description)
  return _internal_mutable_description();
}
inline const std::string& ClubCreateOptions::_internal_description() const {
  return description_.GetNoArena();
}
inline void ClubCreateOptions::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubCreateOptions::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubCreateOptions.description)
}
inline void ClubCreateOptions::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubCreateOptions.description)
}
inline void ClubCreateOptions::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubCreateOptions.description)
}
inline std::string* ClubCreateOptions::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubCreateOptions::release_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubCreateOptions.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubCreateOptions::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.description)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 5;
inline bool ClubCreateOptions::_internal_has_avatar() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || avatar_ != nullptr);
  return value;
}
inline bool ClubCreateOptions::has_avatar() const {
  return _internal_has_avatar();
}
inline void ClubCreateOptions::clear_avatar() {
  if (avatar_ != nullptr) avatar_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubCreateOptions::_internal_avatar() const {
  const ::bgs::protocol::club::v1::AvatarId* p = avatar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::AvatarId*>(
      &::bgs::protocol::club::v1::_AvatarId_default_instance_);
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubCreateOptions::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.avatar)
  return _internal_avatar();
}
inline ::bgs::protocol::club::v1::AvatarId* ClubCreateOptions::release_avatar() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubCreateOptions.avatar)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubCreateOptions::_internal_mutable_avatar() {
  _has_bits_[0] |= 0x00000010u;
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::AvatarId>(GetArenaNoVirtual());
    avatar_ = p;
  }
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubCreateOptions::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.avatar)
  return _internal_mutable_avatar();
}
inline void ClubCreateOptions::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete avatar_;
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
inline bool ClubCreateOptions::_internal_has_privacy_level() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClubCreateOptions::has_privacy_level() const {
  return _internal_has_privacy_level();
}
inline void ClubCreateOptions::clear_privacy_level() {
  privacy_level_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubCreateOptions::_internal_privacy_level() const {
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubCreateOptions::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.privacy_level)
  return _internal_privacy_level();
}
inline void ClubCreateOptions::_internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  privacy_level_ = value;
}
inline void ClubCreateOptions::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  _internal_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubCreateOptions.privacy_level)
}

// optional string short_name = 7;
inline bool ClubCreateOptions::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClubCreateOptions::has_short_name() const {
  return _internal_has_short_name();
}
inline void ClubCreateOptions::clear_short_name() {
  short_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClubCreateOptions::short_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.short_name)
  return _internal_short_name();
}
inline void ClubCreateOptions::set_short_name(const std::string& value) {
  _internal_set_short_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}
inline std::string* ClubCreateOptions::mutable_short_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.short_name)
  return _internal_mutable_short_name();
}
inline const std::string& ClubCreateOptions::_internal_short_name() const {
  return short_name_.GetNoArena();
}
inline void ClubCreateOptions::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubCreateOptions::set_short_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}
inline void ClubCreateOptions::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}
inline void ClubCreateOptions::set_short_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}
inline std::string* ClubCreateOptions::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000004u;
  return short_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubCreateOptions::release_short_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubCreateOptions.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return short_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubCreateOptions::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  short_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}

// optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
inline bool ClubCreateOptions::_internal_has_member() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || member_ != nullptr);
  return value;
}
inline bool ClubCreateOptions::has_member() const {
  return _internal_has_member();
}
inline const ::bgs::protocol::club::v1::CreateMemberOptions& ClubCreateOptions::_internal_member() const {
  const ::bgs::protocol::club::v1::CreateMemberOptions* p = member_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::CreateMemberOptions*>(
      &::bgs::protocol::club::v1::_CreateMemberOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::CreateMemberOptions& ClubCreateOptions::member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.member)
  return _internal_member();
}
inline ::bgs::protocol::club::v1::CreateMemberOptions* ClubCreateOptions::release_member() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubCreateOptions.member)
  _has_bits_[0] &= ~0x00000020u;
  ::bgs::protocol::club::v1::CreateMemberOptions* temp = member_;
  member_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::CreateMemberOptions* ClubCreateOptions::_internal_mutable_member() {
  _has_bits_[0] |= 0x00000020u;
  if (member_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::CreateMemberOptions>(GetArenaNoVirtual());
    member_ = p;
  }
  return member_;
}
inline ::bgs::protocol::club::v1::CreateMemberOptions* ClubCreateOptions::mutable_member() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.member)
  return _internal_mutable_member();
}
inline void ClubCreateOptions::set_allocated_member(::bgs::protocol::club::v1::CreateMemberOptions* member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_);
  }
  if (member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.member)
}

// optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
inline bool ClubCreateOptions::_internal_has_stream() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || stream_ != nullptr);
  return value;
}
inline bool ClubCreateOptions::has_stream() const {
  return _internal_has_stream();
}
inline const ::bgs::protocol::club::v1::CreateStreamOptions& ClubCreateOptions::_internal_stream() const {
  const ::bgs::protocol::club::v1::CreateStreamOptions* p = stream_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::CreateStreamOptions*>(
      &::bgs::protocol::club::v1::_CreateStreamOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::CreateStreamOptions& ClubCreateOptions::stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.stream)
  return _internal_stream();
}
inline ::bgs::protocol::club::v1::CreateStreamOptions* ClubCreateOptions::release_stream() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubCreateOptions.stream)
  _has_bits_[0] &= ~0x00000040u;
  ::bgs::protocol::club::v1::CreateStreamOptions* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::CreateStreamOptions* ClubCreateOptions::_internal_mutable_stream() {
  _has_bits_[0] |= 0x00000040u;
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::CreateStreamOptions>(GetArenaNoVirtual());
    stream_ = p;
  }
  return stream_;
}
inline ::bgs::protocol::club::v1::CreateStreamOptions* ClubCreateOptions::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.stream)
  return _internal_mutable_stream();
}
inline void ClubCreateOptions::set_allocated_stream(::bgs::protocol::club::v1::CreateStreamOptions* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.stream)
}

// -------------------------------------------------------------------

// Club

// optional uint64 id = 1;
inline bool Club::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Club::has_id() const {
  return _internal_has_id();
}
inline void Club::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Club::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Club::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.id)
  return _internal_id();
}
inline void Club::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
}
inline void Club::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.id)
}

// optional .bgs.protocol.club.v1.UniqueClubType type = 2;
inline bool Club::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool Club::has_type() const {
  return _internal_has_type();
}
inline void Club::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::club::v1::UniqueClubType& Club::_internal_type() const {
  const ::bgs::protocol::club::v1::UniqueClubType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::UniqueClubType*>(
      &::bgs::protocol::club::v1::_UniqueClubType_default_instance_);
}
inline const ::bgs::protocol::club::v1::UniqueClubType& Club::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.type)
  return _internal_type();
}
inline ::bgs::protocol::club::v1::UniqueClubType* Club::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Club.type)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::UniqueClubType* Club::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000008u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::UniqueClubType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* Club::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.type)
  return _internal_mutable_type();
}
inline void Club::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.type)
}

// repeated .bgs.protocol.v2.Attribute attribute = 3;
inline int Club::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Club::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* Club::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
Club::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.Club.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& Club::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& Club::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* Club::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* Club::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.Club.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
Club::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.Club.attribute)
  return attribute_;
}

// optional string name = 4;
inline bool Club::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Club::has_name() const {
  return _internal_has_name();
}
inline void Club::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Club::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.name)
  return _internal_name();
}
inline void Club::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.name)
}
inline std::string* Club::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.name)
  return _internal_mutable_name();
}
inline const std::string& Club::_internal_name() const {
  return name_.GetNoArena();
}
inline void Club::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Club::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.Club.name)
}
inline void Club::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Club.name)
}
inline void Club::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Club.name)
}
inline std::string* Club::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Club::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Club.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Club::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.name)
}

// optional string description = 5;
inline bool Club::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Club::has_description() const {
  return _internal_has_description();
}
inline void Club::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Club::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.description)
  return _internal_description();
}
inline void Club::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.description)
}
inline std::string* Club::mutable_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.description)
  return _internal_mutable_description();
}
inline const std::string& Club::_internal_description() const {
  return description_.GetNoArena();
}
inline void Club::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Club::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.Club.description)
}
inline void Club::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Club.description)
}
inline void Club::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Club.description)
}
inline std::string* Club::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Club::release_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Club.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Club::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.description)
}

// optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
inline bool Club::_internal_has_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || broadcast_ != nullptr);
  return value;
}
inline bool Club::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void Club::clear_broadcast() {
  if (broadcast_ != nullptr) broadcast_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::club::v1::Broadcast& Club::_internal_broadcast() const {
  const ::bgs::protocol::club::v1::Broadcast* p = broadcast_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::Broadcast*>(
      &::bgs::protocol::club::v1::_Broadcast_default_instance_);
}
inline const ::bgs::protocol::club::v1::Broadcast& Club::broadcast() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.broadcast)
  return _internal_broadcast();
}
inline ::bgs::protocol::club::v1::Broadcast* Club::release_broadcast() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Club.broadcast)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::club::v1::Broadcast* temp = broadcast_;
  broadcast_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::Broadcast* Club::_internal_mutable_broadcast() {
  _has_bits_[0] |= 0x00000010u;
  if (broadcast_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::Broadcast>(GetArenaNoVirtual());
    broadcast_ = p;
  }
  return broadcast_;
}
inline ::bgs::protocol::club::v1::Broadcast* Club::mutable_broadcast() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.broadcast)
  return _internal_mutable_broadcast();
}
inline void Club::set_allocated_broadcast(::bgs::protocol::club::v1::Broadcast* broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcast_;
  }
  if (broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  broadcast_ = broadcast;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.broadcast)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 7;
inline bool Club::_internal_has_avatar() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || avatar_ != nullptr);
  return value;
}
inline bool Club::has_avatar() const {
  return _internal_has_avatar();
}
inline void Club::clear_avatar() {
  if (avatar_ != nullptr) avatar_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::bgs::protocol::club::v1::AvatarId& Club::_internal_avatar() const {
  const ::bgs::protocol::club::v1::AvatarId* p = avatar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::AvatarId*>(
      &::bgs::protocol::club::v1::_AvatarId_default_instance_);
}
inline const ::bgs::protocol::club::v1::AvatarId& Club::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.avatar)
  return _internal_avatar();
}
inline ::bgs::protocol::club::v1::AvatarId* Club::release_avatar() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Club.avatar)
  _has_bits_[0] &= ~0x00000020u;
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::AvatarId* Club::_internal_mutable_avatar() {
  _has_bits_[0] |= 0x00000020u;
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::AvatarId>(GetArenaNoVirtual());
    avatar_ = p;
  }
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* Club::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.avatar)
  return _internal_mutable_avatar();
}
inline void Club::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete avatar_;
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8 [default = PRIVACY_LEVEL_CLOSED];
inline bool Club::_internal_has_privacy_level() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Club::has_privacy_level() const {
  return _internal_has_privacy_level();
}
inline void Club::clear_privacy_level() {
  privacy_level_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::bgs::protocol::club::v1::PrivacyLevel Club::_internal_privacy_level() const {
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline ::bgs::protocol::club::v1::PrivacyLevel Club::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.privacy_level)
  return _internal_privacy_level();
}
inline void Club::_internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  privacy_level_ = value;
}
inline void Club::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  _internal_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.privacy_level)
}

// optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9 [default = VISIBILITY_LEVEL_PRIVATE];
inline bool Club::_internal_has_visibility_level() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Club::has_visibility_level() const {
  return _internal_has_visibility_level();
}
inline void Club::clear_visibility_level() {
  visibility_level_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::bgs::protocol::club::v1::VisibilityLevel Club::_internal_visibility_level() const {
  return static_cast< ::bgs::protocol::club::v1::VisibilityLevel >(visibility_level_);
}
inline ::bgs::protocol::club::v1::VisibilityLevel Club::visibility_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.visibility_level)
  return _internal_visibility_level();
}
inline void Club::_internal_set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value) {
  assert(::bgs::protocol::club::v1::VisibilityLevel_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  visibility_level_ = value;
}
inline void Club::set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value) {
  _internal_set_visibility_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.visibility_level)
}

// optional uint32 member_count = 10;
inline bool Club::_internal_has_member_count() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Club::has_member_count() const {
  return _internal_has_member_count();
}
inline void Club::clear_member_count() {
  member_count_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Club::_internal_member_count() const {
  return member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Club::member_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.member_count)
  return _internal_member_count();
}
inline void Club::_internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  member_count_ = value;
}
inline void Club::set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.member_count)
}

// optional uint64 creation_time = 11;
inline bool Club::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Club::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void Club::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Club::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Club::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.creation_time)
  return _internal_creation_time();
}
inline void Club::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  creation_time_ = value;
}
inline void Club::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.creation_time)
}

// optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
inline bool Club::_internal_has_stream_position() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || stream_position_ != nullptr);
  return value;
}
inline bool Club::has_stream_position() const {
  return _internal_has_stream_position();
}
inline const ::bgs::protocol::club::v1::StreamPosition& Club::_internal_stream_position() const {
  const ::bgs::protocol::club::v1::StreamPosition* p = stream_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamPosition*>(
      &::bgs::protocol::club::v1::_StreamPosition_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamPosition& Club::stream_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.stream_position)
  return _internal_stream_position();
}
inline ::bgs::protocol::club::v1::StreamPosition* Club::release_stream_position() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Club.stream_position)
  _has_bits_[0] &= ~0x00000040u;
  ::bgs::protocol::club::v1::StreamPosition* temp = stream_position_;
  stream_position_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamPosition* Club::_internal_mutable_stream_position() {
  _has_bits_[0] |= 0x00000040u;
  if (stream_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamPosition>(GetArenaNoVirtual());
    stream_position_ = p;
  }
  return stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* Club::mutable_stream_position() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.stream_position)
  return _internal_mutable_stream_position();
}
inline void Club::set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_position_);
  }
  if (stream_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  stream_position_ = stream_position;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.stream_position)
}

// optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
inline bool Club::_internal_has_role_set() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || role_set_ != nullptr);
  return value;
}
inline bool Club::has_role_set() const {
  return _internal_has_role_set();
}
inline const ::bgs::protocol::club::v1::ClubRoleSet& Club::_internal_role_set() const {
  const ::bgs::protocol::club::v1::ClubRoleSet* p = role_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubRoleSet*>(
      &::bgs::protocol::club::v1::_ClubRoleSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubRoleSet& Club::role_set() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.role_set)
  return _internal_role_set();
}
inline ::bgs::protocol::club::v1::ClubRoleSet* Club::release_role_set() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Club.role_set)
  _has_bits_[0] &= ~0x00000080u;
  ::bgs::protocol::club::v1::ClubRoleSet* temp = role_set_;
  role_set_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubRoleSet* Club::_internal_mutable_role_set() {
  _has_bits_[0] |= 0x00000080u;
  if (role_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubRoleSet>(GetArenaNoVirtual());
    role_set_ = p;
  }
  return role_set_;
}
inline ::bgs::protocol::club::v1::ClubRoleSet* Club::mutable_role_set() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.role_set)
  return _internal_mutable_role_set();
}
inline void Club::set_allocated_role_set(::bgs::protocol::club::v1::ClubRoleSet* role_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_set_);
  }
  if (role_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      role_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  role_set_ = role_set;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.role_set)
}

// repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
inline int Club::_internal_leader_size() const {
  return leader_.size();
}
inline int Club::leader_size() const {
  return _internal_leader_size();
}
inline ::bgs::protocol::club::v1::MemberDescription* Club::mutable_leader(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.leader)
  return leader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >*
Club::mutable_leader() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.Club.leader)
  return &leader_;
}
inline const ::bgs::protocol::club::v1::MemberDescription& Club::_internal_leader(int index) const {
  return leader_.Get(index);
}
inline const ::bgs::protocol::club::v1::MemberDescription& Club::leader(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.leader)
  return _internal_leader(index);
}
inline ::bgs::protocol::club::v1::MemberDescription* Club::_internal_add_leader() {
  return leader_.Add();
}
inline ::bgs::protocol::club::v1::MemberDescription* Club::add_leader() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.Club.leader)
  return _internal_add_leader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >&
Club::leader() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.Club.leader)
  return leader_;
}

// optional string short_name = 15;
inline bool Club::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Club::has_short_name() const {
  return _internal_has_short_name();
}
inline void Club::clear_short_name() {
  short_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Club::short_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.short_name)
  return _internal_short_name();
}
inline void Club::set_short_name(const std::string& value) {
  _internal_set_short_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.short_name)
}
inline std::string* Club::mutable_short_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.short_name)
  return _internal_mutable_short_name();
}
inline const std::string& Club::_internal_short_name() const {
  return short_name_.GetNoArena();
}
inline void Club::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Club::set_short_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.Club.short_name)
}
inline void Club::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Club.short_name)
}
inline void Club::set_short_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Club.short_name)
}
inline std::string* Club::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000004u;
  return short_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Club::release_short_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Club.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return short_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Club::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  short_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.short_name)
}

// -------------------------------------------------------------------

// ClubDescription

// optional uint64 id = 1;
inline bool ClubDescription::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClubDescription::has_id() const {
  return _internal_has_id();
}
inline void ClubDescription::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubDescription::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubDescription::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.id)
  return _internal_id();
}
inline void ClubDescription::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void ClubDescription::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.id)
}

// optional .bgs.protocol.club.v1.UniqueClubType type = 2;
inline bool ClubDescription::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool ClubDescription::has_type() const {
  return _internal_has_type();
}
inline void ClubDescription::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::club::v1::UniqueClubType& ClubDescription::_internal_type() const {
  const ::bgs::protocol::club::v1::UniqueClubType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::UniqueClubType*>(
      &::bgs::protocol::club::v1::_UniqueClubType_default_instance_);
}
inline const ::bgs::protocol::club::v1::UniqueClubType& ClubDescription::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.type)
  return _internal_type();
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubDescription::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubDescription.type)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubDescription::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::UniqueClubType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubDescription::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.type)
  return _internal_mutable_type();
}
inline void ClubDescription::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubDescription.type)
}

// optional string name = 3;
inline bool ClubDescription::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubDescription::has_name() const {
  return _internal_has_name();
}
inline void ClubDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClubDescription::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.name)
  return _internal_name();
}
inline void ClubDescription::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.name)
}
inline std::string* ClubDescription::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.name)
  return _internal_mutable_name();
}
inline const std::string& ClubDescription::_internal_name() const {
  return name_.GetNoArena();
}
inline void ClubDescription::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubDescription::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubDescription.name)
}
inline void ClubDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubDescription.name)
}
inline void ClubDescription::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubDescription.name)
}
inline std::string* ClubDescription::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubDescription::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubDescription.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubDescription.name)
}

// optional string description = 4;
inline bool ClubDescription::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubDescription::has_description() const {
  return _internal_has_description();
}
inline void ClubDescription::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClubDescription::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.description)
  return _internal_description();
}
inline void ClubDescription::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.description)
}
inline std::string* ClubDescription::mutable_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.description)
  return _internal_mutable_description();
}
inline const std::string& ClubDescription::_internal_description() const {
  return description_.GetNoArena();
}
inline void ClubDescription::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubDescription::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubDescription.description)
}
inline void ClubDescription::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubDescription.description)
}
inline void ClubDescription::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubDescription.description)
}
inline std::string* ClubDescription::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubDescription::release_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubDescription.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubDescription::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubDescription.description)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 5;
inline bool ClubDescription::_internal_has_avatar() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || avatar_ != nullptr);
  return value;
}
inline bool ClubDescription::has_avatar() const {
  return _internal_has_avatar();
}
inline void ClubDescription::clear_avatar() {
  if (avatar_ != nullptr) avatar_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubDescription::_internal_avatar() const {
  const ::bgs::protocol::club::v1::AvatarId* p = avatar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::AvatarId*>(
      &::bgs::protocol::club::v1::_AvatarId_default_instance_);
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubDescription::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.avatar)
  return _internal_avatar();
}
inline ::bgs::protocol::club::v1::AvatarId* ClubDescription::release_avatar() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubDescription.avatar)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubDescription::_internal_mutable_avatar() {
  _has_bits_[0] |= 0x00000008u;
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::AvatarId>(GetArenaNoVirtual());
    avatar_ = p;
  }
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubDescription::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.avatar)
  return _internal_mutable_avatar();
}
inline void ClubDescription::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete avatar_;
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubDescription.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
inline bool ClubDescription::_internal_has_privacy_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClubDescription::has_privacy_level() const {
  return _internal_has_privacy_level();
}
inline void ClubDescription::clear_privacy_level() {
  privacy_level_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubDescription::_internal_privacy_level() const {
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubDescription::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.privacy_level)
  return _internal_privacy_level();
}
inline void ClubDescription::_internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  privacy_level_ = value;
}
inline void ClubDescription::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  _internal_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.privacy_level)
}

// optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7 [default = VISIBILITY_LEVEL_PRIVATE];
inline bool ClubDescription::_internal_has_visibility_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClubDescription::has_visibility_level() const {
  return _internal_has_visibility_level();
}
inline void ClubDescription::clear_visibility_level() {
  visibility_level_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::bgs::protocol::club::v1::VisibilityLevel ClubDescription::_internal_visibility_level() const {
  return static_cast< ::bgs::protocol::club::v1::VisibilityLevel >(visibility_level_);
}
inline ::bgs::protocol::club::v1::VisibilityLevel ClubDescription::visibility_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.visibility_level)
  return _internal_visibility_level();
}
inline void ClubDescription::_internal_set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value) {
  assert(::bgs::protocol::club::v1::VisibilityLevel_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  visibility_level_ = value;
}
inline void ClubDescription::set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value) {
  _internal_set_visibility_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.visibility_level)
}

// optional uint32 member_count = 8;
inline bool ClubDescription::_internal_has_member_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClubDescription::has_member_count() const {
  return _internal_has_member_count();
}
inline void ClubDescription::clear_member_count() {
  member_count_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubDescription::_internal_member_count() const {
  return member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubDescription::member_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.member_count)
  return _internal_member_count();
}
inline void ClubDescription::_internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  member_count_ = value;
}
inline void ClubDescription::set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.member_count)
}

// repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
inline int ClubDescription::_internal_leader_size() const {
  return leader_.size();
}
inline int ClubDescription::leader_size() const {
  return _internal_leader_size();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubDescription::mutable_leader(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.leader)
  return leader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >*
ClubDescription::mutable_leader() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubDescription.leader)
  return &leader_;
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubDescription::_internal_leader(int index) const {
  return leader_.Get(index);
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubDescription::leader(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.leader)
  return _internal_leader(index);
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubDescription::_internal_add_leader() {
  return leader_.Add();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubDescription::add_leader() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubDescription.leader)
  return _internal_add_leader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >&
ClubDescription::leader() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubDescription.leader)
  return leader_;
}

// optional uint64 creation_time = 10;
inline bool ClubDescription::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClubDescription::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void ClubDescription::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubDescription::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubDescription::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.creation_time)
  return _internal_creation_time();
}
inline void ClubDescription::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  creation_time_ = value;
}
inline void ClubDescription::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.creation_time)
}

// -------------------------------------------------------------------

// ClubView

// optional uint64 club_id = 1;
inline bool ClubView::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubView::has_club_id() const {
  return _internal_has_club_id();
}
inline void ClubView::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubView::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubView::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubView.club_id)
  return _internal_club_id();
}
inline void ClubView::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void ClubView::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubView.club_id)
}

// optional .bgs.protocol.ViewMarker marker = 2;
inline bool ClubView::_internal_has_marker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || marker_ != nullptr);
  return value;
}
inline bool ClubView::has_marker() const {
  return _internal_has_marker();
}
inline const ::bgs::protocol::ViewMarker& ClubView::_internal_marker() const {
  const ::bgs::protocol::ViewMarker* p = marker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ViewMarker*>(
      &::bgs::protocol::_ViewMarker_default_instance_);
}
inline const ::bgs::protocol::ViewMarker& ClubView::marker() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubView.marker)
  return _internal_marker();
}
inline ::bgs::protocol::ViewMarker* ClubView::release_marker() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubView.marker)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::ViewMarker* temp = marker_;
  marker_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ViewMarker* ClubView::_internal_mutable_marker() {
  _has_bits_[0] |= 0x00000001u;
  if (marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ViewMarker>(GetArenaNoVirtual());
    marker_ = p;
  }
  return marker_;
}
inline ::bgs::protocol::ViewMarker* ClubView::mutable_marker() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubView.marker)
  return _internal_mutable_marker();
}
inline void ClubView::set_allocated_marker(::bgs::protocol::ViewMarker* marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(marker_);
  }
  if (marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  marker_ = marker;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubView.marker)
}

// -------------------------------------------------------------------

// ClubStateOptions

// repeated .bgs.protocol.v2.Attribute attribute = 1;
inline int ClubStateOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ClubStateOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* ClubStateOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubStateOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& ClubStateOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& ClubStateOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* ClubStateOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* ClubStateOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubStateOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return attribute_;
}

// optional string name = 2;
inline bool ClubStateOptions::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubStateOptions::has_name() const {
  return _internal_has_name();
}
inline void ClubStateOptions::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClubStateOptions::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.name)
  return _internal_name();
}
inline void ClubStateOptions::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateOptions.name)
}
inline std::string* ClubStateOptions::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.name)
  return _internal_mutable_name();
}
inline const std::string& ClubStateOptions::_internal_name() const {
  return name_.GetNoArena();
}
inline void ClubStateOptions::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubStateOptions::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubStateOptions.name)
}
inline void ClubStateOptions::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateOptions.name)
}
inline void ClubStateOptions::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateOptions.name)
}
inline std::string* ClubStateOptions::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubStateOptions::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateOptions.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubStateOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.name)
}

// optional string description = 3;
inline bool ClubStateOptions::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubStateOptions::has_description() const {
  return _internal_has_description();
}
inline void ClubStateOptions::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClubStateOptions::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.description)
  return _internal_description();
}
inline void ClubStateOptions::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateOptions.description)
}
inline std::string* ClubStateOptions::mutable_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.description)
  return _internal_mutable_description();
}
inline const std::string& ClubStateOptions::_internal_description() const {
  return description_.GetNoArena();
}
inline void ClubStateOptions::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubStateOptions::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubStateOptions.description)
}
inline void ClubStateOptions::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateOptions.description)
}
inline void ClubStateOptions::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateOptions.description)
}
inline std::string* ClubStateOptions::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubStateOptions::release_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateOptions.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubStateOptions::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.description)
}

// optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
inline bool ClubStateOptions::_internal_has_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || broadcast_ != nullptr);
  return value;
}
inline bool ClubStateOptions::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void ClubStateOptions::clear_broadcast() {
  if (broadcast_ != nullptr) broadcast_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::club::v1::SetBroadcastOptions& ClubStateOptions::_internal_broadcast() const {
  const ::bgs::protocol::club::v1::SetBroadcastOptions* p = broadcast_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::SetBroadcastOptions*>(
      &::bgs::protocol::club::v1::_SetBroadcastOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::SetBroadcastOptions& ClubStateOptions::broadcast() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.broadcast)
  return _internal_broadcast();
}
inline ::bgs::protocol::club::v1::SetBroadcastOptions* ClubStateOptions::release_broadcast() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateOptions.broadcast)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::SetBroadcastOptions* temp = broadcast_;
  broadcast_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::SetBroadcastOptions* ClubStateOptions::_internal_mutable_broadcast() {
  _has_bits_[0] |= 0x00000008u;
  if (broadcast_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::SetBroadcastOptions>(GetArenaNoVirtual());
    broadcast_ = p;
  }
  return broadcast_;
}
inline ::bgs::protocol::club::v1::SetBroadcastOptions* ClubStateOptions::mutable_broadcast() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.broadcast)
  return _internal_mutable_broadcast();
}
inline void ClubStateOptions::set_allocated_broadcast(::bgs::protocol::club::v1::SetBroadcastOptions* broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcast_;
  }
  if (broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  broadcast_ = broadcast;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.broadcast)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 5;
inline bool ClubStateOptions::_internal_has_avatar() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || avatar_ != nullptr);
  return value;
}
inline bool ClubStateOptions::has_avatar() const {
  return _internal_has_avatar();
}
inline void ClubStateOptions::clear_avatar() {
  if (avatar_ != nullptr) avatar_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubStateOptions::_internal_avatar() const {
  const ::bgs::protocol::club::v1::AvatarId* p = avatar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::AvatarId*>(
      &::bgs::protocol::club::v1::_AvatarId_default_instance_);
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubStateOptions::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.avatar)
  return _internal_avatar();
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateOptions::release_avatar() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateOptions.avatar)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateOptions::_internal_mutable_avatar() {
  _has_bits_[0] |= 0x00000010u;
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::AvatarId>(GetArenaNoVirtual());
    avatar_ = p;
  }
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateOptions::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.avatar)
  return _internal_mutable_avatar();
}
inline void ClubStateOptions::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete avatar_;
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6 [default = PRIVACY_LEVEL_CLOSED];
inline bool ClubStateOptions::_internal_has_privacy_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClubStateOptions::has_privacy_level() const {
  return _internal_has_privacy_level();
}
inline void ClubStateOptions::clear_privacy_level() {
  privacy_level_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubStateOptions::_internal_privacy_level() const {
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubStateOptions::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.privacy_level)
  return _internal_privacy_level();
}
inline void ClubStateOptions::_internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  privacy_level_ = value;
}
inline void ClubStateOptions::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  _internal_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateOptions.privacy_level)
}

// optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
inline bool ClubStateOptions::_internal_has_stream_position() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || stream_position_ != nullptr);
  return value;
}
inline bool ClubStateOptions::has_stream_position() const {
  return _internal_has_stream_position();
}
inline const ::bgs::protocol::club::v1::StreamPosition& ClubStateOptions::_internal_stream_position() const {
  const ::bgs::protocol::club::v1::StreamPosition* p = stream_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamPosition*>(
      &::bgs::protocol::club::v1::_StreamPosition_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamPosition& ClubStateOptions::stream_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.stream_position)
  return _internal_stream_position();
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateOptions::release_stream_position() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateOptions.stream_position)
  _has_bits_[0] &= ~0x00000020u;
  ::bgs::protocol::club::v1::StreamPosition* temp = stream_position_;
  stream_position_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateOptions::_internal_mutable_stream_position() {
  _has_bits_[0] |= 0x00000020u;
  if (stream_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamPosition>(GetArenaNoVirtual());
    stream_position_ = p;
  }
  return stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateOptions::mutable_stream_position() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.stream_position)
  return _internal_mutable_stream_position();
}
inline void ClubStateOptions::set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_position_);
  }
  if (stream_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  stream_position_ = stream_position;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.stream_position)
}

// optional string short_name = 8;
inline bool ClubStateOptions::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClubStateOptions::has_short_name() const {
  return _internal_has_short_name();
}
inline void ClubStateOptions::clear_short_name() {
  short_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClubStateOptions::short_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.short_name)
  return _internal_short_name();
}
inline void ClubStateOptions::set_short_name(const std::string& value) {
  _internal_set_short_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateOptions.short_name)
}
inline std::string* ClubStateOptions::mutable_short_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.short_name)
  return _internal_mutable_short_name();
}
inline const std::string& ClubStateOptions::_internal_short_name() const {
  return short_name_.GetNoArena();
}
inline void ClubStateOptions::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubStateOptions::set_short_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubStateOptions.short_name)
}
inline void ClubStateOptions::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateOptions.short_name)
}
inline void ClubStateOptions::set_short_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateOptions.short_name)
}
inline std::string* ClubStateOptions::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000004u;
  return short_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubStateOptions::release_short_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateOptions.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return short_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubStateOptions::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  short_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.short_name)
}

// -------------------------------------------------------------------

// ClubStateAssignment

// optional uint64 club_id = 1;
inline bool ClubStateAssignment::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClubStateAssignment::has_club_id() const {
  return _internal_has_club_id();
}
inline void ClubStateAssignment::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubStateAssignment::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubStateAssignment::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.club_id)
  return _internal_club_id();
}
inline void ClubStateAssignment::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  club_id_ = value;
}
inline void ClubStateAssignment::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.club_id)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int ClubStateAssignment::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ClubStateAssignment::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* ClubStateAssignment::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubStateAssignment::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& ClubStateAssignment::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& ClubStateAssignment::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* ClubStateAssignment::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* ClubStateAssignment::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubStateAssignment::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return attribute_;
}

// optional string name = 3;
inline bool ClubStateAssignment::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubStateAssignment::has_name() const {
  return _internal_has_name();
}
inline void ClubStateAssignment::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClubStateAssignment::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.name)
  return _internal_name();
}
inline void ClubStateAssignment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.name)
}
inline std::string* ClubStateAssignment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.name)
  return _internal_mutable_name();
}
inline const std::string& ClubStateAssignment::_internal_name() const {
  return name_.GetNoArena();
}
inline void ClubStateAssignment::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubStateAssignment::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubStateAssignment.name)
}
inline void ClubStateAssignment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateAssignment.name)
}
inline void ClubStateAssignment::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateAssignment.name)
}
inline std::string* ClubStateAssignment::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubStateAssignment::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateAssignment.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubStateAssignment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.name)
}

// optional string description = 4;
inline bool ClubStateAssignment::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubStateAssignment::has_description() const {
  return _internal_has_description();
}
inline void ClubStateAssignment::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClubStateAssignment::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.description)
  return _internal_description();
}
inline void ClubStateAssignment::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.description)
}
inline std::string* ClubStateAssignment::mutable_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.description)
  return _internal_mutable_description();
}
inline const std::string& ClubStateAssignment::_internal_description() const {
  return description_.GetNoArena();
}
inline void ClubStateAssignment::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubStateAssignment::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubStateAssignment.description)
}
inline void ClubStateAssignment::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateAssignment.description)
}
inline void ClubStateAssignment::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateAssignment.description)
}
inline std::string* ClubStateAssignment::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubStateAssignment::release_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateAssignment.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubStateAssignment::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.description)
}

// optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
inline bool ClubStateAssignment::_internal_has_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || broadcast_ != nullptr);
  return value;
}
inline bool ClubStateAssignment::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void ClubStateAssignment::clear_broadcast() {
  if (broadcast_ != nullptr) broadcast_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::club::v1::Broadcast& ClubStateAssignment::_internal_broadcast() const {
  const ::bgs::protocol::club::v1::Broadcast* p = broadcast_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::Broadcast*>(
      &::bgs::protocol::club::v1::_Broadcast_default_instance_);
}
inline const ::bgs::protocol::club::v1::Broadcast& ClubStateAssignment::broadcast() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.broadcast)
  return _internal_broadcast();
}
inline ::bgs::protocol::club::v1::Broadcast* ClubStateAssignment::release_broadcast() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateAssignment.broadcast)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::Broadcast* temp = broadcast_;
  broadcast_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::Broadcast* ClubStateAssignment::_internal_mutable_broadcast() {
  _has_bits_[0] |= 0x00000008u;
  if (broadcast_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::Broadcast>(GetArenaNoVirtual());
    broadcast_ = p;
  }
  return broadcast_;
}
inline ::bgs::protocol::club::v1::Broadcast* ClubStateAssignment::mutable_broadcast() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.broadcast)
  return _internal_mutable_broadcast();
}
inline void ClubStateAssignment::set_allocated_broadcast(::bgs::protocol::club::v1::Broadcast* broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcast_;
  }
  if (broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  broadcast_ = broadcast;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.broadcast)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 6;
inline bool ClubStateAssignment::_internal_has_avatar() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || avatar_ != nullptr);
  return value;
}
inline bool ClubStateAssignment::has_avatar() const {
  return _internal_has_avatar();
}
inline void ClubStateAssignment::clear_avatar() {
  if (avatar_ != nullptr) avatar_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubStateAssignment::_internal_avatar() const {
  const ::bgs::protocol::club::v1::AvatarId* p = avatar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::AvatarId*>(
      &::bgs::protocol::club::v1::_AvatarId_default_instance_);
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubStateAssignment::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.avatar)
  return _internal_avatar();
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateAssignment::release_avatar() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateAssignment.avatar)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateAssignment::_internal_mutable_avatar() {
  _has_bits_[0] |= 0x00000010u;
  if (avatar_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::AvatarId>(GetArenaNoVirtual());
    avatar_ = p;
  }
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateAssignment::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.avatar)
  return _internal_mutable_avatar();
}
inline void ClubStateAssignment::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete avatar_;
  }
  if (avatar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avatar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_CLOSED];
inline bool ClubStateAssignment::_internal_has_privacy_level() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClubStateAssignment::has_privacy_level() const {
  return _internal_has_privacy_level();
}
inline void ClubStateAssignment::clear_privacy_level() {
  privacy_level_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubStateAssignment::_internal_privacy_level() const {
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubStateAssignment::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.privacy_level)
  return _internal_privacy_level();
}
inline void ClubStateAssignment::_internal_set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  privacy_level_ = value;
}
inline void ClubStateAssignment::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  _internal_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.privacy_level)
}

// optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
inline bool ClubStateAssignment::_internal_has_stream_position() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || stream_position_ != nullptr);
  return value;
}
inline bool ClubStateAssignment::has_stream_position() const {
  return _internal_has_stream_position();
}
inline const ::bgs::protocol::club::v1::StreamPosition& ClubStateAssignment::_internal_stream_position() const {
  const ::bgs::protocol::club::v1::StreamPosition* p = stream_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamPosition*>(
      &::bgs::protocol::club::v1::_StreamPosition_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamPosition& ClubStateAssignment::stream_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.stream_position)
  return _internal_stream_position();
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateAssignment::release_stream_position() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateAssignment.stream_position)
  _has_bits_[0] &= ~0x00000020u;
  ::bgs::protocol::club::v1::StreamPosition* temp = stream_position_;
  stream_position_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateAssignment::_internal_mutable_stream_position() {
  _has_bits_[0] |= 0x00000020u;
  if (stream_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamPosition>(GetArenaNoVirtual());
    stream_position_ = p;
  }
  return stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateAssignment::mutable_stream_position() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.stream_position)
  return _internal_mutable_stream_position();
}
inline void ClubStateAssignment::set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_position_);
  }
  if (stream_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  stream_position_ = stream_position;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.stream_position)
}

// optional string short_name = 9;
inline bool ClubStateAssignment::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClubStateAssignment::has_short_name() const {
  return _internal_has_short_name();
}
inline void ClubStateAssignment::clear_short_name() {
  short_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClubStateAssignment::short_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.short_name)
  return _internal_short_name();
}
inline void ClubStateAssignment::set_short_name(const std::string& value) {
  _internal_set_short_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}
inline std::string* ClubStateAssignment::mutable_short_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.short_name)
  return _internal_mutable_short_name();
}
inline const std::string& ClubStateAssignment::_internal_short_name() const {
  return short_name_.GetNoArena();
}
inline void ClubStateAssignment::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubStateAssignment::set_short_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}
inline void ClubStateAssignment::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}
inline void ClubStateAssignment::set_short_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}
inline std::string* ClubStateAssignment::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000004u;
  return short_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubStateAssignment::release_short_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStateAssignment.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return short_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubStateAssignment::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  short_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}

// -------------------------------------------------------------------

// StreamSettings

// optional uint64 stream_id = 1;
inline bool StreamSettings::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamSettings::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamSettings::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamSettings::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamSettings::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamSettings.stream_id)
  return _internal_stream_id();
}
inline void StreamSettings::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  stream_id_ = value;
}
inline void StreamSettings::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamSettings.stream_id)
}

// optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2 [default = STREAM_NOTIFICATION_FILTER_NONE];
inline bool StreamSettings::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamSettings::has_filter() const {
  return _internal_has_filter();
}
inline void StreamSettings::clear_filter() {
  filter_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::bgs::protocol::club::v1::StreamNotificationFilter StreamSettings::_internal_filter() const {
  return static_cast< ::bgs::protocol::club::v1::StreamNotificationFilter >(filter_);
}
inline ::bgs::protocol::club::v1::StreamNotificationFilter StreamSettings::filter() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamSettings.filter)
  return _internal_filter();
}
inline void StreamSettings::_internal_set_filter(::bgs::protocol::club::v1::StreamNotificationFilter value) {
  assert(::bgs::protocol::club::v1::StreamNotificationFilter_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  filter_ = value;
}
inline void StreamSettings::set_filter(::bgs::protocol::club::v1::StreamNotificationFilter value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamSettings.filter)
}

// -------------------------------------------------------------------

// ClubSettings

// repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
inline int ClubSettings::_internal_stream_size() const {
  return stream_.size();
}
inline int ClubSettings::stream_size() const {
  return _internal_stream_size();
}
inline void ClubSettings::clear_stream() {
  stream_.Clear();
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettings::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettings.stream)
  return stream_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
ClubSettings::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSettings.stream)
  return &stream_;
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettings::_internal_stream(int index) const {
  return stream_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettings::stream(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettings.stream)
  return _internal_stream(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettings::_internal_add_stream() {
  return stream_.Add();
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettings::add_stream() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSettings.stream)
  return _internal_add_stream();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
ClubSettings::stream() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSettings.stream)
  return stream_;
}

// optional bool stream_notification_filter_all = 2;
inline bool ClubSettings::_internal_has_stream_notification_filter_all() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubSettings::has_stream_notification_filter_all() const {
  return _internal_has_stream_notification_filter_all();
}
inline void ClubSettings::clear_stream_notification_filter_all() {
  stream_notification_filter_all_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ClubSettings::_internal_stream_notification_filter_all() const {
  return stream_notification_filter_all_;
}
inline bool ClubSettings::stream_notification_filter_all() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettings.stream_notification_filter_all)
  return _internal_stream_notification_filter_all();
}
inline void ClubSettings::_internal_set_stream_notification_filter_all(bool value) {
  _has_bits_[0] |= 0x00000001u;
  stream_notification_filter_all_ = value;
}
inline void ClubSettings::set_stream_notification_filter_all(bool value) {
  _internal_set_stream_notification_filter_all(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSettings.stream_notification_filter_all)
}

// repeated .bgs.protocol.v2.Attribute attribute = 3;
inline int ClubSettings::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ClubSettings::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* ClubSettings::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettings.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubSettings::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSettings.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& ClubSettings::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& ClubSettings::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettings.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* ClubSettings::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* ClubSettings::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSettings.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubSettings::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSettings.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// ClubSettingsOptions

// repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
inline int ClubSettingsOptions::_internal_stream_size() const {
  return stream_.size();
}
inline int ClubSettingsOptions::stream_size() const {
  return _internal_stream_size();
}
inline void ClubSettingsOptions::clear_stream() {
  stream_.Clear();
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsOptions::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return stream_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
ClubSettingsOptions::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return &stream_;
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettingsOptions::_internal_stream(int index) const {
  return stream_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettingsOptions::stream(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return _internal_stream(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsOptions::_internal_add_stream() {
  return stream_.Add();
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsOptions::add_stream() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return _internal_add_stream();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
ClubSettingsOptions::stream() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return stream_;
}

// optional .bgs.protocol.club.v1.ClubSettings settings = 2;
inline bool ClubSettingsOptions::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool ClubSettingsOptions::has_settings() const {
  return _internal_has_settings();
}
inline void ClubSettingsOptions::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::club::v1::ClubSettings& ClubSettingsOptions::_internal_settings() const {
  const ::bgs::protocol::club::v1::ClubSettings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSettings*>(
      &::bgs::protocol::club::v1::_ClubSettings_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSettings& ClubSettingsOptions::settings() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsOptions.settings)
  return _internal_settings();
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsOptions::release_settings() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSettingsOptions.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsOptions::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSettings>(GetArenaNoVirtual());
    settings_ = p;
  }
  return settings_;
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsOptions::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettingsOptions.settings)
  return _internal_mutable_settings();
}
inline void ClubSettingsOptions::set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSettingsOptions.settings)
}

// optional uint32 version = 3;
inline bool ClubSettingsOptions::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubSettingsOptions::has_version() const {
  return _internal_has_version();
}
inline void ClubSettingsOptions::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubSettingsOptions::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubSettingsOptions::version() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsOptions.version)
  return _internal_version();
}
inline void ClubSettingsOptions::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void ClubSettingsOptions::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSettingsOptions.version)
}

// -------------------------------------------------------------------

// ClubSettingsAssignment

// repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
inline int ClubSettingsAssignment::_internal_stream_size() const {
  return stream_.size();
}
inline int ClubSettingsAssignment::stream_size() const {
  return _internal_stream_size();
}
inline void ClubSettingsAssignment::clear_stream() {
  stream_.Clear();
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsAssignment::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return stream_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
ClubSettingsAssignment::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return &stream_;
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettingsAssignment::_internal_stream(int index) const {
  return stream_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettingsAssignment::stream(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return _internal_stream(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsAssignment::_internal_add_stream() {
  return stream_.Add();
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsAssignment::add_stream() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return _internal_add_stream();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
ClubSettingsAssignment::stream() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return stream_;
}

// optional .bgs.protocol.club.v1.ClubSettings settings = 2;
inline bool ClubSettingsAssignment::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool ClubSettingsAssignment::has_settings() const {
  return _internal_has_settings();
}
inline void ClubSettingsAssignment::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::club::v1::ClubSettings& ClubSettingsAssignment::_internal_settings() const {
  const ::bgs::protocol::club::v1::ClubSettings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSettings*>(
      &::bgs::protocol::club::v1::_ClubSettings_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSettings& ClubSettingsAssignment::settings() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsAssignment.settings)
  return _internal_settings();
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsAssignment::release_settings() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSettingsAssignment.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsAssignment::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSettings>(GetArenaNoVirtual());
    settings_ = p;
  }
  return settings_;
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsAssignment::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettingsAssignment.settings)
  return _internal_mutable_settings();
}
inline void ClubSettingsAssignment::set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSettingsAssignment.settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto
