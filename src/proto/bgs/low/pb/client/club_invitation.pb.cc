// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_invitation.proto

#include "bgs/low/pb/client/club_invitation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSlot> _instance;
} _ClubSlot_default_instance_;
class SendInvitationOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendInvitationOptions> _instance;
} _SendInvitationOptions_default_instance_;
class ClubInvitationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubInvitation> _instance;
} _ClubInvitation_default_instance_;
class SendSuggestionOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendSuggestionOptions> _instance;
} _SendSuggestionOptions_default_instance_;
class ClubSuggestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSuggestion> _instance;
} _ClubSuggestion_default_instance_;
class CreateTicketOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTicketOptions> _instance;
} _CreateTicketOptions_default_instance_;
class ClubTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubTicket> _instance;
} _ClubTicket_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubInvitation_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubInvitation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubInvitation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto}, {
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
      &scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSlot_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto}, {}};

static void InitDefaultsscc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSuggestion_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSuggestion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSuggestion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto}, {
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
      &scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubTicket_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubTicket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto}, {
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
      &scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_CreateTicketOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateTicketOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateTicketOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateTicketOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateTicketOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateTicketOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto}, {
      &scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SendInvitationOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SendInvitationOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SendInvitationOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SendInvitationOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendInvitationOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SendInvitationOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SendSuggestionOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SendSuggestionOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SendSuggestionOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SendSuggestionOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendSuggestionOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SendSuggestionOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSlot, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSlot, default_stream_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationOptions, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationOptions, slot_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationOptions, attribute_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, inviter_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, invitee_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, club_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, slot_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, creation_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, expiration_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitation, suggester_),
  5,
  0,
  1,
  2,
  3,
  ~0u,
  6,
  7,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionOptions, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionOptions, slot_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionOptions, attribute_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, suggester_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, suggestee_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, slot_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, creation_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestion, expiration_time_),
  3,
  4,
  0,
  1,
  2,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketOptions, slot_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketOptions, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketOptions, allowed_redeem_count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketOptions, expiration_time_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, creator_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, club_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, slot_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, current_redeem_count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, allowed_redeem_count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, creation_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicket, expiration_time_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::club::v1::ClubSlot)},
  { 9, 17, sizeof(::bgs::protocol::club::v1::SendInvitationOptions)},
  { 20, 34, sizeof(::bgs::protocol::club::v1::ClubInvitation)},
  { 43, 51, sizeof(::bgs::protocol::club::v1::SendSuggestionOptions)},
  { 54, 67, sizeof(::bgs::protocol::club::v1::ClubSuggestion)},
  { 75, 84, sizeof(::bgs::protocol::club::v1::CreateTicketOptions)},
  { 88, 102, sizeof(::bgs::protocol::club::v1::ClubTicket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SendInvitationOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubInvitation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SendSuggestionOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSuggestion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateTicketOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubTicket_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'bgs/low/pb/client/club_invitation.prot"
  "o\022\024bgs.protocol.club.v1\032!bgs/low/pb/clie"
  "nt/club_core.proto\032#bgs/low/pb/client/cl"
  "ub_member.proto\0325bgs/low/pb/client/api/c"
  "lient/v2/attribute_types.proto\"3\n\010ClubSl"
  "ot\022\014\n\004role\030\001 \001(\r\022\031\n\021default_stream_id\030\002 "
  "\001(\004\"\247\001\n\025SendInvitationOptions\0221\n\ttarget_"
  "id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId"
  "\022,\n\004slot\030\002 \001(\0132\036.bgs.protocol.club.v1.Cl"
  "ubSlot\022-\n\tattribute\030\003 \003(\0132\032.bgs.protocol"
  ".v2.Attribute\"\216\003\n\016ClubInvitation\022\n\n\002id\030\001"
  " \001(\006\0228\n\007inviter\030\002 \001(\0132\'.bgs.protocol.clu"
  "b.v1.MemberDescription\0228\n\007invitee\030\003 \001(\0132"
  "\'.bgs.protocol.club.v1.MemberDescription"
  "\0223\n\004club\030\004 \001(\0132%.bgs.protocol.club.v1.Cl"
  "ubDescription\022,\n\004slot\030\005 \001(\0132\036.bgs.protoc"
  "ol.club.v1.ClubSlot\022-\n\tattribute\030\006 \003(\0132\032"
  ".bgs.protocol.v2.Attribute\022\025\n\rcreation_t"
  "ime\030\007 \001(\004\022\027\n\017expiration_time\030\010 \001(\004\022:\n\tsu"
  "ggester\030\t \001(\0132\'.bgs.protocol.club.v1.Mem"
  "berDescription\"\247\001\n\025SendSuggestionOptions"
  "\0221\n\ttarget_id\030\001 \001(\0132\036.bgs.protocol.club."
  "v1.MemberId\022,\n\004slot\030\002 \001(\0132\036.bgs.protocol"
  ".club.v1.ClubSlot\022-\n\tattribute\030\003 \003(\0132\032.b"
  "gs.protocol.v2.Attribute\"\262\002\n\016ClubSuggest"
  "ion\022\n\n\002id\030\001 \001(\006\022\017\n\007club_id\030\002 \001(\004\022:\n\tsugg"
  "ester\030\003 \001(\0132\'.bgs.protocol.club.v1.Membe"
  "rDescription\022:\n\tsuggestee\030\004 \001(\0132\'.bgs.pr"
  "otocol.club.v1.MemberDescription\022,\n\004slot"
  "\030\005 \001(\0132\036.bgs.protocol.club.v1.ClubSlot\022-"
  "\n\tattribute\030\006 \003(\0132\032.bgs.protocol.v2.Attr"
  "ibute\022\025\n\rcreation_time\030\007 \001(\004\022\027\n\017expirati"
  "on_time\030\010 \001(\004\"\251\001\n\023CreateTicketOptions\022,\n"
  "\004slot\030\001 \001(\0132\036.bgs.protocol.club.v1.ClubS"
  "lot\022-\n\tattribute\030\002 \003(\0132\032.bgs.protocol.v2"
  ".Attribute\022\034\n\024allowed_redeem_count\030\003 \001(\r"
  "\022\027\n\017expiration_time\030\004 \001(\004\"\320\002\n\nClubTicket"
  "\022\n\n\002id\030\001 \001(\t\0228\n\007creator\030\002 \001(\0132\'.bgs.prot"
  "ocol.club.v1.MemberDescription\0223\n\004club\030\003"
  " \001(\0132%.bgs.protocol.club.v1.ClubDescript"
  "ion\022,\n\004slot\030\004 \001(\0132\036.bgs.protocol.club.v1"
  ".ClubSlot\022-\n\tattribute\030\005 \003(\0132\032.bgs.proto"
  "col.v2.Attribute\022\034\n\024current_redeem_count"
  "\030\006 \001(\r\022\034\n\024allowed_redeem_count\030\007 \001(\r\022\025\n\r"
  "creation_time\030\010 \001(\004\022\027\n\017expiration_time\030\t"
  " \001(\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto_deps[3] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto_sccs[7] = {
  &scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
  &scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
  &scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
  &scc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
  &scc_info_CreateTicketOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
  &scc_info_SendInvitationOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
  &scc_info_SendSuggestionOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto, "bgs/low/pb/client/club_invitation.proto", 1804,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto_deps, 7, 3,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto, 7, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void ClubSlot::InitAsDefaultInstance() {
}
class ClubSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSlot>()._has_bits_);
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClubSlot::ClubSlot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSlot)
}
ClubSlot::ClubSlot(const ClubSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&default_stream_id_, &from.default_stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&default_stream_id_)) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSlot)
}

void ClubSlot::SharedCtor() {
  ::memset(&default_stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&default_stream_id_)) + sizeof(role_));
}

ClubSlot::~ClubSlot() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSlot)
  SharedDtor();
}

void ClubSlot::SharedDtor() {
}

void ClubSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSlot& ClubSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSlot_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  return *internal_default_instance();
}


void ClubSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&default_stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_) -
        reinterpret_cast<char*>(&default_stream_id_)) + sizeof(role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_role(&has_bits);
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 default_stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_default_stream_id(&has_bits);
          default_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 role = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_role(), target);
  }

  // optional uint64 default_stream_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_default_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSlot)
  return target;
}

size_t ClubSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 default_stream_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_default_stream_id());
    }

    // optional uint32 role = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_role());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSlot)
    MergeFrom(*source);
  }
}

void ClubSlot::MergeFrom(const ClubSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      default_stream_id_ = from.default_stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSlot::CopyFrom(const ClubSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSlot::IsInitialized() const {
  return true;
}

void ClubSlot::InternalSwap(ClubSlot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(default_stream_id_, other->default_stream_id_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendInvitationOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SendInvitationOptions_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_SendInvitationOptions_default_instance_._instance.get_mutable()->slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(
      ::bgs::protocol::club::v1::ClubSlot::internal_default_instance());
}
class SendInvitationOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<SendInvitationOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& target_id(const SendInvitationOptions* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubSlot& slot(const SendInvitationOptions* msg);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SendInvitationOptions::_Internal::target_id(const SendInvitationOptions* msg) {
  return *msg->target_id_;
}
const ::bgs::protocol::club::v1::ClubSlot&
SendInvitationOptions::_Internal::slot(const SendInvitationOptions* msg) {
  return *msg->slot_;
}
void SendInvitationOptions::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SendInvitationOptions::clear_attribute() {
  attribute_.Clear();
}
SendInvitationOptions::SendInvitationOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SendInvitationOptions)
}
SendInvitationOptions::SendInvitationOptions(const SendInvitationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::club::v1::MemberId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  if (from._internal_has_slot()) {
    slot_ = new ::bgs::protocol::club::v1::ClubSlot(*from.slot_);
  } else {
    slot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SendInvitationOptions)
}

void SendInvitationOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendInvitationOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(slot_));
}

SendInvitationOptions::~SendInvitationOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SendInvitationOptions)
  SharedDtor();
}

void SendInvitationOptions::SharedDtor() {
  if (this != internal_default_instance()) delete target_id_;
  if (this != internal_default_instance()) delete slot_;
}

void SendInvitationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendInvitationOptions& SendInvitationOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendInvitationOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  return *internal_default_instance();
}


void SendInvitationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SendInvitationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slot_ != nullptr);
      slot_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SendInvitationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendInvitationOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SendInvitationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slot(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SendInvitationOptions)
  return target;
}

size_t SendInvitationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SendInvitationOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId target_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slot_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendInvitationOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SendInvitationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SendInvitationOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendInvitationOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SendInvitationOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SendInvitationOptions)
    MergeFrom(*source);
  }
}

void SendInvitationOptions::MergeFrom(const SendInvitationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SendInvitationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from._internal_slot());
    }
  }
}

void SendInvitationOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SendInvitationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitationOptions::CopyFrom(const SendInvitationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SendInvitationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationOptions::IsInitialized() const {
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void SendInvitationOptions::InternalSwap(SendInvitationOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(target_id_, other->target_id_);
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendInvitationOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubInvitation::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubInvitation_default_instance_._instance.get_mutable()->inviter_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubInvitation_default_instance_._instance.get_mutable()->invitee_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubInvitation_default_instance_._instance.get_mutable()->club_ = const_cast< ::bgs::protocol::club::v1::ClubDescription*>(
      ::bgs::protocol::club::v1::ClubDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubInvitation_default_instance_._instance.get_mutable()->slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(
      ::bgs::protocol::club::v1::ClubSlot::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubInvitation_default_instance_._instance.get_mutable()->suggester_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
}
class ClubInvitation::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubInvitation>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& inviter(const ClubInvitation* msg);
  static void set_has_inviter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& invitee(const ClubInvitation* msg);
  static void set_has_invitee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::ClubDescription& club(const ClubInvitation* msg);
  static void set_has_club(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubSlot& slot(const ClubInvitation* msg);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& suggester(const ClubInvitation* msg);
  static void set_has_suggester(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::club::v1::MemberDescription&
ClubInvitation::_Internal::inviter(const ClubInvitation* msg) {
  return *msg->inviter_;
}
const ::bgs::protocol::club::v1::MemberDescription&
ClubInvitation::_Internal::invitee(const ClubInvitation* msg) {
  return *msg->invitee_;
}
const ::bgs::protocol::club::v1::ClubDescription&
ClubInvitation::_Internal::club(const ClubInvitation* msg) {
  return *msg->club_;
}
const ::bgs::protocol::club::v1::ClubSlot&
ClubInvitation::_Internal::slot(const ClubInvitation* msg) {
  return *msg->slot_;
}
const ::bgs::protocol::club::v1::MemberDescription&
ClubInvitation::_Internal::suggester(const ClubInvitation* msg) {
  return *msg->suggester_;
}
void ClubInvitation::clear_inviter() {
  if (inviter_ != nullptr) inviter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubInvitation::clear_invitee() {
  if (invitee_ != nullptr) invitee_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ClubInvitation::clear_club() {
  if (club_ != nullptr) club_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ClubInvitation::clear_attribute() {
  attribute_.Clear();
}
void ClubInvitation::clear_suggester() {
  if (suggester_ != nullptr) suggester_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ClubInvitation::ClubInvitation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubInvitation)
}
ClubInvitation::ClubInvitation(const ClubInvitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_inviter()) {
    inviter_ = new ::bgs::protocol::club::v1::MemberDescription(*from.inviter_);
  } else {
    inviter_ = nullptr;
  }
  if (from._internal_has_invitee()) {
    invitee_ = new ::bgs::protocol::club::v1::MemberDescription(*from.invitee_);
  } else {
    invitee_ = nullptr;
  }
  if (from._internal_has_club()) {
    club_ = new ::bgs::protocol::club::v1::ClubDescription(*from.club_);
  } else {
    club_ = nullptr;
  }
  if (from._internal_has_slot()) {
    slot_ = new ::bgs::protocol::club::v1::ClubSlot(*from.slot_);
  } else {
    slot_ = nullptr;
  }
  if (from._internal_has_suggester()) {
    suggester_ = new ::bgs::protocol::club::v1::MemberDescription(*from.suggester_);
  } else {
    suggester_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(expiration_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubInvitation)
}

void ClubInvitation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  ::memset(&inviter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_time_) -
      reinterpret_cast<char*>(&inviter_)) + sizeof(expiration_time_));
}

ClubInvitation::~ClubInvitation() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubInvitation)
  SharedDtor();
}

void ClubInvitation::SharedDtor() {
  if (this != internal_default_instance()) delete inviter_;
  if (this != internal_default_instance()) delete invitee_;
  if (this != internal_default_instance()) delete club_;
  if (this != internal_default_instance()) delete slot_;
  if (this != internal_default_instance()) delete suggester_;
}

void ClubInvitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubInvitation& ClubInvitation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  return *internal_default_instance();
}


void ClubInvitation::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubInvitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(inviter_ != nullptr);
      inviter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(invitee_ != nullptr);
      invitee_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(club_ != nullptr);
      club_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(slot_ != nullptr);
      slot_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(suggester_ != nullptr);
      suggester_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_time_) -
        reinterpret_cast<char*>(&id_)) + sizeof(expiration_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubInvitation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubDescription club = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_club(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 expiration_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggester(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubInvitation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubInvitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inviter(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::invitee(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::club(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::slot(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_attribute(i), target, stream);
  }

  // optional uint64 creation_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_creation_time(), target);
  }

  // optional uint64 expiration_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_expiration_time(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::suggester(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubInvitation)
  return target;
}

size_t ClubInvitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubInvitation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inviter_);
    }

    // optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *invitee_);
    }

    // optional .bgs.protocol.club.v1.ClubDescription club = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *club_);
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slot_);
    }

    // optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suggester_);
    }

    // optional fixed64 id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint64 creation_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

    // optional uint64 expiration_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expiration_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubInvitation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubInvitation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubInvitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubInvitation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubInvitation)
    MergeFrom(*source);
  }
}

void ClubInvitation::MergeFrom(const ClubInvitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_inviter()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_inviter());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_invitee()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_invitee());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_club()->::bgs::protocol::club::v1::ClubDescription::MergeFrom(from._internal_club());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from._internal_slot());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_suggester()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_suggester());
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      expiration_time_ = from.expiration_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubInvitation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubInvitation::CopyFrom(const ClubInvitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubInvitation::IsInitialized() const {
  if (_internal_has_inviter()) {
    if (!inviter_->IsInitialized()) return false;
  }
  if (_internal_has_invitee()) {
    if (!invitee_->IsInitialized()) return false;
  }
  if (_internal_has_club()) {
    if (!club_->IsInitialized()) return false;
  }
  if (_internal_has_suggester()) {
    if (!suggester_->IsInitialized()) return false;
  }
  return true;
}

void ClubInvitation::InternalSwap(ClubInvitation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(inviter_, other->inviter_);
  swap(invitee_, other->invitee_);
  swap(club_, other->club_);
  swap(slot_, other->slot_);
  swap(suggester_, other->suggester_);
  swap(id_, other->id_);
  swap(creation_time_, other->creation_time_);
  swap(expiration_time_, other->expiration_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubInvitation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendSuggestionOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SendSuggestionOptions_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_SendSuggestionOptions_default_instance_._instance.get_mutable()->slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(
      ::bgs::protocol::club::v1::ClubSlot::internal_default_instance());
}
class SendSuggestionOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<SendSuggestionOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& target_id(const SendSuggestionOptions* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubSlot& slot(const SendSuggestionOptions* msg);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SendSuggestionOptions::_Internal::target_id(const SendSuggestionOptions* msg) {
  return *msg->target_id_;
}
const ::bgs::protocol::club::v1::ClubSlot&
SendSuggestionOptions::_Internal::slot(const SendSuggestionOptions* msg) {
  return *msg->slot_;
}
void SendSuggestionOptions::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SendSuggestionOptions::clear_attribute() {
  attribute_.Clear();
}
SendSuggestionOptions::SendSuggestionOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SendSuggestionOptions)
}
SendSuggestionOptions::SendSuggestionOptions(const SendSuggestionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::club::v1::MemberId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  if (from._internal_has_slot()) {
    slot_ = new ::bgs::protocol::club::v1::ClubSlot(*from.slot_);
  } else {
    slot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SendSuggestionOptions)
}

void SendSuggestionOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendSuggestionOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(slot_));
}

SendSuggestionOptions::~SendSuggestionOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SendSuggestionOptions)
  SharedDtor();
}

void SendSuggestionOptions::SharedDtor() {
  if (this != internal_default_instance()) delete target_id_;
  if (this != internal_default_instance()) delete slot_;
}

void SendSuggestionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendSuggestionOptions& SendSuggestionOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendSuggestionOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  return *internal_default_instance();
}


void SendSuggestionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SendSuggestionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slot_ != nullptr);
      slot_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SendSuggestionOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendSuggestionOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SendSuggestionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slot(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SendSuggestionOptions)
  return target;
}

size_t SendSuggestionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SendSuggestionOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId target_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slot_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendSuggestionOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SendSuggestionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SendSuggestionOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendSuggestionOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SendSuggestionOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SendSuggestionOptions)
    MergeFrom(*source);
  }
}

void SendSuggestionOptions::MergeFrom(const SendSuggestionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SendSuggestionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from._internal_slot());
    }
  }
}

void SendSuggestionOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SendSuggestionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSuggestionOptions::CopyFrom(const SendSuggestionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SendSuggestionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSuggestionOptions::IsInitialized() const {
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void SendSuggestionOptions::InternalSwap(SendSuggestionOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(target_id_, other->target_id_);
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendSuggestionOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubSuggestion::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubSuggestion_default_instance_._instance.get_mutable()->suggester_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubSuggestion_default_instance_._instance.get_mutable()->suggestee_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubSuggestion_default_instance_._instance.get_mutable()->slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(
      ::bgs::protocol::club::v1::ClubSlot::internal_default_instance());
}
class ClubSuggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSuggestion>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& suggester(const ClubSuggestion* msg);
  static void set_has_suggester(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& suggestee(const ClubSuggestion* msg);
  static void set_has_suggestee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::ClubSlot& slot(const ClubSuggestion* msg);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::bgs::protocol::club::v1::MemberDescription&
ClubSuggestion::_Internal::suggester(const ClubSuggestion* msg) {
  return *msg->suggester_;
}
const ::bgs::protocol::club::v1::MemberDescription&
ClubSuggestion::_Internal::suggestee(const ClubSuggestion* msg) {
  return *msg->suggestee_;
}
const ::bgs::protocol::club::v1::ClubSlot&
ClubSuggestion::_Internal::slot(const ClubSuggestion* msg) {
  return *msg->slot_;
}
void ClubSuggestion::clear_suggester() {
  if (suggester_ != nullptr) suggester_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubSuggestion::clear_suggestee() {
  if (suggestee_ != nullptr) suggestee_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ClubSuggestion::clear_attribute() {
  attribute_.Clear();
}
ClubSuggestion::ClubSuggestion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSuggestion)
}
ClubSuggestion::ClubSuggestion(const ClubSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_suggester()) {
    suggester_ = new ::bgs::protocol::club::v1::MemberDescription(*from.suggester_);
  } else {
    suggester_ = nullptr;
  }
  if (from._internal_has_suggestee()) {
    suggestee_ = new ::bgs::protocol::club::v1::MemberDescription(*from.suggestee_);
  } else {
    suggestee_ = nullptr;
  }
  if (from._internal_has_slot()) {
    slot_ = new ::bgs::protocol::club::v1::ClubSlot(*from.slot_);
  } else {
    slot_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(expiration_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSuggestion)
}

void ClubSuggestion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  ::memset(&suggester_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_time_) -
      reinterpret_cast<char*>(&suggester_)) + sizeof(expiration_time_));
}

ClubSuggestion::~ClubSuggestion() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSuggestion)
  SharedDtor();
}

void ClubSuggestion::SharedDtor() {
  if (this != internal_default_instance()) delete suggester_;
  if (this != internal_default_instance()) delete suggestee_;
  if (this != internal_default_instance()) delete slot_;
}

void ClubSuggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSuggestion& ClubSuggestion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  return *internal_default_instance();
}


void ClubSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(suggester_ != nullptr);
      suggester_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(suggestee_ != nullptr);
      suggestee_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(slot_ != nullptr);
      slot_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_time_) -
        reinterpret_cast<char*>(&id_)) + sizeof(expiration_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSuggestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggester(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 expiration_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSuggestion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::suggester(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::suggestee(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::slot(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_attribute(i), target, stream);
  }

  // optional uint64 creation_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_creation_time(), target);
  }

  // optional uint64 expiration_time = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSuggestion)
  return target;
}

size_t ClubSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSuggestion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suggester_);
    }

    // optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suggestee_);
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slot_);
    }

    // optional fixed64 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 creation_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

    // optional uint64 expiration_time = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expiration_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSuggestion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSuggestion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSuggestion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSuggestion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSuggestion)
    MergeFrom(*source);
  }
}

void ClubSuggestion::MergeFrom(const ClubSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_suggester()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_suggester());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_suggestee()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_suggestee());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from._internal_slot());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      expiration_time_ = from.expiration_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubSuggestion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSuggestion::CopyFrom(const ClubSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSuggestion::IsInitialized() const {
  if (_internal_has_suggester()) {
    if (!suggester_->IsInitialized()) return false;
  }
  if (_internal_has_suggestee()) {
    if (!suggestee_->IsInitialized()) return false;
  }
  return true;
}

void ClubSuggestion::InternalSwap(ClubSuggestion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(suggester_, other->suggester_);
  swap(suggestee_, other->suggestee_);
  swap(slot_, other->slot_);
  swap(id_, other->id_);
  swap(club_id_, other->club_id_);
  swap(creation_time_, other->creation_time_);
  swap(expiration_time_, other->expiration_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSuggestion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTicketOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateTicketOptions_default_instance_._instance.get_mutable()->slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(
      ::bgs::protocol::club::v1::ClubSlot::internal_default_instance());
}
class CreateTicketOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateTicketOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubSlot& slot(const CreateTicketOptions* msg);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowed_redeem_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::ClubSlot&
CreateTicketOptions::_Internal::slot(const CreateTicketOptions* msg) {
  return *msg->slot_;
}
void CreateTicketOptions::clear_attribute() {
  attribute_.Clear();
}
CreateTicketOptions::CreateTicketOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateTicketOptions)
}
CreateTicketOptions::CreateTicketOptions(const CreateTicketOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_slot()) {
    slot_ = new ::bgs::protocol::club::v1::ClubSlot(*from.slot_);
  } else {
    slot_ = nullptr;
  }
  ::memcpy(&expiration_time_, &from.expiration_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowed_redeem_count_) -
    reinterpret_cast<char*>(&expiration_time_)) + sizeof(allowed_redeem_count_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateTicketOptions)
}

void CreateTicketOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTicketOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  ::memset(&slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowed_redeem_count_) -
      reinterpret_cast<char*>(&slot_)) + sizeof(allowed_redeem_count_));
}

CreateTicketOptions::~CreateTicketOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateTicketOptions)
  SharedDtor();
}

void CreateTicketOptions::SharedDtor() {
  if (this != internal_default_instance()) delete slot_;
}

void CreateTicketOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTicketOptions& CreateTicketOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTicketOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  return *internal_default_instance();
}


void CreateTicketOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateTicketOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(slot_ != nullptr);
    slot_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&expiration_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allowed_redeem_count_) -
        reinterpret_cast<char*>(&expiration_time_)) + sizeof(allowed_redeem_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateTicketOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubSlot slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 allowed_redeem_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_allowed_redeem_count(&has_bits);
          allowed_redeem_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 expiration_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTicketOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateTicketOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubSlot slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slot(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  // optional uint32 allowed_redeem_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_allowed_redeem_count(), target);
  }

  // optional uint64 expiration_time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateTicketOptions)
  return target;
}

size_t CreateTicketOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateTicketOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.ClubSlot slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slot_);
    }

    // optional uint64 expiration_time = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expiration_time());
    }

    // optional uint32 allowed_redeem_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_allowed_redeem_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTicketOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateTicketOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTicketOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTicketOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateTicketOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateTicketOptions)
    MergeFrom(*source);
  }
}

void CreateTicketOptions::MergeFrom(const CreateTicketOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateTicketOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from._internal_slot());
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_time_ = from.expiration_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      allowed_redeem_count_ = from.allowed_redeem_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateTicketOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateTicketOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTicketOptions::CopyFrom(const CreateTicketOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateTicketOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTicketOptions::IsInitialized() const {
  return true;
}

void CreateTicketOptions::InternalSwap(CreateTicketOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(slot_, other->slot_);
  swap(expiration_time_, other->expiration_time_);
  swap(allowed_redeem_count_, other->allowed_redeem_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTicketOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubTicket::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubTicket_default_instance_._instance.get_mutable()->creator_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTicket_default_instance_._instance.get_mutable()->club_ = const_cast< ::bgs::protocol::club::v1::ClubDescription*>(
      ::bgs::protocol::club::v1::ClubDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTicket_default_instance_._instance.get_mutable()->slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(
      ::bgs::protocol::club::v1::ClubSlot::internal_default_instance());
}
class ClubTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubTicket>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& creator(const ClubTicket* msg);
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::ClubDescription& club(const ClubTicket* msg);
  static void set_has_club(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubSlot& slot(const ClubTicket* msg);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_current_redeem_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_allowed_redeem_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::bgs::protocol::club::v1::MemberDescription&
ClubTicket::_Internal::creator(const ClubTicket* msg) {
  return *msg->creator_;
}
const ::bgs::protocol::club::v1::ClubDescription&
ClubTicket::_Internal::club(const ClubTicket* msg) {
  return *msg->club_;
}
const ::bgs::protocol::club::v1::ClubSlot&
ClubTicket::_Internal::slot(const ClubTicket* msg) {
  return *msg->slot_;
}
void ClubTicket::clear_creator() {
  if (creator_ != nullptr) creator_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ClubTicket::clear_club() {
  if (club_ != nullptr) club_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ClubTicket::clear_attribute() {
  attribute_.Clear();
}
ClubTicket::ClubTicket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubTicket)
}
ClubTicket::ClubTicket(const ClubTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_creator()) {
    creator_ = new ::bgs::protocol::club::v1::MemberDescription(*from.creator_);
  } else {
    creator_ = nullptr;
  }
  if (from._internal_has_club()) {
    club_ = new ::bgs::protocol::club::v1::ClubDescription(*from.club_);
  } else {
    club_ = nullptr;
  }
  if (from._internal_has_slot()) {
    slot_ = new ::bgs::protocol::club::v1::ClubSlot(*from.slot_);
  } else {
    slot_ = nullptr;
  }
  ::memcpy(&current_redeem_count_, &from.current_redeem_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&current_redeem_count_)) + sizeof(expiration_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubTicket)
}

void ClubTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&creator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_time_) -
      reinterpret_cast<char*>(&creator_)) + sizeof(expiration_time_));
}

ClubTicket::~ClubTicket() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubTicket)
  SharedDtor();
}

void ClubTicket::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creator_;
  if (this != internal_default_instance()) delete club_;
  if (this != internal_default_instance()) delete slot_;
}

void ClubTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubTicket& ClubTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base);
  return *internal_default_instance();
}


void ClubTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(creator_ != nullptr);
      creator_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(club_ != nullptr);
      club_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(slot_ != nullptr);
      slot_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&current_redeem_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_time_) -
        reinterpret_cast<char*>(&current_redeem_count_)) + sizeof(expiration_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubTicket.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_creator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubDescription club = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_club(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSlot slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 current_redeem_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_current_redeem_count(&has_bits);
          current_redeem_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 allowed_redeem_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_allowed_redeem_count(&has_bits);
          allowed_redeem_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 expiration_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubTicket.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::creator(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::club(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::slot(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_attribute(i), target, stream);
  }

  // optional uint32 current_redeem_count = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_current_redeem_count(), target);
  }

  // optional uint32 allowed_redeem_count = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_allowed_redeem_count(), target);
  }

  // optional uint64 creation_time = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_creation_time(), target);
  }

  // optional uint64 expiration_time = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubTicket)
  return target;
}

size_t ClubTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creator_);
    }

    // optional .bgs.protocol.club.v1.ClubDescription club = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *club_);
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slot_);
    }

    // optional uint32 current_redeem_count = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_redeem_count());
    }

    // optional uint32 allowed_redeem_count = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_allowed_redeem_count());
    }

    // optional uint64 creation_time = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

    // optional uint64 expiration_time = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expiration_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubTicket)
    MergeFrom(*source);
  }
}

void ClubTicket::MergeFrom(const ClubTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_creator()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_creator());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_club()->::bgs::protocol::club::v1::ClubDescription::MergeFrom(from._internal_club());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from._internal_slot());
    }
    if (cached_has_bits & 0x00000010u) {
      current_redeem_count_ = from.current_redeem_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      allowed_redeem_count_ = from.allowed_redeem_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      expiration_time_ = from.expiration_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubTicket::CopyFrom(const ClubTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubTicket::IsInitialized() const {
  if (_internal_has_creator()) {
    if (!creator_->IsInitialized()) return false;
  }
  if (_internal_has_club()) {
    if (!club_->IsInitialized()) return false;
  }
  return true;
}

void ClubTicket::InternalSwap(ClubTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(creator_, other->creator_);
  swap(club_, other->club_);
  swap(slot_, other->slot_);
  swap(current_redeem_count_, other->current_redeem_count_);
  swap(allowed_redeem_count_, other->allowed_redeem_count_);
  swap(creation_time_, other->creation_time_);
  swap(expiration_time_, other->expiration_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSlot* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSlot >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SendInvitationOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SendInvitationOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SendInvitationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubInvitation* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubInvitation >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubInvitation >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SendSuggestionOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SendSuggestionOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SendSuggestionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSuggestion* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSuggestion >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSuggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateTicketOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateTicketOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateTicketOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubTicket* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubTicket >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubTicket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
