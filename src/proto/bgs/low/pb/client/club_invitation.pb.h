// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_invitation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_core.pb.h"
#include "bgs/low/pb/client/club_member.pb.h"
#include "bgs/low/pb/client/api/client/v2/attribute_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubInvitation;
class ClubInvitationDefaultTypeInternal;
extern ClubInvitationDefaultTypeInternal _ClubInvitation_default_instance_;
class ClubSlot;
class ClubSlotDefaultTypeInternal;
extern ClubSlotDefaultTypeInternal _ClubSlot_default_instance_;
class ClubSuggestion;
class ClubSuggestionDefaultTypeInternal;
extern ClubSuggestionDefaultTypeInternal _ClubSuggestion_default_instance_;
class ClubTicket;
class ClubTicketDefaultTypeInternal;
extern ClubTicketDefaultTypeInternal _ClubTicket_default_instance_;
class CreateTicketOptions;
class CreateTicketOptionsDefaultTypeInternal;
extern CreateTicketOptionsDefaultTypeInternal _CreateTicketOptions_default_instance_;
class SendInvitationOptions;
class SendInvitationOptionsDefaultTypeInternal;
extern SendInvitationOptionsDefaultTypeInternal _SendInvitationOptions_default_instance_;
class SendSuggestionOptions;
class SendSuggestionOptionsDefaultTypeInternal;
extern SendSuggestionOptionsDefaultTypeInternal _SendSuggestionOptions_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::ClubInvitation* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubInvitation>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSlot* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSlot>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSuggestion* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSuggestion>(Arena*);
template<> ::bgs::protocol::club::v1::ClubTicket* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubTicket>(Arena*);
template<> ::bgs::protocol::club::v1::CreateTicketOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateTicketOptions>(Arena*);
template<> ::bgs::protocol::club::v1::SendInvitationOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SendInvitationOptions>(Arena*);
template<> ::bgs::protocol::club::v1::SendSuggestionOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SendSuggestionOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class ClubSlot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSlot) */ {
 public:
  ClubSlot();
  virtual ~ClubSlot();

  ClubSlot(const ClubSlot& from);
  ClubSlot(ClubSlot&& from) noexcept
    : ClubSlot() {
    *this = ::std::move(from);
  }

  inline ClubSlot& operator=(const ClubSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSlot& operator=(ClubSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSlot* internal_default_instance() {
    return reinterpret_cast<const ClubSlot*>(
               &_ClubSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClubSlot& a, ClubSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSlot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSlot* New() const final {
    return CreateMaybeMessage<ClubSlot>(nullptr);
  }

  ClubSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSlot& from);
  void MergeFrom(const ClubSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSlot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultStreamIdFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // optional uint64 default_stream_id = 2;
  bool has_default_stream_id() const;
  private:
  bool _internal_has_default_stream_id() const;
  public:
  void clear_default_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 default_stream_id() const;
  void set_default_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_default_stream_id() const;
  void _internal_set_default_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::uint32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSlot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 default_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 role_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
};
// -------------------------------------------------------------------

class SendInvitationOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SendInvitationOptions) */ {
 public:
  SendInvitationOptions();
  virtual ~SendInvitationOptions();

  SendInvitationOptions(const SendInvitationOptions& from);
  SendInvitationOptions(SendInvitationOptions&& from) noexcept
    : SendInvitationOptions() {
    *this = ::std::move(from);
  }

  inline SendInvitationOptions& operator=(const SendInvitationOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendInvitationOptions& operator=(SendInvitationOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendInvitationOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendInvitationOptions* internal_default_instance() {
    return reinterpret_cast<const SendInvitationOptions*>(
               &_SendInvitationOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendInvitationOptions& a, SendInvitationOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SendInvitationOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendInvitationOptions* New() const final {
    return CreateMaybeMessage<SendInvitationOptions>(nullptr);
  }

  SendInvitationOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendInvitationOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendInvitationOptions& from);
  void MergeFrom(const SendInvitationOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendInvitationOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SendInvitationOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 3,
    kTargetIdFieldNumber = 1,
    kSlotFieldNumber = 2,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::club::v1::MemberId& target_id() const;
  ::bgs::protocol::club::v1::MemberId* release_target_id();
  ::bgs::protocol::club::v1::MemberId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_target_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_target_id();
  public:

  // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const ::bgs::protocol::club::v1::ClubSlot& slot() const;
  ::bgs::protocol::club::v1::ClubSlot* release_slot();
  ::bgs::protocol::club::v1::ClubSlot* mutable_slot();
  void set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot);
  private:
  const ::bgs::protocol::club::v1::ClubSlot& _internal_slot() const;
  ::bgs::protocol::club::v1::ClubSlot* _internal_mutable_slot();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SendInvitationOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::bgs::protocol::club::v1::MemberId* target_id_;
  ::bgs::protocol::club::v1::ClubSlot* slot_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
};
// -------------------------------------------------------------------

class ClubInvitation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubInvitation) */ {
 public:
  ClubInvitation();
  virtual ~ClubInvitation();

  ClubInvitation(const ClubInvitation& from);
  ClubInvitation(ClubInvitation&& from) noexcept
    : ClubInvitation() {
    *this = ::std::move(from);
  }

  inline ClubInvitation& operator=(const ClubInvitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubInvitation& operator=(ClubInvitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubInvitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubInvitation* internal_default_instance() {
    return reinterpret_cast<const ClubInvitation*>(
               &_ClubInvitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClubInvitation& a, ClubInvitation& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubInvitation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubInvitation* New() const final {
    return CreateMaybeMessage<ClubInvitation>(nullptr);
  }

  ClubInvitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubInvitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubInvitation& from);
  void MergeFrom(const ClubInvitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubInvitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubInvitation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 6,
    kInviterFieldNumber = 2,
    kInviteeFieldNumber = 3,
    kClubFieldNumber = 4,
    kSlotFieldNumber = 5,
    kSuggesterFieldNumber = 9,
    kIdFieldNumber = 1,
    kCreationTimeFieldNumber = 7,
    kExpirationTimeFieldNumber = 8,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
  bool has_inviter() const;
  private:
  bool _internal_has_inviter() const;
  public:
  void clear_inviter();
  const ::bgs::protocol::club::v1::MemberDescription& inviter() const;
  ::bgs::protocol::club::v1::MemberDescription* release_inviter();
  ::bgs::protocol::club::v1::MemberDescription* mutable_inviter();
  void set_allocated_inviter(::bgs::protocol::club::v1::MemberDescription* inviter);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_inviter() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_inviter();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
  bool has_invitee() const;
  private:
  bool _internal_has_invitee() const;
  public:
  void clear_invitee();
  const ::bgs::protocol::club::v1::MemberDescription& invitee() const;
  ::bgs::protocol::club::v1::MemberDescription* release_invitee();
  ::bgs::protocol::club::v1::MemberDescription* mutable_invitee();
  void set_allocated_invitee(::bgs::protocol::club::v1::MemberDescription* invitee);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_invitee() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_invitee();
  public:

  // optional .bgs.protocol.club.v1.ClubDescription club = 4;
  bool has_club() const;
  private:
  bool _internal_has_club() const;
  public:
  void clear_club();
  const ::bgs::protocol::club::v1::ClubDescription& club() const;
  ::bgs::protocol::club::v1::ClubDescription* release_club();
  ::bgs::protocol::club::v1::ClubDescription* mutable_club();
  void set_allocated_club(::bgs::protocol::club::v1::ClubDescription* club);
  private:
  const ::bgs::protocol::club::v1::ClubDescription& _internal_club() const;
  ::bgs::protocol::club::v1::ClubDescription* _internal_mutable_club();
  public:

  // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const ::bgs::protocol::club::v1::ClubSlot& slot() const;
  ::bgs::protocol::club::v1::ClubSlot* release_slot();
  ::bgs::protocol::club::v1::ClubSlot* mutable_slot();
  void set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot);
  private:
  const ::bgs::protocol::club::v1::ClubSlot& _internal_slot() const;
  ::bgs::protocol::club::v1::ClubSlot* _internal_mutable_slot();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
  bool has_suggester() const;
  private:
  bool _internal_has_suggester() const;
  public:
  void clear_suggester();
  const ::bgs::protocol::club::v1::MemberDescription& suggester() const;
  ::bgs::protocol::club::v1::MemberDescription* release_suggester();
  ::bgs::protocol::club::v1::MemberDescription* mutable_suggester();
  void set_allocated_suggester(::bgs::protocol::club::v1::MemberDescription* suggester);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_suggester() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_suggester();
  public:

  // optional fixed64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 creation_time = 7;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 expiration_time = 8;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time() const;
  void set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiration_time() const;
  void _internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubInvitation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::bgs::protocol::club::v1::MemberDescription* inviter_;
  ::bgs::protocol::club::v1::MemberDescription* invitee_;
  ::bgs::protocol::club::v1::ClubDescription* club_;
  ::bgs::protocol::club::v1::ClubSlot* slot_;
  ::bgs::protocol::club::v1::MemberDescription* suggester_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
};
// -------------------------------------------------------------------

class SendSuggestionOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SendSuggestionOptions) */ {
 public:
  SendSuggestionOptions();
  virtual ~SendSuggestionOptions();

  SendSuggestionOptions(const SendSuggestionOptions& from);
  SendSuggestionOptions(SendSuggestionOptions&& from) noexcept
    : SendSuggestionOptions() {
    *this = ::std::move(from);
  }

  inline SendSuggestionOptions& operator=(const SendSuggestionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendSuggestionOptions& operator=(SendSuggestionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendSuggestionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendSuggestionOptions* internal_default_instance() {
    return reinterpret_cast<const SendSuggestionOptions*>(
               &_SendSuggestionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SendSuggestionOptions& a, SendSuggestionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SendSuggestionOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendSuggestionOptions* New() const final {
    return CreateMaybeMessage<SendSuggestionOptions>(nullptr);
  }

  SendSuggestionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendSuggestionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendSuggestionOptions& from);
  void MergeFrom(const SendSuggestionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendSuggestionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SendSuggestionOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 3,
    kTargetIdFieldNumber = 1,
    kSlotFieldNumber = 2,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::club::v1::MemberId& target_id() const;
  ::bgs::protocol::club::v1::MemberId* release_target_id();
  ::bgs::protocol::club::v1::MemberId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_target_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_target_id();
  public:

  // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const ::bgs::protocol::club::v1::ClubSlot& slot() const;
  ::bgs::protocol::club::v1::ClubSlot* release_slot();
  ::bgs::protocol::club::v1::ClubSlot* mutable_slot();
  void set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot);
  private:
  const ::bgs::protocol::club::v1::ClubSlot& _internal_slot() const;
  ::bgs::protocol::club::v1::ClubSlot* _internal_mutable_slot();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SendSuggestionOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::bgs::protocol::club::v1::MemberId* target_id_;
  ::bgs::protocol::club::v1::ClubSlot* slot_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
};
// -------------------------------------------------------------------

class ClubSuggestion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSuggestion) */ {
 public:
  ClubSuggestion();
  virtual ~ClubSuggestion();

  ClubSuggestion(const ClubSuggestion& from);
  ClubSuggestion(ClubSuggestion&& from) noexcept
    : ClubSuggestion() {
    *this = ::std::move(from);
  }

  inline ClubSuggestion& operator=(const ClubSuggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSuggestion& operator=(ClubSuggestion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSuggestion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSuggestion* internal_default_instance() {
    return reinterpret_cast<const ClubSuggestion*>(
               &_ClubSuggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClubSuggestion& a, ClubSuggestion& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSuggestion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSuggestion* New() const final {
    return CreateMaybeMessage<ClubSuggestion>(nullptr);
  }

  ClubSuggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSuggestion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSuggestion& from);
  void MergeFrom(const ClubSuggestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSuggestion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSuggestion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 6,
    kSuggesterFieldNumber = 3,
    kSuggesteeFieldNumber = 4,
    kSlotFieldNumber = 5,
    kIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kCreationTimeFieldNumber = 7,
    kExpirationTimeFieldNumber = 8,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
  bool has_suggester() const;
  private:
  bool _internal_has_suggester() const;
  public:
  void clear_suggester();
  const ::bgs::protocol::club::v1::MemberDescription& suggester() const;
  ::bgs::protocol::club::v1::MemberDescription* release_suggester();
  ::bgs::protocol::club::v1::MemberDescription* mutable_suggester();
  void set_allocated_suggester(::bgs::protocol::club::v1::MemberDescription* suggester);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_suggester() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_suggester();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
  bool has_suggestee() const;
  private:
  bool _internal_has_suggestee() const;
  public:
  void clear_suggestee();
  const ::bgs::protocol::club::v1::MemberDescription& suggestee() const;
  ::bgs::protocol::club::v1::MemberDescription* release_suggestee();
  ::bgs::protocol::club::v1::MemberDescription* mutable_suggestee();
  void set_allocated_suggestee(::bgs::protocol::club::v1::MemberDescription* suggestee);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_suggestee() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_suggestee();
  public:

  // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const ::bgs::protocol::club::v1::ClubSlot& slot() const;
  ::bgs::protocol::club::v1::ClubSlot* release_slot();
  ::bgs::protocol::club::v1::ClubSlot* mutable_slot();
  void set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot);
  private:
  const ::bgs::protocol::club::v1::ClubSlot& _internal_slot() const;
  ::bgs::protocol::club::v1::ClubSlot* _internal_mutable_slot();
  public:

  // optional fixed64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 creation_time = 7;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 expiration_time = 8;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time() const;
  void set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiration_time() const;
  void _internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSuggestion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::bgs::protocol::club::v1::MemberDescription* suggester_;
  ::bgs::protocol::club::v1::MemberDescription* suggestee_;
  ::bgs::protocol::club::v1::ClubSlot* slot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
};
// -------------------------------------------------------------------

class CreateTicketOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateTicketOptions) */ {
 public:
  CreateTicketOptions();
  virtual ~CreateTicketOptions();

  CreateTicketOptions(const CreateTicketOptions& from);
  CreateTicketOptions(CreateTicketOptions&& from) noexcept
    : CreateTicketOptions() {
    *this = ::std::move(from);
  }

  inline CreateTicketOptions& operator=(const CreateTicketOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTicketOptions& operator=(CreateTicketOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTicketOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTicketOptions* internal_default_instance() {
    return reinterpret_cast<const CreateTicketOptions*>(
               &_CreateTicketOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateTicketOptions& a, CreateTicketOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTicketOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTicketOptions* New() const final {
    return CreateMaybeMessage<CreateTicketOptions>(nullptr);
  }

  CreateTicketOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTicketOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTicketOptions& from);
  void MergeFrom(const CreateTicketOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTicketOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateTicketOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kSlotFieldNumber = 1,
    kExpirationTimeFieldNumber = 4,
    kAllowedRedeemCountFieldNumber = 3,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional .bgs.protocol.club.v1.ClubSlot slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const ::bgs::protocol::club::v1::ClubSlot& slot() const;
  ::bgs::protocol::club::v1::ClubSlot* release_slot();
  ::bgs::protocol::club::v1::ClubSlot* mutable_slot();
  void set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot);
  private:
  const ::bgs::protocol::club::v1::ClubSlot& _internal_slot() const;
  ::bgs::protocol::club::v1::ClubSlot* _internal_mutable_slot();
  public:

  // optional uint64 expiration_time = 4;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time() const;
  void set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiration_time() const;
  void _internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 allowed_redeem_count = 3;
  bool has_allowed_redeem_count() const;
  private:
  bool _internal_has_allowed_redeem_count() const;
  public:
  void clear_allowed_redeem_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 allowed_redeem_count() const;
  void set_allowed_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_allowed_redeem_count() const;
  void _internal_set_allowed_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateTicketOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::bgs::protocol::club::v1::ClubSlot* slot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 allowed_redeem_count_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
};
// -------------------------------------------------------------------

class ClubTicket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubTicket) */ {
 public:
  ClubTicket();
  virtual ~ClubTicket();

  ClubTicket(const ClubTicket& from);
  ClubTicket(ClubTicket&& from) noexcept
    : ClubTicket() {
    *this = ::std::move(from);
  }

  inline ClubTicket& operator=(const ClubTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubTicket& operator=(ClubTicket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubTicket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubTicket* internal_default_instance() {
    return reinterpret_cast<const ClubTicket*>(
               &_ClubTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClubTicket& a, ClubTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubTicket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubTicket* New() const final {
    return CreateMaybeMessage<ClubTicket>(nullptr);
  }

  ClubTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubTicket& from);
  void MergeFrom(const ClubTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubTicket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 5,
    kIdFieldNumber = 1,
    kCreatorFieldNumber = 2,
    kClubFieldNumber = 3,
    kSlotFieldNumber = 4,
    kCurrentRedeemCountFieldNumber = 6,
    kAllowedRedeemCountFieldNumber = 7,
    kCreationTimeFieldNumber = 8,
    kExpirationTimeFieldNumber = 9,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  bool has_creator() const;
  private:
  bool _internal_has_creator() const;
  public:
  void clear_creator();
  const ::bgs::protocol::club::v1::MemberDescription& creator() const;
  ::bgs::protocol::club::v1::MemberDescription* release_creator();
  ::bgs::protocol::club::v1::MemberDescription* mutable_creator();
  void set_allocated_creator(::bgs::protocol::club::v1::MemberDescription* creator);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_creator() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_creator();
  public:

  // optional .bgs.protocol.club.v1.ClubDescription club = 3;
  bool has_club() const;
  private:
  bool _internal_has_club() const;
  public:
  void clear_club();
  const ::bgs::protocol::club::v1::ClubDescription& club() const;
  ::bgs::protocol::club::v1::ClubDescription* release_club();
  ::bgs::protocol::club::v1::ClubDescription* mutable_club();
  void set_allocated_club(::bgs::protocol::club::v1::ClubDescription* club);
  private:
  const ::bgs::protocol::club::v1::ClubDescription& _internal_club() const;
  ::bgs::protocol::club::v1::ClubDescription* _internal_mutable_club();
  public:

  // optional .bgs.protocol.club.v1.ClubSlot slot = 4;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const ::bgs::protocol::club::v1::ClubSlot& slot() const;
  ::bgs::protocol::club::v1::ClubSlot* release_slot();
  ::bgs::protocol::club::v1::ClubSlot* mutable_slot();
  void set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot);
  private:
  const ::bgs::protocol::club::v1::ClubSlot& _internal_slot() const;
  ::bgs::protocol::club::v1::ClubSlot* _internal_mutable_slot();
  public:

  // optional uint32 current_redeem_count = 6;
  bool has_current_redeem_count() const;
  private:
  bool _internal_has_current_redeem_count() const;
  public:
  void clear_current_redeem_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_redeem_count() const;
  void set_current_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_redeem_count() const;
  void _internal_set_current_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 allowed_redeem_count = 7;
  bool has_allowed_redeem_count() const;
  private:
  bool _internal_has_allowed_redeem_count() const;
  public:
  void clear_allowed_redeem_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 allowed_redeem_count() const;
  void set_allowed_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_allowed_redeem_count() const;
  void _internal_set_allowed_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 creation_time = 8;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 expiration_time = 9;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time() const;
  void set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiration_time() const;
  void _internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubTicket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::bgs::protocol::club::v1::MemberDescription* creator_;
  ::bgs::protocol::club::v1::ClubDescription* club_;
  ::bgs::protocol::club::v1::ClubSlot* slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_redeem_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 allowed_redeem_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClubSlot

// optional uint32 role = 1;
inline bool ClubSlot::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubSlot::has_role() const {
  return _internal_has_role();
}
inline void ClubSlot::clear_role() {
  role_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubSlot::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubSlot::role() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSlot.role)
  return _internal_role();
}
inline void ClubSlot::_internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  role_ = value;
}
inline void ClubSlot::set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSlot.role)
}

// optional uint64 default_stream_id = 2;
inline bool ClubSlot::_internal_has_default_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubSlot::has_default_stream_id() const {
  return _internal_has_default_stream_id();
}
inline void ClubSlot::clear_default_stream_id() {
  default_stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSlot::_internal_default_stream_id() const {
  return default_stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSlot::default_stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSlot.default_stream_id)
  return _internal_default_stream_id();
}
inline void ClubSlot::_internal_set_default_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  default_stream_id_ = value;
}
inline void ClubSlot::set_default_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_default_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSlot.default_stream_id)
}

// -------------------------------------------------------------------

// SendInvitationOptions

// optional .bgs.protocol.club.v1.MemberId target_id = 1;
inline bool SendInvitationOptions::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool SendInvitationOptions::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SendInvitationOptions::_internal_target_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SendInvitationOptions::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendInvitationOptions.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::club::v1::MemberId* SendInvitationOptions::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SendInvitationOptions.target_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SendInvitationOptions::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000001u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SendInvitationOptions::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendInvitationOptions.target_id)
  return _internal_mutable_target_id();
}
inline void SendInvitationOptions::set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SendInvitationOptions.target_id)
}

// optional .bgs.protocol.club.v1.ClubSlot slot = 2;
inline bool SendInvitationOptions::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slot_ != nullptr);
  return value;
}
inline bool SendInvitationOptions::has_slot() const {
  return _internal_has_slot();
}
inline void SendInvitationOptions::clear_slot() {
  if (slot_ != nullptr) slot_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::club::v1::ClubSlot& SendInvitationOptions::_internal_slot() const {
  const ::bgs::protocol::club::v1::ClubSlot* p = slot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSlot*>(
      &::bgs::protocol::club::v1::_ClubSlot_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSlot& SendInvitationOptions::slot() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendInvitationOptions.slot)
  return _internal_slot();
}
inline ::bgs::protocol::club::v1::ClubSlot* SendInvitationOptions::release_slot() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SendInvitationOptions.slot)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubSlot* temp = slot_;
  slot_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSlot* SendInvitationOptions::_internal_mutable_slot() {
  _has_bits_[0] |= 0x00000002u;
  if (slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSlot>(GetArenaNoVirtual());
    slot_ = p;
  }
  return slot_;
}
inline ::bgs::protocol::club::v1::ClubSlot* SendInvitationOptions::mutable_slot() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendInvitationOptions.slot)
  return _internal_mutable_slot();
}
inline void SendInvitationOptions::set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete slot_;
  }
  if (slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slot_ = slot;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SendInvitationOptions.slot)
}

// repeated .bgs.protocol.v2.Attribute attribute = 3;
inline int SendInvitationOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int SendInvitationOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* SendInvitationOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendInvitationOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
SendInvitationOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.SendInvitationOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& SendInvitationOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& SendInvitationOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendInvitationOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* SendInvitationOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* SendInvitationOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.SendInvitationOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
SendInvitationOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.SendInvitationOptions.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// ClubInvitation

// optional fixed64 id = 1;
inline bool ClubInvitation::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClubInvitation::has_id() const {
  return _internal_has_id();
}
inline void ClubInvitation::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubInvitation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubInvitation::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.id)
  return _internal_id();
}
inline void ClubInvitation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
}
inline void ClubInvitation::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubInvitation.id)
}

// optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
inline bool ClubInvitation::_internal_has_inviter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || inviter_ != nullptr);
  return value;
}
inline bool ClubInvitation::has_inviter() const {
  return _internal_has_inviter();
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubInvitation::_internal_inviter() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = inviter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubInvitation::inviter() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.inviter)
  return _internal_inviter();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::release_inviter() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubInvitation.inviter)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberDescription* temp = inviter_;
  inviter_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::_internal_mutable_inviter() {
  _has_bits_[0] |= 0x00000001u;
  if (inviter_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    inviter_ = p;
  }
  return inviter_;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::mutable_inviter() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubInvitation.inviter)
  return _internal_mutable_inviter();
}
inline void ClubInvitation::set_allocated_inviter(::bgs::protocol::club::v1::MemberDescription* inviter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviter_);
  }
  if (inviter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inviter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inviter_ = inviter;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubInvitation.inviter)
}

// optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
inline bool ClubInvitation::_internal_has_invitee() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || invitee_ != nullptr);
  return value;
}
inline bool ClubInvitation::has_invitee() const {
  return _internal_has_invitee();
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubInvitation::_internal_invitee() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = invitee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubInvitation::invitee() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.invitee)
  return _internal_invitee();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::release_invitee() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubInvitation.invitee)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberDescription* temp = invitee_;
  invitee_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::_internal_mutable_invitee() {
  _has_bits_[0] |= 0x00000002u;
  if (invitee_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    invitee_ = p;
  }
  return invitee_;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::mutable_invitee() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubInvitation.invitee)
  return _internal_mutable_invitee();
}
inline void ClubInvitation::set_allocated_invitee(::bgs::protocol::club::v1::MemberDescription* invitee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitee_);
  }
  if (invitee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invitee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitee, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  invitee_ = invitee;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubInvitation.invitee)
}

// optional .bgs.protocol.club.v1.ClubDescription club = 4;
inline bool ClubInvitation::_internal_has_club() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || club_ != nullptr);
  return value;
}
inline bool ClubInvitation::has_club() const {
  return _internal_has_club();
}
inline const ::bgs::protocol::club::v1::ClubDescription& ClubInvitation::_internal_club() const {
  const ::bgs::protocol::club::v1::ClubDescription* p = club_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubDescription*>(
      &::bgs::protocol::club::v1::_ClubDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubDescription& ClubInvitation::club() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.club)
  return _internal_club();
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubInvitation::release_club() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubInvitation.club)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::ClubDescription* temp = club_;
  club_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubInvitation::_internal_mutable_club() {
  _has_bits_[0] |= 0x00000004u;
  if (club_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubDescription>(GetArenaNoVirtual());
    club_ = p;
  }
  return club_;
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubInvitation::mutable_club() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubInvitation.club)
  return _internal_mutable_club();
}
inline void ClubInvitation::set_allocated_club(::bgs::protocol::club::v1::ClubDescription* club) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(club_);
  }
  if (club) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      club = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, club, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  club_ = club;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubInvitation.club)
}

// optional .bgs.protocol.club.v1.ClubSlot slot = 5;
inline bool ClubInvitation::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || slot_ != nullptr);
  return value;
}
inline bool ClubInvitation::has_slot() const {
  return _internal_has_slot();
}
inline void ClubInvitation::clear_slot() {
  if (slot_ != nullptr) slot_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::club::v1::ClubSlot& ClubInvitation::_internal_slot() const {
  const ::bgs::protocol::club::v1::ClubSlot* p = slot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSlot*>(
      &::bgs::protocol::club::v1::_ClubSlot_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSlot& ClubInvitation::slot() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.slot)
  return _internal_slot();
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubInvitation::release_slot() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubInvitation.slot)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::ClubSlot* temp = slot_;
  slot_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubInvitation::_internal_mutable_slot() {
  _has_bits_[0] |= 0x00000008u;
  if (slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSlot>(GetArenaNoVirtual());
    slot_ = p;
  }
  return slot_;
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubInvitation::mutable_slot() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubInvitation.slot)
  return _internal_mutable_slot();
}
inline void ClubInvitation::set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete slot_;
  }
  if (slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  slot_ = slot;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubInvitation.slot)
}

// repeated .bgs.protocol.v2.Attribute attribute = 6;
inline int ClubInvitation::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ClubInvitation::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* ClubInvitation::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubInvitation.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubInvitation::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubInvitation.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& ClubInvitation::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& ClubInvitation::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* ClubInvitation::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* ClubInvitation::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubInvitation.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubInvitation::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubInvitation.attribute)
  return attribute_;
}

// optional uint64 creation_time = 7;
inline bool ClubInvitation::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClubInvitation::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void ClubInvitation::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubInvitation::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubInvitation::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.creation_time)
  return _internal_creation_time();
}
inline void ClubInvitation::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  creation_time_ = value;
}
inline void ClubInvitation::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubInvitation.creation_time)
}

// optional uint64 expiration_time = 8;
inline bool ClubInvitation::_internal_has_expiration_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClubInvitation::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline void ClubInvitation::clear_expiration_time() {
  expiration_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubInvitation::_internal_expiration_time() const {
  return expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubInvitation::expiration_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.expiration_time)
  return _internal_expiration_time();
}
inline void ClubInvitation::_internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  expiration_time_ = value;
}
inline void ClubInvitation::set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiration_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubInvitation.expiration_time)
}

// optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
inline bool ClubInvitation::_internal_has_suggester() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || suggester_ != nullptr);
  return value;
}
inline bool ClubInvitation::has_suggester() const {
  return _internal_has_suggester();
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubInvitation::_internal_suggester() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = suggester_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubInvitation::suggester() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitation.suggester)
  return _internal_suggester();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::release_suggester() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubInvitation.suggester)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::club::v1::MemberDescription* temp = suggester_;
  suggester_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::_internal_mutable_suggester() {
  _has_bits_[0] |= 0x00000010u;
  if (suggester_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    suggester_ = p;
  }
  return suggester_;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubInvitation::mutable_suggester() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubInvitation.suggester)
  return _internal_mutable_suggester();
}
inline void ClubInvitation::set_allocated_suggester(::bgs::protocol::club::v1::MemberDescription* suggester) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggester_);
  }
  if (suggester) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggester = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggester, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  suggester_ = suggester;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubInvitation.suggester)
}

// -------------------------------------------------------------------

// SendSuggestionOptions

// optional .bgs.protocol.club.v1.MemberId target_id = 1;
inline bool SendSuggestionOptions::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool SendSuggestionOptions::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SendSuggestionOptions::_internal_target_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SendSuggestionOptions::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendSuggestionOptions.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::club::v1::MemberId* SendSuggestionOptions::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SendSuggestionOptions.target_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SendSuggestionOptions::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000001u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SendSuggestionOptions::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendSuggestionOptions.target_id)
  return _internal_mutable_target_id();
}
inline void SendSuggestionOptions::set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SendSuggestionOptions.target_id)
}

// optional .bgs.protocol.club.v1.ClubSlot slot = 2;
inline bool SendSuggestionOptions::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slot_ != nullptr);
  return value;
}
inline bool SendSuggestionOptions::has_slot() const {
  return _internal_has_slot();
}
inline void SendSuggestionOptions::clear_slot() {
  if (slot_ != nullptr) slot_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::club::v1::ClubSlot& SendSuggestionOptions::_internal_slot() const {
  const ::bgs::protocol::club::v1::ClubSlot* p = slot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSlot*>(
      &::bgs::protocol::club::v1::_ClubSlot_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSlot& SendSuggestionOptions::slot() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendSuggestionOptions.slot)
  return _internal_slot();
}
inline ::bgs::protocol::club::v1::ClubSlot* SendSuggestionOptions::release_slot() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SendSuggestionOptions.slot)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubSlot* temp = slot_;
  slot_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSlot* SendSuggestionOptions::_internal_mutable_slot() {
  _has_bits_[0] |= 0x00000002u;
  if (slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSlot>(GetArenaNoVirtual());
    slot_ = p;
  }
  return slot_;
}
inline ::bgs::protocol::club::v1::ClubSlot* SendSuggestionOptions::mutable_slot() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendSuggestionOptions.slot)
  return _internal_mutable_slot();
}
inline void SendSuggestionOptions::set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete slot_;
  }
  if (slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slot_ = slot;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SendSuggestionOptions.slot)
}

// repeated .bgs.protocol.v2.Attribute attribute = 3;
inline int SendSuggestionOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int SendSuggestionOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* SendSuggestionOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendSuggestionOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
SendSuggestionOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.SendSuggestionOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& SendSuggestionOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& SendSuggestionOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendSuggestionOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* SendSuggestionOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* SendSuggestionOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.SendSuggestionOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
SendSuggestionOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.SendSuggestionOptions.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// ClubSuggestion

// optional fixed64 id = 1;
inline bool ClubSuggestion::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClubSuggestion::has_id() const {
  return _internal_has_id();
}
inline void ClubSuggestion::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSuggestion::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSuggestion::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestion.id)
  return _internal_id();
}
inline void ClubSuggestion::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void ClubSuggestion::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSuggestion.id)
}

// optional uint64 club_id = 2;
inline bool ClubSuggestion::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClubSuggestion::has_club_id() const {
  return _internal_has_club_id();
}
inline void ClubSuggestion::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSuggestion::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSuggestion::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestion.club_id)
  return _internal_club_id();
}
inline void ClubSuggestion::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  club_id_ = value;
}
inline void ClubSuggestion::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSuggestion.club_id)
}

// optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
inline bool ClubSuggestion::_internal_has_suggester() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || suggester_ != nullptr);
  return value;
}
inline bool ClubSuggestion::has_suggester() const {
  return _internal_has_suggester();
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubSuggestion::_internal_suggester() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = suggester_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubSuggestion::suggester() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestion.suggester)
  return _internal_suggester();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubSuggestion::release_suggester() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSuggestion.suggester)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberDescription* temp = suggester_;
  suggester_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubSuggestion::_internal_mutable_suggester() {
  _has_bits_[0] |= 0x00000001u;
  if (suggester_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    suggester_ = p;
  }
  return suggester_;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubSuggestion::mutable_suggester() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSuggestion.suggester)
  return _internal_mutable_suggester();
}
inline void ClubSuggestion::set_allocated_suggester(::bgs::protocol::club::v1::MemberDescription* suggester) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggester_);
  }
  if (suggester) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggester = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggester, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  suggester_ = suggester;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSuggestion.suggester)
}

// optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
inline bool ClubSuggestion::_internal_has_suggestee() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || suggestee_ != nullptr);
  return value;
}
inline bool ClubSuggestion::has_suggestee() const {
  return _internal_has_suggestee();
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubSuggestion::_internal_suggestee() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = suggestee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubSuggestion::suggestee() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestion.suggestee)
  return _internal_suggestee();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubSuggestion::release_suggestee() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSuggestion.suggestee)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberDescription* temp = suggestee_;
  suggestee_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubSuggestion::_internal_mutable_suggestee() {
  _has_bits_[0] |= 0x00000002u;
  if (suggestee_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    suggestee_ = p;
  }
  return suggestee_;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubSuggestion::mutable_suggestee() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSuggestion.suggestee)
  return _internal_mutable_suggestee();
}
inline void ClubSuggestion::set_allocated_suggestee(::bgs::protocol::club::v1::MemberDescription* suggestee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggestee_);
  }
  if (suggestee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggestee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggestee, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  suggestee_ = suggestee;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSuggestion.suggestee)
}

// optional .bgs.protocol.club.v1.ClubSlot slot = 5;
inline bool ClubSuggestion::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || slot_ != nullptr);
  return value;
}
inline bool ClubSuggestion::has_slot() const {
  return _internal_has_slot();
}
inline void ClubSuggestion::clear_slot() {
  if (slot_ != nullptr) slot_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::club::v1::ClubSlot& ClubSuggestion::_internal_slot() const {
  const ::bgs::protocol::club::v1::ClubSlot* p = slot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSlot*>(
      &::bgs::protocol::club::v1::_ClubSlot_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSlot& ClubSuggestion::slot() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestion.slot)
  return _internal_slot();
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubSuggestion::release_slot() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSuggestion.slot)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::ClubSlot* temp = slot_;
  slot_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubSuggestion::_internal_mutable_slot() {
  _has_bits_[0] |= 0x00000004u;
  if (slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSlot>(GetArenaNoVirtual());
    slot_ = p;
  }
  return slot_;
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubSuggestion::mutable_slot() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSuggestion.slot)
  return _internal_mutable_slot();
}
inline void ClubSuggestion::set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete slot_;
  }
  if (slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  slot_ = slot;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSuggestion.slot)
}

// repeated .bgs.protocol.v2.Attribute attribute = 6;
inline int ClubSuggestion::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ClubSuggestion::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* ClubSuggestion::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSuggestion.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubSuggestion::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSuggestion.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& ClubSuggestion::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& ClubSuggestion::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestion.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* ClubSuggestion::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* ClubSuggestion::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSuggestion.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubSuggestion::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSuggestion.attribute)
  return attribute_;
}

// optional uint64 creation_time = 7;
inline bool ClubSuggestion::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClubSuggestion::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void ClubSuggestion::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSuggestion::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSuggestion::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestion.creation_time)
  return _internal_creation_time();
}
inline void ClubSuggestion::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  creation_time_ = value;
}
inline void ClubSuggestion::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSuggestion.creation_time)
}

// optional uint64 expiration_time = 8;
inline bool ClubSuggestion::_internal_has_expiration_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClubSuggestion::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline void ClubSuggestion::clear_expiration_time() {
  expiration_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSuggestion::_internal_expiration_time() const {
  return expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubSuggestion::expiration_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestion.expiration_time)
  return _internal_expiration_time();
}
inline void ClubSuggestion::_internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  expiration_time_ = value;
}
inline void ClubSuggestion::set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiration_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSuggestion.expiration_time)
}

// -------------------------------------------------------------------

// CreateTicketOptions

// optional .bgs.protocol.club.v1.ClubSlot slot = 1;
inline bool CreateTicketOptions::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slot_ != nullptr);
  return value;
}
inline bool CreateTicketOptions::has_slot() const {
  return _internal_has_slot();
}
inline void CreateTicketOptions::clear_slot() {
  if (slot_ != nullptr) slot_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::club::v1::ClubSlot& CreateTicketOptions::_internal_slot() const {
  const ::bgs::protocol::club::v1::ClubSlot* p = slot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSlot*>(
      &::bgs::protocol::club::v1::_ClubSlot_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSlot& CreateTicketOptions::slot() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateTicketOptions.slot)
  return _internal_slot();
}
inline ::bgs::protocol::club::v1::ClubSlot* CreateTicketOptions::release_slot() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateTicketOptions.slot)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubSlot* temp = slot_;
  slot_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSlot* CreateTicketOptions::_internal_mutable_slot() {
  _has_bits_[0] |= 0x00000001u;
  if (slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSlot>(GetArenaNoVirtual());
    slot_ = p;
  }
  return slot_;
}
inline ::bgs::protocol::club::v1::ClubSlot* CreateTicketOptions::mutable_slot() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateTicketOptions.slot)
  return _internal_mutable_slot();
}
inline void CreateTicketOptions::set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete slot_;
  }
  if (slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slot_ = slot;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateTicketOptions.slot)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int CreateTicketOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int CreateTicketOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* CreateTicketOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateTicketOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
CreateTicketOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.CreateTicketOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& CreateTicketOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& CreateTicketOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateTicketOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* CreateTicketOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* CreateTicketOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.CreateTicketOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
CreateTicketOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.CreateTicketOptions.attribute)
  return attribute_;
}

// optional uint32 allowed_redeem_count = 3;
inline bool CreateTicketOptions::_internal_has_allowed_redeem_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateTicketOptions::has_allowed_redeem_count() const {
  return _internal_has_allowed_redeem_count();
}
inline void CreateTicketOptions::clear_allowed_redeem_count() {
  allowed_redeem_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTicketOptions::_internal_allowed_redeem_count() const {
  return allowed_redeem_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTicketOptions::allowed_redeem_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateTicketOptions.allowed_redeem_count)
  return _internal_allowed_redeem_count();
}
inline void CreateTicketOptions::_internal_set_allowed_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  allowed_redeem_count_ = value;
}
inline void CreateTicketOptions::set_allowed_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_allowed_redeem_count(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateTicketOptions.allowed_redeem_count)
}

// optional uint64 expiration_time = 4;
inline bool CreateTicketOptions::_internal_has_expiration_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateTicketOptions::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline void CreateTicketOptions::clear_expiration_time() {
  expiration_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateTicketOptions::_internal_expiration_time() const {
  return expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateTicketOptions::expiration_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateTicketOptions.expiration_time)
  return _internal_expiration_time();
}
inline void CreateTicketOptions::_internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  expiration_time_ = value;
}
inline void CreateTicketOptions::set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiration_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateTicketOptions.expiration_time)
}

// -------------------------------------------------------------------

// ClubTicket

// optional string id = 1;
inline bool ClubTicket::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubTicket::has_id() const {
  return _internal_has_id();
}
inline void ClubTicket::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClubTicket::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.id)
  return _internal_id();
}
inline void ClubTicket::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubTicket.id)
}
inline std::string* ClubTicket::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTicket.id)
  return _internal_mutable_id();
}
inline const std::string& ClubTicket::_internal_id() const {
  return id_.GetNoArena();
}
inline void ClubTicket::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubTicket::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubTicket.id)
}
inline void ClubTicket::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubTicket.id)
}
inline void ClubTicket::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubTicket.id)
}
inline std::string* ClubTicket::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubTicket::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTicket.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubTicket::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTicket.id)
}

// optional .bgs.protocol.club.v1.MemberDescription creator = 2;
inline bool ClubTicket::_internal_has_creator() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || creator_ != nullptr);
  return value;
}
inline bool ClubTicket::has_creator() const {
  return _internal_has_creator();
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubTicket::_internal_creator() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = creator_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubTicket::creator() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.creator)
  return _internal_creator();
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubTicket::release_creator() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTicket.creator)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberDescription* temp = creator_;
  creator_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubTicket::_internal_mutable_creator() {
  _has_bits_[0] |= 0x00000002u;
  if (creator_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    creator_ = p;
  }
  return creator_;
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubTicket::mutable_creator() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTicket.creator)
  return _internal_mutable_creator();
}
inline void ClubTicket::set_allocated_creator(::bgs::protocol::club::v1::MemberDescription* creator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creator_);
  }
  if (creator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      creator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  creator_ = creator;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTicket.creator)
}

// optional .bgs.protocol.club.v1.ClubDescription club = 3;
inline bool ClubTicket::_internal_has_club() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || club_ != nullptr);
  return value;
}
inline bool ClubTicket::has_club() const {
  return _internal_has_club();
}
inline const ::bgs::protocol::club::v1::ClubDescription& ClubTicket::_internal_club() const {
  const ::bgs::protocol::club::v1::ClubDescription* p = club_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubDescription*>(
      &::bgs::protocol::club::v1::_ClubDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubDescription& ClubTicket::club() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.club)
  return _internal_club();
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubTicket::release_club() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTicket.club)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::ClubDescription* temp = club_;
  club_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubTicket::_internal_mutable_club() {
  _has_bits_[0] |= 0x00000004u;
  if (club_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubDescription>(GetArenaNoVirtual());
    club_ = p;
  }
  return club_;
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubTicket::mutable_club() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTicket.club)
  return _internal_mutable_club();
}
inline void ClubTicket::set_allocated_club(::bgs::protocol::club::v1::ClubDescription* club) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(club_);
  }
  if (club) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      club = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, club, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  club_ = club;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTicket.club)
}

// optional .bgs.protocol.club.v1.ClubSlot slot = 4;
inline bool ClubTicket::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || slot_ != nullptr);
  return value;
}
inline bool ClubTicket::has_slot() const {
  return _internal_has_slot();
}
inline void ClubTicket::clear_slot() {
  if (slot_ != nullptr) slot_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::club::v1::ClubSlot& ClubTicket::_internal_slot() const {
  const ::bgs::protocol::club::v1::ClubSlot* p = slot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSlot*>(
      &::bgs::protocol::club::v1::_ClubSlot_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSlot& ClubTicket::slot() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.slot)
  return _internal_slot();
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubTicket::release_slot() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTicket.slot)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::ClubSlot* temp = slot_;
  slot_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubTicket::_internal_mutable_slot() {
  _has_bits_[0] |= 0x00000008u;
  if (slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSlot>(GetArenaNoVirtual());
    slot_ = p;
  }
  return slot_;
}
inline ::bgs::protocol::club::v1::ClubSlot* ClubTicket::mutable_slot() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTicket.slot)
  return _internal_mutable_slot();
}
inline void ClubTicket::set_allocated_slot(::bgs::protocol::club::v1::ClubSlot* slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete slot_;
  }
  if (slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  slot_ = slot;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTicket.slot)
}

// repeated .bgs.protocol.v2.Attribute attribute = 5;
inline int ClubTicket::_internal_attribute_size() const {
  return attribute_.size();
}
inline int ClubTicket::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* ClubTicket::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTicket.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubTicket::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubTicket.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& ClubTicket::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& ClubTicket::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* ClubTicket::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* ClubTicket::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubTicket.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubTicket::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubTicket.attribute)
  return attribute_;
}

// optional uint32 current_redeem_count = 6;
inline bool ClubTicket::_internal_has_current_redeem_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClubTicket::has_current_redeem_count() const {
  return _internal_has_current_redeem_count();
}
inline void ClubTicket::clear_current_redeem_count() {
  current_redeem_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubTicket::_internal_current_redeem_count() const {
  return current_redeem_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubTicket::current_redeem_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.current_redeem_count)
  return _internal_current_redeem_count();
}
inline void ClubTicket::_internal_set_current_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  current_redeem_count_ = value;
}
inline void ClubTicket::set_current_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_redeem_count(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubTicket.current_redeem_count)
}

// optional uint32 allowed_redeem_count = 7;
inline bool ClubTicket::_internal_has_allowed_redeem_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClubTicket::has_allowed_redeem_count() const {
  return _internal_has_allowed_redeem_count();
}
inline void ClubTicket::clear_allowed_redeem_count() {
  allowed_redeem_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubTicket::_internal_allowed_redeem_count() const {
  return allowed_redeem_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubTicket::allowed_redeem_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.allowed_redeem_count)
  return _internal_allowed_redeem_count();
}
inline void ClubTicket::_internal_set_allowed_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  allowed_redeem_count_ = value;
}
inline void ClubTicket::set_allowed_redeem_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_allowed_redeem_count(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubTicket.allowed_redeem_count)
}

// optional uint64 creation_time = 8;
inline bool ClubTicket::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClubTicket::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void ClubTicket::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubTicket::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubTicket::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.creation_time)
  return _internal_creation_time();
}
inline void ClubTicket::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  creation_time_ = value;
}
inline void ClubTicket::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubTicket.creation_time)
}

// optional uint64 expiration_time = 9;
inline bool ClubTicket::_internal_has_expiration_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClubTicket::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline void ClubTicket::clear_expiration_time() {
  expiration_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubTicket::_internal_expiration_time() const {
  return expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubTicket::expiration_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicket.expiration_time)
  return _internal_expiration_time();
}
inline void ClubTicket::_internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  expiration_time_ = value;
}
inline void ClubTicket::set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiration_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubTicket.expiration_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto
