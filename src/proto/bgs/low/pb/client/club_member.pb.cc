// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_member.proto

#include "bgs/low/pb/client/club_member.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberVoiceOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class MemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Member> _instance;
} _Member_default_instance_;
class MemberResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberResult> _instance;
} _MemberResult_default_instance_;
class RemoveMemberOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveMemberOptions> _instance;
} _RemoveMemberOptions_default_instance_;
class MemberRemovedAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberRemovedAssignment> _instance;
} _MemberRemovedAssignment_default_instance_;
class MemberVoiceOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberVoiceOptions> _instance;
} _MemberVoiceOptions_default_instance_;
class MemberVoiceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberVoiceState> _instance;
} _MemberVoiceState_default_instance_;
class CreateMemberOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMemberOptions> _instance;
} _CreateMemberOptions_default_instance_;
class MemberDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberDescription> _instance;
} _MemberDescription_default_instance_;
class RoleOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleOptions> _instance;
} _RoleOptions_default_instance_;
class RoleAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleAssignment> _instance;
} _RoleAssignment_default_instance_;
class MemberAttributeAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberAttributeAssignment> _instance;
} _MemberAttributeAssignment_default_instance_;
class SubscriberStateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberStateOptions> _instance;
} _SubscriberStateOptions_default_instance_;
class SubscriberStateAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberStateAssignment> _instance;
} _SubscriberStateAssignment_default_instance_;
class MemberStateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberStateOptions> _instance;
} _MemberStateOptions_default_instance_;
class MemberStateAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberStateAssignment> _instance;
} _MemberStateAssignment_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateMemberOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateMemberOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateMemberOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_Member_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::Member();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::Member::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_MemberAttributeAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberAttributeAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberAttributeAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberAttributeAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberAttributeAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberAttributeAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberDescription_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_MemberRemovedAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberRemovedAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberRemovedAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberRemovedAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberRemovedAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemberRemovedAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_MemberResult_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberResult_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberResult_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemberResult_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_MemberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberStateAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberStateAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberStateAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_MemberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberStateOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberStateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberStateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_MemberVoiceOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberVoiceOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberVoiceOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberVoiceOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberVoiceOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberVoiceOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {}};

static void InitDefaultsscc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberVoiceState_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberVoiceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberVoiceState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {}};

static void InitDefaultsscc_info_RemoveMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_RemoveMemberOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::RemoveMemberOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::RemoveMemberOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoveMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoveMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_RoleAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_RoleAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::RoleAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::RoleAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoleAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_RoleOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::RoleOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::RoleOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_SubscriberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SubscriberStateAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SubscriberStateAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SubscriberStateAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscriberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubscriberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_SubscriberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SubscriberStateOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SubscriberStateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SubscriberStateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscriberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto}, {
      &scc_info_MemberVoiceOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, battle_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, join_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, presence_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, moderator_mute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, whisper_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, note_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, active_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Member, voice_),
  2,
  0,
  ~0u,
  ~0u,
  4,
  5,
  7,
  6,
  1,
  8,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberResult, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberResult, status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveMemberOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveMemberOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveMemberOptions, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveMemberOptions, reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedAssignment, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedAssignment, reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceOptions, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceOptions, joined_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceOptions, microphone_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceOptions, active_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceState, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceState, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceState, joined_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceState, microphone_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberVoiceState, active_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMemberOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMemberOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMemberOptions, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMemberOptions, attribute_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberDescription, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberDescription, battle_tag_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RoleOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RoleOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RoleOptions, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RoleOptions, role_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RoleAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RoleAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RoleAssignment, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RoleAssignment, role_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAttributeAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAttributeAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAttributeAssignment, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAttributeAssignment, attribute_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateOptions, voice_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateAssignment, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateAssignment, active_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateAssignment, voice_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateOptions, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateOptions, presence_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateOptions, moderator_mute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateOptions, whisper_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateOptions, note_),
  ~0u,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateAssignment, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateAssignment, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateAssignment, presence_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateAssignment, moderator_mute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateAssignment, whisper_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateAssignment, note_),
  1,
  ~0u,
  2,
  3,
  4,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::bgs::protocol::club::v1::Member)},
  { 27, 34, sizeof(::bgs::protocol::club::v1::MemberResult)},
  { 36, 43, sizeof(::bgs::protocol::club::v1::RemoveMemberOptions)},
  { 45, 52, sizeof(::bgs::protocol::club::v1::MemberRemovedAssignment)},
  { 54, 63, sizeof(::bgs::protocol::club::v1::MemberVoiceOptions)},
  { 67, 77, sizeof(::bgs::protocol::club::v1::MemberVoiceState)},
  { 82, 89, sizeof(::bgs::protocol::club::v1::CreateMemberOptions)},
  { 91, 98, sizeof(::bgs::protocol::club::v1::MemberDescription)},
  { 100, 107, sizeof(::bgs::protocol::club::v1::RoleOptions)},
  { 109, 116, sizeof(::bgs::protocol::club::v1::RoleAssignment)},
  { 118, 125, sizeof(::bgs::protocol::club::v1::MemberAttributeAssignment)},
  { 127, 133, sizeof(::bgs::protocol::club::v1::SubscriberStateOptions)},
  { 134, 142, sizeof(::bgs::protocol::club::v1::SubscriberStateAssignment)},
  { 145, 155, sizeof(::bgs::protocol::club::v1::MemberStateOptions)},
  { 160, 171, sizeof(::bgs::protocol::club::v1::MemberStateAssignment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_RemoveMemberOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberRemovedAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberVoiceOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberVoiceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateMemberOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_RoleOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_RoleAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberAttributeAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SubscriberStateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SubscriberStateAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberStateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberStateAssignment_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#bgs/low/pb/client/club_member.proto\022\024b"
  "gs.protocol.club.v1\032&bgs/low/pb/client/c"
  "lub_member_id.proto\0329bgs/low/pb/client/g"
  "lobal_extensions/message_options.proto\0325"
  "bgs/low/pb/client/api/client/v2/attribut"
  "e_types.proto\032!bgs/low/pb/client/club_en"
  "um.proto\032!bgs/low/pb/client/rpc_types.pr"
  "oto\"\252\003\n\006Member\022*\n\002id\030\001 \001(\0132\036.bgs.protoco"
  "l.club.v1.MemberId\022\022\n\nbattle_tag\030\002 \001(\t\022\020"
  "\n\004role\030\003 \003(\rB\002\020\001\022-\n\tattribute\030\004 \003(\0132\032.bg"
  "s.protocol.v2.Attribute\022\021\n\tjoin_time\030\005 \001"
  "(\004\022P\n\016presence_level\030\006 \001(\0162#.bgs.protoco"
  "l.club.v1.PresenceLevel:\023PRESENCE_LEVEL_"
  "NONE\022\026\n\016moderator_mute\030\007 \001(\010\022M\n\rwhisper_"
  "level\030\010 \001(\0162\".bgs.protocol.club.v1.Whisp"
  "erLevel:\022WHISPER_LEVEL_OPEN\022\014\n\004note\030\t \001("
  "\t\022\016\n\006active\0302 \001(\010\0225\n\005voice\0303 \001(\0132&.bgs.p"
  "rotocol.club.v1.MemberVoiceState\"Q\n\014Memb"
  "erResult\0221\n\tmember_id\030\001 \001(\0132\036.bgs.protoc"
  "ol.club.v1.MemberId\022\016\n\006status\030\002 \001(\r\"\224\001\n\023"
  "RemoveMemberOptions\022*\n\002id\030\001 \001(\0132\036.bgs.pr"
  "otocol.club.v1.MemberId\022Q\n\006reason\030\002 \001(\0162"
  "\'.bgs.protocol.club.v1.ClubRemovedReason"
  ":\030CLUB_REMOVED_REASON_NONE\"\230\001\n\027MemberRem"
  "ovedAssignment\022*\n\002id\030\001 \001(\0132\036.bgs.protoco"
  "l.club.v1.MemberId\022Q\n\006reason\030\002 \001(\0162\'.bgs"
  ".protocol.club.v1.ClubRemovedReason:\030CLU"
  "B_REMOVED_REASON_NONE\"\240\001\n\022MemberVoiceOpt"
  "ions\022\021\n\tstream_id\030\001 \001(\004\022\016\n\006joined\030\002 \001(\010\022"
  "W\n\nmicrophone\030\003 \001(\0162*.bgs.protocol.club."
  "v1.VoiceMicrophoneState:\027MICROPHONE_STAT"
  "E_NORMAL\022\016\n\006active\030\004 \001(\010\"\252\001\n\020MemberVoice"
  "State\022\n\n\002id\030\001 \001(\t\022\021\n\tstream_id\030\002 \001(\004\022\016\n\006"
  "joined\030\003 \001(\010\022W\n\nmicrophone\030\004 \001(\0162*.bgs.p"
  "rotocol.club.v1.VoiceMicrophoneState:\027MI"
  "CROPHONE_STATE_NORMAL\022\016\n\006active\030\005 \001(\010\"p\n"
  "\023CreateMemberOptions\022*\n\002id\030\001 \001(\0132\036.bgs.p"
  "rotocol.club.v1.MemberId\022-\n\tattribute\030\002 "
  "\003(\0132\032.bgs.protocol.v2.Attribute\"S\n\021Membe"
  "rDescription\022*\n\002id\030\001 \001(\0132\036.bgs.protocol."
  "club.v1.MemberId\022\022\n\nbattle_tag\030\002 \001(\t\"f\n\013"
  "RoleOptions\0221\n\tmember_id\030\001 \001(\0132\036.bgs.pro"
  "tocol.club.v1.MemberId\022$\n\004role\030\002 \003(\rB\026\020\001"
  "\212\371+\006*\004\n\002\010\001\212\371+\006*\004\n\002\020\001\"U\n\016RoleAssignment\0221"
  "\n\tmember_id\030\001 \001(\0132\036.bgs.protocol.club.v1"
  ".MemberId\022\020\n\004role\030\002 \003(\rB\002\020\001\"}\n\031MemberAtt"
  "ributeAssignment\0221\n\tmember_id\030\001 \001(\0132\036.bg"
  "s.protocol.club.v1.MemberId\022-\n\tattribute"
  "\030\002 \003(\0132\032.bgs.protocol.v2.Attribute\"Q\n\026Su"
  "bscriberStateOptions\0227\n\005voice\030\001 \001(\0132(.bg"
  "s.protocol.club.v1.MemberVoiceOptions\"\225\001"
  "\n\031SubscriberStateAssignment\0221\n\tmember_id"
  "\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022\016"
  "\n\006active\030\002 \001(\010\0225\n\005voice\030\003 \001(\0132&.bgs.prot"
  "ocol.club.v1.MemberVoiceState\"\212\002\n\022Member"
  "StateOptions\022-\n\tattribute\030\001 \003(\0132\032.bgs.pr"
  "otocol.v2.Attribute\022P\n\016presence_level\030\002 "
  "\001(\0162#.bgs.protocol.club.v1.PresenceLevel"
  ":\023PRESENCE_LEVEL_NONE\022\026\n\016moderator_mute\030"
  "\003 \001(\010\022M\n\rwhisper_level\030\004 \001(\0162\".bgs.proto"
  "col.club.v1.WhisperLevel:\022WHISPER_LEVEL_"
  "OPEN\022\014\n\004note\030\005 \001(\t\"\300\002\n\025MemberStateAssign"
  "ment\0221\n\tmember_id\030\001 \001(\0132\036.bgs.protocol.c"
  "lub.v1.MemberId\022-\n\tattribute\030\002 \003(\0132\032.bgs"
  ".protocol.v2.Attribute\022P\n\016presence_level"
  "\030\003 \001(\0162#.bgs.protocol.club.v1.PresenceLe"
  "vel:\023PRESENCE_LEVEL_NONE\022\026\n\016moderator_mu"
  "te\030\004 \001(\010\022M\n\rwhisper_level\030\005 \001(\0162\".bgs.pr"
  "otocol.club.v1.WhisperLevel:\022WHISPER_LEV"
  "EL_OPEN\022\014\n\004note\030\006 \001(\tP\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto_deps[5] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fenum_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fmessage_5foptions_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto_sccs[15] = {
  &scc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_MemberAttributeAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_MemberRemovedAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_MemberResult_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_MemberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_MemberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_MemberVoiceOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_RemoveMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_RoleAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_SubscriberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
  &scc_info_SubscriberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto, "bgs/low/pb/client/club_member.proto", 2783,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto_deps, 15, 5,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto, 15, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void Member::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_Member_default_instance_._instance.get_mutable()->id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_Member_default_instance_._instance.get_mutable()->voice_ = const_cast< ::bgs::protocol::club::v1::MemberVoiceState*>(
      ::bgs::protocol::club::v1::MemberVoiceState::internal_default_instance());
}
class Member::_Internal {
 public:
  using HasBits = decltype(std::declval<Member>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& id(const Member* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_join_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_presence_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_moderator_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_whisper_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::bgs::protocol::club::v1::MemberVoiceState& voice(const Member* msg);
  static void set_has_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
Member::_Internal::id(const Member* msg) {
  return *msg->id_;
}
const ::bgs::protocol::club::v1::MemberVoiceState&
Member::_Internal::voice(const Member* msg) {
  return *msg->voice_;
}
void Member::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Member::clear_attribute() {
  attribute_.Clear();
}
Member::Member()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Member)
}
Member::Member(const Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_battle_tag()) {
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_note()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  if (from._internal_has_id()) {
    id_ = new ::bgs::protocol::club::v1::MemberId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_voice()) {
    voice_ = new ::bgs::protocol::club::v1::MemberVoiceState(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  ::memcpy(&join_time_, &from.join_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&join_time_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Member)
}

void Member::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&id_)) + sizeof(active_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete voice_;
}

void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Member& Member::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      note_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(voice_ != nullptr);
      voice_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&join_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moderator_mute_) -
        reinterpret_cast<char*>(&join_time_)) + sizeof(moderator_mute_));
  }
  active_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battle_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.Member.battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 join_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_join_time(&has_bits);
          join_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6 [default = PRESENCE_LEVEL_NONE];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::PresenceLevel_IsValid(val))) {
            _internal_set_presence_level(static_cast<::bgs::protocol::club::v1::PresenceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool moderator_mute = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_moderator_mute(&has_bits);
          moderator_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8 [default = WHISPER_LEVEL_OPEN];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::WhisperLevel_IsValid(val))) {
            _internal_set_whisper_level(static_cast<::bgs::protocol::club::v1::WhisperLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string note = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.Member.note");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional string battle_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_battle_tag().data(), static_cast<int>(this->_internal_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.Member.battle_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_battle_tag(), target);
  }

  // repeated uint32 role = 3 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_role(), byte_size, target);
    }
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribute(i), target, stream);
  }

  // optional uint64 join_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_join_time(), target);
  }

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6 [default = PRESENCE_LEVEL_NONE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_presence_level(), target);
  }

  // optional bool moderator_mute = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_moderator_mute(), target);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8 [default = WHISPER_LEVEL_OPEN];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_whisper_level(), target);
  }

  // optional string note = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.Member.note");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_note(), target);
  }

  // optional bool active = 50;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_active(), target);
  }

  // optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::voice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string battle_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_battle_tag());
    }

    // optional string note = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_);
    }

    // optional uint64 join_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_join_time());
    }

    // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6 [default = PRESENCE_LEVEL_NONE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_presence_level());
    }

    // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8 [default = WHISPER_LEVEL_OPEN];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_whisper_level());
    }

    // optional bool moderator_mute = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool active = 50;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_voice()->::bgs::protocol::club::v1::MemberVoiceState::MergeFrom(from._internal_voice());
    }
    if (cached_has_bits & 0x00000010u) {
      join_time_ = from.join_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      presence_level_ = from.presence_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      whisper_level_ = from.whisper_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      moderator_mute_ = from.moderator_mute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_active(from._internal_active());
  }
}

void Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  return true;
}

void Member::InternalSwap(Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  attribute_.InternalSwap(&other->attribute_);
  battle_tag_.Swap(&other->battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(voice_, other->voice_);
  swap(join_time_, other->join_time_);
  swap(presence_level_, other->presence_level_);
  swap(whisper_level_, other->whisper_level_);
  swap(moderator_mute_, other->moderator_mute_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberResult::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberResult_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberResult::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberResult>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& member_id(const MemberResult* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberResult::_Internal::member_id(const MemberResult* msg) {
  return *msg->member_id_;
}
void MemberResult::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MemberResult::MemberResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberResult)
}
MemberResult::MemberResult(const MemberResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberResult)
}

void MemberResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberResult_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(status_));
}

MemberResult::~MemberResult() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberResult)
  SharedDtor();
}

void MemberResult::SharedDtor() {
  if (this != internal_default_instance()) delete member_id_;
}

void MemberResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberResult& MemberResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberResult_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void MemberResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_id_ != nullptr);
    member_id_->Clear();
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member_id(this), target, stream);
  }

  // optional uint32 status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberResult)
  return target;
}

size_t MemberResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional uint32 status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberResult)
    MergeFrom(*source);
  }
}

void MemberResult::MergeFrom(const MemberResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberResult::CopyFrom(const MemberResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberResult::IsInitialized() const {
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void MemberResult::InternalSwap(MemberResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(member_id_, other->member_id_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveMemberOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_RemoveMemberOptions_default_instance_._instance.get_mutable()->id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class RemoveMemberOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveMemberOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& id(const RemoveMemberOptions* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
RemoveMemberOptions::_Internal::id(const RemoveMemberOptions* msg) {
  return *msg->id_;
}
void RemoveMemberOptions::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RemoveMemberOptions::RemoveMemberOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RemoveMemberOptions)
}
RemoveMemberOptions::RemoveMemberOptions(const RemoveMemberOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::bgs::protocol::club::v1::MemberId(*from.id_);
  } else {
    id_ = nullptr;
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RemoveMemberOptions)
}

void RemoveMemberOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&id_)) + sizeof(reason_));
}

RemoveMemberOptions::~RemoveMemberOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RemoveMemberOptions)
  SharedDtor();
}

void RemoveMemberOptions::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void RemoveMemberOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveMemberOptions& RemoveMemberOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void RemoveMemberOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.RemoveMemberOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveMemberOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::ClubRemovedReason_IsValid(val))) {
            _internal_set_reason(static_cast<::bgs::protocol::club::v1::ClubRemovedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveMemberOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RemoveMemberOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RemoveMemberOptions)
  return target;
}

size_t RemoveMemberOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.RemoveMemberOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveMemberOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.RemoveMemberOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveMemberOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveMemberOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.RemoveMemberOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.RemoveMemberOptions)
    MergeFrom(*source);
  }
}

void RemoveMemberOptions::MergeFrom(const RemoveMemberOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.RemoveMemberOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoveMemberOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.RemoveMemberOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMemberOptions::CopyFrom(const RemoveMemberOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.RemoveMemberOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMemberOptions::IsInitialized() const {
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  return true;
}

void RemoveMemberOptions::InternalSwap(RemoveMemberOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveMemberOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberRemovedAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberRemovedAssignment_default_instance_._instance.get_mutable()->id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberRemovedAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberRemovedAssignment>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& id(const MemberRemovedAssignment* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberRemovedAssignment::_Internal::id(const MemberRemovedAssignment* msg) {
  return *msg->id_;
}
void MemberRemovedAssignment::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MemberRemovedAssignment::MemberRemovedAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberRemovedAssignment)
}
MemberRemovedAssignment::MemberRemovedAssignment(const MemberRemovedAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::bgs::protocol::club::v1::MemberId(*from.id_);
  } else {
    id_ = nullptr;
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberRemovedAssignment)
}

void MemberRemovedAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberRemovedAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&id_)) + sizeof(reason_));
}

MemberRemovedAssignment::~MemberRemovedAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberRemovedAssignment)
  SharedDtor();
}

void MemberRemovedAssignment::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void MemberRemovedAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberRemovedAssignment& MemberRemovedAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberRemovedAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void MemberRemovedAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberRemovedAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::ClubRemovedReason_IsValid(val))) {
            _internal_set_reason(static_cast<::bgs::protocol::club::v1::ClubRemovedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberRemovedAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberRemovedAssignment)
  return target;
}

size_t MemberRemovedAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberRemovedAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberRemovedAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberRemovedAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberRemovedAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberRemovedAssignment)
    MergeFrom(*source);
  }
}

void MemberRemovedAssignment::MergeFrom(const MemberRemovedAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberRemovedAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRemovedAssignment::CopyFrom(const MemberRemovedAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemovedAssignment::IsInitialized() const {
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  return true;
}

void MemberRemovedAssignment::InternalSwap(MemberRemovedAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberRemovedAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberVoiceOptions::InitAsDefaultInstance() {
}
class MemberVoiceOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberVoiceOptions>()._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_joined(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_microphone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MemberVoiceOptions::MemberVoiceOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberVoiceOptions)
}
MemberVoiceOptions::MemberVoiceOptions(const MemberVoiceOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberVoiceOptions)
}

void MemberVoiceOptions::SharedCtor() {
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(active_));
}

MemberVoiceOptions::~MemberVoiceOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberVoiceOptions)
  SharedDtor();
}

void MemberVoiceOptions::SharedDtor() {
}

void MemberVoiceOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberVoiceOptions& MemberVoiceOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberVoiceOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void MemberVoiceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberVoiceOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberVoiceOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool joined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_joined(&has_bits);
          joined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3 [default = MICROPHONE_STATE_NORMAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::VoiceMicrophoneState_IsValid(val))) {
            _internal_set_microphone(static_cast<::bgs::protocol::club::v1::VoiceMicrophoneState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberVoiceOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberVoiceOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stream_id(), target);
  }

  // optional bool joined = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_joined(), target);
  }

  // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3 [default = MICROPHONE_STATE_NORMAL];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_microphone(), target);
  }

  // optional bool active = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberVoiceOptions)
  return target;
}

size_t MemberVoiceOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberVoiceOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 stream_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3 [default = MICROPHONE_STATE_NORMAL];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_microphone());
    }

    // optional bool joined = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool active = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberVoiceOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberVoiceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberVoiceOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberVoiceOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberVoiceOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberVoiceOptions)
    MergeFrom(*source);
  }
}

void MemberVoiceOptions::MergeFrom(const MemberVoiceOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberVoiceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      microphone_ = from.microphone_;
    }
    if (cached_has_bits & 0x00000004u) {
      joined_ = from.joined_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberVoiceOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberVoiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberVoiceOptions::CopyFrom(const MemberVoiceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberVoiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberVoiceOptions::IsInitialized() const {
  return true;
}

void MemberVoiceOptions::InternalSwap(MemberVoiceOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stream_id_, other->stream_id_);
  swap(microphone_, other->microphone_);
  swap(joined_, other->joined_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberVoiceOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberVoiceState::InitAsDefaultInstance() {
}
class MemberVoiceState::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberVoiceState>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_joined(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_microphone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MemberVoiceState::MemberVoiceState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberVoiceState)
}
MemberVoiceState::MemberVoiceState(const MemberVoiceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberVoiceState)
}

void MemberVoiceState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(active_));
}

MemberVoiceState::~MemberVoiceState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberVoiceState)
  SharedDtor();
}

void MemberVoiceState::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemberVoiceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberVoiceState& MemberVoiceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberVoiceState_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void MemberVoiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberVoiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberVoiceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.MemberVoiceState.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool joined = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_joined(&has_bits);
          joined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4 [default = MICROPHONE_STATE_NORMAL];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::VoiceMicrophoneState_IsValid(val))) {
            _internal_set_microphone(static_cast<::bgs::protocol::club::v1::VoiceMicrophoneState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberVoiceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberVoiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.MemberVoiceState.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stream_id(), target);
  }

  // optional bool joined = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_joined(), target);
  }

  // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4 [default = MICROPHONE_STATE_NORMAL];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_microphone(), target);
  }

  // optional bool active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberVoiceState)
  return target;
}

size_t MemberVoiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberVoiceState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional uint64 stream_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4 [default = MICROPHONE_STATE_NORMAL];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_microphone());
    }

    // optional bool joined = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool active = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberVoiceState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberVoiceState)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberVoiceState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberVoiceState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberVoiceState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberVoiceState)
    MergeFrom(*source);
  }
}

void MemberVoiceState::MergeFrom(const MemberVoiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberVoiceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      microphone_ = from.microphone_;
    }
    if (cached_has_bits & 0x00000008u) {
      joined_ = from.joined_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberVoiceState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberVoiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberVoiceState::CopyFrom(const MemberVoiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberVoiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberVoiceState::IsInitialized() const {
  return true;
}

void MemberVoiceState::InternalSwap(MemberVoiceState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stream_id_, other->stream_id_);
  swap(microphone_, other->microphone_);
  swap(joined_, other->joined_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberVoiceState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMemberOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateMemberOptions_default_instance_._instance.get_mutable()->id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class CreateMemberOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateMemberOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& id(const CreateMemberOptions* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
CreateMemberOptions::_Internal::id(const CreateMemberOptions* msg) {
  return *msg->id_;
}
void CreateMemberOptions::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CreateMemberOptions::clear_attribute() {
  attribute_.Clear();
}
CreateMemberOptions::CreateMemberOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateMemberOptions)
}
CreateMemberOptions::CreateMemberOptions(const CreateMemberOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::bgs::protocol::club::v1::MemberId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateMemberOptions)
}

void CreateMemberOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  id_ = nullptr;
}

CreateMemberOptions::~CreateMemberOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateMemberOptions)
  SharedDtor();
}

void CreateMemberOptions::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void CreateMemberOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMemberOptions& CreateMemberOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void CreateMemberOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateMemberOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateMemberOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMemberOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateMemberOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateMemberOptions)
  return target;
}

size_t CreateMemberOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateMemberOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .bgs.protocol.club.v1.MemberId id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMemberOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateMemberOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMemberOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMemberOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateMemberOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateMemberOptions)
    MergeFrom(*source);
  }
}

void CreateMemberOptions::MergeFrom(const CreateMemberOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateMemberOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_id());
  }
}

void CreateMemberOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateMemberOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMemberOptions::CopyFrom(const CreateMemberOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateMemberOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMemberOptions::IsInitialized() const {
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  return true;
}

void CreateMemberOptions::InternalSwap(CreateMemberOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMemberOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberDescription::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberDescription_default_instance_._instance.get_mutable()->id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberDescription>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& id(const MemberDescription* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberDescription::_Internal::id(const MemberDescription* msg) {
  return *msg->id_;
}
void MemberDescription::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MemberDescription::MemberDescription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberDescription)
}
MemberDescription::MemberDescription(const MemberDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_battle_tag()) {
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
  if (from._internal_has_id()) {
    id_ = new ::bgs::protocol::club::v1::MemberId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberDescription)
}

void MemberDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = nullptr;
}

MemberDescription::~MemberDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberDescription)
  SharedDtor();
}

void MemberDescription::SharedDtor() {
  battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void MemberDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberDescription& MemberDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void MemberDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battle_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.MemberDescription.battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional string battle_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_battle_tag().data(), static_cast<int>(this->_internal_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.MemberDescription.battle_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_battle_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberDescription)
  return target;
}

size_t MemberDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string battle_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_battle_tag());
    }

    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberDescription)
    MergeFrom(*source);
  }
}

void MemberDescription::MergeFrom(const MemberDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_id());
    }
  }
}

void MemberDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberDescription::CopyFrom(const MemberDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberDescription::IsInitialized() const {
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  return true;
}

void MemberDescription::InternalSwap(MemberDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  battle_tag_.Swap(&other->battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_RoleOptions_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class RoleOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& member_id(const RoleOptions* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
RoleOptions::_Internal::member_id(const RoleOptions* msg) {
  return *msg->member_id_;
}
void RoleOptions::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RoleOptions::RoleOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RoleOptions)
}
RoleOptions::RoleOptions(const RoleOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RoleOptions)
}

void RoleOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  member_id_ = nullptr;
}

RoleOptions::~RoleOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RoleOptions)
  SharedDtor();
}

void RoleOptions::SharedDtor() {
  if (this != internal_default_instance()) delete member_id_;
}

void RoleOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleOptions& RoleOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void RoleOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.RoleOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_id_ != nullptr);
    member_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RoleOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 2 [packed = true, (.bgs.protocol.valid) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RoleOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member_id(this), target, stream);
  }

  // repeated uint32 role = 2 [packed = true, (.bgs.protocol.valid) = {
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_role(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RoleOptions)
  return target;
}

size_t RoleOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.RoleOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role = 2 [packed = true, (.bgs.protocol.valid) = {
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.RoleOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.RoleOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.RoleOptions)
    MergeFrom(*source);
  }
}

void RoleOptions::MergeFrom(const RoleOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.RoleOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  if (from._internal_has_member_id()) {
    _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
  }
}

void RoleOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.RoleOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleOptions::CopyFrom(const RoleOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.RoleOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOptions::IsInitialized() const {
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void RoleOptions::InternalSwap(RoleOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_RoleAssignment_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class RoleAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleAssignment>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& member_id(const RoleAssignment* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
RoleAssignment::_Internal::member_id(const RoleAssignment* msg) {
  return *msg->member_id_;
}
void RoleAssignment::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RoleAssignment::RoleAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RoleAssignment)
}
RoleAssignment::RoleAssignment(const RoleAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RoleAssignment)
}

void RoleAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  member_id_ = nullptr;
}

RoleAssignment::~RoleAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RoleAssignment)
  SharedDtor();
}

void RoleAssignment::SharedDtor() {
  if (this != internal_default_instance()) delete member_id_;
}

void RoleAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleAssignment& RoleAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void RoleAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.RoleAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_id_ != nullptr);
    member_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RoleAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RoleAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member_id(this), target, stream);
  }

  // repeated uint32 role = 2 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_role(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RoleAssignment)
  return target;
}

size_t RoleAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.RoleAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.RoleAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.RoleAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.RoleAssignment)
    MergeFrom(*source);
  }
}

void RoleAssignment::MergeFrom(const RoleAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.RoleAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  if (from._internal_has_member_id()) {
    _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
  }
}

void RoleAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.RoleAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAssignment::CopyFrom(const RoleAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.RoleAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAssignment::IsInitialized() const {
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void RoleAssignment::InternalSwap(RoleAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberAttributeAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberAttributeAssignment_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberAttributeAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberAttributeAssignment>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& member_id(const MemberAttributeAssignment* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberAttributeAssignment::_Internal::member_id(const MemberAttributeAssignment* msg) {
  return *msg->member_id_;
}
void MemberAttributeAssignment::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MemberAttributeAssignment::clear_attribute() {
  attribute_.Clear();
}
MemberAttributeAssignment::MemberAttributeAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberAttributeAssignment)
}
MemberAttributeAssignment::MemberAttributeAssignment(const MemberAttributeAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberAttributeAssignment)
}

void MemberAttributeAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberAttributeAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  member_id_ = nullptr;
}

MemberAttributeAssignment::~MemberAttributeAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberAttributeAssignment)
  SharedDtor();
}

void MemberAttributeAssignment::SharedDtor() {
  if (this != internal_default_instance()) delete member_id_;
}

void MemberAttributeAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberAttributeAssignment& MemberAttributeAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberAttributeAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void MemberAttributeAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_id_ != nullptr);
    member_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberAttributeAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberAttributeAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member_id(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberAttributeAssignment)
  return target;
}

size_t MemberAttributeAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberAttributeAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberAttributeAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberAttributeAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberAttributeAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberAttributeAssignment)
    MergeFrom(*source);
  }
}

void MemberAttributeAssignment::MergeFrom(const MemberAttributeAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  if (from._internal_has_member_id()) {
    _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
  }
}

void MemberAttributeAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAttributeAssignment::CopyFrom(const MemberAttributeAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAttributeAssignment::IsInitialized() const {
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void MemberAttributeAssignment::InternalSwap(MemberAttributeAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberAttributeAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriberStateOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SubscriberStateOptions_default_instance_._instance.get_mutable()->voice_ = const_cast< ::bgs::protocol::club::v1::MemberVoiceOptions*>(
      ::bgs::protocol::club::v1::MemberVoiceOptions::internal_default_instance());
}
class SubscriberStateOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriberStateOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberVoiceOptions& voice(const SubscriberStateOptions* msg);
  static void set_has_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberVoiceOptions&
SubscriberStateOptions::_Internal::voice(const SubscriberStateOptions* msg) {
  return *msg->voice_;
}
SubscriberStateOptions::SubscriberStateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SubscriberStateOptions)
}
SubscriberStateOptions::SubscriberStateOptions(const SubscriberStateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_voice()) {
    voice_ = new ::bgs::protocol::club::v1::MemberVoiceOptions(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SubscriberStateOptions)
}

void SubscriberStateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  voice_ = nullptr;
}

SubscriberStateOptions::~SubscriberStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SubscriberStateOptions)
  SharedDtor();
}

void SubscriberStateOptions::SharedDtor() {
  if (this != internal_default_instance()) delete voice_;
}

void SubscriberStateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriberStateOptions& SubscriberStateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void SubscriberStateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SubscriberStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(voice_ != nullptr);
    voice_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscriberStateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriberStateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SubscriberStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::voice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SubscriberStateOptions)
  return target;
}

size_t SubscriberStateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SubscriberStateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voice_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberStateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SubscriberStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberStateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriberStateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SubscriberStateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SubscriberStateOptions)
    MergeFrom(*source);
  }
}

void SubscriberStateOptions::MergeFrom(const SubscriberStateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SubscriberStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_voice()) {
    _internal_mutable_voice()->::bgs::protocol::club::v1::MemberVoiceOptions::MergeFrom(from._internal_voice());
  }
}

void SubscriberStateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SubscriberStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberStateOptions::CopyFrom(const SubscriberStateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SubscriberStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberStateOptions::IsInitialized() const {
  return true;
}

void SubscriberStateOptions::InternalSwap(SubscriberStateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(voice_, other->voice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberStateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriberStateAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SubscriberStateAssignment_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_SubscriberStateAssignment_default_instance_._instance.get_mutable()->voice_ = const_cast< ::bgs::protocol::club::v1::MemberVoiceState*>(
      ::bgs::protocol::club::v1::MemberVoiceState::internal_default_instance());
}
class SubscriberStateAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriberStateAssignment>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& member_id(const SubscriberStateAssignment* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::MemberVoiceState& voice(const SubscriberStateAssignment* msg);
  static void set_has_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SubscriberStateAssignment::_Internal::member_id(const SubscriberStateAssignment* msg) {
  return *msg->member_id_;
}
const ::bgs::protocol::club::v1::MemberVoiceState&
SubscriberStateAssignment::_Internal::voice(const SubscriberStateAssignment* msg) {
  return *msg->voice_;
}
void SubscriberStateAssignment::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubscriberStateAssignment::SubscriberStateAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SubscriberStateAssignment)
}
SubscriberStateAssignment::SubscriberStateAssignment(const SubscriberStateAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  if (from._internal_has_voice()) {
    voice_ = new ::bgs::protocol::club::v1::MemberVoiceState(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SubscriberStateAssignment)
}

void SubscriberStateAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(active_));
}

SubscriberStateAssignment::~SubscriberStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SubscriberStateAssignment)
  SharedDtor();
}

void SubscriberStateAssignment::SharedDtor() {
  if (this != internal_default_instance()) delete member_id_;
  if (this != internal_default_instance()) delete voice_;
}

void SubscriberStateAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriberStateAssignment& SubscriberStateAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void SubscriberStateAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(member_id_ != nullptr);
      member_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(voice_ != nullptr);
      voice_->Clear();
    }
  }
  active_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscriberStateAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriberStateAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member_id(this), target, stream);
  }

  // optional bool active = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_active(), target);
  }

  // optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::voice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SubscriberStateAssignment)
  return target;
}

size_t SubscriberStateAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_);
    }

    // optional bool active = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberStateAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberStateAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriberStateAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SubscriberStateAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SubscriberStateAssignment)
    MergeFrom(*source);
  }
}

void SubscriberStateAssignment::MergeFrom(const SubscriberStateAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_voice()->::bgs::protocol::club::v1::MemberVoiceState::MergeFrom(from._internal_voice());
    }
    if (cached_has_bits & 0x00000004u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriberStateAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberStateAssignment::CopyFrom(const SubscriberStateAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberStateAssignment::IsInitialized() const {
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscriberStateAssignment::InternalSwap(SubscriberStateAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(member_id_, other->member_id_);
  swap(voice_, other->voice_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberStateAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberStateOptions::InitAsDefaultInstance() {
}
class MemberStateOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberStateOptions>()._has_bits_);
  static void set_has_presence_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_moderator_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_whisper_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void MemberStateOptions::clear_attribute() {
  attribute_.Clear();
}
MemberStateOptions::MemberStateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberStateOptions)
}
MemberStateOptions::MemberStateOptions(const MemberStateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_note()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  ::memcpy(&presence_level_, &from.presence_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&whisper_level_) -
    reinterpret_cast<char*>(&presence_level_)) + sizeof(whisper_level_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberStateOptions)
}

void MemberStateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&presence_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&whisper_level_) -
      reinterpret_cast<char*>(&presence_level_)) + sizeof(whisper_level_));
}

MemberStateOptions::~MemberStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberStateOptions)
  SharedDtor();
}

void MemberStateOptions::SharedDtor() {
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemberStateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberStateOptions& MemberStateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void MemberStateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    note_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&presence_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whisper_level_) -
        reinterpret_cast<char*>(&presence_level_)) + sizeof(whisper_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberStateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.v2.Attribute attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2 [default = PRESENCE_LEVEL_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::PresenceLevel_IsValid(val))) {
            _internal_set_presence_level(static_cast<::bgs::protocol::club::v1::PresenceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool moderator_mute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_moderator_mute(&has_bits);
          moderator_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4 [default = WHISPER_LEVEL_OPEN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::WhisperLevel_IsValid(val))) {
            _internal_set_whisper_level(static_cast<::bgs::protocol::club::v1::WhisperLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string note = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.MemberStateOptions.note");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberStateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attribute(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2 [default = PRESENCE_LEVEL_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_presence_level(), target);
  }

  // optional bool moderator_mute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_moderator_mute(), target);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4 [default = WHISPER_LEVEL_OPEN];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_whisper_level(), target);
  }

  // optional string note = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.MemberStateOptions.note");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberStateOptions)
  return target;
}

size_t MemberStateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberStateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string note = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2 [default = PRESENCE_LEVEL_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_presence_level());
    }

    // optional bool moderator_mute = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4 [default = WHISPER_LEVEL_OPEN];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_whisper_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberStateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberStateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberStateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberStateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberStateOptions)
    MergeFrom(*source);
  }
}

void MemberStateOptions::MergeFrom(const MemberStateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
    }
    if (cached_has_bits & 0x00000002u) {
      presence_level_ = from.presence_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      moderator_mute_ = from.moderator_mute_;
    }
    if (cached_has_bits & 0x00000008u) {
      whisper_level_ = from.whisper_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberStateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberStateOptions::CopyFrom(const MemberStateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberStateOptions::IsInitialized() const {
  return true;
}

void MemberStateOptions::InternalSwap(MemberStateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(presence_level_, other->presence_level_);
  swap(moderator_mute_, other->moderator_mute_);
  swap(whisper_level_, other->whisper_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberStateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberStateAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberStateAssignment_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberStateAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberStateAssignment>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& member_id(const MemberStateAssignment* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_presence_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_moderator_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_whisper_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberStateAssignment::_Internal::member_id(const MemberStateAssignment* msg) {
  return *msg->member_id_;
}
void MemberStateAssignment::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MemberStateAssignment::clear_attribute() {
  attribute_.Clear();
}
MemberStateAssignment::MemberStateAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberStateAssignment)
}
MemberStateAssignment::MemberStateAssignment(const MemberStateAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_note()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  ::memcpy(&presence_level_, &from.presence_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&whisper_level_) -
    reinterpret_cast<char*>(&presence_level_)) + sizeof(whisper_level_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberStateAssignment)
}

void MemberStateAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&whisper_level_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(whisper_level_));
}

MemberStateAssignment::~MemberStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberStateAssignment)
  SharedDtor();
}

void MemberStateAssignment::SharedDtor() {
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete member_id_;
}

void MemberStateAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberStateAssignment& MemberStateAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base);
  return *internal_default_instance();
}


void MemberStateAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberStateAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      note_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(member_id_ != nullptr);
      member_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&presence_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whisper_level_) -
        reinterpret_cast<char*>(&presence_level_)) + sizeof(whisper_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberStateAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3 [default = PRESENCE_LEVEL_NONE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::PresenceLevel_IsValid(val))) {
            _internal_set_presence_level(static_cast<::bgs::protocol::club::v1::PresenceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool moderator_mute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_moderator_mute(&has_bits);
          moderator_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5 [default = WHISPER_LEVEL_OPEN];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::WhisperLevel_IsValid(val))) {
            _internal_set_whisper_level(static_cast<::bgs::protocol::club::v1::WhisperLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string note = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.MemberStateAssignment.note");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberStateAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberStateAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member_id(this), target, stream);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3 [default = PRESENCE_LEVEL_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_presence_level(), target);
  }

  // optional bool moderator_mute = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_moderator_mute(), target);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5 [default = WHISPER_LEVEL_OPEN];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_whisper_level(), target);
  }

  // optional string note = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.MemberStateAssignment.note");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberStateAssignment)
  return target;
}

size_t MemberStateAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberStateAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string note = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3 [default = PRESENCE_LEVEL_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_presence_level());
    }

    // optional bool moderator_mute = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5 [default = WHISPER_LEVEL_OPEN];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_whisper_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberStateAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberStateAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberStateAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberStateAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberStateAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberStateAssignment)
    MergeFrom(*source);
  }
}

void MemberStateAssignment::MergeFrom(const MemberStateAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberStateAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000004u) {
      presence_level_ = from.presence_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      moderator_mute_ = from.moderator_mute_;
    }
    if (cached_has_bits & 0x00000010u) {
      whisper_level_ = from.whisper_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberStateAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberStateAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberStateAssignment::CopyFrom(const MemberStateAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberStateAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberStateAssignment::IsInitialized() const {
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void MemberStateAssignment::InternalSwap(MemberStateAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(member_id_, other->member_id_);
  swap(presence_level_, other->presence_level_);
  swap(moderator_mute_, other->moderator_mute_);
  swap(whisper_level_, other->whisper_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberStateAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::Member* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::Member >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::Member >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberResult* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberResult >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::RemoveMemberOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::RemoveMemberOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::RemoveMemberOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberRemovedAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberRemovedAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberRemovedAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberVoiceOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberVoiceOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberVoiceOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberVoiceState* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberVoiceState >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberVoiceState >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateMemberOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateMemberOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateMemberOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberDescription* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberDescription >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::RoleOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::RoleOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::RoleOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::RoleAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::RoleAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::RoleAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberAttributeAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberAttributeAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberAttributeAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SubscriberStateOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SubscriberStateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SubscriberStateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SubscriberStateAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SubscriberStateAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SubscriberStateAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberStateOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberStateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberStateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberStateAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberStateAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberStateAssignment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
