// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_member.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_member_id.pb.h"
#include "bgs/low/pb/client/global_extensions/message_options.pb.h"
#include "bgs/low/pb/client/api/client/v2/attribute_types.pb.h"
#include "bgs/low/pb/client/club_enum.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class CreateMemberOptions;
class CreateMemberOptionsDefaultTypeInternal;
extern CreateMemberOptionsDefaultTypeInternal _CreateMemberOptions_default_instance_;
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class MemberAttributeAssignment;
class MemberAttributeAssignmentDefaultTypeInternal;
extern MemberAttributeAssignmentDefaultTypeInternal _MemberAttributeAssignment_default_instance_;
class MemberDescription;
class MemberDescriptionDefaultTypeInternal;
extern MemberDescriptionDefaultTypeInternal _MemberDescription_default_instance_;
class MemberRemovedAssignment;
class MemberRemovedAssignmentDefaultTypeInternal;
extern MemberRemovedAssignmentDefaultTypeInternal _MemberRemovedAssignment_default_instance_;
class MemberResult;
class MemberResultDefaultTypeInternal;
extern MemberResultDefaultTypeInternal _MemberResult_default_instance_;
class MemberStateAssignment;
class MemberStateAssignmentDefaultTypeInternal;
extern MemberStateAssignmentDefaultTypeInternal _MemberStateAssignment_default_instance_;
class MemberStateOptions;
class MemberStateOptionsDefaultTypeInternal;
extern MemberStateOptionsDefaultTypeInternal _MemberStateOptions_default_instance_;
class MemberVoiceOptions;
class MemberVoiceOptionsDefaultTypeInternal;
extern MemberVoiceOptionsDefaultTypeInternal _MemberVoiceOptions_default_instance_;
class MemberVoiceState;
class MemberVoiceStateDefaultTypeInternal;
extern MemberVoiceStateDefaultTypeInternal _MemberVoiceState_default_instance_;
class RemoveMemberOptions;
class RemoveMemberOptionsDefaultTypeInternal;
extern RemoveMemberOptionsDefaultTypeInternal _RemoveMemberOptions_default_instance_;
class RoleAssignment;
class RoleAssignmentDefaultTypeInternal;
extern RoleAssignmentDefaultTypeInternal _RoleAssignment_default_instance_;
class RoleOptions;
class RoleOptionsDefaultTypeInternal;
extern RoleOptionsDefaultTypeInternal _RoleOptions_default_instance_;
class SubscriberStateAssignment;
class SubscriberStateAssignmentDefaultTypeInternal;
extern SubscriberStateAssignmentDefaultTypeInternal _SubscriberStateAssignment_default_instance_;
class SubscriberStateOptions;
class SubscriberStateOptionsDefaultTypeInternal;
extern SubscriberStateOptionsDefaultTypeInternal _SubscriberStateOptions_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::CreateMemberOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateMemberOptions>(Arena*);
template<> ::bgs::protocol::club::v1::Member* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::Member>(Arena*);
template<> ::bgs::protocol::club::v1::MemberAttributeAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberAttributeAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::MemberDescription* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(Arena*);
template<> ::bgs::protocol::club::v1::MemberRemovedAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberRemovedAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::MemberResult* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberResult>(Arena*);
template<> ::bgs::protocol::club::v1::MemberStateAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberStateAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::MemberStateOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberStateOptions>(Arena*);
template<> ::bgs::protocol::club::v1::MemberVoiceOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberVoiceOptions>(Arena*);
template<> ::bgs::protocol::club::v1::MemberVoiceState* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberVoiceState>(Arena*);
template<> ::bgs::protocol::club::v1::RemoveMemberOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::RemoveMemberOptions>(Arena*);
template<> ::bgs::protocol::club::v1::RoleAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::RoleAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::RoleOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::RoleOptions>(Arena*);
template<> ::bgs::protocol::club::v1::SubscriberStateAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SubscriberStateAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::SubscriberStateOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SubscriberStateOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class Member :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.Member) */ {
 public:
  Member();
  virtual ~Member();

  Member(const Member& from);
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }
  inline void Swap(Member* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return CreateMaybeMessage<Member>(nullptr);
  }

  Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.Member";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 3,
    kAttributeFieldNumber = 4,
    kBattleTagFieldNumber = 2,
    kNoteFieldNumber = 9,
    kIdFieldNumber = 1,
    kVoiceFieldNumber = 51,
    kJoinTimeFieldNumber = 5,
    kPresenceLevelFieldNumber = 6,
    kWhisperLevelFieldNumber = 8,
    kModeratorMuteFieldNumber = 7,
    kActiveFieldNumber = 50,
  };
  // repeated uint32 role = 3 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string battle_tag = 2;
  bool has_battle_tag() const;
  private:
  bool _internal_has_battle_tag() const;
  public:
  void clear_battle_tag();
  const std::string& battle_tag() const;
  void set_battle_tag(const std::string& value);
  void set_battle_tag(std::string&& value);
  void set_battle_tag(const char* value);
  void set_battle_tag(const char* value, size_t size);
  std::string* mutable_battle_tag();
  std::string* release_battle_tag();
  void set_allocated_battle_tag(std::string* battle_tag);
  private:
  const std::string& _internal_battle_tag() const;
  void _internal_set_battle_tag(const std::string& value);
  std::string* _internal_mutable_battle_tag();
  public:

  // optional string note = 9;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // optional .bgs.protocol.club.v1.MemberId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bgs::protocol::club::v1::MemberId& id() const;
  ::bgs::protocol::club::v1::MemberId* release_id();
  ::bgs::protocol::club::v1::MemberId* mutable_id();
  void set_allocated_id(::bgs::protocol::club::v1::MemberId* id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_id();
  public:

  // optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::bgs::protocol::club::v1::MemberVoiceState& voice() const;
  ::bgs::protocol::club::v1::MemberVoiceState* release_voice();
  ::bgs::protocol::club::v1::MemberVoiceState* mutable_voice();
  void set_allocated_voice(::bgs::protocol::club::v1::MemberVoiceState* voice);
  private:
  const ::bgs::protocol::club::v1::MemberVoiceState& _internal_voice() const;
  ::bgs::protocol::club::v1::MemberVoiceState* _internal_mutable_voice();
  public:

  // optional uint64 join_time = 5;
  bool has_join_time() const;
  private:
  bool _internal_has_join_time() const;
  public:
  void clear_join_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 join_time() const;
  void set_join_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_join_time() const;
  void _internal_set_join_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6 [default = PRESENCE_LEVEL_NONE];
  bool has_presence_level() const;
  private:
  bool _internal_has_presence_level() const;
  public:
  void clear_presence_level();
  ::bgs::protocol::club::v1::PresenceLevel presence_level() const;
  void set_presence_level(::bgs::protocol::club::v1::PresenceLevel value);
  private:
  ::bgs::protocol::club::v1::PresenceLevel _internal_presence_level() const;
  void _internal_set_presence_level(::bgs::protocol::club::v1::PresenceLevel value);
  public:

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8 [default = WHISPER_LEVEL_OPEN];
  bool has_whisper_level() const;
  private:
  bool _internal_has_whisper_level() const;
  public:
  void clear_whisper_level();
  ::bgs::protocol::club::v1::WhisperLevel whisper_level() const;
  void set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value);
  private:
  ::bgs::protocol::club::v1::WhisperLevel _internal_whisper_level() const;
  void _internal_set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value);
  public:

  // optional bool moderator_mute = 7;
  bool has_moderator_mute() const;
  private:
  bool _internal_has_moderator_mute() const;
  public:
  void clear_moderator_mute();
  bool moderator_mute() const;
  void set_moderator_mute(bool value);
  private:
  bool _internal_moderator_mute() const;
  void _internal_set_moderator_mute(bool value);
  public:

  // optional bool active = 50;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.Member)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::bgs::protocol::club::v1::MemberId* id_;
  ::bgs::protocol::club::v1::MemberVoiceState* voice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 join_time_;
  int presence_level_;
  int whisper_level_;
  bool moderator_mute_;
  bool active_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class MemberResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberResult) */ {
 public:
  MemberResult();
  virtual ~MemberResult();

  MemberResult(const MemberResult& from);
  MemberResult(MemberResult&& from) noexcept
    : MemberResult() {
    *this = ::std::move(from);
  }

  inline MemberResult& operator=(const MemberResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberResult& operator=(MemberResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberResult* internal_default_instance() {
    return reinterpret_cast<const MemberResult*>(
               &_MemberResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemberResult& a, MemberResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberResult* New() const final {
    return CreateMaybeMessage<MemberResult>(nullptr);
  }

  MemberResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberResult& from);
  void MergeFrom(const MemberResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional uint32 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class RemoveMemberOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.RemoveMemberOptions) */ {
 public:
  RemoveMemberOptions();
  virtual ~RemoveMemberOptions();

  RemoveMemberOptions(const RemoveMemberOptions& from);
  RemoveMemberOptions(RemoveMemberOptions&& from) noexcept
    : RemoveMemberOptions() {
    *this = ::std::move(from);
  }

  inline RemoveMemberOptions& operator=(const RemoveMemberOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveMemberOptions& operator=(RemoveMemberOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveMemberOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveMemberOptions* internal_default_instance() {
    return reinterpret_cast<const RemoveMemberOptions*>(
               &_RemoveMemberOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoveMemberOptions& a, RemoveMemberOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveMemberOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveMemberOptions* New() const final {
    return CreateMaybeMessage<RemoveMemberOptions>(nullptr);
  }

  RemoveMemberOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveMemberOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveMemberOptions& from);
  void MergeFrom(const RemoveMemberOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveMemberOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.RemoveMemberOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bgs::protocol::club::v1::MemberId& id() const;
  ::bgs::protocol::club::v1::MemberId* release_id();
  ::bgs::protocol::club::v1::MemberId* mutable_id();
  void set_allocated_id(::bgs::protocol::club::v1::MemberId* id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_id();
  public:

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::bgs::protocol::club::v1::ClubRemovedReason reason() const;
  void set_reason(::bgs::protocol::club::v1::ClubRemovedReason value);
  private:
  ::bgs::protocol::club::v1::ClubRemovedReason _internal_reason() const;
  void _internal_set_reason(::bgs::protocol::club::v1::ClubRemovedReason value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.RemoveMemberOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* id_;
  int reason_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class MemberRemovedAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberRemovedAssignment) */ {
 public:
  MemberRemovedAssignment();
  virtual ~MemberRemovedAssignment();

  MemberRemovedAssignment(const MemberRemovedAssignment& from);
  MemberRemovedAssignment(MemberRemovedAssignment&& from) noexcept
    : MemberRemovedAssignment() {
    *this = ::std::move(from);
  }

  inline MemberRemovedAssignment& operator=(const MemberRemovedAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberRemovedAssignment& operator=(MemberRemovedAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberRemovedAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberRemovedAssignment* internal_default_instance() {
    return reinterpret_cast<const MemberRemovedAssignment*>(
               &_MemberRemovedAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemberRemovedAssignment& a, MemberRemovedAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberRemovedAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberRemovedAssignment* New() const final {
    return CreateMaybeMessage<MemberRemovedAssignment>(nullptr);
  }

  MemberRemovedAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberRemovedAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberRemovedAssignment& from);
  void MergeFrom(const MemberRemovedAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberRemovedAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberRemovedAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bgs::protocol::club::v1::MemberId& id() const;
  ::bgs::protocol::club::v1::MemberId* release_id();
  ::bgs::protocol::club::v1::MemberId* mutable_id();
  void set_allocated_id(::bgs::protocol::club::v1::MemberId* id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_id();
  public:

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::bgs::protocol::club::v1::ClubRemovedReason reason() const;
  void set_reason(::bgs::protocol::club::v1::ClubRemovedReason value);
  private:
  ::bgs::protocol::club::v1::ClubRemovedReason _internal_reason() const;
  void _internal_set_reason(::bgs::protocol::club::v1::ClubRemovedReason value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberRemovedAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* id_;
  int reason_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class MemberVoiceOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberVoiceOptions) */ {
 public:
  MemberVoiceOptions();
  virtual ~MemberVoiceOptions();

  MemberVoiceOptions(const MemberVoiceOptions& from);
  MemberVoiceOptions(MemberVoiceOptions&& from) noexcept
    : MemberVoiceOptions() {
    *this = ::std::move(from);
  }

  inline MemberVoiceOptions& operator=(const MemberVoiceOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberVoiceOptions& operator=(MemberVoiceOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberVoiceOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberVoiceOptions* internal_default_instance() {
    return reinterpret_cast<const MemberVoiceOptions*>(
               &_MemberVoiceOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MemberVoiceOptions& a, MemberVoiceOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberVoiceOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberVoiceOptions* New() const final {
    return CreateMaybeMessage<MemberVoiceOptions>(nullptr);
  }

  MemberVoiceOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberVoiceOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberVoiceOptions& from);
  void MergeFrom(const MemberVoiceOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberVoiceOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberVoiceOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kMicrophoneFieldNumber = 3,
    kJoinedFieldNumber = 2,
    kActiveFieldNumber = 4,
  };
  // optional uint64 stream_id = 1;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3 [default = MICROPHONE_STATE_NORMAL];
  bool has_microphone() const;
  private:
  bool _internal_has_microphone() const;
  public:
  void clear_microphone();
  ::bgs::protocol::club::v1::VoiceMicrophoneState microphone() const;
  void set_microphone(::bgs::protocol::club::v1::VoiceMicrophoneState value);
  private:
  ::bgs::protocol::club::v1::VoiceMicrophoneState _internal_microphone() const;
  void _internal_set_microphone(::bgs::protocol::club::v1::VoiceMicrophoneState value);
  public:

  // optional bool joined = 2;
  bool has_joined() const;
  private:
  bool _internal_has_joined() const;
  public:
  void clear_joined();
  bool joined() const;
  void set_joined(bool value);
  private:
  bool _internal_joined() const;
  void _internal_set_joined(bool value);
  public:

  // optional bool active = 4;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberVoiceOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  int microphone_;
  bool joined_;
  bool active_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class MemberVoiceState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberVoiceState) */ {
 public:
  MemberVoiceState();
  virtual ~MemberVoiceState();

  MemberVoiceState(const MemberVoiceState& from);
  MemberVoiceState(MemberVoiceState&& from) noexcept
    : MemberVoiceState() {
    *this = ::std::move(from);
  }

  inline MemberVoiceState& operator=(const MemberVoiceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberVoiceState& operator=(MemberVoiceState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberVoiceState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberVoiceState* internal_default_instance() {
    return reinterpret_cast<const MemberVoiceState*>(
               &_MemberVoiceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MemberVoiceState& a, MemberVoiceState& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberVoiceState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberVoiceState* New() const final {
    return CreateMaybeMessage<MemberVoiceState>(nullptr);
  }

  MemberVoiceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberVoiceState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberVoiceState& from);
  void MergeFrom(const MemberVoiceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberVoiceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberVoiceState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
    kMicrophoneFieldNumber = 4,
    kJoinedFieldNumber = 3,
    kActiveFieldNumber = 5,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional uint64 stream_id = 2;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4 [default = MICROPHONE_STATE_NORMAL];
  bool has_microphone() const;
  private:
  bool _internal_has_microphone() const;
  public:
  void clear_microphone();
  ::bgs::protocol::club::v1::VoiceMicrophoneState microphone() const;
  void set_microphone(::bgs::protocol::club::v1::VoiceMicrophoneState value);
  private:
  ::bgs::protocol::club::v1::VoiceMicrophoneState _internal_microphone() const;
  void _internal_set_microphone(::bgs::protocol::club::v1::VoiceMicrophoneState value);
  public:

  // optional bool joined = 3;
  bool has_joined() const;
  private:
  bool _internal_has_joined() const;
  public:
  void clear_joined();
  bool joined() const;
  void set_joined(bool value);
  private:
  bool _internal_joined() const;
  void _internal_set_joined(bool value);
  public:

  // optional bool active = 5;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberVoiceState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  int microphone_;
  bool joined_;
  bool active_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class CreateMemberOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateMemberOptions) */ {
 public:
  CreateMemberOptions();
  virtual ~CreateMemberOptions();

  CreateMemberOptions(const CreateMemberOptions& from);
  CreateMemberOptions(CreateMemberOptions&& from) noexcept
    : CreateMemberOptions() {
    *this = ::std::move(from);
  }

  inline CreateMemberOptions& operator=(const CreateMemberOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMemberOptions& operator=(CreateMemberOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMemberOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMemberOptions* internal_default_instance() {
    return reinterpret_cast<const CreateMemberOptions*>(
               &_CreateMemberOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateMemberOptions& a, CreateMemberOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMemberOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMemberOptions* New() const final {
    return CreateMaybeMessage<CreateMemberOptions>(nullptr);
  }

  CreateMemberOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMemberOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMemberOptions& from);
  void MergeFrom(const CreateMemberOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMemberOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateMemberOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional .bgs.protocol.club.v1.MemberId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bgs::protocol::club::v1::MemberId& id() const;
  ::bgs::protocol::club::v1::MemberId* release_id();
  ::bgs::protocol::club::v1::MemberId* mutable_id();
  void set_allocated_id(::bgs::protocol::club::v1::MemberId* id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateMemberOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::bgs::protocol::club::v1::MemberId* id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class MemberDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberDescription) */ {
 public:
  MemberDescription();
  virtual ~MemberDescription();

  MemberDescription(const MemberDescription& from);
  MemberDescription(MemberDescription&& from) noexcept
    : MemberDescription() {
    *this = ::std::move(from);
  }

  inline MemberDescription& operator=(const MemberDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberDescription& operator=(MemberDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberDescription* internal_default_instance() {
    return reinterpret_cast<const MemberDescription*>(
               &_MemberDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MemberDescription& a, MemberDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberDescription* New() const final {
    return CreateMaybeMessage<MemberDescription>(nullptr);
  }

  MemberDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberDescription& from);
  void MergeFrom(const MemberDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleTagFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string battle_tag = 2;
  bool has_battle_tag() const;
  private:
  bool _internal_has_battle_tag() const;
  public:
  void clear_battle_tag();
  const std::string& battle_tag() const;
  void set_battle_tag(const std::string& value);
  void set_battle_tag(std::string&& value);
  void set_battle_tag(const char* value);
  void set_battle_tag(const char* value, size_t size);
  std::string* mutable_battle_tag();
  std::string* release_battle_tag();
  void set_allocated_battle_tag(std::string* battle_tag);
  private:
  const std::string& _internal_battle_tag() const;
  void _internal_set_battle_tag(const std::string& value);
  std::string* _internal_mutable_battle_tag();
  public:

  // optional .bgs.protocol.club.v1.MemberId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bgs::protocol::club::v1::MemberId& id() const;
  ::bgs::protocol::club::v1::MemberId* release_id();
  ::bgs::protocol::club::v1::MemberId* mutable_id();
  void set_allocated_id(::bgs::protocol::club::v1::MemberId* id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_tag_;
  ::bgs::protocol::club::v1::MemberId* id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class RoleOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.RoleOptions) */ {
 public:
  RoleOptions();
  virtual ~RoleOptions();

  RoleOptions(const RoleOptions& from);
  RoleOptions(RoleOptions&& from) noexcept
    : RoleOptions() {
    *this = ::std::move(from);
  }

  inline RoleOptions& operator=(const RoleOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleOptions& operator=(RoleOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleOptions* internal_default_instance() {
    return reinterpret_cast<const RoleOptions*>(
               &_RoleOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoleOptions& a, RoleOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleOptions* New() const final {
    return CreateMaybeMessage<RoleOptions>(nullptr);
  }

  RoleOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleOptions& from);
  void MergeFrom(const RoleOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.RoleOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kMemberIdFieldNumber = 1,
  };
  // repeated uint32 role = 2 [packed = true, (.bgs.protocol.valid) = {
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.RoleOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class RoleAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.RoleAssignment) */ {
 public:
  RoleAssignment();
  virtual ~RoleAssignment();

  RoleAssignment(const RoleAssignment& from);
  RoleAssignment(RoleAssignment&& from) noexcept
    : RoleAssignment() {
    *this = ::std::move(from);
  }

  inline RoleAssignment& operator=(const RoleAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAssignment& operator=(RoleAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleAssignment* internal_default_instance() {
    return reinterpret_cast<const RoleAssignment*>(
               &_RoleAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RoleAssignment& a, RoleAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleAssignment* New() const final {
    return CreateMaybeMessage<RoleAssignment>(nullptr);
  }

  RoleAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleAssignment& from);
  void MergeFrom(const RoleAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.RoleAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kMemberIdFieldNumber = 1,
  };
  // repeated uint32 role = 2 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.RoleAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class MemberAttributeAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberAttributeAssignment) */ {
 public:
  MemberAttributeAssignment();
  virtual ~MemberAttributeAssignment();

  MemberAttributeAssignment(const MemberAttributeAssignment& from);
  MemberAttributeAssignment(MemberAttributeAssignment&& from) noexcept
    : MemberAttributeAssignment() {
    *this = ::std::move(from);
  }

  inline MemberAttributeAssignment& operator=(const MemberAttributeAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberAttributeAssignment& operator=(MemberAttributeAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberAttributeAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberAttributeAssignment* internal_default_instance() {
    return reinterpret_cast<const MemberAttributeAssignment*>(
               &_MemberAttributeAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MemberAttributeAssignment& a, MemberAttributeAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberAttributeAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberAttributeAssignment* New() const final {
    return CreateMaybeMessage<MemberAttributeAssignment>(nullptr);
  }

  MemberAttributeAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberAttributeAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberAttributeAssignment& from);
  void MergeFrom(const MemberAttributeAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberAttributeAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberAttributeAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kMemberIdFieldNumber = 1,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberAttributeAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class SubscriberStateOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SubscriberStateOptions) */ {
 public:
  SubscriberStateOptions();
  virtual ~SubscriberStateOptions();

  SubscriberStateOptions(const SubscriberStateOptions& from);
  SubscriberStateOptions(SubscriberStateOptions&& from) noexcept
    : SubscriberStateOptions() {
    *this = ::std::move(from);
  }

  inline SubscriberStateOptions& operator=(const SubscriberStateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriberStateOptions& operator=(SubscriberStateOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriberStateOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriberStateOptions* internal_default_instance() {
    return reinterpret_cast<const SubscriberStateOptions*>(
               &_SubscriberStateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubscriberStateOptions& a, SubscriberStateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriberStateOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriberStateOptions* New() const final {
    return CreateMaybeMessage<SubscriberStateOptions>(nullptr);
  }

  SubscriberStateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriberStateOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriberStateOptions& from);
  void MergeFrom(const SubscriberStateOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriberStateOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SubscriberStateOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoiceFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::bgs::protocol::club::v1::MemberVoiceOptions& voice() const;
  ::bgs::protocol::club::v1::MemberVoiceOptions* release_voice();
  ::bgs::protocol::club::v1::MemberVoiceOptions* mutable_voice();
  void set_allocated_voice(::bgs::protocol::club::v1::MemberVoiceOptions* voice);
  private:
  const ::bgs::protocol::club::v1::MemberVoiceOptions& _internal_voice() const;
  ::bgs::protocol::club::v1::MemberVoiceOptions* _internal_mutable_voice();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SubscriberStateOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberVoiceOptions* voice_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class SubscriberStateAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SubscriberStateAssignment) */ {
 public:
  SubscriberStateAssignment();
  virtual ~SubscriberStateAssignment();

  SubscriberStateAssignment(const SubscriberStateAssignment& from);
  SubscriberStateAssignment(SubscriberStateAssignment&& from) noexcept
    : SubscriberStateAssignment() {
    *this = ::std::move(from);
  }

  inline SubscriberStateAssignment& operator=(const SubscriberStateAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriberStateAssignment& operator=(SubscriberStateAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriberStateAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriberStateAssignment* internal_default_instance() {
    return reinterpret_cast<const SubscriberStateAssignment*>(
               &_SubscriberStateAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SubscriberStateAssignment& a, SubscriberStateAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriberStateAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriberStateAssignment* New() const final {
    return CreateMaybeMessage<SubscriberStateAssignment>(nullptr);
  }

  SubscriberStateAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriberStateAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriberStateAssignment& from);
  void MergeFrom(const SubscriberStateAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriberStateAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SubscriberStateAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
    kVoiceFieldNumber = 3,
    kActiveFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::bgs::protocol::club::v1::MemberVoiceState& voice() const;
  ::bgs::protocol::club::v1::MemberVoiceState* release_voice();
  ::bgs::protocol::club::v1::MemberVoiceState* mutable_voice();
  void set_allocated_voice(::bgs::protocol::club::v1::MemberVoiceState* voice);
  private:
  const ::bgs::protocol::club::v1::MemberVoiceState& _internal_voice() const;
  ::bgs::protocol::club::v1::MemberVoiceState* _internal_mutable_voice();
  public:

  // optional bool active = 2;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SubscriberStateAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  ::bgs::protocol::club::v1::MemberVoiceState* voice_;
  bool active_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class MemberStateOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberStateOptions) */ {
 public:
  MemberStateOptions();
  virtual ~MemberStateOptions();

  MemberStateOptions(const MemberStateOptions& from);
  MemberStateOptions(MemberStateOptions&& from) noexcept
    : MemberStateOptions() {
    *this = ::std::move(from);
  }

  inline MemberStateOptions& operator=(const MemberStateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberStateOptions& operator=(MemberStateOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberStateOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberStateOptions* internal_default_instance() {
    return reinterpret_cast<const MemberStateOptions*>(
               &_MemberStateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MemberStateOptions& a, MemberStateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberStateOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberStateOptions* New() const final {
    return CreateMaybeMessage<MemberStateOptions>(nullptr);
  }

  MemberStateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberStateOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberStateOptions& from);
  void MergeFrom(const MemberStateOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberStateOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberStateOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kNoteFieldNumber = 5,
    kPresenceLevelFieldNumber = 2,
    kModeratorMuteFieldNumber = 3,
    kWhisperLevelFieldNumber = 4,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string note = 5;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2 [default = PRESENCE_LEVEL_NONE];
  bool has_presence_level() const;
  private:
  bool _internal_has_presence_level() const;
  public:
  void clear_presence_level();
  ::bgs::protocol::club::v1::PresenceLevel presence_level() const;
  void set_presence_level(::bgs::protocol::club::v1::PresenceLevel value);
  private:
  ::bgs::protocol::club::v1::PresenceLevel _internal_presence_level() const;
  void _internal_set_presence_level(::bgs::protocol::club::v1::PresenceLevel value);
  public:

  // optional bool moderator_mute = 3;
  bool has_moderator_mute() const;
  private:
  bool _internal_has_moderator_mute() const;
  public:
  void clear_moderator_mute();
  bool moderator_mute() const;
  void set_moderator_mute(bool value);
  private:
  bool _internal_moderator_mute() const;
  void _internal_set_moderator_mute(bool value);
  public:

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4 [default = WHISPER_LEVEL_OPEN];
  bool has_whisper_level() const;
  private:
  bool _internal_has_whisper_level() const;
  public:
  void clear_whisper_level();
  ::bgs::protocol::club::v1::WhisperLevel whisper_level() const;
  void set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value);
  private:
  ::bgs::protocol::club::v1::WhisperLevel _internal_whisper_level() const;
  void _internal_set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberStateOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  int presence_level_;
  bool moderator_mute_;
  int whisper_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// -------------------------------------------------------------------

class MemberStateAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberStateAssignment) */ {
 public:
  MemberStateAssignment();
  virtual ~MemberStateAssignment();

  MemberStateAssignment(const MemberStateAssignment& from);
  MemberStateAssignment(MemberStateAssignment&& from) noexcept
    : MemberStateAssignment() {
    *this = ::std::move(from);
  }

  inline MemberStateAssignment& operator=(const MemberStateAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberStateAssignment& operator=(MemberStateAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberStateAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberStateAssignment* internal_default_instance() {
    return reinterpret_cast<const MemberStateAssignment*>(
               &_MemberStateAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MemberStateAssignment& a, MemberStateAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberStateAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberStateAssignment* New() const final {
    return CreateMaybeMessage<MemberStateAssignment>(nullptr);
  }

  MemberStateAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberStateAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberStateAssignment& from);
  void MergeFrom(const MemberStateAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberStateAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberStateAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kNoteFieldNumber = 6,
    kMemberIdFieldNumber = 1,
    kPresenceLevelFieldNumber = 3,
    kModeratorMuteFieldNumber = 4,
    kWhisperLevelFieldNumber = 5,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string note = 6;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3 [default = PRESENCE_LEVEL_NONE];
  bool has_presence_level() const;
  private:
  bool _internal_has_presence_level() const;
  public:
  void clear_presence_level();
  ::bgs::protocol::club::v1::PresenceLevel presence_level() const;
  void set_presence_level(::bgs::protocol::club::v1::PresenceLevel value);
  private:
  ::bgs::protocol::club::v1::PresenceLevel _internal_presence_level() const;
  void _internal_set_presence_level(::bgs::protocol::club::v1::PresenceLevel value);
  public:

  // optional bool moderator_mute = 4;
  bool has_moderator_mute() const;
  private:
  bool _internal_has_moderator_mute() const;
  public:
  void clear_moderator_mute();
  bool moderator_mute() const;
  void set_moderator_mute(bool value);
  private:
  bool _internal_moderator_mute() const;
  void _internal_set_moderator_mute(bool value);
  public:

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5 [default = WHISPER_LEVEL_OPEN];
  bool has_whisper_level() const;
  private:
  bool _internal_has_whisper_level() const;
  public:
  void clear_whisper_level();
  ::bgs::protocol::club::v1::WhisperLevel whisper_level() const;
  void set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value);
  private:
  ::bgs::protocol::club::v1::WhisperLevel _internal_whisper_level() const;
  void _internal_set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberStateAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  int presence_level_;
  bool moderator_mute_;
  int whisper_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Member

// optional .bgs.protocol.club.v1.MemberId id = 1;
inline bool Member::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Member::has_id() const {
  return _internal_has_id();
}
inline const ::bgs::protocol::club::v1::MemberId& Member::_internal_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& Member::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.id)
  return _internal_id();
}
inline ::bgs::protocol::club::v1::MemberId* Member::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Member.id)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::MemberId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* Member::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::bgs::protocol::club::v1::MemberId* Member::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Member.id)
  return _internal_mutable_id();
}
inline void Member::set_allocated_id(::bgs::protocol::club::v1::MemberId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Member.id)
}

// optional string battle_tag = 2;
inline bool Member::_internal_has_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Member::has_battle_tag() const {
  return _internal_has_battle_tag();
}
inline void Member::clear_battle_tag() {
  battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Member::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.battle_tag)
  return _internal_battle_tag();
}
inline void Member::set_battle_tag(const std::string& value) {
  _internal_set_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Member.battle_tag)
}
inline std::string* Member::mutable_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Member.battle_tag)
  return _internal_mutable_battle_tag();
}
inline const std::string& Member::_internal_battle_tag() const {
  return battle_tag_.GetNoArena();
}
inline void Member::_internal_set_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Member::set_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.Member.battle_tag)
}
inline void Member::set_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Member.battle_tag)
}
inline void Member::set_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Member.battle_tag)
}
inline std::string* Member::_internal_mutable_battle_tag() {
  _has_bits_[0] |= 0x00000001u;
  return battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Member::release_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Member.battle_tag)
  if (!_internal_has_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Member::set_allocated_battle_tag(std::string* battle_tag) {
  if (battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Member.battle_tag)
}

// repeated uint32 role = 3 [packed = true];
inline int Member::_internal_role_size() const {
  return role_.size();
}
inline int Member::role_size() const {
  return _internal_role_size();
}
inline void Member::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Member::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Member::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.role)
  return _internal_role(index);
}
inline void Member::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Member.role)
}
inline void Member::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void Member::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.Member.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Member::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Member::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.Member.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Member::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Member::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.Member.role)
  return _internal_mutable_role();
}

// repeated .bgs.protocol.v2.Attribute attribute = 4;
inline int Member::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Member::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* Member::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Member.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
Member::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.Member.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& Member::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& Member::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* Member::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* Member::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.Member.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
Member::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.Member.attribute)
  return attribute_;
}

// optional uint64 join_time = 5;
inline bool Member::_internal_has_join_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Member::has_join_time() const {
  return _internal_has_join_time();
}
inline void Member::clear_join_time() {
  join_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Member::_internal_join_time() const {
  return join_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Member::join_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.join_time)
  return _internal_join_time();
}
inline void Member::_internal_set_join_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  join_time_ = value;
}
inline void Member::set_join_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_join_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Member.join_time)
}

// optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6 [default = PRESENCE_LEVEL_NONE];
inline bool Member::_internal_has_presence_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Member::has_presence_level() const {
  return _internal_has_presence_level();
}
inline void Member::clear_presence_level() {
  presence_level_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::bgs::protocol::club::v1::PresenceLevel Member::_internal_presence_level() const {
  return static_cast< ::bgs::protocol::club::v1::PresenceLevel >(presence_level_);
}
inline ::bgs::protocol::club::v1::PresenceLevel Member::presence_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.presence_level)
  return _internal_presence_level();
}
inline void Member::_internal_set_presence_level(::bgs::protocol::club::v1::PresenceLevel value) {
  assert(::bgs::protocol::club::v1::PresenceLevel_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  presence_level_ = value;
}
inline void Member::set_presence_level(::bgs::protocol::club::v1::PresenceLevel value) {
  _internal_set_presence_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Member.presence_level)
}

// optional bool moderator_mute = 7;
inline bool Member::_internal_has_moderator_mute() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Member::has_moderator_mute() const {
  return _internal_has_moderator_mute();
}
inline void Member::clear_moderator_mute() {
  moderator_mute_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Member::_internal_moderator_mute() const {
  return moderator_mute_;
}
inline bool Member::moderator_mute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.moderator_mute)
  return _internal_moderator_mute();
}
inline void Member::_internal_set_moderator_mute(bool value) {
  _has_bits_[0] |= 0x00000080u;
  moderator_mute_ = value;
}
inline void Member::set_moderator_mute(bool value) {
  _internal_set_moderator_mute(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Member.moderator_mute)
}

// optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8 [default = WHISPER_LEVEL_OPEN];
inline bool Member::_internal_has_whisper_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Member::has_whisper_level() const {
  return _internal_has_whisper_level();
}
inline void Member::clear_whisper_level() {
  whisper_level_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::bgs::protocol::club::v1::WhisperLevel Member::_internal_whisper_level() const {
  return static_cast< ::bgs::protocol::club::v1::WhisperLevel >(whisper_level_);
}
inline ::bgs::protocol::club::v1::WhisperLevel Member::whisper_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.whisper_level)
  return _internal_whisper_level();
}
inline void Member::_internal_set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value) {
  assert(::bgs::protocol::club::v1::WhisperLevel_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  whisper_level_ = value;
}
inline void Member::set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value) {
  _internal_set_whisper_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Member.whisper_level)
}

// optional string note = 9;
inline bool Member::_internal_has_note() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Member::has_note() const {
  return _internal_has_note();
}
inline void Member::clear_note() {
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Member::note() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.note)
  return _internal_note();
}
inline void Member::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Member.note)
}
inline std::string* Member::mutable_note() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Member.note)
  return _internal_mutable_note();
}
inline const std::string& Member::_internal_note() const {
  return note_.GetNoArena();
}
inline void Member::_internal_set_note(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Member::set_note(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  note_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.Member.note)
}
inline void Member::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Member.note)
}
inline void Member::set_note(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Member.note)
}
inline std::string* Member::_internal_mutable_note() {
  _has_bits_[0] |= 0x00000002u;
  return note_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Member::release_note() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Member.note)
  if (!_internal_has_note()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return note_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Member::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  note_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Member.note)
}

// optional bool active = 50;
inline bool Member::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Member::has_active() const {
  return _internal_has_active();
}
inline void Member::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Member::_internal_active() const {
  return active_;
}
inline bool Member::active() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.active)
  return _internal_active();
}
inline void Member::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000100u;
  active_ = value;
}
inline void Member::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Member.active)
}

// optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
inline bool Member::_internal_has_voice() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || voice_ != nullptr);
  return value;
}
inline bool Member::has_voice() const {
  return _internal_has_voice();
}
inline void Member::clear_voice() {
  if (voice_ != nullptr) voice_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::club::v1::MemberVoiceState& Member::_internal_voice() const {
  const ::bgs::protocol::club::v1::MemberVoiceState* p = voice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberVoiceState*>(
      &::bgs::protocol::club::v1::_MemberVoiceState_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberVoiceState& Member::voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Member.voice)
  return _internal_voice();
}
inline ::bgs::protocol::club::v1::MemberVoiceState* Member::release_voice() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Member.voice)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::MemberVoiceState* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberVoiceState* Member::_internal_mutable_voice() {
  _has_bits_[0] |= 0x00000008u;
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberVoiceState>(GetArenaNoVirtual());
    voice_ = p;
  }
  return voice_;
}
inline ::bgs::protocol::club::v1::MemberVoiceState* Member::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Member.voice)
  return _internal_mutable_voice();
}
inline void Member::set_allocated_voice(::bgs::protocol::club::v1::MemberVoiceState* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete voice_;
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Member.voice)
}

// -------------------------------------------------------------------

// MemberResult

// optional .bgs.protocol.club.v1.MemberId member_id = 1;
inline bool MemberResult::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool MemberResult::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberResult::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberResult::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberResult.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberResult::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberResult.member_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberResult::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000001u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberResult::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberResult.member_id)
  return _internal_mutable_member_id();
}
inline void MemberResult::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberResult.member_id)
}

// optional uint32 status = 2;
inline bool MemberResult::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberResult::has_status() const {
  return _internal_has_status();
}
inline void MemberResult::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberResult::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberResult::status() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberResult.status)
  return _internal_status();
}
inline void MemberResult::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void MemberResult::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberResult.status)
}

// -------------------------------------------------------------------

// RemoveMemberOptions

// optional .bgs.protocol.club.v1.MemberId id = 1;
inline bool RemoveMemberOptions::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool RemoveMemberOptions::has_id() const {
  return _internal_has_id();
}
inline const ::bgs::protocol::club::v1::MemberId& RemoveMemberOptions::_internal_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& RemoveMemberOptions::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RemoveMemberOptions.id)
  return _internal_id();
}
inline ::bgs::protocol::club::v1::MemberId* RemoveMemberOptions::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.RemoveMemberOptions.id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* RemoveMemberOptions::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::bgs::protocol::club::v1::MemberId* RemoveMemberOptions::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.RemoveMemberOptions.id)
  return _internal_mutable_id();
}
inline void RemoveMemberOptions::set_allocated_id(::bgs::protocol::club::v1::MemberId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.RemoveMemberOptions.id)
}

// optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
inline bool RemoveMemberOptions::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoveMemberOptions::has_reason() const {
  return _internal_has_reason();
}
inline void RemoveMemberOptions::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::bgs::protocol::club::v1::ClubRemovedReason RemoveMemberOptions::_internal_reason() const {
  return static_cast< ::bgs::protocol::club::v1::ClubRemovedReason >(reason_);
}
inline ::bgs::protocol::club::v1::ClubRemovedReason RemoveMemberOptions::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RemoveMemberOptions.reason)
  return _internal_reason();
}
inline void RemoveMemberOptions::_internal_set_reason(::bgs::protocol::club::v1::ClubRemovedReason value) {
  assert(::bgs::protocol::club::v1::ClubRemovedReason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void RemoveMemberOptions::set_reason(::bgs::protocol::club::v1::ClubRemovedReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.RemoveMemberOptions.reason)
}

// -------------------------------------------------------------------

// MemberRemovedAssignment

// optional .bgs.protocol.club.v1.MemberId id = 1;
inline bool MemberRemovedAssignment::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool MemberRemovedAssignment::has_id() const {
  return _internal_has_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberRemovedAssignment::_internal_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberRemovedAssignment::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberRemovedAssignment.id)
  return _internal_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberRemovedAssignment::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberRemovedAssignment.id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRemovedAssignment::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRemovedAssignment::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberRemovedAssignment.id)
  return _internal_mutable_id();
}
inline void MemberRemovedAssignment::set_allocated_id(::bgs::protocol::club::v1::MemberId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberRemovedAssignment.id)
}

// optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2 [default = CLUB_REMOVED_REASON_NONE];
inline bool MemberRemovedAssignment::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberRemovedAssignment::has_reason() const {
  return _internal_has_reason();
}
inline void MemberRemovedAssignment::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::bgs::protocol::club::v1::ClubRemovedReason MemberRemovedAssignment::_internal_reason() const {
  return static_cast< ::bgs::protocol::club::v1::ClubRemovedReason >(reason_);
}
inline ::bgs::protocol::club::v1::ClubRemovedReason MemberRemovedAssignment::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberRemovedAssignment.reason)
  return _internal_reason();
}
inline void MemberRemovedAssignment::_internal_set_reason(::bgs::protocol::club::v1::ClubRemovedReason value) {
  assert(::bgs::protocol::club::v1::ClubRemovedReason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void MemberRemovedAssignment::set_reason(::bgs::protocol::club::v1::ClubRemovedReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberRemovedAssignment.reason)
}

// -------------------------------------------------------------------

// MemberVoiceOptions

// optional uint64 stream_id = 1;
inline bool MemberVoiceOptions::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemberVoiceOptions::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void MemberVoiceOptions::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberVoiceOptions::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberVoiceOptions::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceOptions.stream_id)
  return _internal_stream_id();
}
inline void MemberVoiceOptions::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  stream_id_ = value;
}
inline void MemberVoiceOptions::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceOptions.stream_id)
}

// optional bool joined = 2;
inline bool MemberVoiceOptions::_internal_has_joined() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemberVoiceOptions::has_joined() const {
  return _internal_has_joined();
}
inline void MemberVoiceOptions::clear_joined() {
  joined_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MemberVoiceOptions::_internal_joined() const {
  return joined_;
}
inline bool MemberVoiceOptions::joined() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceOptions.joined)
  return _internal_joined();
}
inline void MemberVoiceOptions::_internal_set_joined(bool value) {
  _has_bits_[0] |= 0x00000004u;
  joined_ = value;
}
inline void MemberVoiceOptions::set_joined(bool value) {
  _internal_set_joined(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceOptions.joined)
}

// optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3 [default = MICROPHONE_STATE_NORMAL];
inline bool MemberVoiceOptions::_internal_has_microphone() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberVoiceOptions::has_microphone() const {
  return _internal_has_microphone();
}
inline void MemberVoiceOptions::clear_microphone() {
  microphone_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::bgs::protocol::club::v1::VoiceMicrophoneState MemberVoiceOptions::_internal_microphone() const {
  return static_cast< ::bgs::protocol::club::v1::VoiceMicrophoneState >(microphone_);
}
inline ::bgs::protocol::club::v1::VoiceMicrophoneState MemberVoiceOptions::microphone() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceOptions.microphone)
  return _internal_microphone();
}
inline void MemberVoiceOptions::_internal_set_microphone(::bgs::protocol::club::v1::VoiceMicrophoneState value) {
  assert(::bgs::protocol::club::v1::VoiceMicrophoneState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  microphone_ = value;
}
inline void MemberVoiceOptions::set_microphone(::bgs::protocol::club::v1::VoiceMicrophoneState value) {
  _internal_set_microphone(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceOptions.microphone)
}

// optional bool active = 4;
inline bool MemberVoiceOptions::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemberVoiceOptions::has_active() const {
  return _internal_has_active();
}
inline void MemberVoiceOptions::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MemberVoiceOptions::_internal_active() const {
  return active_;
}
inline bool MemberVoiceOptions::active() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceOptions.active)
  return _internal_active();
}
inline void MemberVoiceOptions::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000008u;
  active_ = value;
}
inline void MemberVoiceOptions::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceOptions.active)
}

// -------------------------------------------------------------------

// MemberVoiceState

// optional string id = 1;
inline bool MemberVoiceState::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemberVoiceState::has_id() const {
  return _internal_has_id();
}
inline void MemberVoiceState::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemberVoiceState::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceState.id)
  return _internal_id();
}
inline void MemberVoiceState::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceState.id)
}
inline std::string* MemberVoiceState::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberVoiceState.id)
  return _internal_mutable_id();
}
inline const std::string& MemberVoiceState::_internal_id() const {
  return id_.GetNoArena();
}
inline void MemberVoiceState::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MemberVoiceState::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.MemberVoiceState.id)
}
inline void MemberVoiceState::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.MemberVoiceState.id)
}
inline void MemberVoiceState::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.MemberVoiceState.id)
}
inline std::string* MemberVoiceState::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberVoiceState::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberVoiceState.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberVoiceState::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberVoiceState.id)
}

// optional uint64 stream_id = 2;
inline bool MemberVoiceState::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberVoiceState::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void MemberVoiceState::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberVoiceState::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberVoiceState::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceState.stream_id)
  return _internal_stream_id();
}
inline void MemberVoiceState::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  stream_id_ = value;
}
inline void MemberVoiceState::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceState.stream_id)
}

// optional bool joined = 3;
inline bool MemberVoiceState::_internal_has_joined() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemberVoiceState::has_joined() const {
  return _internal_has_joined();
}
inline void MemberVoiceState::clear_joined() {
  joined_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MemberVoiceState::_internal_joined() const {
  return joined_;
}
inline bool MemberVoiceState::joined() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceState.joined)
  return _internal_joined();
}
inline void MemberVoiceState::_internal_set_joined(bool value) {
  _has_bits_[0] |= 0x00000008u;
  joined_ = value;
}
inline void MemberVoiceState::set_joined(bool value) {
  _internal_set_joined(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceState.joined)
}

// optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4 [default = MICROPHONE_STATE_NORMAL];
inline bool MemberVoiceState::_internal_has_microphone() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemberVoiceState::has_microphone() const {
  return _internal_has_microphone();
}
inline void MemberVoiceState::clear_microphone() {
  microphone_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::bgs::protocol::club::v1::VoiceMicrophoneState MemberVoiceState::_internal_microphone() const {
  return static_cast< ::bgs::protocol::club::v1::VoiceMicrophoneState >(microphone_);
}
inline ::bgs::protocol::club::v1::VoiceMicrophoneState MemberVoiceState::microphone() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceState.microphone)
  return _internal_microphone();
}
inline void MemberVoiceState::_internal_set_microphone(::bgs::protocol::club::v1::VoiceMicrophoneState value) {
  assert(::bgs::protocol::club::v1::VoiceMicrophoneState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  microphone_ = value;
}
inline void MemberVoiceState::set_microphone(::bgs::protocol::club::v1::VoiceMicrophoneState value) {
  _internal_set_microphone(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceState.microphone)
}

// optional bool active = 5;
inline bool MemberVoiceState::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MemberVoiceState::has_active() const {
  return _internal_has_active();
}
inline void MemberVoiceState::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MemberVoiceState::_internal_active() const {
  return active_;
}
inline bool MemberVoiceState::active() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberVoiceState.active)
  return _internal_active();
}
inline void MemberVoiceState::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000010u;
  active_ = value;
}
inline void MemberVoiceState::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberVoiceState.active)
}

// -------------------------------------------------------------------

// CreateMemberOptions

// optional .bgs.protocol.club.v1.MemberId id = 1;
inline bool CreateMemberOptions::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool CreateMemberOptions::has_id() const {
  return _internal_has_id();
}
inline const ::bgs::protocol::club::v1::MemberId& CreateMemberOptions::_internal_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& CreateMemberOptions::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMemberOptions.id)
  return _internal_id();
}
inline ::bgs::protocol::club::v1::MemberId* CreateMemberOptions::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateMemberOptions.id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* CreateMemberOptions::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::bgs::protocol::club::v1::MemberId* CreateMemberOptions::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateMemberOptions.id)
  return _internal_mutable_id();
}
inline void CreateMemberOptions::set_allocated_id(::bgs::protocol::club::v1::MemberId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateMemberOptions.id)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int CreateMemberOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int CreateMemberOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* CreateMemberOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateMemberOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
CreateMemberOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.CreateMemberOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& CreateMemberOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& CreateMemberOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMemberOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* CreateMemberOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* CreateMemberOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.CreateMemberOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
CreateMemberOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.CreateMemberOptions.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// MemberDescription

// optional .bgs.protocol.club.v1.MemberId id = 1;
inline bool MemberDescription::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool MemberDescription::has_id() const {
  return _internal_has_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberDescription::_internal_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberDescription::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberDescription.id)
  return _internal_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberDescription::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberDescription.id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberDescription::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberDescription::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberDescription.id)
  return _internal_mutable_id();
}
inline void MemberDescription::set_allocated_id(::bgs::protocol::club::v1::MemberId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberDescription.id)
}

// optional string battle_tag = 2;
inline bool MemberDescription::_internal_has_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemberDescription::has_battle_tag() const {
  return _internal_has_battle_tag();
}
inline void MemberDescription::clear_battle_tag() {
  battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemberDescription::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberDescription.battle_tag)
  return _internal_battle_tag();
}
inline void MemberDescription::set_battle_tag(const std::string& value) {
  _internal_set_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberDescription.battle_tag)
}
inline std::string* MemberDescription::mutable_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberDescription.battle_tag)
  return _internal_mutable_battle_tag();
}
inline const std::string& MemberDescription::_internal_battle_tag() const {
  return battle_tag_.GetNoArena();
}
inline void MemberDescription::_internal_set_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MemberDescription::set_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.MemberDescription.battle_tag)
}
inline void MemberDescription::set_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.MemberDescription.battle_tag)
}
inline void MemberDescription::set_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.MemberDescription.battle_tag)
}
inline std::string* MemberDescription::_internal_mutable_battle_tag() {
  _has_bits_[0] |= 0x00000001u;
  return battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberDescription::release_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberDescription.battle_tag)
  if (!_internal_has_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberDescription::set_allocated_battle_tag(std::string* battle_tag) {
  if (battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberDescription.battle_tag)
}

// -------------------------------------------------------------------

// RoleOptions

// optional .bgs.protocol.club.v1.MemberId member_id = 1;
inline bool RoleOptions::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool RoleOptions::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& RoleOptions::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& RoleOptions::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RoleOptions.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* RoleOptions::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.RoleOptions.member_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* RoleOptions::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000001u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* RoleOptions::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.RoleOptions.member_id)
  return _internal_mutable_member_id();
}
inline void RoleOptions::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.RoleOptions.member_id)
}

// repeated uint32 role = 2 [packed = true, (.bgs.protocol.valid) = {
inline int RoleOptions::_internal_role_size() const {
  return role_.size();
}
inline int RoleOptions::role_size() const {
  return _internal_role_size();
}
inline void RoleOptions::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleOptions::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleOptions::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RoleOptions.role)
  return _internal_role(index);
}
inline void RoleOptions::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.RoleOptions.role)
}
inline void RoleOptions::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void RoleOptions::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.RoleOptions.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleOptions::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleOptions::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.RoleOptions.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleOptions::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleOptions::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.RoleOptions.role)
  return _internal_mutable_role();
}

// -------------------------------------------------------------------

// RoleAssignment

// optional .bgs.protocol.club.v1.MemberId member_id = 1;
inline bool RoleAssignment::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool RoleAssignment::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& RoleAssignment::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& RoleAssignment::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RoleAssignment.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* RoleAssignment::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.RoleAssignment.member_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* RoleAssignment::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000001u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* RoleAssignment::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.RoleAssignment.member_id)
  return _internal_mutable_member_id();
}
inline void RoleAssignment::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.RoleAssignment.member_id)
}

// repeated uint32 role = 2 [packed = true];
inline int RoleAssignment::_internal_role_size() const {
  return role_.size();
}
inline int RoleAssignment::role_size() const {
  return _internal_role_size();
}
inline void RoleAssignment::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleAssignment::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleAssignment::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RoleAssignment.role)
  return _internal_role(index);
}
inline void RoleAssignment::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.RoleAssignment.role)
}
inline void RoleAssignment::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void RoleAssignment::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.RoleAssignment.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleAssignment::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleAssignment::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.RoleAssignment.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleAssignment::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleAssignment::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.RoleAssignment.role)
  return _internal_mutable_role();
}

// -------------------------------------------------------------------

// MemberAttributeAssignment

// optional .bgs.protocol.club.v1.MemberId member_id = 1;
inline bool MemberAttributeAssignment::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool MemberAttributeAssignment::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberAttributeAssignment::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberAttributeAssignment::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberAttributeAssignment.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberAttributeAssignment::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberAttributeAssignment.member_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberAttributeAssignment::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000001u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberAttributeAssignment::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberAttributeAssignment.member_id)
  return _internal_mutable_member_id();
}
inline void MemberAttributeAssignment::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberAttributeAssignment.member_id)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int MemberAttributeAssignment::_internal_attribute_size() const {
  return attribute_.size();
}
inline int MemberAttributeAssignment::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* MemberAttributeAssignment::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberAttributeAssignment.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
MemberAttributeAssignment::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MemberAttributeAssignment.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& MemberAttributeAssignment::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& MemberAttributeAssignment::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberAttributeAssignment.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* MemberAttributeAssignment::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* MemberAttributeAssignment::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MemberAttributeAssignment.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
MemberAttributeAssignment::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MemberAttributeAssignment.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// SubscriberStateOptions

// optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
inline bool SubscriberStateOptions::_internal_has_voice() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || voice_ != nullptr);
  return value;
}
inline bool SubscriberStateOptions::has_voice() const {
  return _internal_has_voice();
}
inline void SubscriberStateOptions::clear_voice() {
  if (voice_ != nullptr) voice_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::club::v1::MemberVoiceOptions& SubscriberStateOptions::_internal_voice() const {
  const ::bgs::protocol::club::v1::MemberVoiceOptions* p = voice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberVoiceOptions*>(
      &::bgs::protocol::club::v1::_MemberVoiceOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberVoiceOptions& SubscriberStateOptions::voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscriberStateOptions.voice)
  return _internal_voice();
}
inline ::bgs::protocol::club::v1::MemberVoiceOptions* SubscriberStateOptions::release_voice() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscriberStateOptions.voice)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberVoiceOptions* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberVoiceOptions* SubscriberStateOptions::_internal_mutable_voice() {
  _has_bits_[0] |= 0x00000001u;
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberVoiceOptions>(GetArenaNoVirtual());
    voice_ = p;
  }
  return voice_;
}
inline ::bgs::protocol::club::v1::MemberVoiceOptions* SubscriberStateOptions::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscriberStateOptions.voice)
  return _internal_mutable_voice();
}
inline void SubscriberStateOptions::set_allocated_voice(::bgs::protocol::club::v1::MemberVoiceOptions* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete voice_;
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscriberStateOptions.voice)
}

// -------------------------------------------------------------------

// SubscriberStateAssignment

// optional .bgs.protocol.club.v1.MemberId member_id = 1;
inline bool SubscriberStateAssignment::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool SubscriberStateAssignment::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SubscriberStateAssignment::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SubscriberStateAssignment::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscriberStateAssignment.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* SubscriberStateAssignment::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscriberStateAssignment.member_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SubscriberStateAssignment::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000001u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscriberStateAssignment::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscriberStateAssignment.member_id)
  return _internal_mutable_member_id();
}
inline void SubscriberStateAssignment::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscriberStateAssignment.member_id)
}

// optional bool active = 2;
inline bool SubscriberStateAssignment::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubscriberStateAssignment::has_active() const {
  return _internal_has_active();
}
inline void SubscriberStateAssignment::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SubscriberStateAssignment::_internal_active() const {
  return active_;
}
inline bool SubscriberStateAssignment::active() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscriberStateAssignment.active)
  return _internal_active();
}
inline void SubscriberStateAssignment::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  active_ = value;
}
inline void SubscriberStateAssignment::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SubscriberStateAssignment.active)
}

// optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
inline bool SubscriberStateAssignment::_internal_has_voice() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || voice_ != nullptr);
  return value;
}
inline bool SubscriberStateAssignment::has_voice() const {
  return _internal_has_voice();
}
inline void SubscriberStateAssignment::clear_voice() {
  if (voice_ != nullptr) voice_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::club::v1::MemberVoiceState& SubscriberStateAssignment::_internal_voice() const {
  const ::bgs::protocol::club::v1::MemberVoiceState* p = voice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberVoiceState*>(
      &::bgs::protocol::club::v1::_MemberVoiceState_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberVoiceState& SubscriberStateAssignment::voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscriberStateAssignment.voice)
  return _internal_voice();
}
inline ::bgs::protocol::club::v1::MemberVoiceState* SubscriberStateAssignment::release_voice() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscriberStateAssignment.voice)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberVoiceState* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberVoiceState* SubscriberStateAssignment::_internal_mutable_voice() {
  _has_bits_[0] |= 0x00000002u;
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberVoiceState>(GetArenaNoVirtual());
    voice_ = p;
  }
  return voice_;
}
inline ::bgs::protocol::club::v1::MemberVoiceState* SubscriberStateAssignment::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscriberStateAssignment.voice)
  return _internal_mutable_voice();
}
inline void SubscriberStateAssignment::set_allocated_voice(::bgs::protocol::club::v1::MemberVoiceState* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete voice_;
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscriberStateAssignment.voice)
}

// -------------------------------------------------------------------

// MemberStateOptions

// repeated .bgs.protocol.v2.Attribute attribute = 1;
inline int MemberStateOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int MemberStateOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* MemberStateOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberStateOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
MemberStateOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MemberStateOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& MemberStateOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& MemberStateOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* MemberStateOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* MemberStateOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MemberStateOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
MemberStateOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MemberStateOptions.attribute)
  return attribute_;
}

// optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2 [default = PRESENCE_LEVEL_NONE];
inline bool MemberStateOptions::_internal_has_presence_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberStateOptions::has_presence_level() const {
  return _internal_has_presence_level();
}
inline void MemberStateOptions::clear_presence_level() {
  presence_level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::bgs::protocol::club::v1::PresenceLevel MemberStateOptions::_internal_presence_level() const {
  return static_cast< ::bgs::protocol::club::v1::PresenceLevel >(presence_level_);
}
inline ::bgs::protocol::club::v1::PresenceLevel MemberStateOptions::presence_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateOptions.presence_level)
  return _internal_presence_level();
}
inline void MemberStateOptions::_internal_set_presence_level(::bgs::protocol::club::v1::PresenceLevel value) {
  assert(::bgs::protocol::club::v1::PresenceLevel_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  presence_level_ = value;
}
inline void MemberStateOptions::set_presence_level(::bgs::protocol::club::v1::PresenceLevel value) {
  _internal_set_presence_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateOptions.presence_level)
}

// optional bool moderator_mute = 3;
inline bool MemberStateOptions::_internal_has_moderator_mute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemberStateOptions::has_moderator_mute() const {
  return _internal_has_moderator_mute();
}
inline void MemberStateOptions::clear_moderator_mute() {
  moderator_mute_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MemberStateOptions::_internal_moderator_mute() const {
  return moderator_mute_;
}
inline bool MemberStateOptions::moderator_mute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateOptions.moderator_mute)
  return _internal_moderator_mute();
}
inline void MemberStateOptions::_internal_set_moderator_mute(bool value) {
  _has_bits_[0] |= 0x00000004u;
  moderator_mute_ = value;
}
inline void MemberStateOptions::set_moderator_mute(bool value) {
  _internal_set_moderator_mute(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateOptions.moderator_mute)
}

// optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4 [default = WHISPER_LEVEL_OPEN];
inline bool MemberStateOptions::_internal_has_whisper_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemberStateOptions::has_whisper_level() const {
  return _internal_has_whisper_level();
}
inline void MemberStateOptions::clear_whisper_level() {
  whisper_level_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::club::v1::WhisperLevel MemberStateOptions::_internal_whisper_level() const {
  return static_cast< ::bgs::protocol::club::v1::WhisperLevel >(whisper_level_);
}
inline ::bgs::protocol::club::v1::WhisperLevel MemberStateOptions::whisper_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateOptions.whisper_level)
  return _internal_whisper_level();
}
inline void MemberStateOptions::_internal_set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value) {
  assert(::bgs::protocol::club::v1::WhisperLevel_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  whisper_level_ = value;
}
inline void MemberStateOptions::set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value) {
  _internal_set_whisper_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateOptions.whisper_level)
}

// optional string note = 5;
inline bool MemberStateOptions::_internal_has_note() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemberStateOptions::has_note() const {
  return _internal_has_note();
}
inline void MemberStateOptions::clear_note() {
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemberStateOptions::note() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateOptions.note)
  return _internal_note();
}
inline void MemberStateOptions::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateOptions.note)
}
inline std::string* MemberStateOptions::mutable_note() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberStateOptions.note)
  return _internal_mutable_note();
}
inline const std::string& MemberStateOptions::_internal_note() const {
  return note_.GetNoArena();
}
inline void MemberStateOptions::_internal_set_note(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MemberStateOptions::set_note(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  note_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.MemberStateOptions.note)
}
inline void MemberStateOptions::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.MemberStateOptions.note)
}
inline void MemberStateOptions::set_note(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.MemberStateOptions.note)
}
inline std::string* MemberStateOptions::_internal_mutable_note() {
  _has_bits_[0] |= 0x00000001u;
  return note_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberStateOptions::release_note() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberStateOptions.note)
  if (!_internal_has_note()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return note_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberStateOptions::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  note_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberStateOptions.note)
}

// -------------------------------------------------------------------

// MemberStateAssignment

// optional .bgs.protocol.club.v1.MemberId member_id = 1;
inline bool MemberStateAssignment::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool MemberStateAssignment::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberStateAssignment::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberStateAssignment::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateAssignment.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberStateAssignment::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberStateAssignment.member_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberStateAssignment::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000002u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberStateAssignment::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberStateAssignment.member_id)
  return _internal_mutable_member_id();
}
inline void MemberStateAssignment::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberStateAssignment.member_id)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int MemberStateAssignment::_internal_attribute_size() const {
  return attribute_.size();
}
inline int MemberStateAssignment::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* MemberStateAssignment::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberStateAssignment.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
MemberStateAssignment::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MemberStateAssignment.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& MemberStateAssignment::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& MemberStateAssignment::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateAssignment.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* MemberStateAssignment::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* MemberStateAssignment::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MemberStateAssignment.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
MemberStateAssignment::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MemberStateAssignment.attribute)
  return attribute_;
}

// optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3 [default = PRESENCE_LEVEL_NONE];
inline bool MemberStateAssignment::_internal_has_presence_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemberStateAssignment::has_presence_level() const {
  return _internal_has_presence_level();
}
inline void MemberStateAssignment::clear_presence_level() {
  presence_level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::bgs::protocol::club::v1::PresenceLevel MemberStateAssignment::_internal_presence_level() const {
  return static_cast< ::bgs::protocol::club::v1::PresenceLevel >(presence_level_);
}
inline ::bgs::protocol::club::v1::PresenceLevel MemberStateAssignment::presence_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateAssignment.presence_level)
  return _internal_presence_level();
}
inline void MemberStateAssignment::_internal_set_presence_level(::bgs::protocol::club::v1::PresenceLevel value) {
  assert(::bgs::protocol::club::v1::PresenceLevel_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  presence_level_ = value;
}
inline void MemberStateAssignment::set_presence_level(::bgs::protocol::club::v1::PresenceLevel value) {
  _internal_set_presence_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateAssignment.presence_level)
}

// optional bool moderator_mute = 4;
inline bool MemberStateAssignment::_internal_has_moderator_mute() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemberStateAssignment::has_moderator_mute() const {
  return _internal_has_moderator_mute();
}
inline void MemberStateAssignment::clear_moderator_mute() {
  moderator_mute_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MemberStateAssignment::_internal_moderator_mute() const {
  return moderator_mute_;
}
inline bool MemberStateAssignment::moderator_mute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateAssignment.moderator_mute)
  return _internal_moderator_mute();
}
inline void MemberStateAssignment::_internal_set_moderator_mute(bool value) {
  _has_bits_[0] |= 0x00000008u;
  moderator_mute_ = value;
}
inline void MemberStateAssignment::set_moderator_mute(bool value) {
  _internal_set_moderator_mute(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateAssignment.moderator_mute)
}

// optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5 [default = WHISPER_LEVEL_OPEN];
inline bool MemberStateAssignment::_internal_has_whisper_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MemberStateAssignment::has_whisper_level() const {
  return _internal_has_whisper_level();
}
inline void MemberStateAssignment::clear_whisper_level() {
  whisper_level_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::bgs::protocol::club::v1::WhisperLevel MemberStateAssignment::_internal_whisper_level() const {
  return static_cast< ::bgs::protocol::club::v1::WhisperLevel >(whisper_level_);
}
inline ::bgs::protocol::club::v1::WhisperLevel MemberStateAssignment::whisper_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateAssignment.whisper_level)
  return _internal_whisper_level();
}
inline void MemberStateAssignment::_internal_set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value) {
  assert(::bgs::protocol::club::v1::WhisperLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  whisper_level_ = value;
}
inline void MemberStateAssignment::set_whisper_level(::bgs::protocol::club::v1::WhisperLevel value) {
  _internal_set_whisper_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateAssignment.whisper_level)
}

// optional string note = 6;
inline bool MemberStateAssignment::_internal_has_note() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemberStateAssignment::has_note() const {
  return _internal_has_note();
}
inline void MemberStateAssignment::clear_note() {
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemberStateAssignment::note() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateAssignment.note)
  return _internal_note();
}
inline void MemberStateAssignment::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateAssignment.note)
}
inline std::string* MemberStateAssignment::mutable_note() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberStateAssignment.note)
  return _internal_mutable_note();
}
inline const std::string& MemberStateAssignment::_internal_note() const {
  return note_.GetNoArena();
}
inline void MemberStateAssignment::_internal_set_note(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MemberStateAssignment::set_note(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  note_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.MemberStateAssignment.note)
}
inline void MemberStateAssignment::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.MemberStateAssignment.note)
}
inline void MemberStateAssignment::set_note(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.MemberStateAssignment.note)
}
inline std::string* MemberStateAssignment::_internal_mutable_note() {
  _has_bits_[0] |= 0x00000001u;
  return note_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberStateAssignment::release_note() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberStateAssignment.note)
  if (!_internal_has_note()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return note_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberStateAssignment::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  note_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberStateAssignment.note)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto
