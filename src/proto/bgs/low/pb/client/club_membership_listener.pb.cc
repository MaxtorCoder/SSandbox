// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_membership_listener.proto

#include "bgs/low/pb/client/club_membership_listener.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeSeriesId_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubSharedSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {
class ClubAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubAddedNotification> _instance;
} _ClubAddedNotification_default_instance_;
class ClubRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubRemovedNotification> _instance;
} _ClubRemovedNotification_default_instance_;
class ReceivedInvitationAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceivedInvitationAddedNotification> _instance;
} _ReceivedInvitationAddedNotification_default_instance_;
class ReceivedInvitationRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceivedInvitationRemovedNotification> _instance;
} _ReceivedInvitationRemovedNotification_default_instance_;
class SharedSettingsChangedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharedSettingsChangedNotification> _instance;
} _SharedSettingsChangedNotification_default_instance_;
class StreamMentionAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMentionAddedNotification> _instance;
} _StreamMentionAddedNotification_default_instance_;
class StreamMentionRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMentionRemovedNotification> _instance;
} _StreamMentionRemovedNotification_default_instance_;
class StreamMentionAdvanceViewTimeNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMentionAdvanceViewTimeNotification> _instance;
} _StreamMentionAdvanceViewTimeNotification_default_instance_;
}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ClubAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_ClubAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::ClubAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::ClubAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClubAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_ClubRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::ClubRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::ClubRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_ReceivedInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_ReceivedInvitationAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReceivedInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReceivedInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_ReceivedInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_ReceivedInvitationRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceivedInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReceivedInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_SharedSettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_SharedSettingsChangedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SharedSettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SharedSettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_ClubSharedSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_StreamMentionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_StreamMentionAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::StreamMentionAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::StreamMentionAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamMentionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamMentionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamMentionAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_StreamMentionAdvanceViewTimeNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamMentionAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamMentionAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_StreamMentionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_StreamMentionRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamMentionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamMentionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_TimeSeriesId_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubAddedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubAddedNotification, membership_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubRemovedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubRemovedNotification, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubRemovedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ClubRemovedNotification, reason_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification, invitation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification, invitation_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification, reason_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification, assignment_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionAddedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionAddedNotification, mention_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification, mention_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification, view_time_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::club::v1::membership::ClubAddedNotification)},
  { 9, 18, sizeof(::bgs::protocol::club::v1::membership::ClubRemovedNotification)},
  { 22, 29, sizeof(::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification)},
  { 31, 39, sizeof(::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification)},
  { 42, 49, sizeof(::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification)},
  { 51, 58, sizeof(::bgs::protocol::club::v1::membership::StreamMentionAddedNotification)},
  { 60, 67, sizeof(::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification)},
  { 69, 76, sizeof(::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_ClubAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_ClubRemovedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_ReceivedInvitationAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_ReceivedInvitationRemovedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_SharedSettingsChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_StreamMentionAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_StreamMentionRemovedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_StreamMentionAdvanceViewTimeNotification_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0bgs/low/pb/client/club_membership_list"
  "ener.proto\022\037bgs.protocol.club.v1.members"
  "hip\032\"bgs/low/pb/client/club_types.proto\""
  "\226\001\n\025ClubAddedNotification\0220\n\010agent_id\030\001 "
  "\001(\0132\036.bgs.protocol.club.v1.MemberId\022C\n\nm"
  "embership\030\003 \001(\0132/.bgs.protocol.club.v1.C"
  "lubMembershipDescription:\006\202\371+\002\030\001\"\352\001\n\027Clu"
  "bRemovedNotification\0220\n\010agent_id\030\001 \001(\0132\036"
  ".bgs.protocol.club.v1.MemberId\0221\n\tmember"
  "_id\030\003 \001(\0132\036.bgs.protocol.club.v1.MemberI"
  "d\022\017\n\007club_id\030\004 \001(\004\022Q\n\006reason\030\005 \001(\0162\'.bgs"
  ".protocol.club.v1.ClubRemovedReason:\030CLU"
  "B_REMOVED_REASON_NONE:\006\202\371+\002\030\001\"\231\001\n#Receiv"
  "edInvitationAddedNotification\0220\n\010agent_i"
  "d\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022"
  "8\n\ninvitation\030\003 \001(\0132$.bgs.protocol.club."
  "v1.ClubInvitation:\006\202\371+\002\030\001\"\323\001\n%ReceivedIn"
  "vitationRemovedNotification\0220\n\010agent_id\030"
  "\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022\025\n"
  "\rinvitation_id\030\003 \001(\006\022Y\n\006reason\030\004 \001(\0162%.b"
  "gs.protocol.InvitationRemovedReason:\"INV"
  "ITATION_REMOVED_REASON_ACCEPTED:\006\202\371+\002\030\001\""
  "\251\001\n!SharedSettingsChangedNotification\0224\n"
  "\010agent_id\030\001 \001(\0132\".bgs.protocol.account.v"
  "1.AccountId\022F\n\nassignment\030\004 \001(\01322.bgs.pr"
  "otocol.club.v1.ClubSharedSettingsAssignm"
  "ent:\006\202\371+\002\030\001\"\220\001\n\036StreamMentionAddedNotifi"
  "cation\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol."
  "club.v1.MemberId\0224\n\007mention\030\003 \001(\0132#.bgs."
  "protocol.club.v1.StreamMention:\006\202\371+\002\030\001\"\220"
  "\001\n StreamMentionRemovedNotification\0224\n\010a"
  "gent_id\030\001 \001(\0132\".bgs.protocol.account.v1."
  "AccountId\022.\n\nmention_id\030\003 \001(\0132\032.bgs.prot"
  "ocol.TimeSeriesId:\006\202\371+\002\030\001\"{\n(StreamMenti"
  "onAdvanceViewTimeNotification\0224\n\010agent_i"
  "d\030\001 \001(\0132\".bgs.protocol.account.v1.Accoun"
  "tId\022\021\n\tview_time\030\003 \001(\004:\006\202\371+\002\030\0012\322\010\n\026ClubM"
  "embershipListener\022h\n\013OnClubAdded\0226.bgs.p"
  "rotocol.club.v1.membership.ClubAddedNoti"
  "fication\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+"
  "\002\010\001\022l\n\rOnClubRemoved\0228.bgs.protocol.club"
  ".v1.membership.ClubRemovedNotification\032\031"
  ".bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\002\022\204\001\n\031On"
  "ReceivedInvitationAdded\022D.bgs.protocol.c"
  "lub.v1.membership.ReceivedInvitationAdde"
  "dNotification\032\031.bgs.protocol.NO_RESPONSE"
  "\"\006\202\371+\002\010\003\022\210\001\n\033OnReceivedInvitationRemoved"
  "\022F.bgs.protocol.club.v1.membership.Recei"
  "vedInvitationRemovedNotification\032\031.bgs.p"
  "rotocol.NO_RESPONSE\"\006\202\371+\002\010\004\022\200\001\n\027OnShared"
  "SettingsChanged\022B.bgs.protocol.club.v1.m"
  "embership.SharedSettingsChangedNotificat"
  "ion\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\005\022z"
  "\n\024OnStreamMentionAdded\022\?.bgs.protocol.cl"
  "ub.v1.membership.StreamMentionAddedNotif"
  "ication\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002"
  "\010\006\022~\n\026OnStreamMentionRemoved\022A.bgs.proto"
  "col.club.v1.membership.StreamMentionRemo"
  "vedNotification\032\031.bgs.protocol.NO_RESPON"
  "SE\"\006\202\371+\002\010\007\022\216\001\n\036OnStreamMentionAdvanceVie"
  "wTime\022I.bgs.protocol.club.v1.membership."
  "StreamMentionAdvanceViewTimeNotification"
  "\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\010\032>\202\371+"
  ".\n,bnet.protocol.club.v1.ClubMembershipL"
  "istener\212\371+\002\010\001\212\371+\002\030\001B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto_deps[1] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto_sccs[8] = {
  &scc_info_ClubAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base,
  &scc_info_ClubRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base,
  &scc_info_ReceivedInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base,
  &scc_info_ReceivedInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base,
  &scc_info_SharedSettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base,
  &scc_info_StreamMentionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base,
  &scc_info_StreamMentionAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base,
  &scc_info_StreamMentionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto, "bgs/low/pb/client/club_membership_listener.proto", 2584,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto, 8, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {

// ===================================================================

void ClubAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_ClubAddedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_ClubAddedNotification_default_instance_._instance.get_mutable()->membership_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipDescription*>(
      ::bgs::protocol::club::v1::ClubMembershipDescription::internal_default_instance());
}
class ClubAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubAddedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const ClubAddedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubMembershipDescription& membership(const ClubAddedNotification* msg);
  static void set_has_membership(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
ClubAddedNotification::_Internal::agent_id(const ClubAddedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubMembershipDescription&
ClubAddedNotification::_Internal::membership(const ClubAddedNotification* msg) {
  return *msg->membership_;
}
void ClubAddedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubAddedNotification::clear_membership() {
  if (membership_ != nullptr) membership_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ClubAddedNotification::ClubAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.ClubAddedNotification)
}
ClubAddedNotification::ClubAddedNotification(const ClubAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_membership()) {
    membership_ = new ::bgs::protocol::club::v1::ClubMembershipDescription(*from.membership_);
  } else {
    membership_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.ClubAddedNotification)
}

void ClubAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&membership_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(membership_));
}

ClubAddedNotification::~ClubAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.ClubAddedNotification)
  SharedDtor();
}

void ClubAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete membership_;
}

void ClubAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubAddedNotification& ClubAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  return *internal_default_instance();
}


void ClubAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.ClubAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(membership_ != nullptr);
      membership_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubMembershipDescription membership = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_membership(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.ClubAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubMembershipDescription membership = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::membership(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.ClubAddedNotification)
  return target;
}

size_t ClubAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.ClubAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubMembershipDescription membership = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *membership_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.ClubAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.ClubAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.ClubAddedNotification)
    MergeFrom(*source);
  }
}

void ClubAddedNotification::MergeFrom(const ClubAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.ClubAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_membership()->::bgs::protocol::club::v1::ClubMembershipDescription::MergeFrom(from._internal_membership());
    }
  }
}

void ClubAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.ClubAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubAddedNotification::CopyFrom(const ClubAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.ClubAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubAddedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_membership()) {
    if (!membership_->IsInitialized()) return false;
  }
  return true;
}

void ClubAddedNotification::InternalSwap(ClubAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(membership_, other->membership_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_ClubRemovedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_ClubRemovedNotification_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class ClubRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const ClubRemovedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MemberId& member_id(const ClubRemovedNotification* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
ClubRemovedNotification::_Internal::agent_id(const ClubRemovedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::MemberId&
ClubRemovedNotification::_Internal::member_id(const ClubRemovedNotification* msg) {
  return *msg->member_id_;
}
void ClubRemovedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubRemovedNotification::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ClubRemovedNotification::ClubRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.ClubRemovedNotification)
}
ClubRemovedNotification::ClubRemovedNotification(const ClubRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.ClubRemovedNotification)
}

void ClubRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(reason_));
}

ClubRemovedNotification::~ClubRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  SharedDtor();
}

void ClubRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete member_id_;
}

void ClubRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubRemovedNotification& ClubRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  return *internal_default_instance();
}


void ClubRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(member_id_ != nullptr);
      member_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberId member_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 5 [default = CLUB_REMOVED_REASON_NONE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::ClubRemovedReason_IsValid(val))) {
            _internal_set_reason(static_cast<::bgs::protocol::club::v1::ClubRemovedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::member_id(this), target, stream);
  }

  // optional uint64 club_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 5 [default = CLUB_REMOVED_REASON_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  return target;
}

size_t ClubRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.MemberId member_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional uint64 club_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 5 [default = CLUB_REMOVED_REASON_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.ClubRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.ClubRemovedNotification)
    MergeFrom(*source);
  }
}

void ClubRemovedNotification::MergeFrom(const ClubRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubRemovedNotification::CopyFrom(const ClubRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.ClubRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubRemovedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void ClubRemovedNotification::InternalSwap(ClubRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(member_id_, other->member_id_);
  swap(club_id_, other->club_id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReceivedInvitationAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_ReceivedInvitationAddedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_ReceivedInvitationAddedNotification_default_instance_._instance.get_mutable()->invitation_ = const_cast< ::bgs::protocol::club::v1::ClubInvitation*>(
      ::bgs::protocol::club::v1::ClubInvitation::internal_default_instance());
}
class ReceivedInvitationAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceivedInvitationAddedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const ReceivedInvitationAddedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubInvitation& invitation(const ReceivedInvitationAddedNotification* msg);
  static void set_has_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
ReceivedInvitationAddedNotification::_Internal::agent_id(const ReceivedInvitationAddedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubInvitation&
ReceivedInvitationAddedNotification::_Internal::invitation(const ReceivedInvitationAddedNotification* msg) {
  return *msg->invitation_;
}
void ReceivedInvitationAddedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ReceivedInvitationAddedNotification::clear_invitation() {
  if (invitation_ != nullptr) invitation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ReceivedInvitationAddedNotification::ReceivedInvitationAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
}
ReceivedInvitationAddedNotification::ReceivedInvitationAddedNotification(const ReceivedInvitationAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_invitation()) {
    invitation_ = new ::bgs::protocol::club::v1::ClubInvitation(*from.invitation_);
  } else {
    invitation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
}

void ReceivedInvitationAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceivedInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitation_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(invitation_));
}

ReceivedInvitationAddedNotification::~ReceivedInvitationAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  SharedDtor();
}

void ReceivedInvitationAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete invitation_;
}

void ReceivedInvitationAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceivedInvitationAddedNotification& ReceivedInvitationAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceivedInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  return *internal_default_instance();
}


void ReceivedInvitationAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(invitation_ != nullptr);
      invitation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReceivedInvitationAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubInvitation invitation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceivedInvitationAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubInvitation invitation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::invitation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  return target;
}

size_t ReceivedInvitationAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubInvitation invitation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *invitation_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedInvitationAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedInvitationAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceivedInvitationAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
    MergeFrom(*source);
  }
}

void ReceivedInvitationAddedNotification::MergeFrom(const ReceivedInvitationAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_invitation()->::bgs::protocol::club::v1::ClubInvitation::MergeFrom(from._internal_invitation());
    }
  }
}

void ReceivedInvitationAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedInvitationAddedNotification::CopyFrom(const ReceivedInvitationAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedInvitationAddedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_invitation()) {
    if (!invitation_->IsInitialized()) return false;
  }
  return true;
}

void ReceivedInvitationAddedNotification::InternalSwap(ReceivedInvitationAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(invitation_, other->invitation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedInvitationAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReceivedInvitationRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_ReceivedInvitationRemovedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class ReceivedInvitationRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceivedInvitationRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const ReceivedInvitationRemovedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
ReceivedInvitationRemovedNotification::_Internal::agent_id(const ReceivedInvitationRemovedNotification* msg) {
  return *msg->agent_id_;
}
void ReceivedInvitationRemovedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ReceivedInvitationRemovedNotification::ReceivedInvitationRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
}
ReceivedInvitationRemovedNotification::ReceivedInvitationRemovedNotification(const ReceivedInvitationRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&invitation_id_, &from.invitation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&invitation_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
}

void ReceivedInvitationRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceivedInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(reason_));
}

ReceivedInvitationRemovedNotification::~ReceivedInvitationRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  SharedDtor();
}

void ReceivedInvitationRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void ReceivedInvitationRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceivedInvitationRemovedNotification& ReceivedInvitationRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceivedInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  return *internal_default_instance();
}


void ReceivedInvitationRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&invitation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&invitation_id_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReceivedInvitationRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invitation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.InvitationRemovedReason reason = 4 [default = INVITATION_REMOVED_REASON_ACCEPTED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::InvitationRemovedReason_IsValid(val))) {
            _internal_set_reason(static_cast<::bgs::protocol::InvitationRemovedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceivedInvitationRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional fixed64 invitation_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_invitation_id(), target);
  }

  // optional .bgs.protocol.InvitationRemovedReason reason = 4 [default = INVITATION_REMOVED_REASON_ACCEPTED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  return target;
}

size_t ReceivedInvitationRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional fixed64 invitation_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .bgs.protocol.InvitationRemovedReason reason = 4 [default = INVITATION_REMOVED_REASON_ACCEPTED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedInvitationRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedInvitationRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceivedInvitationRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
    MergeFrom(*source);
  }
}

void ReceivedInvitationRemovedNotification::MergeFrom(const ReceivedInvitationRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      invitation_id_ = from.invitation_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReceivedInvitationRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedInvitationRemovedNotification::CopyFrom(const ReceivedInvitationRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedInvitationRemovedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void ReceivedInvitationRemovedNotification::InternalSwap(ReceivedInvitationRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(invitation_id_, other->invitation_id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedInvitationRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SharedSettingsChangedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_SharedSettingsChangedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_SharedSettingsChangedNotification_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::bgs::protocol::club::v1::ClubSharedSettingsAssignment*>(
      ::bgs::protocol::club::v1::ClubSharedSettingsAssignment::internal_default_instance());
}
class SharedSettingsChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SharedSettingsChangedNotification>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const SharedSettingsChangedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubSharedSettingsAssignment& assignment(const SharedSettingsChangedNotification* msg);
  static void set_has_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
SharedSettingsChangedNotification::_Internal::agent_id(const SharedSettingsChangedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubSharedSettingsAssignment&
SharedSettingsChangedNotification::_Internal::assignment(const SharedSettingsChangedNotification* msg) {
  return *msg->assignment_;
}
void SharedSettingsChangedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SharedSettingsChangedNotification::clear_assignment() {
  if (assignment_ != nullptr) assignment_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SharedSettingsChangedNotification::SharedSettingsChangedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
}
SharedSettingsChangedNotification::SharedSettingsChangedNotification(const SharedSettingsChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_assignment()) {
    assignment_ = new ::bgs::protocol::club::v1::ClubSharedSettingsAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
}

void SharedSettingsChangedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SharedSettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assignment_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(assignment_));
}

SharedSettingsChangedNotification::~SharedSettingsChangedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  SharedDtor();
}

void SharedSettingsChangedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete assignment_;
}

void SharedSettingsChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharedSettingsChangedNotification& SharedSettingsChangedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharedSettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  return *internal_default_instance();
}


void SharedSettingsChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(assignment_ != nullptr);
      assignment_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SharedSettingsChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSharedSettingsAssignment assignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SharedSettingsChangedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSharedSettingsAssignment assignment = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  return target;
}

size_t SharedSettingsChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubSharedSettingsAssignment assignment = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assignment_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedSettingsChangedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SharedSettingsChangedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SharedSettingsChangedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
    MergeFrom(*source);
  }
}

void SharedSettingsChangedNotification::MergeFrom(const SharedSettingsChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_assignment()->::bgs::protocol::club::v1::ClubSharedSettingsAssignment::MergeFrom(from._internal_assignment());
    }
  }
}

void SharedSettingsChangedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedSettingsChangedNotification::CopyFrom(const SharedSettingsChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedSettingsChangedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SharedSettingsChangedNotification::InternalSwap(SharedSettingsChangedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(assignment_, other->assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SharedSettingsChangedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMentionAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_StreamMentionAddedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_StreamMentionAddedNotification_default_instance_._instance.get_mutable()->mention_ = const_cast< ::bgs::protocol::club::v1::StreamMention*>(
      ::bgs::protocol::club::v1::StreamMention::internal_default_instance());
}
class StreamMentionAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMentionAddedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamMentionAddedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::StreamMention& mention(const StreamMentionAddedNotification* msg);
  static void set_has_mention(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamMentionAddedNotification::_Internal::agent_id(const StreamMentionAddedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::StreamMention&
StreamMentionAddedNotification::_Internal::mention(const StreamMentionAddedNotification* msg) {
  return *msg->mention_;
}
void StreamMentionAddedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamMentionAddedNotification::clear_mention() {
  if (mention_ != nullptr) mention_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StreamMentionAddedNotification::StreamMentionAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
}
StreamMentionAddedNotification::StreamMentionAddedNotification(const StreamMentionAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_mention()) {
    mention_ = new ::bgs::protocol::club::v1::StreamMention(*from.mention_);
  } else {
    mention_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
}

void StreamMentionAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMentionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mention_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(mention_));
}

StreamMentionAddedNotification::~StreamMentionAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  SharedDtor();
}

void StreamMentionAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete mention_;
}

void StreamMentionAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMentionAddedNotification& StreamMentionAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMentionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  return *internal_default_instance();
}


void StreamMentionAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mention_ != nullptr);
      mention_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamMentionAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamMention mention = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mention(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMentionAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.StreamMention mention = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mention(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  return target;
}

size_t StreamMentionAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.StreamMention mention = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mention_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMentionAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMentionAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMentionAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
    MergeFrom(*source);
  }
}

void StreamMentionAddedNotification::MergeFrom(const StreamMentionAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mention()->::bgs::protocol::club::v1::StreamMention::MergeFrom(from._internal_mention());
    }
  }
}

void StreamMentionAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMentionAddedNotification::CopyFrom(const StreamMentionAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMentionAddedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_mention()) {
    if (!mention_->IsInitialized()) return false;
  }
  return true;
}

void StreamMentionAddedNotification::InternalSwap(StreamMentionAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(mention_, other->mention_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMentionAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMentionRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_StreamMentionRemovedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_StreamMentionRemovedNotification_default_instance_._instance.get_mutable()->mention_id_ = const_cast< ::bgs::protocol::TimeSeriesId*>(
      ::bgs::protocol::TimeSeriesId::internal_default_instance());
}
class StreamMentionRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMentionRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const StreamMentionRemovedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::TimeSeriesId& mention_id(const StreamMentionRemovedNotification* msg);
  static void set_has_mention_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
StreamMentionRemovedNotification::_Internal::agent_id(const StreamMentionRemovedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::TimeSeriesId&
StreamMentionRemovedNotification::_Internal::mention_id(const StreamMentionRemovedNotification* msg) {
  return *msg->mention_id_;
}
void StreamMentionRemovedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamMentionRemovedNotification::clear_mention_id() {
  if (mention_id_ != nullptr) mention_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StreamMentionRemovedNotification::StreamMentionRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
}
StreamMentionRemovedNotification::StreamMentionRemovedNotification(const StreamMentionRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_mention_id()) {
    mention_id_ = new ::bgs::protocol::TimeSeriesId(*from.mention_id_);
  } else {
    mention_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
}

void StreamMentionRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMentionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mention_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(mention_id_));
}

StreamMentionRemovedNotification::~StreamMentionRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  SharedDtor();
}

void StreamMentionRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete mention_id_;
}

void StreamMentionRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMentionRemovedNotification& StreamMentionRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMentionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  return *internal_default_instance();
}


void StreamMentionRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mention_id_ != nullptr);
      mention_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamMentionRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.TimeSeriesId mention_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mention_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMentionRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.TimeSeriesId mention_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mention_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  return target;
}

size_t StreamMentionRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.TimeSeriesId mention_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mention_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMentionRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMentionRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMentionRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
    MergeFrom(*source);
  }
}

void StreamMentionRemovedNotification::MergeFrom(const StreamMentionRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mention_id()->::bgs::protocol::TimeSeriesId::MergeFrom(from._internal_mention_id());
    }
  }
}

void StreamMentionRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMentionRemovedNotification::CopyFrom(const StreamMentionRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMentionRemovedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamMentionRemovedNotification::InternalSwap(StreamMentionRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(mention_id_, other->mention_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMentionRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMentionAdvanceViewTimeNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_StreamMentionAdvanceViewTimeNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
}
class StreamMentionAdvanceViewTimeNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMentionAdvanceViewTimeNotification>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const StreamMentionAdvanceViewTimeNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
StreamMentionAdvanceViewTimeNotification::_Internal::agent_id(const StreamMentionAdvanceViewTimeNotification* msg) {
  return *msg->agent_id_;
}
void StreamMentionAdvanceViewTimeNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StreamMentionAdvanceViewTimeNotification::StreamMentionAdvanceViewTimeNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
}
StreamMentionAdvanceViewTimeNotification::StreamMentionAdvanceViewTimeNotification(const StreamMentionAdvanceViewTimeNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  view_time_ = from.view_time_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
}

void StreamMentionAdvanceViewTimeNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMentionAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_time_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(view_time_));
}

StreamMentionAdvanceViewTimeNotification::~StreamMentionAdvanceViewTimeNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  SharedDtor();
}

void StreamMentionAdvanceViewTimeNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void StreamMentionAdvanceViewTimeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMentionAdvanceViewTimeNotification& StreamMentionAdvanceViewTimeNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMentionAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.base);
  return *internal_default_instance();
}


void StreamMentionAdvanceViewTimeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  view_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamMentionAdvanceViewTimeNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 view_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_view_time(&has_bits);
          view_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMentionAdvanceViewTimeNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 view_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_view_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  return target;
}

size_t StreamMentionAdvanceViewTimeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 view_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_view_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMentionAdvanceViewTimeNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMentionAdvanceViewTimeNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMentionAdvanceViewTimeNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
    MergeFrom(*source);
  }
}

void StreamMentionAdvanceViewTimeNotification::MergeFrom(const StreamMentionAdvanceViewTimeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      view_time_ = from.view_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamMentionAdvanceViewTimeNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMentionAdvanceViewTimeNotification::CopyFrom(const StreamMentionAdvanceViewTimeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMentionAdvanceViewTimeNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamMentionAdvanceViewTimeNotification::InternalSwap(StreamMentionAdvanceViewTimeNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(view_time_, other->view_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMentionAdvanceViewTimeNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::ClubAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::ClubAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::ClubAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::ClubRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::ClubRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::ClubRemovedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::StreamMentionAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::StreamMentionAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::StreamMentionAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
