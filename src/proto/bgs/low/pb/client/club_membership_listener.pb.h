// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_membership_listener.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {
class ClubAddedNotification;
class ClubAddedNotificationDefaultTypeInternal;
extern ClubAddedNotificationDefaultTypeInternal _ClubAddedNotification_default_instance_;
class ClubRemovedNotification;
class ClubRemovedNotificationDefaultTypeInternal;
extern ClubRemovedNotificationDefaultTypeInternal _ClubRemovedNotification_default_instance_;
class ReceivedInvitationAddedNotification;
class ReceivedInvitationAddedNotificationDefaultTypeInternal;
extern ReceivedInvitationAddedNotificationDefaultTypeInternal _ReceivedInvitationAddedNotification_default_instance_;
class ReceivedInvitationRemovedNotification;
class ReceivedInvitationRemovedNotificationDefaultTypeInternal;
extern ReceivedInvitationRemovedNotificationDefaultTypeInternal _ReceivedInvitationRemovedNotification_default_instance_;
class SharedSettingsChangedNotification;
class SharedSettingsChangedNotificationDefaultTypeInternal;
extern SharedSettingsChangedNotificationDefaultTypeInternal _SharedSettingsChangedNotification_default_instance_;
class StreamMentionAddedNotification;
class StreamMentionAddedNotificationDefaultTypeInternal;
extern StreamMentionAddedNotificationDefaultTypeInternal _StreamMentionAddedNotification_default_instance_;
class StreamMentionAdvanceViewTimeNotification;
class StreamMentionAdvanceViewTimeNotificationDefaultTypeInternal;
extern StreamMentionAdvanceViewTimeNotificationDefaultTypeInternal _StreamMentionAdvanceViewTimeNotification_default_instance_;
class StreamMentionRemovedNotification;
class StreamMentionRemovedNotificationDefaultTypeInternal;
extern StreamMentionRemovedNotificationDefaultTypeInternal _StreamMentionRemovedNotification_default_instance_;
}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::membership::ClubAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::ClubAddedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::membership::ClubRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::ClubRemovedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::ReceivedInvitationAddedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::ReceivedInvitationRemovedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::SharedSettingsChangedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::membership::StreamMentionAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::StreamMentionAddedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::StreamMentionAdvanceViewTimeNotification>(Arena*);
template<> ::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::StreamMentionRemovedNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {

// ===================================================================

class ClubAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.ClubAddedNotification) */ {
 public:
  ClubAddedNotification();
  virtual ~ClubAddedNotification();

  ClubAddedNotification(const ClubAddedNotification& from);
  ClubAddedNotification(ClubAddedNotification&& from) noexcept
    : ClubAddedNotification() {
    *this = ::std::move(from);
  }

  inline ClubAddedNotification& operator=(const ClubAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubAddedNotification& operator=(ClubAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubAddedNotification* internal_default_instance() {
    return reinterpret_cast<const ClubAddedNotification*>(
               &_ClubAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClubAddedNotification& a, ClubAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubAddedNotification* New() const final {
    return CreateMaybeMessage<ClubAddedNotification>(nullptr);
  }

  ClubAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubAddedNotification& from);
  void MergeFrom(const ClubAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.ClubAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMembershipFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubMembershipDescription membership = 3;
  bool has_membership() const;
  private:
  bool _internal_has_membership() const;
  public:
  void clear_membership();
  const ::bgs::protocol::club::v1::ClubMembershipDescription& membership() const;
  ::bgs::protocol::club::v1::ClubMembershipDescription* release_membership();
  ::bgs::protocol::club::v1::ClubMembershipDescription* mutable_membership();
  void set_allocated_membership(::bgs::protocol::club::v1::ClubMembershipDescription* membership);
  private:
  const ::bgs::protocol::club::v1::ClubMembershipDescription& _internal_membership() const;
  ::bgs::protocol::club::v1::ClubMembershipDescription* _internal_mutable_membership();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.ClubAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubMembershipDescription* membership_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
};
// -------------------------------------------------------------------

class ClubRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.ClubRemovedNotification) */ {
 public:
  ClubRemovedNotification();
  virtual ~ClubRemovedNotification();

  ClubRemovedNotification(const ClubRemovedNotification& from);
  ClubRemovedNotification(ClubRemovedNotification&& from) noexcept
    : ClubRemovedNotification() {
    *this = ::std::move(from);
  }

  inline ClubRemovedNotification& operator=(const ClubRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubRemovedNotification& operator=(ClubRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const ClubRemovedNotification*>(
               &_ClubRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClubRemovedNotification& a, ClubRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubRemovedNotification* New() const final {
    return CreateMaybeMessage<ClubRemovedNotification>(nullptr);
  }

  ClubRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubRemovedNotification& from);
  void MergeFrom(const ClubRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.ClubRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMemberIdFieldNumber = 3,
    kClubIdFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId member_id = 3;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional uint64 club_id = 4;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 5 [default = CLUB_REMOVED_REASON_NONE];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::bgs::protocol::club::v1::ClubRemovedReason reason() const;
  void set_reason(::bgs::protocol::club::v1::ClubRemovedReason value);
  private:
  ::bgs::protocol::club::v1::ClubRemovedReason _internal_reason() const;
  void _internal_set_reason(::bgs::protocol::club::v1::ClubRemovedReason value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.ClubRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  int reason_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
};
// -------------------------------------------------------------------

class ReceivedInvitationAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification) */ {
 public:
  ReceivedInvitationAddedNotification();
  virtual ~ReceivedInvitationAddedNotification();

  ReceivedInvitationAddedNotification(const ReceivedInvitationAddedNotification& from);
  ReceivedInvitationAddedNotification(ReceivedInvitationAddedNotification&& from) noexcept
    : ReceivedInvitationAddedNotification() {
    *this = ::std::move(from);
  }

  inline ReceivedInvitationAddedNotification& operator=(const ReceivedInvitationAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceivedInvitationAddedNotification& operator=(ReceivedInvitationAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceivedInvitationAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivedInvitationAddedNotification* internal_default_instance() {
    return reinterpret_cast<const ReceivedInvitationAddedNotification*>(
               &_ReceivedInvitationAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReceivedInvitationAddedNotification& a, ReceivedInvitationAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceivedInvitationAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceivedInvitationAddedNotification* New() const final {
    return CreateMaybeMessage<ReceivedInvitationAddedNotification>(nullptr);
  }

  ReceivedInvitationAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedInvitationAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceivedInvitationAddedNotification& from);
  void MergeFrom(const ReceivedInvitationAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedInvitationAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kInvitationFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubInvitation invitation = 3;
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::bgs::protocol::club::v1::ClubInvitation& invitation() const;
  ::bgs::protocol::club::v1::ClubInvitation* release_invitation();
  ::bgs::protocol::club::v1::ClubInvitation* mutable_invitation();
  void set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitation* invitation);
  private:
  const ::bgs::protocol::club::v1::ClubInvitation& _internal_invitation() const;
  ::bgs::protocol::club::v1::ClubInvitation* _internal_mutable_invitation();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubInvitation* invitation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
};
// -------------------------------------------------------------------

class ReceivedInvitationRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification) */ {
 public:
  ReceivedInvitationRemovedNotification();
  virtual ~ReceivedInvitationRemovedNotification();

  ReceivedInvitationRemovedNotification(const ReceivedInvitationRemovedNotification& from);
  ReceivedInvitationRemovedNotification(ReceivedInvitationRemovedNotification&& from) noexcept
    : ReceivedInvitationRemovedNotification() {
    *this = ::std::move(from);
  }

  inline ReceivedInvitationRemovedNotification& operator=(const ReceivedInvitationRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceivedInvitationRemovedNotification& operator=(ReceivedInvitationRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceivedInvitationRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivedInvitationRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const ReceivedInvitationRemovedNotification*>(
               &_ReceivedInvitationRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReceivedInvitationRemovedNotification& a, ReceivedInvitationRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceivedInvitationRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceivedInvitationRemovedNotification* New() const final {
    return CreateMaybeMessage<ReceivedInvitationRemovedNotification>(nullptr);
  }

  ReceivedInvitationRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedInvitationRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceivedInvitationRemovedNotification& from);
  void MergeFrom(const ReceivedInvitationRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedInvitationRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kInvitationIdFieldNumber = 3,
    kReasonFieldNumber = 4,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional fixed64 invitation_id = 3;
  bool has_invitation_id() const;
  private:
  bool _internal_has_invitation_id() const;
  public:
  void clear_invitation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id() const;
  void set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invitation_id() const;
  void _internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.InvitationRemovedReason reason = 4 [default = INVITATION_REMOVED_REASON_ACCEPTED];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::bgs::protocol::InvitationRemovedReason reason() const;
  void set_reason(::bgs::protocol::InvitationRemovedReason value);
  private:
  ::bgs::protocol::InvitationRemovedReason _internal_reason() const;
  void _internal_set_reason(::bgs::protocol::InvitationRemovedReason value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id_;
  int reason_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
};
// -------------------------------------------------------------------

class SharedSettingsChangedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification) */ {
 public:
  SharedSettingsChangedNotification();
  virtual ~SharedSettingsChangedNotification();

  SharedSettingsChangedNotification(const SharedSettingsChangedNotification& from);
  SharedSettingsChangedNotification(SharedSettingsChangedNotification&& from) noexcept
    : SharedSettingsChangedNotification() {
    *this = ::std::move(from);
  }

  inline SharedSettingsChangedNotification& operator=(const SharedSettingsChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedSettingsChangedNotification& operator=(SharedSettingsChangedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SharedSettingsChangedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SharedSettingsChangedNotification* internal_default_instance() {
    return reinterpret_cast<const SharedSettingsChangedNotification*>(
               &_SharedSettingsChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SharedSettingsChangedNotification& a, SharedSettingsChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SharedSettingsChangedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SharedSettingsChangedNotification* New() const final {
    return CreateMaybeMessage<SharedSettingsChangedNotification>(nullptr);
  }

  SharedSettingsChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SharedSettingsChangedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SharedSettingsChangedNotification& from);
  void MergeFrom(const SharedSettingsChangedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SharedSettingsChangedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.SharedSettingsChangedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kAssignmentFieldNumber = 4,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubSharedSettingsAssignment assignment = 4;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::bgs::protocol::club::v1::ClubSharedSettingsAssignment& assignment() const;
  ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* release_assignment();
  ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* mutable_assignment();
  void set_allocated_assignment(::bgs::protocol::club::v1::ClubSharedSettingsAssignment* assignment);
  private:
  const ::bgs::protocol::club::v1::ClubSharedSettingsAssignment& _internal_assignment() const;
  ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* _internal_mutable_assignment();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* assignment_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
};
// -------------------------------------------------------------------

class StreamMentionAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.StreamMentionAddedNotification) */ {
 public:
  StreamMentionAddedNotification();
  virtual ~StreamMentionAddedNotification();

  StreamMentionAddedNotification(const StreamMentionAddedNotification& from);
  StreamMentionAddedNotification(StreamMentionAddedNotification&& from) noexcept
    : StreamMentionAddedNotification() {
    *this = ::std::move(from);
  }

  inline StreamMentionAddedNotification& operator=(const StreamMentionAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMentionAddedNotification& operator=(StreamMentionAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMentionAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMentionAddedNotification* internal_default_instance() {
    return reinterpret_cast<const StreamMentionAddedNotification*>(
               &_StreamMentionAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamMentionAddedNotification& a, StreamMentionAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMentionAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMentionAddedNotification* New() const final {
    return CreateMaybeMessage<StreamMentionAddedNotification>(nullptr);
  }

  StreamMentionAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMentionAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMentionAddedNotification& from);
  void MergeFrom(const StreamMentionAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMentionAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.StreamMentionAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMentionFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.StreamMention mention = 3;
  bool has_mention() const;
  private:
  bool _internal_has_mention() const;
  public:
  void clear_mention();
  const ::bgs::protocol::club::v1::StreamMention& mention() const;
  ::bgs::protocol::club::v1::StreamMention* release_mention();
  ::bgs::protocol::club::v1::StreamMention* mutable_mention();
  void set_allocated_mention(::bgs::protocol::club::v1::StreamMention* mention);
  private:
  const ::bgs::protocol::club::v1::StreamMention& _internal_mention() const;
  ::bgs::protocol::club::v1::StreamMention* _internal_mutable_mention();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.StreamMentionAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::StreamMention* mention_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
};
// -------------------------------------------------------------------

class StreamMentionRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification) */ {
 public:
  StreamMentionRemovedNotification();
  virtual ~StreamMentionRemovedNotification();

  StreamMentionRemovedNotification(const StreamMentionRemovedNotification& from);
  StreamMentionRemovedNotification(StreamMentionRemovedNotification&& from) noexcept
    : StreamMentionRemovedNotification() {
    *this = ::std::move(from);
  }

  inline StreamMentionRemovedNotification& operator=(const StreamMentionRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMentionRemovedNotification& operator=(StreamMentionRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMentionRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMentionRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const StreamMentionRemovedNotification*>(
               &_StreamMentionRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StreamMentionRemovedNotification& a, StreamMentionRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMentionRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMentionRemovedNotification* New() const final {
    return CreateMaybeMessage<StreamMentionRemovedNotification>(nullptr);
  }

  StreamMentionRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMentionRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMentionRemovedNotification& from);
  void MergeFrom(const StreamMentionRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMentionRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.StreamMentionRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMentionIdFieldNumber = 3,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.TimeSeriesId mention_id = 3;
  bool has_mention_id() const;
  private:
  bool _internal_has_mention_id() const;
  public:
  void clear_mention_id();
  const ::bgs::protocol::TimeSeriesId& mention_id() const;
  ::bgs::protocol::TimeSeriesId* release_mention_id();
  ::bgs::protocol::TimeSeriesId* mutable_mention_id();
  void set_allocated_mention_id(::bgs::protocol::TimeSeriesId* mention_id);
  private:
  const ::bgs::protocol::TimeSeriesId& _internal_mention_id() const;
  ::bgs::protocol::TimeSeriesId* _internal_mutable_mention_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  ::bgs::protocol::TimeSeriesId* mention_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
};
// -------------------------------------------------------------------

class StreamMentionAdvanceViewTimeNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification) */ {
 public:
  StreamMentionAdvanceViewTimeNotification();
  virtual ~StreamMentionAdvanceViewTimeNotification();

  StreamMentionAdvanceViewTimeNotification(const StreamMentionAdvanceViewTimeNotification& from);
  StreamMentionAdvanceViewTimeNotification(StreamMentionAdvanceViewTimeNotification&& from) noexcept
    : StreamMentionAdvanceViewTimeNotification() {
    *this = ::std::move(from);
  }

  inline StreamMentionAdvanceViewTimeNotification& operator=(const StreamMentionAdvanceViewTimeNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMentionAdvanceViewTimeNotification& operator=(StreamMentionAdvanceViewTimeNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMentionAdvanceViewTimeNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMentionAdvanceViewTimeNotification* internal_default_instance() {
    return reinterpret_cast<const StreamMentionAdvanceViewTimeNotification*>(
               &_StreamMentionAdvanceViewTimeNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamMentionAdvanceViewTimeNotification& a, StreamMentionAdvanceViewTimeNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMentionAdvanceViewTimeNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMentionAdvanceViewTimeNotification* New() const final {
    return CreateMaybeMessage<StreamMentionAdvanceViewTimeNotification>(nullptr);
  }

  StreamMentionAdvanceViewTimeNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMentionAdvanceViewTimeNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMentionAdvanceViewTimeNotification& from);
  void MergeFrom(const StreamMentionAdvanceViewTimeNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMentionAdvanceViewTimeNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kViewTimeFieldNumber = 3,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // optional uint64 view_time = 3;
  bool has_view_time() const;
  private:
  bool _internal_has_view_time() const;
  public:
  void clear_view_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 view_time() const;
  void set_view_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view_time() const;
  void _internal_set_view_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClubAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool ClubAddedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool ClubAddedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& ClubAddedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& ClubAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ClubAddedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* ClubAddedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.ClubAddedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* ClubAddedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* ClubAddedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.ClubAddedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void ClubAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.ClubAddedNotification.agent_id)
}

// optional .bgs.protocol.club.v1.ClubMembershipDescription membership = 3;
inline bool ClubAddedNotification::_internal_has_membership() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || membership_ != nullptr);
  return value;
}
inline bool ClubAddedNotification::has_membership() const {
  return _internal_has_membership();
}
inline const ::bgs::protocol::club::v1::ClubMembershipDescription& ClubAddedNotification::_internal_membership() const {
  const ::bgs::protocol::club::v1::ClubMembershipDescription* p = membership_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubMembershipDescription*>(
      &::bgs::protocol::club::v1::_ClubMembershipDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubMembershipDescription& ClubAddedNotification::membership() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ClubAddedNotification.membership)
  return _internal_membership();
}
inline ::bgs::protocol::club::v1::ClubMembershipDescription* ClubAddedNotification::release_membership() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.ClubAddedNotification.membership)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubMembershipDescription* temp = membership_;
  membership_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubMembershipDescription* ClubAddedNotification::_internal_mutable_membership() {
  _has_bits_[0] |= 0x00000002u;
  if (membership_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipDescription>(GetArenaNoVirtual());
    membership_ = p;
  }
  return membership_;
}
inline ::bgs::protocol::club::v1::ClubMembershipDescription* ClubAddedNotification::mutable_membership() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.ClubAddedNotification.membership)
  return _internal_mutable_membership();
}
inline void ClubAddedNotification::set_allocated_membership(::bgs::protocol::club::v1::ClubMembershipDescription* membership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(membership_);
  }
  if (membership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      membership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, membership, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  membership_ = membership;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.ClubAddedNotification.membership)
}

// -------------------------------------------------------------------

// ClubRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool ClubRemovedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool ClubRemovedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& ClubRemovedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& ClubRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ClubRemovedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* ClubRemovedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.ClubRemovedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* ClubRemovedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* ClubRemovedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.ClubRemovedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void ClubRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.ClubRemovedNotification.agent_id)
}

// optional .bgs.protocol.club.v1.MemberId member_id = 3;
inline bool ClubRemovedNotification::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool ClubRemovedNotification::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& ClubRemovedNotification::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& ClubRemovedNotification::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ClubRemovedNotification.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* ClubRemovedNotification::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.ClubRemovedNotification.member_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* ClubRemovedNotification::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000002u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* ClubRemovedNotification::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.ClubRemovedNotification.member_id)
  return _internal_mutable_member_id();
}
inline void ClubRemovedNotification::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.ClubRemovedNotification.member_id)
}

// optional uint64 club_id = 4;
inline bool ClubRemovedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClubRemovedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void ClubRemovedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubRemovedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ClubRemovedNotification.club_id)
  return _internal_club_id();
}
inline void ClubRemovedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void ClubRemovedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.membership.ClubRemovedNotification.club_id)
}

// optional .bgs.protocol.club.v1.ClubRemovedReason reason = 5 [default = CLUB_REMOVED_REASON_NONE];
inline bool ClubRemovedNotification::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClubRemovedNotification::has_reason() const {
  return _internal_has_reason();
}
inline void ClubRemovedNotification::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::club::v1::ClubRemovedReason ClubRemovedNotification::_internal_reason() const {
  return static_cast< ::bgs::protocol::club::v1::ClubRemovedReason >(reason_);
}
inline ::bgs::protocol::club::v1::ClubRemovedReason ClubRemovedNotification::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ClubRemovedNotification.reason)
  return _internal_reason();
}
inline void ClubRemovedNotification::_internal_set_reason(::bgs::protocol::club::v1::ClubRemovedReason value) {
  assert(::bgs::protocol::club::v1::ClubRemovedReason_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reason_ = value;
}
inline void ClubRemovedNotification::set_reason(::bgs::protocol::club::v1::ClubRemovedReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.membership.ClubRemovedNotification.reason)
}

// -------------------------------------------------------------------

// ReceivedInvitationAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool ReceivedInvitationAddedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool ReceivedInvitationAddedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& ReceivedInvitationAddedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& ReceivedInvitationAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* ReceivedInvitationAddedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* ReceivedInvitationAddedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* ReceivedInvitationAddedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void ReceivedInvitationAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification.agent_id)
}

// optional .bgs.protocol.club.v1.ClubInvitation invitation = 3;
inline bool ReceivedInvitationAddedNotification::_internal_has_invitation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || invitation_ != nullptr);
  return value;
}
inline bool ReceivedInvitationAddedNotification::has_invitation() const {
  return _internal_has_invitation();
}
inline const ::bgs::protocol::club::v1::ClubInvitation& ReceivedInvitationAddedNotification::_internal_invitation() const {
  const ::bgs::protocol::club::v1::ClubInvitation* p = invitation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubInvitation*>(
      &::bgs::protocol::club::v1::_ClubInvitation_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubInvitation& ReceivedInvitationAddedNotification::invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification.invitation)
  return _internal_invitation();
}
inline ::bgs::protocol::club::v1::ClubInvitation* ReceivedInvitationAddedNotification::release_invitation() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification.invitation)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubInvitation* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubInvitation* ReceivedInvitationAddedNotification::_internal_mutable_invitation() {
  _has_bits_[0] |= 0x00000002u;
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubInvitation>(GetArenaNoVirtual());
    invitation_ = p;
  }
  return invitation_;
}
inline ::bgs::protocol::club::v1::ClubInvitation* ReceivedInvitationAddedNotification::mutable_invitation() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification.invitation)
  return _internal_mutable_invitation();
}
inline void ReceivedInvitationAddedNotification::set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitation* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.ReceivedInvitationAddedNotification.invitation)
}

// -------------------------------------------------------------------

// ReceivedInvitationRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool ReceivedInvitationRemovedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool ReceivedInvitationRemovedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& ReceivedInvitationRemovedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& ReceivedInvitationRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* ReceivedInvitationRemovedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* ReceivedInvitationRemovedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* ReceivedInvitationRemovedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void ReceivedInvitationRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification.agent_id)
}

// optional fixed64 invitation_id = 3;
inline bool ReceivedInvitationRemovedNotification::_internal_has_invitation_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReceivedInvitationRemovedNotification::has_invitation_id() const {
  return _internal_has_invitation_id();
}
inline void ReceivedInvitationRemovedNotification::clear_invitation_id() {
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReceivedInvitationRemovedNotification::_internal_invitation_id() const {
  return invitation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReceivedInvitationRemovedNotification::invitation_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification.invitation_id)
  return _internal_invitation_id();
}
inline void ReceivedInvitationRemovedNotification::_internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  invitation_id_ = value;
}
inline void ReceivedInvitationRemovedNotification::set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invitation_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification.invitation_id)
}

// optional .bgs.protocol.InvitationRemovedReason reason = 4 [default = INVITATION_REMOVED_REASON_ACCEPTED];
inline bool ReceivedInvitationRemovedNotification::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReceivedInvitationRemovedNotification::has_reason() const {
  return _internal_has_reason();
}
inline void ReceivedInvitationRemovedNotification::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::bgs::protocol::InvitationRemovedReason ReceivedInvitationRemovedNotification::_internal_reason() const {
  return static_cast< ::bgs::protocol::InvitationRemovedReason >(reason_);
}
inline ::bgs::protocol::InvitationRemovedReason ReceivedInvitationRemovedNotification::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification.reason)
  return _internal_reason();
}
inline void ReceivedInvitationRemovedNotification::_internal_set_reason(::bgs::protocol::InvitationRemovedReason value) {
  assert(::bgs::protocol::InvitationRemovedReason_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  reason_ = value;
}
inline void ReceivedInvitationRemovedNotification::set_reason(::bgs::protocol::InvitationRemovedReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.membership.ReceivedInvitationRemovedNotification.reason)
}

// -------------------------------------------------------------------

// SharedSettingsChangedNotification

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool SharedSettingsChangedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SharedSettingsChangedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& SharedSettingsChangedNotification::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& SharedSettingsChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* SharedSettingsChangedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* SharedSettingsChangedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* SharedSettingsChangedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void SharedSettingsChangedNotification::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification.agent_id)
}

// optional .bgs.protocol.club.v1.ClubSharedSettingsAssignment assignment = 4;
inline bool SharedSettingsChangedNotification::_internal_has_assignment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || assignment_ != nullptr);
  return value;
}
inline bool SharedSettingsChangedNotification::has_assignment() const {
  return _internal_has_assignment();
}
inline const ::bgs::protocol::club::v1::ClubSharedSettingsAssignment& SharedSettingsChangedNotification::_internal_assignment() const {
  const ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSharedSettingsAssignment*>(
      &::bgs::protocol::club::v1::_ClubSharedSettingsAssignment_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSharedSettingsAssignment& SharedSettingsChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification.assignment)
  return _internal_assignment();
}
inline ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* SharedSettingsChangedNotification::release_assignment() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification.assignment)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* SharedSettingsChangedNotification::_internal_mutable_assignment() {
  _has_bits_[0] |= 0x00000002u;
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSharedSettingsAssignment>(GetArenaNoVirtual());
    assignment_ = p;
  }
  return assignment_;
}
inline ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* SharedSettingsChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification.assignment)
  return _internal_mutable_assignment();
}
inline void SharedSettingsChangedNotification::set_allocated_assignment(::bgs::protocol::club::v1::ClubSharedSettingsAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(assignment_);
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.SharedSettingsChangedNotification.assignment)
}

// -------------------------------------------------------------------

// StreamMentionAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamMentionAddedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamMentionAddedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMentionAddedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMentionAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.StreamMentionAddedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamMentionAddedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.StreamMentionAddedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMentionAddedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMentionAddedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.StreamMentionAddedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamMentionAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.StreamMentionAddedNotification.agent_id)
}

// optional .bgs.protocol.club.v1.StreamMention mention = 3;
inline bool StreamMentionAddedNotification::_internal_has_mention() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mention_ != nullptr);
  return value;
}
inline bool StreamMentionAddedNotification::has_mention() const {
  return _internal_has_mention();
}
inline const ::bgs::protocol::club::v1::StreamMention& StreamMentionAddedNotification::_internal_mention() const {
  const ::bgs::protocol::club::v1::StreamMention* p = mention_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamMention*>(
      &::bgs::protocol::club::v1::_StreamMention_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamMention& StreamMentionAddedNotification::mention() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.StreamMentionAddedNotification.mention)
  return _internal_mention();
}
inline ::bgs::protocol::club::v1::StreamMention* StreamMentionAddedNotification::release_mention() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.StreamMentionAddedNotification.mention)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::StreamMention* temp = mention_;
  mention_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamMention* StreamMentionAddedNotification::_internal_mutable_mention() {
  _has_bits_[0] |= 0x00000002u;
  if (mention_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamMention>(GetArenaNoVirtual());
    mention_ = p;
  }
  return mention_;
}
inline ::bgs::protocol::club::v1::StreamMention* StreamMentionAddedNotification::mutable_mention() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.StreamMentionAddedNotification.mention)
  return _internal_mutable_mention();
}
inline void StreamMentionAddedNotification::set_allocated_mention(::bgs::protocol::club::v1::StreamMention* mention) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mention_);
  }
  if (mention) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mention = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mention, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mention_ = mention;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.StreamMentionAddedNotification.mention)
}

// -------------------------------------------------------------------

// StreamMentionRemovedNotification

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool StreamMentionRemovedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamMentionRemovedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& StreamMentionRemovedNotification::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& StreamMentionRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* StreamMentionRemovedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* StreamMentionRemovedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* StreamMentionRemovedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamMentionRemovedNotification::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification.agent_id)
}

// optional .bgs.protocol.TimeSeriesId mention_id = 3;
inline bool StreamMentionRemovedNotification::_internal_has_mention_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mention_id_ != nullptr);
  return value;
}
inline bool StreamMentionRemovedNotification::has_mention_id() const {
  return _internal_has_mention_id();
}
inline const ::bgs::protocol::TimeSeriesId& StreamMentionRemovedNotification::_internal_mention_id() const {
  const ::bgs::protocol::TimeSeriesId* p = mention_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::TimeSeriesId*>(
      &::bgs::protocol::_TimeSeriesId_default_instance_);
}
inline const ::bgs::protocol::TimeSeriesId& StreamMentionRemovedNotification::mention_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification.mention_id)
  return _internal_mention_id();
}
inline ::bgs::protocol::TimeSeriesId* StreamMentionRemovedNotification::release_mention_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification.mention_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::TimeSeriesId* temp = mention_id_;
  mention_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::TimeSeriesId* StreamMentionRemovedNotification::_internal_mutable_mention_id() {
  _has_bits_[0] |= 0x00000002u;
  if (mention_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::TimeSeriesId>(GetArenaNoVirtual());
    mention_id_ = p;
  }
  return mention_id_;
}
inline ::bgs::protocol::TimeSeriesId* StreamMentionRemovedNotification::mutable_mention_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification.mention_id)
  return _internal_mutable_mention_id();
}
inline void StreamMentionRemovedNotification::set_allocated_mention_id(::bgs::protocol::TimeSeriesId* mention_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mention_id_);
  }
  if (mention_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mention_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mention_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mention_id_ = mention_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.StreamMentionRemovedNotification.mention_id)
}

// -------------------------------------------------------------------

// StreamMentionAdvanceViewTimeNotification

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool StreamMentionAdvanceViewTimeNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamMentionAdvanceViewTimeNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& StreamMentionAdvanceViewTimeNotification::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& StreamMentionAdvanceViewTimeNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* StreamMentionAdvanceViewTimeNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* StreamMentionAdvanceViewTimeNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* StreamMentionAdvanceViewTimeNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamMentionAdvanceViewTimeNotification::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification.agent_id)
}

// optional uint64 view_time = 3;
inline bool StreamMentionAdvanceViewTimeNotification::_internal_has_view_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamMentionAdvanceViewTimeNotification::has_view_time() const {
  return _internal_has_view_time();
}
inline void StreamMentionAdvanceViewTimeNotification::clear_view_time() {
  view_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMentionAdvanceViewTimeNotification::_internal_view_time() const {
  return view_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMentionAdvanceViewTimeNotification::view_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification.view_time)
  return _internal_view_time();
}
inline void StreamMentionAdvanceViewTimeNotification::_internal_set_view_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  view_time_ = value;
}
inline void StreamMentionAdvanceViewTimeNotification::set_view_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.membership.StreamMentionAdvanceViewTimeNotification.view_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5flistener_2eproto
