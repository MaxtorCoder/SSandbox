// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_membership_service.proto

#include "bgs/low/pb/client/club_membership_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeSeriesId_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubMembershipGetStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubMembershipSubscribeOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubSharedSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
} _SubscribeRequest_default_instance_;
class SubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeResponse> _instance;
} _SubscribeResponse_default_instance_;
class UnsubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeRequest> _instance;
} _UnsubscribeRequest_default_instance_;
class GetStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStateRequest> _instance;
} _GetStateRequest_default_instance_;
class GetStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStateResponse> _instance;
} _GetStateResponse_default_instance_;
class UpdateClubSharedSettingsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateClubSharedSettingsRequest> _instance;
} _UpdateClubSharedSettingsRequest_default_instance_;
class GetStreamMentionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamMentionsRequest> _instance;
} _GetStreamMentionsRequest_default_instance_;
class GetStreamMentionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamMentionsResponse> _instance;
} _GetStreamMentionsResponse_default_instance_;
class RemoveStreamMentionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveStreamMentionsRequest> _instance;
} _RemoveStreamMentionsRequest_default_instance_;
class AdvanceStreamMentionViewTimeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvanceStreamMentionViewTimeRequest> _instance;
} _AdvanceStreamMentionViewTimeRequest_default_instance_;
}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_AdvanceStreamMentionViewTimeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_GetStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::GetStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::GetStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_ClubMembershipGetStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetStateResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_GetStateResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::GetStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::GetStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStateResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStateResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_GetStreamMentionsRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::GetStreamMentionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::GetStreamMentionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamMentionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_GetStreamMentionsResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamMentionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamMentionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_RemoveStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_RemoveStreamMentionsRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoveStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RemoveStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_TimeSeriesId_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_SubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_ClubMembershipSubscribeOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_SubscribeResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::SubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::SubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_UnsubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::UnsubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::UnsubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UpdateClubSharedSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::membership::_UpdateClubSharedSettingsRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateClubSharedSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateClubSharedSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto}, {
      &scc_info_AccountId_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,
      &scc_info_ClubSharedSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SubscribeRequest, options_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SubscribeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::SubscribeResponse, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::UnsubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::UnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::UnsubscribeRequest, agent_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStateRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStateRequest, options_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStateResponse, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest, options_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsRequest, options_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsRequest, fetch_messages_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsResponse, mention_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::GetStreamMentionsResponse, continuation_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest, mention_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest, agent_id_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::club::v1::membership::SubscribeRequest)},
  { 9, 15, sizeof(::bgs::protocol::club::v1::membership::SubscribeResponse)},
  { 16, 22, sizeof(::bgs::protocol::club::v1::membership::UnsubscribeRequest)},
  { 23, 30, sizeof(::bgs::protocol::club::v1::membership::GetStateRequest)},
  { 32, 38, sizeof(::bgs::protocol::club::v1::membership::GetStateResponse)},
  { 39, 46, sizeof(::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest)},
  { 48, 56, sizeof(::bgs::protocol::club::v1::membership::GetStreamMentionsRequest)},
  { 59, 66, sizeof(::bgs::protocol::club::v1::membership::GetStreamMentionsResponse)},
  { 68, 75, sizeof(::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest)},
  { 77, 83, sizeof(::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_UnsubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_GetStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_GetStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_UpdateClubSharedSettingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_GetStreamMentionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_GetStreamMentionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_RemoveStreamMentionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::membership::_AdvanceStreamMentionViewTimeRequest_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/bgs/low/pb/client/club_membership_serv"
  "ice.proto\022\037bgs.protocol.club.v1.membersh"
  "ip\032\"bgs/low/pb/client/club_types.proto\032#"
  "bgs/low/pb/client/club_stream.proto\"\217\001\n\020"
  "SubscribeRequest\0224\n\010agent_id\030\001 \001(\0132\".bgs"
  ".protocol.account.v1.AccountId\022E\n\007option"
  "s\030\002 \001(\01324.bgs.protocol.club.v1.ClubMembe"
  "rshipSubscribeOptions\"M\n\021SubscribeRespon"
  "se\0228\n\005state\030\001 \001(\0132).bgs.protocol.club.v1"
  ".ClubMembershipState\"J\n\022UnsubscribeReque"
  "st\0224\n\010agent_id\030\001 \001(\0132\".bgs.protocol.acco"
  "unt.v1.AccountId\"\215\001\n\017GetStateRequest\0224\n\010"
  "agent_id\030\001 \001(\0132\".bgs.protocol.account.v1"
  ".AccountId\022D\n\007options\030\002 \001(\01323.bgs.protoc"
  "ol.club.v1.ClubMembershipGetStateOptions"
  "\"L\n\020GetStateResponse\0228\n\005state\030\001 \001(\0132).bg"
  "s.protocol.club.v1.ClubMembershipState\"\231"
  "\001\n\037UpdateClubSharedSettingsRequest\0224\n\010ag"
  "ent_id\030\001 \001(\0132\".bgs.protocol.account.v1.A"
  "ccountId\022@\n\007options\030\002 \001(\0132/.bgs.protocol"
  ".club.v1.ClubSharedSettingsOptions\"\230\001\n\030G"
  "etStreamMentionsRequest\0224\n\010agent_id\030\001 \001("
  "\0132\".bgs.protocol.account.v1.AccountId\022.\n"
  "\007options\030\002 \001(\0132\035.bgs.protocol.GetEventOp"
  "tions\022\026\n\016fetch_messages\030\003 \001(\010\"g\n\031GetStre"
  "amMentionsResponse\0224\n\007mention\030\001 \003(\0132#.bg"
  "s.protocol.club.v1.StreamMention\022\024\n\014cont"
  "inuation\030\002 \001(\004\"\203\001\n\033RemoveStreamMentionsR"
  "equest\0224\n\010agent_id\030\001 \001(\0132\".bgs.protocol."
  "account.v1.AccountId\022.\n\nmention_id\030\002 \003(\013"
  "2\032.bgs.protocol.TimeSeriesId\"[\n#AdvanceS"
  "treamMentionViewTimeRequest\0224\n\010agent_id\030"
  "\001 \001(\0132\".bgs.protocol.account.v1.AccountI"
  "d2\314\007\n\025ClubMembershipService\022z\n\tSubscribe"
  "\0221.bgs.protocol.club.v1.membership.Subsc"
  "ribeRequest\0322.bgs.protocol.club.v1.membe"
  "rship.SubscribeResponse\"\006\202\371+\002\010\001\022`\n\013Unsub"
  "scribe\0223.bgs.protocol.club.v1.membership"
  ".UnsubscribeRequest\032\024.bgs.protocol.NoDat"
  "a\"\006\202\371+\002\010\002\022w\n\010GetState\0220.bgs.protocol.clu"
  "b.v1.membership.GetStateRequest\0321.bgs.pr"
  "otocol.club.v1.membership.GetStateRespon"
  "se\"\006\202\371+\002\010\003\022z\n\030UpdateClubSharedSettings\022@"
  ".bgs.protocol.club.v1.membership.UpdateC"
  "lubSharedSettingsRequest\032\024.bgs.protocol."
  "NoData\"\006\202\371+\002\010\004\022\222\001\n\021GetStreamMentions\0229.b"
  "gs.protocol.club.v1.membership.GetStream"
  "MentionsRequest\032:.bgs.protocol.club.v1.m"
  "embership.GetStreamMentionsResponse\"\006\202\371+"
  "\002\010\005\022r\n\024RemoveStreamMentions\022<.bgs.protoc"
  "ol.club.v1.membership.RemoveStreamMentio"
  "nsRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010\006\022"
  "\202\001\n\034AdvanceStreamMentionViewTime\022D.bgs.p"
  "rotocol.club.v1.membership.AdvanceStream"
  "MentionViewTimeRequest\032\024.bgs.protocol.No"
  "Data\"\006\202\371+\002\010\007\032R\202\371+-\n+bnet.protocol.club.v"
  "1.ClubMembershipService\202\371+\021*\017club_member"
  "ship\212\371+\002\020\001\212\371+\002\030\001B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto_deps[2] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto_sccs[10] = {
  &scc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_GetStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_GetStateResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_GetStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_GetStreamMentionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_RemoveStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
  &scc_info_UpdateClubSharedSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto, "bgs/low/pb/client/club_membership_service.proto", 2301,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto_deps, 10, 2,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto, 10, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {

// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_SubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_SubscribeRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions*>(
      ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const SubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions& options(const SubscribeRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
SubscribeRequest::_Internal::agent_id(const SubscribeRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions&
SubscribeRequest::_Internal::options(const SubscribeRequest* msg) {
  return *msg->options_;
}
void SubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SubscribeRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SubscribeRequest::SubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(options_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::ClubMembershipSubscribeOptions::MergeFrom(from._internal_options());
    }
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_SubscribeResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipState*>(
      ::bgs::protocol::club::v1::ClubMembershipState::internal_default_instance());
}
class SubscribeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubMembershipState& state(const SubscribeResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubMembershipState&
SubscribeResponse::_Internal::state(const SubscribeResponse* msg) {
  return *msg->state_;
}
void SubscribeResponse::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubscribeResponse::SubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::bgs::protocol::club::v1::ClubMembershipState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  state_ = nullptr;
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void SubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeResponse& SubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.SubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.SubscribeResponse)
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::bgs::protocol::club::v1::ClubMembershipState::MergeFrom(from._internal_state());
  }
}

void SubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_UnsubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
}
class UnsubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const UnsubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
UnsubscribeRequest::_Internal::agent_id(const UnsubscribeRequest* msg) {
  return *msg->agent_id_;
}
void UnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UnsubscribeRequest::UnsubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.UnsubscribeRequest)
}
UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  agent_id_ = nullptr;
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnsubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  return target;
}

size_t UnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.UnsubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.UnsubscribeRequest)
    MergeFrom(*source);
  }
}

void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_agent_id()) {
    _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
  }
}

void UnsubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeRequest::InternalSwap(UnsubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_GetStateRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_GetStateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipGetStateOptions*>(
      ::bgs::protocol::club::v1::ClubMembershipGetStateOptions::internal_default_instance());
}
class GetStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStateRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const GetStateRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubMembershipGetStateOptions& options(const GetStateRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
GetStateRequest::_Internal::agent_id(const GetStateRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubMembershipGetStateOptions&
GetStateRequest::_Internal::options(const GetStateRequest* msg) {
  return *msg->options_;
}
void GetStateRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetStateRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetStateRequest::GetStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.GetStateRequest)
}
GetStateRequest::GetStateRequest(const GetStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::ClubMembershipGetStateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.GetStateRequest)
}

void GetStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(options_));
}

GetStateRequest::~GetStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.GetStateRequest)
  SharedDtor();
}

void GetStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void GetStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStateRequest& GetStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.GetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.GetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.GetStateRequest)
  return target;
}

size_t GetStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.GetStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.GetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.GetStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.GetStateRequest)
    MergeFrom(*source);
  }
}

void GetStateRequest::MergeFrom(const GetStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.GetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::ClubMembershipGetStateOptions::MergeFrom(from._internal_options());
    }
  }
}

void GetStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.GetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateRequest::CopyFrom(const GetStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.GetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void GetStateRequest::InternalSwap(GetStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStateResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_GetStateResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipState*>(
      ::bgs::protocol::club::v1::ClubMembershipState::internal_default_instance());
}
class GetStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStateResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubMembershipState& state(const GetStateResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubMembershipState&
GetStateResponse::_Internal::state(const GetStateResponse* msg) {
  return *msg->state_;
}
void GetStateResponse::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetStateResponse::GetStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.GetStateResponse)
}
GetStateResponse::GetStateResponse(const GetStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::bgs::protocol::club::v1::ClubMembershipState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.GetStateResponse)
}

void GetStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStateResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  state_ = nullptr;
}

GetStateResponse::~GetStateResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.GetStateResponse)
  SharedDtor();
}

void GetStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void GetStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStateResponse& GetStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStateResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.GetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.GetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.GetStateResponse)
  return target;
}

size_t GetStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.GetStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.GetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.GetStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.GetStateResponse)
    MergeFrom(*source);
  }
}

void GetStateResponse::MergeFrom(const GetStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.GetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::bgs::protocol::club::v1::ClubMembershipState::MergeFrom(from._internal_state());
  }
}

void GetStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.GetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateResponse::CopyFrom(const GetStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.GetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateResponse::IsInitialized() const {
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  return true;
}

void GetStateResponse::InternalSwap(GetStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateClubSharedSettingsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_UpdateClubSharedSettingsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_UpdateClubSharedSettingsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::ClubSharedSettingsOptions*>(
      ::bgs::protocol::club::v1::ClubSharedSettingsOptions::internal_default_instance());
}
class UpdateClubSharedSettingsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateClubSharedSettingsRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const UpdateClubSharedSettingsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubSharedSettingsOptions& options(const UpdateClubSharedSettingsRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
UpdateClubSharedSettingsRequest::_Internal::agent_id(const UpdateClubSharedSettingsRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubSharedSettingsOptions&
UpdateClubSharedSettingsRequest::_Internal::options(const UpdateClubSharedSettingsRequest* msg) {
  return *msg->options_;
}
void UpdateClubSharedSettingsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateClubSharedSettingsRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UpdateClubSharedSettingsRequest::UpdateClubSharedSettingsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
}
UpdateClubSharedSettingsRequest::UpdateClubSharedSettingsRequest(const UpdateClubSharedSettingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::ClubSharedSettingsOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
}

void UpdateClubSharedSettingsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateClubSharedSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(options_));
}

UpdateClubSharedSettingsRequest::~UpdateClubSharedSettingsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  SharedDtor();
}

void UpdateClubSharedSettingsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateClubSharedSettingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateClubSharedSettingsRequest& UpdateClubSharedSettingsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateClubSharedSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateClubSharedSettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateClubSharedSettingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateClubSharedSettingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  return target;
}

size_t UpdateClubSharedSettingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateClubSharedSettingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateClubSharedSettingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateClubSharedSettingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
    MergeFrom(*source);
  }
}

void UpdateClubSharedSettingsRequest::MergeFrom(const UpdateClubSharedSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::ClubSharedSettingsOptions::MergeFrom(from._internal_options());
    }
  }
}

void UpdateClubSharedSettingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateClubSharedSettingsRequest::CopyFrom(const UpdateClubSharedSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateClubSharedSettingsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateClubSharedSettingsRequest::InternalSwap(UpdateClubSharedSettingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateClubSharedSettingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamMentionsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_GetStreamMentionsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
  ::bgs::protocol::club::v1::membership::_GetStreamMentionsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::GetEventOptions*>(
      ::bgs::protocol::GetEventOptions::internal_default_instance());
}
class GetStreamMentionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamMentionsRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const GetStreamMentionsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::GetEventOptions& options(const GetStreamMentionsRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fetch_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
GetStreamMentionsRequest::_Internal::agent_id(const GetStreamMentionsRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::GetEventOptions&
GetStreamMentionsRequest::_Internal::options(const GetStreamMentionsRequest* msg) {
  return *msg->options_;
}
void GetStreamMentionsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetStreamMentionsRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetStreamMentionsRequest::GetStreamMentionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
}
GetStreamMentionsRequest::GetStreamMentionsRequest(const GetStreamMentionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::GetEventOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  fetch_messages_ = from.fetch_messages_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
}

void GetStreamMentionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetch_messages_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(fetch_messages_));
}

GetStreamMentionsRequest::~GetStreamMentionsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  SharedDtor();
}

void GetStreamMentionsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void GetStreamMentionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamMentionsRequest& GetStreamMentionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetStreamMentionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  fetch_messages_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamMentionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.GetEventOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fetch_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fetch_messages(&has_bits);
          fetch_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamMentionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.GetEventOptions options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  // optional bool fetch_messages = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_fetch_messages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  return target;
}

size_t GetStreamMentionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.GetEventOptions options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional bool fetch_messages = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamMentionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamMentionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamMentionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
    MergeFrom(*source);
  }
}

void GetStreamMentionsRequest::MergeFrom(const GetStreamMentionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::GetEventOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      fetch_messages_ = from.fetch_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetStreamMentionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamMentionsRequest::CopyFrom(const GetStreamMentionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamMentionsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetStreamMentionsRequest::InternalSwap(GetStreamMentionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(fetch_messages_, other->fetch_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamMentionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamMentionsResponse::InitAsDefaultInstance() {
}
class GetStreamMentionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamMentionsResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetStreamMentionsResponse::clear_mention() {
  mention_.Clear();
}
GetStreamMentionsResponse::GetStreamMentionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
}
GetStreamMentionsResponse::GetStreamMentionsResponse(const GetStreamMentionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mention_(from.mention_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
}

void GetStreamMentionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamMentionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetStreamMentionsResponse::~GetStreamMentionsResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  SharedDtor();
}

void GetStreamMentionsResponse::SharedDtor() {
}

void GetStreamMentionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamMentionsResponse& GetStreamMentionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamMentionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetStreamMentionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mention_.Clear();
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamMentionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.StreamMention mention = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mention(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamMentionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamMention mention = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mention_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mention(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  return target;
}

size_t GetStreamMentionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamMention mention = 1;
  total_size += 1UL * this->_internal_mention_size();
  for (const auto& msg : this->mention_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 continuation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamMentionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamMentionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamMentionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
    MergeFrom(*source);
  }
}

void GetStreamMentionsResponse::MergeFrom(const GetStreamMentionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mention_.MergeFrom(from.mention_);
  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetStreamMentionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamMentionsResponse::CopyFrom(const GetStreamMentionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamMentionsResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mention_)) return false;
  return true;
}

void GetStreamMentionsResponse::InternalSwap(GetStreamMentionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mention_.InternalSwap(&other->mention_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamMentionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveStreamMentionsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_RemoveStreamMentionsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
}
class RemoveStreamMentionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveStreamMentionsRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const RemoveStreamMentionsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
RemoveStreamMentionsRequest::_Internal::agent_id(const RemoveStreamMentionsRequest* msg) {
  return *msg->agent_id_;
}
void RemoveStreamMentionsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveStreamMentionsRequest::clear_mention_id() {
  mention_id_.Clear();
}
RemoveStreamMentionsRequest::RemoveStreamMentionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
}
RemoveStreamMentionsRequest::RemoveStreamMentionsRequest(const RemoveStreamMentionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mention_id_(from.mention_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
}

void RemoveStreamMentionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  agent_id_ = nullptr;
}

RemoveStreamMentionsRequest::~RemoveStreamMentionsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  SharedDtor();
}

void RemoveStreamMentionsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void RemoveStreamMentionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveStreamMentionsRequest& RemoveStreamMentionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveStreamMentionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RemoveStreamMentionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mention_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveStreamMentionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.TimeSeriesId mention_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mention_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveStreamMentionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // repeated .bgs.protocol.TimeSeriesId mention_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mention_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mention_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  return target;
}

size_t RemoveStreamMentionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.TimeSeriesId mention_id = 2;
  total_size += 1UL * this->_internal_mention_id_size();
  for (const auto& msg : this->mention_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveStreamMentionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveStreamMentionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveStreamMentionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
    MergeFrom(*source);
  }
}

void RemoveStreamMentionsRequest::MergeFrom(const RemoveStreamMentionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mention_id_.MergeFrom(from.mention_id_);
  if (from._internal_has_agent_id()) {
    _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
  }
}

void RemoveStreamMentionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveStreamMentionsRequest::CopyFrom(const RemoveStreamMentionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveStreamMentionsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void RemoveStreamMentionsRequest::InternalSwap(RemoveStreamMentionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mention_id_.InternalSwap(&other->mention_id_);
  swap(agent_id_, other->agent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveStreamMentionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvanceStreamMentionViewTimeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::membership::_AdvanceStreamMentionViewTimeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(
      ::bgs::protocol::account::v1::AccountId::internal_default_instance());
}
class AdvanceStreamMentionViewTimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AdvanceStreamMentionViewTimeRequest>()._has_bits_);
  static const ::bgs::protocol::account::v1::AccountId& agent_id(const AdvanceStreamMentionViewTimeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::AccountId&
AdvanceStreamMentionViewTimeRequest::_Internal::agent_id(const AdvanceStreamMentionViewTimeRequest* msg) {
  return *msg->agent_id_;
}
void AdvanceStreamMentionViewTimeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AdvanceStreamMentionViewTimeRequest::AdvanceStreamMentionViewTimeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
}
AdvanceStreamMentionViewTimeRequest::AdvanceStreamMentionViewTimeRequest(const AdvanceStreamMentionViewTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::account::v1::AccountId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
}

void AdvanceStreamMentionViewTimeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  agent_id_ = nullptr;
}

AdvanceStreamMentionViewTimeRequest::~AdvanceStreamMentionViewTimeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  SharedDtor();
}

void AdvanceStreamMentionViewTimeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void AdvanceStreamMentionViewTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvanceStreamMentionViewTimeRequest& AdvanceStreamMentionViewTimeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AdvanceStreamMentionViewTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AdvanceStreamMentionViewTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvanceStreamMentionViewTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  return target;
}

size_t AdvanceStreamMentionViewTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvanceStreamMentionViewTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvanceStreamMentionViewTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvanceStreamMentionViewTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
    MergeFrom(*source);
  }
}

void AdvanceStreamMentionViewTimeRequest::MergeFrom(const AdvanceStreamMentionViewTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_agent_id()) {
    _internal_mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from._internal_agent_id());
  }
}

void AdvanceStreamMentionViewTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceStreamMentionViewTimeRequest::CopyFrom(const AdvanceStreamMentionViewTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceStreamMentionViewTimeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void AdvanceStreamMentionViewTimeRequest::InternalSwap(AdvanceStreamMentionViewTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvanceStreamMentionViewTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::SubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::SubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::SubscribeResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::SubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::SubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::UnsubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::UnsubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::UnsubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::GetStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::GetStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::GetStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::GetStateResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::GetStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::GetStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::GetStreamMentionsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::GetStreamMentionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::GetStreamMentionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
