// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_membership_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_types.pb.h"
#include "bgs/low/pb/client/club_stream.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {
class AdvanceStreamMentionViewTimeRequest;
class AdvanceStreamMentionViewTimeRequestDefaultTypeInternal;
extern AdvanceStreamMentionViewTimeRequestDefaultTypeInternal _AdvanceStreamMentionViewTimeRequest_default_instance_;
class GetStateRequest;
class GetStateRequestDefaultTypeInternal;
extern GetStateRequestDefaultTypeInternal _GetStateRequest_default_instance_;
class GetStateResponse;
class GetStateResponseDefaultTypeInternal;
extern GetStateResponseDefaultTypeInternal _GetStateResponse_default_instance_;
class GetStreamMentionsRequest;
class GetStreamMentionsRequestDefaultTypeInternal;
extern GetStreamMentionsRequestDefaultTypeInternal _GetStreamMentionsRequest_default_instance_;
class GetStreamMentionsResponse;
class GetStreamMentionsResponseDefaultTypeInternal;
extern GetStreamMentionsResponseDefaultTypeInternal _GetStreamMentionsResponse_default_instance_;
class RemoveStreamMentionsRequest;
class RemoveStreamMentionsRequestDefaultTypeInternal;
extern RemoveStreamMentionsRequestDefaultTypeInternal _RemoveStreamMentionsRequest_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class SubscribeResponse;
class SubscribeResponseDefaultTypeInternal;
extern SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
class UnsubscribeRequest;
class UnsubscribeRequestDefaultTypeInternal;
extern UnsubscribeRequestDefaultTypeInternal _UnsubscribeRequest_default_instance_;
class UpdateClubSharedSettingsRequest;
class UpdateClubSharedSettingsRequestDefaultTypeInternal;
extern UpdateClubSharedSettingsRequestDefaultTypeInternal _UpdateClubSharedSettingsRequest_default_instance_;
}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::membership::GetStateRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::GetStateRequest>(Arena*);
template<> ::bgs::protocol::club::v1::membership::GetStateResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::GetStateResponse>(Arena*);
template<> ::bgs::protocol::club::v1::membership::GetStreamMentionsRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::GetStreamMentionsRequest>(Arena*);
template<> ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::GetStreamMentionsResponse>(Arena*);
template<> ::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest>(Arena*);
template<> ::bgs::protocol::club::v1::membership::SubscribeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::SubscribeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::membership::SubscribeResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::SubscribeResponse>(Arena*);
template<> ::bgs::protocol::club::v1::membership::UnsubscribeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::UnsubscribeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {

// ===================================================================

class SubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.SubscribeRequest) */ {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return CreateMaybeMessage<SubscribeRequest>(nullptr);
  }

  SubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.SubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions& options() const;
  ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* release_options();
  ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* options);
  private:
  const ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions& _internal_options() const;
  ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.SubscribeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* options_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.SubscribeResponse) */ {
 public:
  SubscribeResponse();
  virtual ~SubscribeResponse();

  SubscribeResponse(const SubscribeResponse& from);
  SubscribeResponse(SubscribeResponse&& from) noexcept
    : SubscribeResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResponse& operator=(SubscribeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeResponse*>(
               &_SubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubscribeResponse& a, SubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeResponse* New() const final {
    return CreateMaybeMessage<SubscribeResponse>(nullptr);
  }

  SubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeResponse& from);
  void MergeFrom(const SubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.SubscribeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::bgs::protocol::club::v1::ClubMembershipState& state() const;
  ::bgs::protocol::club::v1::ClubMembershipState* release_state();
  ::bgs::protocol::club::v1::ClubMembershipState* mutable_state();
  void set_allocated_state(::bgs::protocol::club::v1::ClubMembershipState* state);
  private:
  const ::bgs::protocol::club::v1::ClubMembershipState& _internal_state() const;
  ::bgs::protocol::club::v1::ClubMembershipState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.SubscribeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubMembershipState* state_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.UnsubscribeRequest) */ {
 public:
  UnsubscribeRequest();
  virtual ~UnsubscribeRequest();

  UnsubscribeRequest(const UnsubscribeRequest& from);
  UnsubscribeRequest(UnsubscribeRequest&& from) noexcept
    : UnsubscribeRequest() {
    *this = ::std::move(from);
  }

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeRequest& operator=(UnsubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeRequest*>(
               &_UnsubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnsubscribeRequest& a, UnsubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeRequest* New() const final {
    return CreateMaybeMessage<UnsubscribeRequest>(nullptr);
  }

  UnsubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeRequest& from);
  void MergeFrom(const UnsubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.UnsubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.UnsubscribeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.GetStateRequest) */ {
 public:
  GetStateRequest();
  virtual ~GetStateRequest();

  GetStateRequest(const GetStateRequest& from);
  GetStateRequest(GetStateRequest&& from) noexcept
    : GetStateRequest() {
    *this = ::std::move(from);
  }

  inline GetStateRequest& operator=(const GetStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateRequest& operator=(GetStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetStateRequest*>(
               &_GetStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetStateRequest& a, GetStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStateRequest* New() const final {
    return CreateMaybeMessage<GetStateRequest>(nullptr);
  }

  GetStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateRequest& from);
  void MergeFrom(const GetStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.GetStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::ClubMembershipGetStateOptions& options() const;
  ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* release_options();
  ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::ClubMembershipGetStateOptions* options);
  private:
  const ::bgs::protocol::club::v1::ClubMembershipGetStateOptions& _internal_options() const;
  ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.GetStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* options_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.GetStateResponse) */ {
 public:
  GetStateResponse();
  virtual ~GetStateResponse();

  GetStateResponse(const GetStateResponse& from);
  GetStateResponse(GetStateResponse&& from) noexcept
    : GetStateResponse() {
    *this = ::std::move(from);
  }

  inline GetStateResponse& operator=(const GetStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateResponse& operator=(GetStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetStateResponse*>(
               &_GetStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetStateResponse& a, GetStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStateResponse* New() const final {
    return CreateMaybeMessage<GetStateResponse>(nullptr);
  }

  GetStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateResponse& from);
  void MergeFrom(const GetStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.GetStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::bgs::protocol::club::v1::ClubMembershipState& state() const;
  ::bgs::protocol::club::v1::ClubMembershipState* release_state();
  ::bgs::protocol::club::v1::ClubMembershipState* mutable_state();
  void set_allocated_state(::bgs::protocol::club::v1::ClubMembershipState* state);
  private:
  const ::bgs::protocol::club::v1::ClubMembershipState& _internal_state() const;
  ::bgs::protocol::club::v1::ClubMembershipState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.GetStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubMembershipState* state_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateClubSharedSettingsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest) */ {
 public:
  UpdateClubSharedSettingsRequest();
  virtual ~UpdateClubSharedSettingsRequest();

  UpdateClubSharedSettingsRequest(const UpdateClubSharedSettingsRequest& from);
  UpdateClubSharedSettingsRequest(UpdateClubSharedSettingsRequest&& from) noexcept
    : UpdateClubSharedSettingsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateClubSharedSettingsRequest& operator=(const UpdateClubSharedSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateClubSharedSettingsRequest& operator=(UpdateClubSharedSettingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateClubSharedSettingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateClubSharedSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateClubSharedSettingsRequest*>(
               &_UpdateClubSharedSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateClubSharedSettingsRequest& a, UpdateClubSharedSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateClubSharedSettingsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateClubSharedSettingsRequest* New() const final {
    return CreateMaybeMessage<UpdateClubSharedSettingsRequest>(nullptr);
  }

  UpdateClubSharedSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateClubSharedSettingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateClubSharedSettingsRequest& from);
  void MergeFrom(const UpdateClubSharedSettingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateClubSharedSettingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::ClubSharedSettingsOptions& options() const;
  ::bgs::protocol::club::v1::ClubSharedSettingsOptions* release_options();
  ::bgs::protocol::club::v1::ClubSharedSettingsOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::ClubSharedSettingsOptions* options);
  private:
  const ::bgs::protocol::club::v1::ClubSharedSettingsOptions& _internal_options() const;
  ::bgs::protocol::club::v1::ClubSharedSettingsOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  ::bgs::protocol::club::v1::ClubSharedSettingsOptions* options_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStreamMentionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.GetStreamMentionsRequest) */ {
 public:
  GetStreamMentionsRequest();
  virtual ~GetStreamMentionsRequest();

  GetStreamMentionsRequest(const GetStreamMentionsRequest& from);
  GetStreamMentionsRequest(GetStreamMentionsRequest&& from) noexcept
    : GetStreamMentionsRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamMentionsRequest& operator=(const GetStreamMentionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamMentionsRequest& operator=(GetStreamMentionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamMentionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamMentionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamMentionsRequest*>(
               &_GetStreamMentionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetStreamMentionsRequest& a, GetStreamMentionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamMentionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamMentionsRequest* New() const final {
    return CreateMaybeMessage<GetStreamMentionsRequest>(nullptr);
  }

  GetStreamMentionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamMentionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamMentionsRequest& from);
  void MergeFrom(const GetStreamMentionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamMentionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.GetStreamMentionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 2,
    kFetchMessagesFieldNumber = 3,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.GetEventOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::GetEventOptions& options() const;
  ::bgs::protocol::GetEventOptions* release_options();
  ::bgs::protocol::GetEventOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::GetEventOptions* options);
  private:
  const ::bgs::protocol::GetEventOptions& _internal_options() const;
  ::bgs::protocol::GetEventOptions* _internal_mutable_options();
  public:

  // optional bool fetch_messages = 3;
  bool has_fetch_messages() const;
  private:
  bool _internal_has_fetch_messages() const;
  public:
  void clear_fetch_messages();
  bool fetch_messages() const;
  void set_fetch_messages(bool value);
  private:
  bool _internal_fetch_messages() const;
  void _internal_set_fetch_messages(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  ::bgs::protocol::GetEventOptions* options_;
  bool fetch_messages_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetStreamMentionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.GetStreamMentionsResponse) */ {
 public:
  GetStreamMentionsResponse();
  virtual ~GetStreamMentionsResponse();

  GetStreamMentionsResponse(const GetStreamMentionsResponse& from);
  GetStreamMentionsResponse(GetStreamMentionsResponse&& from) noexcept
    : GetStreamMentionsResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamMentionsResponse& operator=(const GetStreamMentionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamMentionsResponse& operator=(GetStreamMentionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamMentionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamMentionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamMentionsResponse*>(
               &_GetStreamMentionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetStreamMentionsResponse& a, GetStreamMentionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamMentionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamMentionsResponse* New() const final {
    return CreateMaybeMessage<GetStreamMentionsResponse>(nullptr);
  }

  GetStreamMentionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamMentionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamMentionsResponse& from);
  void MergeFrom(const GetStreamMentionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamMentionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.GetStreamMentionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMentionFieldNumber = 1,
    kContinuationFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.StreamMention mention = 1;
  int mention_size() const;
  private:
  int _internal_mention_size() const;
  public:
  void clear_mention();
  ::bgs::protocol::club::v1::StreamMention* mutable_mention(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMention >*
      mutable_mention();
  private:
  const ::bgs::protocol::club::v1::StreamMention& _internal_mention(int index) const;
  ::bgs::protocol::club::v1::StreamMention* _internal_add_mention();
  public:
  const ::bgs::protocol::club::v1::StreamMention& mention(int index) const;
  ::bgs::protocol::club::v1::StreamMention* add_mention();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMention >&
      mention() const;

  // optional uint64 continuation = 2;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMention > mention_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveStreamMentionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest) */ {
 public:
  RemoveStreamMentionsRequest();
  virtual ~RemoveStreamMentionsRequest();

  RemoveStreamMentionsRequest(const RemoveStreamMentionsRequest& from);
  RemoveStreamMentionsRequest(RemoveStreamMentionsRequest&& from) noexcept
    : RemoveStreamMentionsRequest() {
    *this = ::std::move(from);
  }

  inline RemoveStreamMentionsRequest& operator=(const RemoveStreamMentionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveStreamMentionsRequest& operator=(RemoveStreamMentionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveStreamMentionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveStreamMentionsRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveStreamMentionsRequest*>(
               &_RemoveStreamMentionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RemoveStreamMentionsRequest& a, RemoveStreamMentionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveStreamMentionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveStreamMentionsRequest* New() const final {
    return CreateMaybeMessage<RemoveStreamMentionsRequest>(nullptr);
  }

  RemoveStreamMentionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveStreamMentionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveStreamMentionsRequest& from);
  void MergeFrom(const RemoveStreamMentionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveStreamMentionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMentionIdFieldNumber = 2,
    kAgentIdFieldNumber = 1,
  };
  // repeated .bgs.protocol.TimeSeriesId mention_id = 2;
  int mention_id_size() const;
  private:
  int _internal_mention_id_size() const;
  public:
  void clear_mention_id();
  ::bgs::protocol::TimeSeriesId* mutable_mention_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::TimeSeriesId >*
      mutable_mention_id();
  private:
  const ::bgs::protocol::TimeSeriesId& _internal_mention_id(int index) const;
  ::bgs::protocol::TimeSeriesId* _internal_add_mention_id();
  public:
  const ::bgs::protocol::TimeSeriesId& mention_id(int index) const;
  ::bgs::protocol::TimeSeriesId* add_mention_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::TimeSeriesId >&
      mention_id() const;

  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::TimeSeriesId > mention_id_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AdvanceStreamMentionViewTimeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest) */ {
 public:
  AdvanceStreamMentionViewTimeRequest();
  virtual ~AdvanceStreamMentionViewTimeRequest();

  AdvanceStreamMentionViewTimeRequest(const AdvanceStreamMentionViewTimeRequest& from);
  AdvanceStreamMentionViewTimeRequest(AdvanceStreamMentionViewTimeRequest&& from) noexcept
    : AdvanceStreamMentionViewTimeRequest() {
    *this = ::std::move(from);
  }

  inline AdvanceStreamMentionViewTimeRequest& operator=(const AdvanceStreamMentionViewTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvanceStreamMentionViewTimeRequest& operator=(AdvanceStreamMentionViewTimeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdvanceStreamMentionViewTimeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvanceStreamMentionViewTimeRequest* internal_default_instance() {
    return reinterpret_cast<const AdvanceStreamMentionViewTimeRequest*>(
               &_AdvanceStreamMentionViewTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AdvanceStreamMentionViewTimeRequest& a, AdvanceStreamMentionViewTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvanceStreamMentionViewTimeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvanceStreamMentionViewTimeRequest* New() const final {
    return CreateMaybeMessage<AdvanceStreamMentionViewTimeRequest>(nullptr);
  }

  AdvanceStreamMentionViewTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvanceStreamMentionViewTimeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdvanceStreamMentionViewTimeRequest& from);
  void MergeFrom(const AdvanceStreamMentionViewTimeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvanceStreamMentionViewTimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
  };
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::account::v1::AccountId& agent_id() const;
  ::bgs::protocol::account::v1::AccountId* release_agent_id();
  ::bgs::protocol::account::v1::AccountId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id);
  private:
  const ::bgs::protocol::account::v1::AccountId& _internal_agent_id() const;
  ::bgs::protocol::account::v1::AccountId* _internal_mutable_agent_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::AccountId* agent_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeRequest

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool SubscribeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SubscribeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& SubscribeRequest::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& SubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.SubscribeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* SubscribeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.SubscribeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* SubscribeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* SubscribeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.SubscribeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SubscribeRequest::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.SubscribeRequest.agent_id)
}

// optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
inline bool SubscribeRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool SubscribeRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions& SubscribeRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions*>(
      &::bgs::protocol::club::v1::_ClubMembershipSubscribeOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions& SubscribeRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.SubscribeRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* SubscribeRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.SubscribeRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* SubscribeRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipSubscribeOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* SubscribeRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.SubscribeRequest.options)
  return _internal_mutable_options();
}
inline void SubscribeRequest::set_allocated_options(::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.SubscribeRequest.options)
}

// -------------------------------------------------------------------

// SubscribeResponse

// optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
inline bool SubscribeResponse::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool SubscribeResponse::has_state() const {
  return _internal_has_state();
}
inline const ::bgs::protocol::club::v1::ClubMembershipState& SubscribeResponse::_internal_state() const {
  const ::bgs::protocol::club::v1::ClubMembershipState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubMembershipState*>(
      &::bgs::protocol::club::v1::_ClubMembershipState_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubMembershipState& SubscribeResponse::state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.SubscribeResponse.state)
  return _internal_state();
}
inline ::bgs::protocol::club::v1::ClubMembershipState* SubscribeResponse::release_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.SubscribeResponse.state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubMembershipState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubMembershipState* SubscribeResponse::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::bgs::protocol::club::v1::ClubMembershipState* SubscribeResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.SubscribeResponse.state)
  return _internal_mutable_state();
}
inline void SubscribeResponse::set_allocated_state(::bgs::protocol::club::v1::ClubMembershipState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.SubscribeResponse.state)
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool UnsubscribeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UnsubscribeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& UnsubscribeRequest::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& UnsubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.UnsubscribeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* UnsubscribeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.UnsubscribeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* UnsubscribeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* UnsubscribeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.UnsubscribeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UnsubscribeRequest::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.UnsubscribeRequest.agent_id)
}

// -------------------------------------------------------------------

// GetStateRequest

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool GetStateRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetStateRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& GetStateRequest::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& GetStateRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.GetStateRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* GetStateRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.GetStateRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* GetStateRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* GetStateRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.GetStateRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetStateRequest::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.GetStateRequest.agent_id)
}

// optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
inline bool GetStateRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool GetStateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::ClubMembershipGetStateOptions& GetStateRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubMembershipGetStateOptions*>(
      &::bgs::protocol::club::v1::_ClubMembershipGetStateOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubMembershipGetStateOptions& GetStateRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.GetStateRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* GetStateRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.GetStateRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* GetStateRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipGetStateOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* GetStateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.GetStateRequest.options)
  return _internal_mutable_options();
}
inline void GetStateRequest::set_allocated_options(::bgs::protocol::club::v1::ClubMembershipGetStateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.GetStateRequest.options)
}

// -------------------------------------------------------------------

// GetStateResponse

// optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
inline bool GetStateResponse::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool GetStateResponse::has_state() const {
  return _internal_has_state();
}
inline const ::bgs::protocol::club::v1::ClubMembershipState& GetStateResponse::_internal_state() const {
  const ::bgs::protocol::club::v1::ClubMembershipState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubMembershipState*>(
      &::bgs::protocol::club::v1::_ClubMembershipState_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubMembershipState& GetStateResponse::state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.GetStateResponse.state)
  return _internal_state();
}
inline ::bgs::protocol::club::v1::ClubMembershipState* GetStateResponse::release_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.GetStateResponse.state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubMembershipState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubMembershipState* GetStateResponse::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::bgs::protocol::club::v1::ClubMembershipState* GetStateResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.GetStateResponse.state)
  return _internal_mutable_state();
}
inline void GetStateResponse::set_allocated_state(::bgs::protocol::club::v1::ClubMembershipState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.GetStateResponse.state)
}

// -------------------------------------------------------------------

// UpdateClubSharedSettingsRequest

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool UpdateClubSharedSettingsRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UpdateClubSharedSettingsRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& UpdateClubSharedSettingsRequest::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& UpdateClubSharedSettingsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* UpdateClubSharedSettingsRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* UpdateClubSharedSettingsRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* UpdateClubSharedSettingsRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UpdateClubSharedSettingsRequest::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest.agent_id)
}

// optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
inline bool UpdateClubSharedSettingsRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool UpdateClubSharedSettingsRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::ClubSharedSettingsOptions& UpdateClubSharedSettingsRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::ClubSharedSettingsOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSharedSettingsOptions*>(
      &::bgs::protocol::club::v1::_ClubSharedSettingsOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSharedSettingsOptions& UpdateClubSharedSettingsRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::ClubSharedSettingsOptions* UpdateClubSharedSettingsRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubSharedSettingsOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSharedSettingsOptions* UpdateClubSharedSettingsRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSharedSettingsOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::ClubSharedSettingsOptions* UpdateClubSharedSettingsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest.options)
  return _internal_mutable_options();
}
inline void UpdateClubSharedSettingsRequest::set_allocated_options(::bgs::protocol::club::v1::ClubSharedSettingsOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest.options)
}

// -------------------------------------------------------------------

// GetStreamMentionsRequest

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool GetStreamMentionsRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetStreamMentionsRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& GetStreamMentionsRequest::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& GetStreamMentionsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* GetStreamMentionsRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* GetStreamMentionsRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* GetStreamMentionsRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetStreamMentionsRequest::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.agent_id)
}

// optional .bgs.protocol.GetEventOptions options = 2;
inline bool GetStreamMentionsRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool GetStreamMentionsRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::GetEventOptions& GetStreamMentionsRequest::_internal_options() const {
  const ::bgs::protocol::GetEventOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::GetEventOptions*>(
      &::bgs::protocol::_GetEventOptions_default_instance_);
}
inline const ::bgs::protocol::GetEventOptions& GetStreamMentionsRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::GetEventOptions* GetStreamMentionsRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::GetEventOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::GetEventOptions* GetStreamMentionsRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::GetEventOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::GetEventOptions* GetStreamMentionsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.options)
  return _internal_mutable_options();
}
inline void GetStreamMentionsRequest::set_allocated_options(::bgs::protocol::GetEventOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.options)
}

// optional bool fetch_messages = 3;
inline bool GetStreamMentionsRequest::_internal_has_fetch_messages() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetStreamMentionsRequest::has_fetch_messages() const {
  return _internal_has_fetch_messages();
}
inline void GetStreamMentionsRequest::clear_fetch_messages() {
  fetch_messages_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GetStreamMentionsRequest::_internal_fetch_messages() const {
  return fetch_messages_;
}
inline bool GetStreamMentionsRequest::fetch_messages() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.fetch_messages)
  return _internal_fetch_messages();
}
inline void GetStreamMentionsRequest::_internal_set_fetch_messages(bool value) {
  _has_bits_[0] |= 0x00000004u;
  fetch_messages_ = value;
}
inline void GetStreamMentionsRequest::set_fetch_messages(bool value) {
  _internal_set_fetch_messages(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.membership.GetStreamMentionsRequest.fetch_messages)
}

// -------------------------------------------------------------------

// GetStreamMentionsResponse

// repeated .bgs.protocol.club.v1.StreamMention mention = 1;
inline int GetStreamMentionsResponse::_internal_mention_size() const {
  return mention_.size();
}
inline int GetStreamMentionsResponse::mention_size() const {
  return _internal_mention_size();
}
inline ::bgs::protocol::club::v1::StreamMention* GetStreamMentionsResponse::mutable_mention(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.GetStreamMentionsResponse.mention)
  return mention_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMention >*
GetStreamMentionsResponse::mutable_mention() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.membership.GetStreamMentionsResponse.mention)
  return &mention_;
}
inline const ::bgs::protocol::club::v1::StreamMention& GetStreamMentionsResponse::_internal_mention(int index) const {
  return mention_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamMention& GetStreamMentionsResponse::mention(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.GetStreamMentionsResponse.mention)
  return _internal_mention(index);
}
inline ::bgs::protocol::club::v1::StreamMention* GetStreamMentionsResponse::_internal_add_mention() {
  return mention_.Add();
}
inline ::bgs::protocol::club::v1::StreamMention* GetStreamMentionsResponse::add_mention() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.membership.GetStreamMentionsResponse.mention)
  return _internal_add_mention();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMention >&
GetStreamMentionsResponse::mention() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.membership.GetStreamMentionsResponse.mention)
  return mention_;
}

// optional uint64 continuation = 2;
inline bool GetStreamMentionsResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetStreamMentionsResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetStreamMentionsResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamMentionsResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamMentionsResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.GetStreamMentionsResponse.continuation)
  return _internal_continuation();
}
inline void GetStreamMentionsResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetStreamMentionsResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.membership.GetStreamMentionsResponse.continuation)
}

// -------------------------------------------------------------------

// RemoveStreamMentionsRequest

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool RemoveStreamMentionsRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool RemoveStreamMentionsRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& RemoveStreamMentionsRequest::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& RemoveStreamMentionsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* RemoveStreamMentionsRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* RemoveStreamMentionsRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* RemoveStreamMentionsRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void RemoveStreamMentionsRequest::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.agent_id)
}

// repeated .bgs.protocol.TimeSeriesId mention_id = 2;
inline int RemoveStreamMentionsRequest::_internal_mention_id_size() const {
  return mention_id_.size();
}
inline int RemoveStreamMentionsRequest::mention_id_size() const {
  return _internal_mention_id_size();
}
inline ::bgs::protocol::TimeSeriesId* RemoveStreamMentionsRequest::mutable_mention_id(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.mention_id)
  return mention_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::TimeSeriesId >*
RemoveStreamMentionsRequest::mutable_mention_id() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.mention_id)
  return &mention_id_;
}
inline const ::bgs::protocol::TimeSeriesId& RemoveStreamMentionsRequest::_internal_mention_id(int index) const {
  return mention_id_.Get(index);
}
inline const ::bgs::protocol::TimeSeriesId& RemoveStreamMentionsRequest::mention_id(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.mention_id)
  return _internal_mention_id(index);
}
inline ::bgs::protocol::TimeSeriesId* RemoveStreamMentionsRequest::_internal_add_mention_id() {
  return mention_id_.Add();
}
inline ::bgs::protocol::TimeSeriesId* RemoveStreamMentionsRequest::add_mention_id() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.mention_id)
  return _internal_add_mention_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::TimeSeriesId >&
RemoveStreamMentionsRequest::mention_id() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest.mention_id)
  return mention_id_;
}

// -------------------------------------------------------------------

// AdvanceStreamMentionViewTimeRequest

// optional .bgs.protocol.account.v1.AccountId agent_id = 1;
inline bool AdvanceStreamMentionViewTimeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AdvanceStreamMentionViewTimeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::account::v1::AccountId& AdvanceStreamMentionViewTimeRequest::_internal_agent_id() const {
  const ::bgs::protocol::account::v1::AccountId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::AccountId*>(
      &::bgs::protocol::account::v1::_AccountId_default_instance_);
}
inline const ::bgs::protocol::account::v1::AccountId& AdvanceStreamMentionViewTimeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::account::v1::AccountId* AdvanceStreamMentionViewTimeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::AccountId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::AccountId* AdvanceStreamMentionViewTimeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::AccountId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::account::v1::AccountId* AdvanceStreamMentionViewTimeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AdvanceStreamMentionViewTimeRequest::set_allocated_agent_id(::bgs::protocol::account::v1::AccountId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest.agent_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5fservice_2eproto
