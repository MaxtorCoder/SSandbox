// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_membership_types.proto

#include "bgs/low/pb/client/club_membership_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubSharedSettings_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubMembershipFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubMembershipFilter> _instance;
} _ClubMembershipFilter_default_instance_;
class ClubMembershipSubscribeOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubMembershipSubscribeOptions> _instance;
} _ClubMembershipSubscribeOptions_default_instance_;
class ClubMembershipGetStateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubMembershipGetStateOptions> _instance;
} _ClubMembershipGetStateOptions_default_instance_;
class ClubMembershipDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubMembershipDescription> _instance;
} _ClubMembershipDescription_default_instance_;
class ClubMembershipStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubMembershipState> _instance;
} _ClubMembershipState_default_instance_;
class ClubPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubPosition> _instance;
} _ClubPosition_default_instance_;
class ClubSharedSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSharedSettings> _instance;
} _ClubSharedSettings_default_instance_;
class ClubSharedSettingsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSharedSettingsOptions> _instance;
} _ClubSharedSettingsOptions_default_instance_;
class ClubSharedSettingsAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSharedSettingsAssignment> _instance;
} _ClubSharedSettingsAssignment_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubMembershipDescription_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubMembershipDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubMembershipDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubMembershipFilter_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubMembershipFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubMembershipFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_ClubMembershipGetStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubMembershipGetStateOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubMembershipGetStateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubMembershipGetStateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubMembershipGetStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubMembershipGetStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {
      &scc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubMembershipState_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubMembershipState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubMembershipState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {
      &scc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
      &scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,
      &scc_info_ClubSharedSettings_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
      &scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubMembershipSubscribeOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubMembershipSubscribeOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubMembershipSubscribeOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubMembershipSubscribeOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {
      &scc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubPosition_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ClubSharedSettings_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSharedSettings_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSharedSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSharedSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubSharedSettings_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubSharedSettings_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {
      &scc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubSharedSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSharedSettingsAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSharedSettingsAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSharedSettingsAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubSharedSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubSharedSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {
      &scc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ClubSharedSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSharedSettingsOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSharedSettingsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSharedSettingsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubSharedSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubSharedSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto}, {
      &scc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipFilter, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipFilter, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipSubscribeOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipSubscribeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipSubscribeOptions, filter_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipGetStateOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipGetStateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipGetStateOptions, filter_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipDescription, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipDescription, club_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipState, description_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipState, invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipState, setting_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMembershipState, mention_view_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPosition, club_id_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettings, club_position_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettingsOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettingsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettingsOptions, club_position_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettingsAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettingsAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSharedSettingsAssignment, club_position_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::club::v1::ClubMembershipFilter)},
  { 9, 15, sizeof(::bgs::protocol::club::v1::ClubMembershipSubscribeOptions)},
  { 16, 22, sizeof(::bgs::protocol::club::v1::ClubMembershipGetStateOptions)},
  { 23, 30, sizeof(::bgs::protocol::club::v1::ClubMembershipDescription)},
  { 32, 41, sizeof(::bgs::protocol::club::v1::ClubMembershipState)},
  { 45, 51, sizeof(::bgs::protocol::club::v1::ClubPosition)},
  { 52, 58, sizeof(::bgs::protocol::club::v1::ClubSharedSettings)},
  { 59, 65, sizeof(::bgs::protocol::club::v1::ClubSharedSettingsOptions)},
  { 66, 72, sizeof(::bgs::protocol::club::v1::ClubSharedSettingsAssignment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubMembershipFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubMembershipSubscribeOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubMembershipGetStateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubMembershipDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubMembershipState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSharedSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSharedSettingsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSharedSettingsAssignment_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-bgs/low/pb/client/club_membership_type"
  "s.proto\022\024bgs.protocol.club.v1\032!bgs/low/p"
  "b/client/club_core.proto\032#bgs/low/pb/cli"
  "ent/club_member.proto\032\'bgs/low/pb/client"
  "/club_invitation.proto\032(bgs/low/pb/clien"
  "t/event_view_types.proto\032!bgs/low/pb/cli"
  "ent/rpc_types.proto\"}\n\024ClubMembershipFil"
  "ter\0221\n\tmember_id\030\001 \001(\0132\036.bgs.protocol.cl"
  "ub.v1.MemberId\0222\n\004type\030\002 \001(\0132$.bgs.proto"
  "col.club.v1.UniqueClubType\"r\n\036ClubMember"
  "shipSubscribeOptions\022P\n\006filter\030\001 \003(\0132*.b"
  "gs.protocol.club.v1.ClubMembershipFilter"
  "B\024\212\371+\006*\004\n\002\010\000\212\371+\006*\004\n\002\020\031\"q\n\035ClubMembership"
  "GetStateOptions\022P\n\006filter\030\001 \003(\0132*.bgs.pr"
  "otocol.club.v1.ClubMembershipFilterB\024\212\371+"
  "\006*\004\n\002\010\000\212\371+\006*\004\n\002\020\031\"\203\001\n\031ClubMembershipDesc"
  "ription\0221\n\tmember_id\030\001 \001(\0132\036.bgs.protoco"
  "l.club.v1.MemberId\0223\n\004club\030\002 \001(\0132%.bgs.p"
  "rotocol.club.v1.ClubDescription\"\200\002\n\023Club"
  "MembershipState\022D\n\013description\030\001 \003(\0132/.b"
  "gs.protocol.club.v1.ClubMembershipDescri"
  "ption\0228\n\ninvitation\030\002 \003(\0132$.bgs.protocol"
  ".club.v1.ClubInvitation\0229\n\007setting\030\003 \001(\013"
  "2(.bgs.protocol.club.v1.ClubSharedSettin"
  "gs\022.\n\014mention_view\030\004 \001(\0132\030.bgs.protocol."
  "ViewMarker\"#\n\014ClubPosition\022\023\n\007club_id\030\001 "
  "\003(\004B\002\020\001\"O\n\022ClubSharedSettings\0229\n\rclub_po"
  "sition\030\001 \001(\0132\".bgs.protocol.club.v1.Club"
  "Position\"V\n\031ClubSharedSettingsOptions\0229\n"
  "\rclub_position\030\001 \001(\0132\".bgs.protocol.club"
  ".v1.ClubPosition\"Y\n\034ClubSharedSettingsAs"
  "signment\0229\n\rclub_position\030\001 \001(\0132\".bgs.pr"
  "otocol.club.v1.ClubPosition"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto_deps[5] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto_sccs[9] = {
  &scc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
  &scc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
  &scc_info_ClubMembershipGetStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
  &scc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
  &scc_info_ClubMembershipSubscribeOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
  &scc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
  &scc_info_ClubSharedSettings_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
  &scc_info_ClubSharedSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
  &scc_info_ClubSharedSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto, "bgs/low/pb/client/club_membership_types.proto", 1307,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto_deps, 9, 5,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto, 9, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void ClubMembershipFilter::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubMembershipFilter_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubMembershipFilter_default_instance_._instance.get_mutable()->type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(
      ::bgs::protocol::club::v1::UniqueClubType::internal_default_instance());
}
class ClubMembershipFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubMembershipFilter>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& member_id(const ClubMembershipFilter* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::UniqueClubType& type(const ClubMembershipFilter* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
ClubMembershipFilter::_Internal::member_id(const ClubMembershipFilter* msg) {
  return *msg->member_id_;
}
const ::bgs::protocol::club::v1::UniqueClubType&
ClubMembershipFilter::_Internal::type(const ClubMembershipFilter* msg) {
  return *msg->type_;
}
void ClubMembershipFilter::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubMembershipFilter::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ClubMembershipFilter::ClubMembershipFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipFilter)
}
ClubMembershipFilter::ClubMembershipFilter(const ClubMembershipFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::bgs::protocol::club::v1::UniqueClubType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipFilter)
}

void ClubMembershipFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(type_));
}

ClubMembershipFilter::~ClubMembershipFilter() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipFilter)
  SharedDtor();
}

void ClubMembershipFilter::SharedDtor() {
  if (this != internal_default_instance()) delete member_id_;
  if (this != internal_default_instance()) delete type_;
}

void ClubMembershipFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubMembershipFilter& ClubMembershipFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubMembershipFilter_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubMembershipFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubMembershipFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(member_id_ != nullptr);
      member_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubMembershipFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubMembershipFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipFilter)
  return target;
}

size_t ClubMembershipFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubMembershipFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubMembershipFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubMembershipFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubMembershipFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubMembershipFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubMembershipFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubMembershipFilter)
    MergeFrom(*source);
  }
}

void ClubMembershipFilter::MergeFrom(const ClubMembershipFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubMembershipFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from._internal_type());
    }
  }
}

void ClubMembershipFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubMembershipFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipFilter::CopyFrom(const ClubMembershipFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubMembershipFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipFilter::IsInitialized() const {
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void ClubMembershipFilter::InternalSwap(ClubMembershipFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(member_id_, other->member_id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubMembershipFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubMembershipSubscribeOptions::InitAsDefaultInstance() {
}
class ClubMembershipSubscribeOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubMembershipSubscribeOptions>()._has_bits_);
};

ClubMembershipSubscribeOptions::ClubMembershipSubscribeOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
}
ClubMembershipSubscribeOptions::ClubMembershipSubscribeOptions(const ClubMembershipSubscribeOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      filter_(from.filter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
}

void ClubMembershipSubscribeOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubMembershipSubscribeOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
}

ClubMembershipSubscribeOptions::~ClubMembershipSubscribeOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  SharedDtor();
}

void ClubMembershipSubscribeOptions::SharedDtor() {
}

void ClubMembershipSubscribeOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubMembershipSubscribeOptions& ClubMembershipSubscribeOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubMembershipSubscribeOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubMembershipSubscribeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubMembershipSubscribeOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubMembershipSubscribeOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  return target;
}

size_t ClubMembershipSubscribeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
  total_size += 1UL * this->_internal_filter_size();
  for (const auto& msg : this->filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubMembershipSubscribeOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubMembershipSubscribeOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubMembershipSubscribeOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
    MergeFrom(*source);
  }
}

void ClubMembershipSubscribeOptions::MergeFrom(const ClubMembershipSubscribeOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
}

void ClubMembershipSubscribeOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipSubscribeOptions::CopyFrom(const ClubMembershipSubscribeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipSubscribeOptions::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(filter_)) return false;
  return true;
}

void ClubMembershipSubscribeOptions::InternalSwap(ClubMembershipSubscribeOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_.InternalSwap(&other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubMembershipSubscribeOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubMembershipGetStateOptions::InitAsDefaultInstance() {
}
class ClubMembershipGetStateOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubMembershipGetStateOptions>()._has_bits_);
};

ClubMembershipGetStateOptions::ClubMembershipGetStateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
}
ClubMembershipGetStateOptions::ClubMembershipGetStateOptions(const ClubMembershipGetStateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      filter_(from.filter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
}

void ClubMembershipGetStateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubMembershipGetStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
}

ClubMembershipGetStateOptions::~ClubMembershipGetStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  SharedDtor();
}

void ClubMembershipGetStateOptions::SharedDtor() {
}

void ClubMembershipGetStateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubMembershipGetStateOptions& ClubMembershipGetStateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubMembershipGetStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubMembershipGetStateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubMembershipGetStateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubMembershipGetStateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  return target;
}

size_t ClubMembershipGetStateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
  total_size += 1UL * this->_internal_filter_size();
  for (const auto& msg : this->filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubMembershipGetStateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubMembershipGetStateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubMembershipGetStateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
    MergeFrom(*source);
  }
}

void ClubMembershipGetStateOptions::MergeFrom(const ClubMembershipGetStateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
}

void ClubMembershipGetStateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipGetStateOptions::CopyFrom(const ClubMembershipGetStateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipGetStateOptions::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(filter_)) return false;
  return true;
}

void ClubMembershipGetStateOptions::InternalSwap(ClubMembershipGetStateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_.InternalSwap(&other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubMembershipGetStateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubMembershipDescription::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubMembershipDescription_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubMembershipDescription_default_instance_._instance.get_mutable()->club_ = const_cast< ::bgs::protocol::club::v1::ClubDescription*>(
      ::bgs::protocol::club::v1::ClubDescription::internal_default_instance());
}
class ClubMembershipDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubMembershipDescription>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& member_id(const ClubMembershipDescription* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubDescription& club(const ClubMembershipDescription* msg);
  static void set_has_club(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
ClubMembershipDescription::_Internal::member_id(const ClubMembershipDescription* msg) {
  return *msg->member_id_;
}
const ::bgs::protocol::club::v1::ClubDescription&
ClubMembershipDescription::_Internal::club(const ClubMembershipDescription* msg) {
  return *msg->club_;
}
void ClubMembershipDescription::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubMembershipDescription::clear_club() {
  if (club_ != nullptr) club_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ClubMembershipDescription::ClubMembershipDescription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipDescription)
}
ClubMembershipDescription::ClubMembershipDescription(const ClubMembershipDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  if (from._internal_has_club()) {
    club_ = new ::bgs::protocol::club::v1::ClubDescription(*from.club_);
  } else {
    club_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipDescription)
}

void ClubMembershipDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(club_));
}

ClubMembershipDescription::~ClubMembershipDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipDescription)
  SharedDtor();
}

void ClubMembershipDescription::SharedDtor() {
  if (this != internal_default_instance()) delete member_id_;
  if (this != internal_default_instance()) delete club_;
}

void ClubMembershipDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubMembershipDescription& ClubMembershipDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubMembershipDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubMembershipDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubMembershipDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(member_id_ != nullptr);
      member_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(club_ != nullptr);
      club_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubMembershipDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubDescription club = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_club(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubMembershipDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::club(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipDescription)
  return target;
}

size_t ClubMembershipDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubMembershipDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional .bgs.protocol.club.v1.ClubDescription club = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *club_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubMembershipDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubMembershipDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubMembershipDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubMembershipDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubMembershipDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubMembershipDescription)
    MergeFrom(*source);
  }
}

void ClubMembershipDescription::MergeFrom(const ClubMembershipDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubMembershipDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_club()->::bgs::protocol::club::v1::ClubDescription::MergeFrom(from._internal_club());
    }
  }
}

void ClubMembershipDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubMembershipDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipDescription::CopyFrom(const ClubMembershipDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubMembershipDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipDescription::IsInitialized() const {
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  if (_internal_has_club()) {
    if (!club_->IsInitialized()) return false;
  }
  return true;
}

void ClubMembershipDescription::InternalSwap(ClubMembershipDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(member_id_, other->member_id_);
  swap(club_, other->club_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubMembershipDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubMembershipState::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubMembershipState_default_instance_._instance.get_mutable()->setting_ = const_cast< ::bgs::protocol::club::v1::ClubSharedSettings*>(
      ::bgs::protocol::club::v1::ClubSharedSettings::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubMembershipState_default_instance_._instance.get_mutable()->mention_view_ = const_cast< ::bgs::protocol::ViewMarker*>(
      ::bgs::protocol::ViewMarker::internal_default_instance());
}
class ClubMembershipState::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubMembershipState>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubSharedSettings& setting(const ClubMembershipState* msg);
  static void set_has_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::ViewMarker& mention_view(const ClubMembershipState* msg);
  static void set_has_mention_view(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::ClubSharedSettings&
ClubMembershipState::_Internal::setting(const ClubMembershipState* msg) {
  return *msg->setting_;
}
const ::bgs::protocol::ViewMarker&
ClubMembershipState::_Internal::mention_view(const ClubMembershipState* msg) {
  return *msg->mention_view_;
}
void ClubMembershipState::clear_invitation() {
  invitation_.Clear();
}
void ClubMembershipState::clear_mention_view() {
  if (mention_view_ != nullptr) mention_view_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ClubMembershipState::ClubMembershipState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipState)
}
ClubMembershipState::ClubMembershipState(const ClubMembershipState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      invitation_(from.invitation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_setting()) {
    setting_ = new ::bgs::protocol::club::v1::ClubSharedSettings(*from.setting_);
  } else {
    setting_ = nullptr;
  }
  if (from._internal_has_mention_view()) {
    mention_view_ = new ::bgs::protocol::ViewMarker(*from.mention_view_);
  } else {
    mention_view_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipState)
}

void ClubMembershipState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  ::memset(&setting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mention_view_) -
      reinterpret_cast<char*>(&setting_)) + sizeof(mention_view_));
}

ClubMembershipState::~ClubMembershipState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipState)
  SharedDtor();
}

void ClubMembershipState::SharedDtor() {
  if (this != internal_default_instance()) delete setting_;
  if (this != internal_default_instance()) delete mention_view_;
}

void ClubMembershipState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubMembershipState& ClubMembershipState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubMembershipState_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubMembershipState::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubMembershipState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  invitation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(setting_ != nullptr);
      setting_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mention_view_ != nullptr);
      mention_view_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubMembershipState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invitation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ViewMarker mention_view = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mention_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubMembershipState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_description(i), target, stream);
  }

  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invitation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_invitation(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::setting(this), target, stream);
  }

  // optional .bgs.protocol.ViewMarker mention_view = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mention_view(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipState)
  return target;
}

size_t ClubMembershipState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubMembershipState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
  total_size += 1UL * this->_internal_invitation_size();
  for (const auto& msg : this->invitation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *setting_);
    }

    // optional .bgs.protocol.ViewMarker mention_view = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mention_view_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubMembershipState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubMembershipState)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubMembershipState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubMembershipState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubMembershipState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubMembershipState)
    MergeFrom(*source);
  }
}

void ClubMembershipState::MergeFrom(const ClubMembershipState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubMembershipState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  invitation_.MergeFrom(from.invitation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_setting()->::bgs::protocol::club::v1::ClubSharedSettings::MergeFrom(from._internal_setting());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mention_view()->::bgs::protocol::ViewMarker::MergeFrom(from._internal_mention_view());
    }
  }
}

void ClubMembershipState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubMembershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipState::CopyFrom(const ClubMembershipState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubMembershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(description_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(invitation_)) return false;
  return true;
}

void ClubMembershipState::InternalSwap(ClubMembershipState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  invitation_.InternalSwap(&other->invitation_);
  swap(setting_, other->setting_);
  swap(mention_view_, other->mention_view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubMembershipState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubPosition::InitAsDefaultInstance() {
}
class ClubPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubPosition>()._has_bits_);
};

ClubPosition::ClubPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubPosition)
}
ClubPosition::ClubPosition(const ClubPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      club_id_(from.club_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubPosition)
}

void ClubPosition::SharedCtor() {
}

ClubPosition::~ClubPosition() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubPosition)
  SharedDtor();
}

void ClubPosition::SharedDtor() {
}

void ClubPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubPosition& ClubPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubPosition_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  club_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 club_id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_club_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_club_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 club_id = 1 [packed = true];
  {
    int byte_size = _club_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_club_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubPosition)
  return target;
}

size_t ClubPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 club_id = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->club_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _club_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubPosition)
    MergeFrom(*source);
  }
}

void ClubPosition::MergeFrom(const ClubPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  club_id_.MergeFrom(from.club_id_);
}

void ClubPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubPosition::CopyFrom(const ClubPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubPosition::IsInitialized() const {
  return true;
}

void ClubPosition::InternalSwap(ClubPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  club_id_.InternalSwap(&other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubSharedSettings::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubSharedSettings_default_instance_._instance.get_mutable()->club_position_ = const_cast< ::bgs::protocol::club::v1::ClubPosition*>(
      ::bgs::protocol::club::v1::ClubPosition::internal_default_instance());
}
class ClubSharedSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSharedSettings>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubPosition& club_position(const ClubSharedSettings* msg);
  static void set_has_club_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubPosition&
ClubSharedSettings::_Internal::club_position(const ClubSharedSettings* msg) {
  return *msg->club_position_;
}
ClubSharedSettings::ClubSharedSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSharedSettings)
}
ClubSharedSettings::ClubSharedSettings(const ClubSharedSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_club_position()) {
    club_position_ = new ::bgs::protocol::club::v1::ClubPosition(*from.club_position_);
  } else {
    club_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSharedSettings)
}

void ClubSharedSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubSharedSettings_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  club_position_ = nullptr;
}

ClubSharedSettings::~ClubSharedSettings() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSharedSettings)
  SharedDtor();
}

void ClubSharedSettings::SharedDtor() {
  if (this != internal_default_instance()) delete club_position_;
}

void ClubSharedSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSharedSettings& ClubSharedSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSharedSettings_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubSharedSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSharedSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(club_position_ != nullptr);
    club_position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSharedSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_club_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSharedSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSharedSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::club_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSharedSettings)
  return target;
}

size_t ClubSharedSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSharedSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *club_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSharedSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSharedSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSharedSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSharedSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSharedSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSharedSettings)
    MergeFrom(*source);
  }
}

void ClubSharedSettings::MergeFrom(const ClubSharedSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSharedSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_club_position()) {
    _internal_mutable_club_position()->::bgs::protocol::club::v1::ClubPosition::MergeFrom(from._internal_club_position());
  }
}

void ClubSharedSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSharedSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSharedSettings::CopyFrom(const ClubSharedSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSharedSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSharedSettings::IsInitialized() const {
  return true;
}

void ClubSharedSettings::InternalSwap(ClubSharedSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(club_position_, other->club_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSharedSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubSharedSettingsOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubSharedSettingsOptions_default_instance_._instance.get_mutable()->club_position_ = const_cast< ::bgs::protocol::club::v1::ClubPosition*>(
      ::bgs::protocol::club::v1::ClubPosition::internal_default_instance());
}
class ClubSharedSettingsOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSharedSettingsOptions>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubPosition& club_position(const ClubSharedSettingsOptions* msg);
  static void set_has_club_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubPosition&
ClubSharedSettingsOptions::_Internal::club_position(const ClubSharedSettingsOptions* msg) {
  return *msg->club_position_;
}
ClubSharedSettingsOptions::ClubSharedSettingsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSharedSettingsOptions)
}
ClubSharedSettingsOptions::ClubSharedSettingsOptions(const ClubSharedSettingsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_club_position()) {
    club_position_ = new ::bgs::protocol::club::v1::ClubPosition(*from.club_position_);
  } else {
    club_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSharedSettingsOptions)
}

void ClubSharedSettingsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubSharedSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  club_position_ = nullptr;
}

ClubSharedSettingsOptions::~ClubSharedSettingsOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  SharedDtor();
}

void ClubSharedSettingsOptions::SharedDtor() {
  if (this != internal_default_instance()) delete club_position_;
}

void ClubSharedSettingsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSharedSettingsOptions& ClubSharedSettingsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSharedSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubSharedSettingsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(club_position_ != nullptr);
    club_position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSharedSettingsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_club_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSharedSettingsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::club_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  return target;
}

size_t ClubSharedSettingsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *club_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSharedSettingsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSharedSettingsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSharedSettingsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSharedSettingsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSharedSettingsOptions)
    MergeFrom(*source);
  }
}

void ClubSharedSettingsOptions::MergeFrom(const ClubSharedSettingsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_club_position()) {
    _internal_mutable_club_position()->::bgs::protocol::club::v1::ClubPosition::MergeFrom(from._internal_club_position());
  }
}

void ClubSharedSettingsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSharedSettingsOptions::CopyFrom(const ClubSharedSettingsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSharedSettingsOptions::IsInitialized() const {
  return true;
}

void ClubSharedSettingsOptions::InternalSwap(ClubSharedSettingsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(club_position_, other->club_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSharedSettingsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubSharedSettingsAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubSharedSettingsAssignment_default_instance_._instance.get_mutable()->club_position_ = const_cast< ::bgs::protocol::club::v1::ClubPosition*>(
      ::bgs::protocol::club::v1::ClubPosition::internal_default_instance());
}
class ClubSharedSettingsAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSharedSettingsAssignment>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubPosition& club_position(const ClubSharedSettingsAssignment* msg);
  static void set_has_club_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubPosition&
ClubSharedSettingsAssignment::_Internal::club_position(const ClubSharedSettingsAssignment* msg) {
  return *msg->club_position_;
}
ClubSharedSettingsAssignment::ClubSharedSettingsAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
}
ClubSharedSettingsAssignment::ClubSharedSettingsAssignment(const ClubSharedSettingsAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_club_position()) {
    club_position_ = new ::bgs::protocol::club::v1::ClubPosition(*from.club_position_);
  } else {
    club_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
}

void ClubSharedSettingsAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubSharedSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  club_position_ = nullptr;
}

ClubSharedSettingsAssignment::~ClubSharedSettingsAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  SharedDtor();
}

void ClubSharedSettingsAssignment::SharedDtor() {
  if (this != internal_default_instance()) delete club_position_;
}

void ClubSharedSettingsAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSharedSettingsAssignment& ClubSharedSettingsAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSharedSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClubSharedSettingsAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(club_position_ != nullptr);
    club_position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSharedSettingsAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_club_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSharedSettingsAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::club_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  return target;
}

size_t ClubSharedSettingsAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *club_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSharedSettingsAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSharedSettingsAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSharedSettingsAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
    MergeFrom(*source);
  }
}

void ClubSharedSettingsAssignment::MergeFrom(const ClubSharedSettingsAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_club_position()) {
    _internal_mutable_club_position()->::bgs::protocol::club::v1::ClubPosition::MergeFrom(from._internal_club_position());
  }
}

void ClubSharedSettingsAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSharedSettingsAssignment::CopyFrom(const ClubSharedSettingsAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSharedSettingsAssignment::IsInitialized() const {
  return true;
}

void ClubSharedSettingsAssignment::InternalSwap(ClubSharedSettingsAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(club_position_, other->club_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSharedSettingsAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubMembershipFilter* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubMembershipFilter >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubMembershipFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubMembershipGetStateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubMembershipGetStateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubMembershipDescription* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubMembershipDescription >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubMembershipDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubMembershipState* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubMembershipState >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubMembershipState >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubPosition* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubPosition >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSharedSettings* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSharedSettings >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSharedSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSharedSettingsOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSharedSettingsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSharedSettingsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSharedSettingsAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSharedSettingsAssignment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
