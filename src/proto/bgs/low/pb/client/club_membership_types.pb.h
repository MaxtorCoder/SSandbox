// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_membership_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_core.pb.h"
#include "bgs/low/pb/client/club_member.pb.h"
#include "bgs/low/pb/client/club_invitation.pb.h"
#include "bgs/low/pb/client/event_view_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubMembershipDescription;
class ClubMembershipDescriptionDefaultTypeInternal;
extern ClubMembershipDescriptionDefaultTypeInternal _ClubMembershipDescription_default_instance_;
class ClubMembershipFilter;
class ClubMembershipFilterDefaultTypeInternal;
extern ClubMembershipFilterDefaultTypeInternal _ClubMembershipFilter_default_instance_;
class ClubMembershipGetStateOptions;
class ClubMembershipGetStateOptionsDefaultTypeInternal;
extern ClubMembershipGetStateOptionsDefaultTypeInternal _ClubMembershipGetStateOptions_default_instance_;
class ClubMembershipState;
class ClubMembershipStateDefaultTypeInternal;
extern ClubMembershipStateDefaultTypeInternal _ClubMembershipState_default_instance_;
class ClubMembershipSubscribeOptions;
class ClubMembershipSubscribeOptionsDefaultTypeInternal;
extern ClubMembershipSubscribeOptionsDefaultTypeInternal _ClubMembershipSubscribeOptions_default_instance_;
class ClubPosition;
class ClubPositionDefaultTypeInternal;
extern ClubPositionDefaultTypeInternal _ClubPosition_default_instance_;
class ClubSharedSettings;
class ClubSharedSettingsDefaultTypeInternal;
extern ClubSharedSettingsDefaultTypeInternal _ClubSharedSettings_default_instance_;
class ClubSharedSettingsAssignment;
class ClubSharedSettingsAssignmentDefaultTypeInternal;
extern ClubSharedSettingsAssignmentDefaultTypeInternal _ClubSharedSettingsAssignment_default_instance_;
class ClubSharedSettingsOptions;
class ClubSharedSettingsOptionsDefaultTypeInternal;
extern ClubSharedSettingsOptionsDefaultTypeInternal _ClubSharedSettingsOptions_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::ClubMembershipDescription* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipDescription>(Arena*);
template<> ::bgs::protocol::club::v1::ClubMembershipFilter* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipFilter>(Arena*);
template<> ::bgs::protocol::club::v1::ClubMembershipGetStateOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipGetStateOptions>(Arena*);
template<> ::bgs::protocol::club::v1::ClubMembershipState* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipState>(Arena*);
template<> ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubMembershipSubscribeOptions>(Arena*);
template<> ::bgs::protocol::club::v1::ClubPosition* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubPosition>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSharedSettings* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSharedSettings>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSharedSettingsAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSharedSettingsAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSharedSettingsOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSharedSettingsOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class ClubMembershipFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubMembershipFilter) */ {
 public:
  ClubMembershipFilter();
  virtual ~ClubMembershipFilter();

  ClubMembershipFilter(const ClubMembershipFilter& from);
  ClubMembershipFilter(ClubMembershipFilter&& from) noexcept
    : ClubMembershipFilter() {
    *this = ::std::move(from);
  }

  inline ClubMembershipFilter& operator=(const ClubMembershipFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubMembershipFilter& operator=(ClubMembershipFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubMembershipFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubMembershipFilter* internal_default_instance() {
    return reinterpret_cast<const ClubMembershipFilter*>(
               &_ClubMembershipFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClubMembershipFilter& a, ClubMembershipFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubMembershipFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubMembershipFilter* New() const final {
    return CreateMaybeMessage<ClubMembershipFilter>(nullptr);
  }

  ClubMembershipFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubMembershipFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubMembershipFilter& from);
  void MergeFrom(const ClubMembershipFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubMembershipFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubMembershipFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  ::bgs::protocol::club::v1::UniqueClubType* release_type();
  ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);
  private:
  const ::bgs::protocol::club::v1::UniqueClubType& _internal_type() const;
  ::bgs::protocol::club::v1::UniqueClubType* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubMembershipFilter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubMembershipSubscribeOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubMembershipSubscribeOptions) */ {
 public:
  ClubMembershipSubscribeOptions();
  virtual ~ClubMembershipSubscribeOptions();

  ClubMembershipSubscribeOptions(const ClubMembershipSubscribeOptions& from);
  ClubMembershipSubscribeOptions(ClubMembershipSubscribeOptions&& from) noexcept
    : ClubMembershipSubscribeOptions() {
    *this = ::std::move(from);
  }

  inline ClubMembershipSubscribeOptions& operator=(const ClubMembershipSubscribeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubMembershipSubscribeOptions& operator=(ClubMembershipSubscribeOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubMembershipSubscribeOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubMembershipSubscribeOptions* internal_default_instance() {
    return reinterpret_cast<const ClubMembershipSubscribeOptions*>(
               &_ClubMembershipSubscribeOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClubMembershipSubscribeOptions& a, ClubMembershipSubscribeOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubMembershipSubscribeOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubMembershipSubscribeOptions* New() const final {
    return CreateMaybeMessage<ClubMembershipSubscribeOptions>(nullptr);
  }

  ClubMembershipSubscribeOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubMembershipSubscribeOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubMembershipSubscribeOptions& from);
  void MergeFrom(const ClubMembershipSubscribeOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubMembershipSubscribeOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubMembershipSubscribeOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
  int filter_size() const;
  private:
  int _internal_filter_size() const;
  public:
  void clear_filter();
  ::bgs::protocol::club::v1::ClubMembershipFilter* mutable_filter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter >*
      mutable_filter();
  private:
  const ::bgs::protocol::club::v1::ClubMembershipFilter& _internal_filter(int index) const;
  ::bgs::protocol::club::v1::ClubMembershipFilter* _internal_add_filter();
  public:
  const ::bgs::protocol::club::v1::ClubMembershipFilter& filter(int index) const;
  ::bgs::protocol::club::v1::ClubMembershipFilter* add_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter >&
      filter() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter > filter_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubMembershipGetStateOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubMembershipGetStateOptions) */ {
 public:
  ClubMembershipGetStateOptions();
  virtual ~ClubMembershipGetStateOptions();

  ClubMembershipGetStateOptions(const ClubMembershipGetStateOptions& from);
  ClubMembershipGetStateOptions(ClubMembershipGetStateOptions&& from) noexcept
    : ClubMembershipGetStateOptions() {
    *this = ::std::move(from);
  }

  inline ClubMembershipGetStateOptions& operator=(const ClubMembershipGetStateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubMembershipGetStateOptions& operator=(ClubMembershipGetStateOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubMembershipGetStateOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubMembershipGetStateOptions* internal_default_instance() {
    return reinterpret_cast<const ClubMembershipGetStateOptions*>(
               &_ClubMembershipGetStateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClubMembershipGetStateOptions& a, ClubMembershipGetStateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubMembershipGetStateOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubMembershipGetStateOptions* New() const final {
    return CreateMaybeMessage<ClubMembershipGetStateOptions>(nullptr);
  }

  ClubMembershipGetStateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubMembershipGetStateOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubMembershipGetStateOptions& from);
  void MergeFrom(const ClubMembershipGetStateOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubMembershipGetStateOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubMembershipGetStateOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
  int filter_size() const;
  private:
  int _internal_filter_size() const;
  public:
  void clear_filter();
  ::bgs::protocol::club::v1::ClubMembershipFilter* mutable_filter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter >*
      mutable_filter();
  private:
  const ::bgs::protocol::club::v1::ClubMembershipFilter& _internal_filter(int index) const;
  ::bgs::protocol::club::v1::ClubMembershipFilter* _internal_add_filter();
  public:
  const ::bgs::protocol::club::v1::ClubMembershipFilter& filter(int index) const;
  ::bgs::protocol::club::v1::ClubMembershipFilter* add_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter >&
      filter() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter > filter_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubMembershipDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubMembershipDescription) */ {
 public:
  ClubMembershipDescription();
  virtual ~ClubMembershipDescription();

  ClubMembershipDescription(const ClubMembershipDescription& from);
  ClubMembershipDescription(ClubMembershipDescription&& from) noexcept
    : ClubMembershipDescription() {
    *this = ::std::move(from);
  }

  inline ClubMembershipDescription& operator=(const ClubMembershipDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubMembershipDescription& operator=(ClubMembershipDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubMembershipDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubMembershipDescription* internal_default_instance() {
    return reinterpret_cast<const ClubMembershipDescription*>(
               &_ClubMembershipDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClubMembershipDescription& a, ClubMembershipDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubMembershipDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubMembershipDescription* New() const final {
    return CreateMaybeMessage<ClubMembershipDescription>(nullptr);
  }

  ClubMembershipDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubMembershipDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubMembershipDescription& from);
  void MergeFrom(const ClubMembershipDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubMembershipDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubMembershipDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
    kClubFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional .bgs.protocol.club.v1.ClubDescription club = 2;
  bool has_club() const;
  private:
  bool _internal_has_club() const;
  public:
  void clear_club();
  const ::bgs::protocol::club::v1::ClubDescription& club() const;
  ::bgs::protocol::club::v1::ClubDescription* release_club();
  ::bgs::protocol::club::v1::ClubDescription* mutable_club();
  void set_allocated_club(::bgs::protocol::club::v1::ClubDescription* club);
  private:
  const ::bgs::protocol::club::v1::ClubDescription& _internal_club() const;
  ::bgs::protocol::club::v1::ClubDescription* _internal_mutable_club();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubMembershipDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  ::bgs::protocol::club::v1::ClubDescription* club_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubMembershipState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubMembershipState) */ {
 public:
  ClubMembershipState();
  virtual ~ClubMembershipState();

  ClubMembershipState(const ClubMembershipState& from);
  ClubMembershipState(ClubMembershipState&& from) noexcept
    : ClubMembershipState() {
    *this = ::std::move(from);
  }

  inline ClubMembershipState& operator=(const ClubMembershipState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubMembershipState& operator=(ClubMembershipState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubMembershipState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubMembershipState* internal_default_instance() {
    return reinterpret_cast<const ClubMembershipState*>(
               &_ClubMembershipState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClubMembershipState& a, ClubMembershipState& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubMembershipState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubMembershipState* New() const final {
    return CreateMaybeMessage<ClubMembershipState>(nullptr);
  }

  ClubMembershipState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubMembershipState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubMembershipState& from);
  void MergeFrom(const ClubMembershipState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubMembershipState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubMembershipState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kInvitationFieldNumber = 2,
    kSettingFieldNumber = 3,
    kMentionViewFieldNumber = 4,
  };
  // repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::bgs::protocol::club::v1::ClubMembershipDescription* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipDescription >*
      mutable_description();
  private:
  const ::bgs::protocol::club::v1::ClubMembershipDescription& _internal_description(int index) const;
  ::bgs::protocol::club::v1::ClubMembershipDescription* _internal_add_description();
  public:
  const ::bgs::protocol::club::v1::ClubMembershipDescription& description(int index) const;
  ::bgs::protocol::club::v1::ClubMembershipDescription* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipDescription >&
      description() const;

  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
  int invitation_size() const;
  private:
  int _internal_invitation_size() const;
  public:
  void clear_invitation();
  ::bgs::protocol::club::v1::ClubInvitation* mutable_invitation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation >*
      mutable_invitation();
  private:
  const ::bgs::protocol::club::v1::ClubInvitation& _internal_invitation(int index) const;
  ::bgs::protocol::club::v1::ClubInvitation* _internal_add_invitation();
  public:
  const ::bgs::protocol::club::v1::ClubInvitation& invitation(int index) const;
  ::bgs::protocol::club::v1::ClubInvitation* add_invitation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation >&
      invitation() const;

  // optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
  bool has_setting() const;
  private:
  bool _internal_has_setting() const;
  public:
  void clear_setting();
  const ::bgs::protocol::club::v1::ClubSharedSettings& setting() const;
  ::bgs::protocol::club::v1::ClubSharedSettings* release_setting();
  ::bgs::protocol::club::v1::ClubSharedSettings* mutable_setting();
  void set_allocated_setting(::bgs::protocol::club::v1::ClubSharedSettings* setting);
  private:
  const ::bgs::protocol::club::v1::ClubSharedSettings& _internal_setting() const;
  ::bgs::protocol::club::v1::ClubSharedSettings* _internal_mutable_setting();
  public:

  // optional .bgs.protocol.ViewMarker mention_view = 4;
  bool has_mention_view() const;
  private:
  bool _internal_has_mention_view() const;
  public:
  void clear_mention_view();
  const ::bgs::protocol::ViewMarker& mention_view() const;
  ::bgs::protocol::ViewMarker* release_mention_view();
  ::bgs::protocol::ViewMarker* mutable_mention_view();
  void set_allocated_mention_view(::bgs::protocol::ViewMarker* mention_view);
  private:
  const ::bgs::protocol::ViewMarker& _internal_mention_view() const;
  ::bgs::protocol::ViewMarker* _internal_mutable_mention_view();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubMembershipState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipDescription > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation > invitation_;
  ::bgs::protocol::club::v1::ClubSharedSettings* setting_;
  ::bgs::protocol::ViewMarker* mention_view_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubPosition) */ {
 public:
  ClubPosition();
  virtual ~ClubPosition();

  ClubPosition(const ClubPosition& from);
  ClubPosition(ClubPosition&& from) noexcept
    : ClubPosition() {
    *this = ::std::move(from);
  }

  inline ClubPosition& operator=(const ClubPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubPosition& operator=(ClubPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubPosition* internal_default_instance() {
    return reinterpret_cast<const ClubPosition*>(
               &_ClubPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClubPosition& a, ClubPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubPosition* New() const final {
    return CreateMaybeMessage<ClubPosition>(nullptr);
  }

  ClubPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubPosition& from);
  void MergeFrom(const ClubPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClubIdFieldNumber = 1,
  };
  // repeated uint64 club_id = 1 [packed = true];
  int club_id_size() const;
  private:
  int _internal_club_id_size() const;
  public:
  void clear_club_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_club_id() const;
  void _internal_add_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_club_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id(int index) const;
  void set_club_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      club_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_club_id();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > club_id_;
  mutable std::atomic<int> _club_id_cached_byte_size_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubSharedSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSharedSettings) */ {
 public:
  ClubSharedSettings();
  virtual ~ClubSharedSettings();

  ClubSharedSettings(const ClubSharedSettings& from);
  ClubSharedSettings(ClubSharedSettings&& from) noexcept
    : ClubSharedSettings() {
    *this = ::std::move(from);
  }

  inline ClubSharedSettings& operator=(const ClubSharedSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSharedSettings& operator=(ClubSharedSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSharedSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSharedSettings* internal_default_instance() {
    return reinterpret_cast<const ClubSharedSettings*>(
               &_ClubSharedSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClubSharedSettings& a, ClubSharedSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSharedSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSharedSettings* New() const final {
    return CreateMaybeMessage<ClubSharedSettings>(nullptr);
  }

  ClubSharedSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSharedSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSharedSettings& from);
  void MergeFrom(const ClubSharedSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSharedSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSharedSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClubPositionFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  bool has_club_position() const;
  private:
  bool _internal_has_club_position() const;
  public:
  void clear_club_position();
  const ::bgs::protocol::club::v1::ClubPosition& club_position() const;
  ::bgs::protocol::club::v1::ClubPosition* release_club_position();
  ::bgs::protocol::club::v1::ClubPosition* mutable_club_position();
  void set_allocated_club_position(::bgs::protocol::club::v1::ClubPosition* club_position);
  private:
  const ::bgs::protocol::club::v1::ClubPosition& _internal_club_position() const;
  ::bgs::protocol::club::v1::ClubPosition* _internal_mutable_club_position();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSharedSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubPosition* club_position_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubSharedSettingsOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSharedSettingsOptions) */ {
 public:
  ClubSharedSettingsOptions();
  virtual ~ClubSharedSettingsOptions();

  ClubSharedSettingsOptions(const ClubSharedSettingsOptions& from);
  ClubSharedSettingsOptions(ClubSharedSettingsOptions&& from) noexcept
    : ClubSharedSettingsOptions() {
    *this = ::std::move(from);
  }

  inline ClubSharedSettingsOptions& operator=(const ClubSharedSettingsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSharedSettingsOptions& operator=(ClubSharedSettingsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSharedSettingsOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSharedSettingsOptions* internal_default_instance() {
    return reinterpret_cast<const ClubSharedSettingsOptions*>(
               &_ClubSharedSettingsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClubSharedSettingsOptions& a, ClubSharedSettingsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSharedSettingsOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSharedSettingsOptions* New() const final {
    return CreateMaybeMessage<ClubSharedSettingsOptions>(nullptr);
  }

  ClubSharedSettingsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSharedSettingsOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSharedSettingsOptions& from);
  void MergeFrom(const ClubSharedSettingsOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSharedSettingsOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSharedSettingsOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClubPositionFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  bool has_club_position() const;
  private:
  bool _internal_has_club_position() const;
  public:
  void clear_club_position();
  const ::bgs::protocol::club::v1::ClubPosition& club_position() const;
  ::bgs::protocol::club::v1::ClubPosition* release_club_position();
  ::bgs::protocol::club::v1::ClubPosition* mutable_club_position();
  void set_allocated_club_position(::bgs::protocol::club::v1::ClubPosition* club_position);
  private:
  const ::bgs::protocol::club::v1::ClubPosition& _internal_club_position() const;
  ::bgs::protocol::club::v1::ClubPosition* _internal_mutable_club_position();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSharedSettingsOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubPosition* club_position_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ClubSharedSettingsAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSharedSettingsAssignment) */ {
 public:
  ClubSharedSettingsAssignment();
  virtual ~ClubSharedSettingsAssignment();

  ClubSharedSettingsAssignment(const ClubSharedSettingsAssignment& from);
  ClubSharedSettingsAssignment(ClubSharedSettingsAssignment&& from) noexcept
    : ClubSharedSettingsAssignment() {
    *this = ::std::move(from);
  }

  inline ClubSharedSettingsAssignment& operator=(const ClubSharedSettingsAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSharedSettingsAssignment& operator=(ClubSharedSettingsAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSharedSettingsAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSharedSettingsAssignment* internal_default_instance() {
    return reinterpret_cast<const ClubSharedSettingsAssignment*>(
               &_ClubSharedSettingsAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClubSharedSettingsAssignment& a, ClubSharedSettingsAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSharedSettingsAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSharedSettingsAssignment* New() const final {
    return CreateMaybeMessage<ClubSharedSettingsAssignment>(nullptr);
  }

  ClubSharedSettingsAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSharedSettingsAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSharedSettingsAssignment& from);
  void MergeFrom(const ClubSharedSettingsAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSharedSettingsAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSharedSettingsAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClubPositionFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  bool has_club_position() const;
  private:
  bool _internal_has_club_position() const;
  public:
  void clear_club_position();
  const ::bgs::protocol::club::v1::ClubPosition& club_position() const;
  ::bgs::protocol::club::v1::ClubPosition* release_club_position();
  ::bgs::protocol::club::v1::ClubPosition* mutable_club_position();
  void set_allocated_club_position(::bgs::protocol::club::v1::ClubPosition* club_position);
  private:
  const ::bgs::protocol::club::v1::ClubPosition& _internal_club_position() const;
  ::bgs::protocol::club::v1::ClubPosition* _internal_mutable_club_position();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubPosition* club_position_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClubMembershipFilter

// optional .bgs.protocol.club.v1.MemberId member_id = 1;
inline bool ClubMembershipFilter::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool ClubMembershipFilter::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& ClubMembershipFilter::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& ClubMembershipFilter::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipFilter.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* ClubMembershipFilter::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMembershipFilter.member_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* ClubMembershipFilter::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000001u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* ClubMembershipFilter::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipFilter.member_id)
  return _internal_mutable_member_id();
}
inline void ClubMembershipFilter::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMembershipFilter.member_id)
}

// optional .bgs.protocol.club.v1.UniqueClubType type = 2;
inline bool ClubMembershipFilter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool ClubMembershipFilter::has_type() const {
  return _internal_has_type();
}
inline const ::bgs::protocol::club::v1::UniqueClubType& ClubMembershipFilter::_internal_type() const {
  const ::bgs::protocol::club::v1::UniqueClubType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::UniqueClubType*>(
      &::bgs::protocol::club::v1::_UniqueClubType_default_instance_);
}
inline const ::bgs::protocol::club::v1::UniqueClubType& ClubMembershipFilter::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipFilter.type)
  return _internal_type();
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubMembershipFilter::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMembershipFilter.type)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubMembershipFilter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::UniqueClubType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubMembershipFilter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipFilter.type)
  return _internal_mutable_type();
}
inline void ClubMembershipFilter::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMembershipFilter.type)
}

// -------------------------------------------------------------------

// ClubMembershipSubscribeOptions

// repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
inline int ClubMembershipSubscribeOptions::_internal_filter_size() const {
  return filter_.size();
}
inline int ClubMembershipSubscribeOptions::filter_size() const {
  return _internal_filter_size();
}
inline void ClubMembershipSubscribeOptions::clear_filter() {
  filter_.Clear();
}
inline ::bgs::protocol::club::v1::ClubMembershipFilter* ClubMembershipSubscribeOptions::mutable_filter(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipSubscribeOptions.filter)
  return filter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter >*
ClubMembershipSubscribeOptions::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubMembershipSubscribeOptions.filter)
  return &filter_;
}
inline const ::bgs::protocol::club::v1::ClubMembershipFilter& ClubMembershipSubscribeOptions::_internal_filter(int index) const {
  return filter_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubMembershipFilter& ClubMembershipSubscribeOptions::filter(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipSubscribeOptions.filter)
  return _internal_filter(index);
}
inline ::bgs::protocol::club::v1::ClubMembershipFilter* ClubMembershipSubscribeOptions::_internal_add_filter() {
  return filter_.Add();
}
inline ::bgs::protocol::club::v1::ClubMembershipFilter* ClubMembershipSubscribeOptions::add_filter() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubMembershipSubscribeOptions.filter)
  return _internal_add_filter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter >&
ClubMembershipSubscribeOptions::filter() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubMembershipSubscribeOptions.filter)
  return filter_;
}

// -------------------------------------------------------------------

// ClubMembershipGetStateOptions

// repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1 [(.bgs.protocol.valid) = {
inline int ClubMembershipGetStateOptions::_internal_filter_size() const {
  return filter_.size();
}
inline int ClubMembershipGetStateOptions::filter_size() const {
  return _internal_filter_size();
}
inline void ClubMembershipGetStateOptions::clear_filter() {
  filter_.Clear();
}
inline ::bgs::protocol::club::v1::ClubMembershipFilter* ClubMembershipGetStateOptions::mutable_filter(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipGetStateOptions.filter)
  return filter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter >*
ClubMembershipGetStateOptions::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubMembershipGetStateOptions.filter)
  return &filter_;
}
inline const ::bgs::protocol::club::v1::ClubMembershipFilter& ClubMembershipGetStateOptions::_internal_filter(int index) const {
  return filter_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubMembershipFilter& ClubMembershipGetStateOptions::filter(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipGetStateOptions.filter)
  return _internal_filter(index);
}
inline ::bgs::protocol::club::v1::ClubMembershipFilter* ClubMembershipGetStateOptions::_internal_add_filter() {
  return filter_.Add();
}
inline ::bgs::protocol::club::v1::ClubMembershipFilter* ClubMembershipGetStateOptions::add_filter() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubMembershipGetStateOptions.filter)
  return _internal_add_filter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipFilter >&
ClubMembershipGetStateOptions::filter() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubMembershipGetStateOptions.filter)
  return filter_;
}

// -------------------------------------------------------------------

// ClubMembershipDescription

// optional .bgs.protocol.club.v1.MemberId member_id = 1;
inline bool ClubMembershipDescription::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool ClubMembershipDescription::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& ClubMembershipDescription::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& ClubMembershipDescription::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipDescription.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* ClubMembershipDescription::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMembershipDescription.member_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* ClubMembershipDescription::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000001u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* ClubMembershipDescription::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipDescription.member_id)
  return _internal_mutable_member_id();
}
inline void ClubMembershipDescription::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMembershipDescription.member_id)
}

// optional .bgs.protocol.club.v1.ClubDescription club = 2;
inline bool ClubMembershipDescription::_internal_has_club() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || club_ != nullptr);
  return value;
}
inline bool ClubMembershipDescription::has_club() const {
  return _internal_has_club();
}
inline const ::bgs::protocol::club::v1::ClubDescription& ClubMembershipDescription::_internal_club() const {
  const ::bgs::protocol::club::v1::ClubDescription* p = club_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubDescription*>(
      &::bgs::protocol::club::v1::_ClubDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubDescription& ClubMembershipDescription::club() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipDescription.club)
  return _internal_club();
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubMembershipDescription::release_club() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMembershipDescription.club)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubDescription* temp = club_;
  club_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubMembershipDescription::_internal_mutable_club() {
  _has_bits_[0] |= 0x00000002u;
  if (club_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubDescription>(GetArenaNoVirtual());
    club_ = p;
  }
  return club_;
}
inline ::bgs::protocol::club::v1::ClubDescription* ClubMembershipDescription::mutable_club() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipDescription.club)
  return _internal_mutable_club();
}
inline void ClubMembershipDescription::set_allocated_club(::bgs::protocol::club::v1::ClubDescription* club) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(club_);
  }
  if (club) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      club = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, club, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  club_ = club;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMembershipDescription.club)
}

// -------------------------------------------------------------------

// ClubMembershipState

// repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
inline int ClubMembershipState::_internal_description_size() const {
  return description_.size();
}
inline int ClubMembershipState::description_size() const {
  return _internal_description_size();
}
inline void ClubMembershipState::clear_description() {
  description_.Clear();
}
inline ::bgs::protocol::club::v1::ClubMembershipDescription* ClubMembershipState::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipState.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipDescription >*
ClubMembershipState::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubMembershipState.description)
  return &description_;
}
inline const ::bgs::protocol::club::v1::ClubMembershipDescription& ClubMembershipState::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubMembershipDescription& ClubMembershipState::description(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipState.description)
  return _internal_description(index);
}
inline ::bgs::protocol::club::v1::ClubMembershipDescription* ClubMembershipState::_internal_add_description() {
  return description_.Add();
}
inline ::bgs::protocol::club::v1::ClubMembershipDescription* ClubMembershipState::add_description() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubMembershipState.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubMembershipDescription >&
ClubMembershipState::description() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubMembershipState.description)
  return description_;
}

// repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
inline int ClubMembershipState::_internal_invitation_size() const {
  return invitation_.size();
}
inline int ClubMembershipState::invitation_size() const {
  return _internal_invitation_size();
}
inline ::bgs::protocol::club::v1::ClubInvitation* ClubMembershipState::mutable_invitation(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipState.invitation)
  return invitation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation >*
ClubMembershipState::mutable_invitation() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubMembershipState.invitation)
  return &invitation_;
}
inline const ::bgs::protocol::club::v1::ClubInvitation& ClubMembershipState::_internal_invitation(int index) const {
  return invitation_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubInvitation& ClubMembershipState::invitation(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipState.invitation)
  return _internal_invitation(index);
}
inline ::bgs::protocol::club::v1::ClubInvitation* ClubMembershipState::_internal_add_invitation() {
  return invitation_.Add();
}
inline ::bgs::protocol::club::v1::ClubInvitation* ClubMembershipState::add_invitation() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubMembershipState.invitation)
  return _internal_add_invitation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation >&
ClubMembershipState::invitation() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubMembershipState.invitation)
  return invitation_;
}

// optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
inline bool ClubMembershipState::_internal_has_setting() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || setting_ != nullptr);
  return value;
}
inline bool ClubMembershipState::has_setting() const {
  return _internal_has_setting();
}
inline void ClubMembershipState::clear_setting() {
  if (setting_ != nullptr) setting_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::club::v1::ClubSharedSettings& ClubMembershipState::_internal_setting() const {
  const ::bgs::protocol::club::v1::ClubSharedSettings* p = setting_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSharedSettings*>(
      &::bgs::protocol::club::v1::_ClubSharedSettings_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSharedSettings& ClubMembershipState::setting() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipState.setting)
  return _internal_setting();
}
inline ::bgs::protocol::club::v1::ClubSharedSettings* ClubMembershipState::release_setting() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMembershipState.setting)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubSharedSettings* temp = setting_;
  setting_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSharedSettings* ClubMembershipState::_internal_mutable_setting() {
  _has_bits_[0] |= 0x00000001u;
  if (setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSharedSettings>(GetArenaNoVirtual());
    setting_ = p;
  }
  return setting_;
}
inline ::bgs::protocol::club::v1::ClubSharedSettings* ClubMembershipState::mutable_setting() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipState.setting)
  return _internal_mutable_setting();
}
inline void ClubMembershipState::set_allocated_setting(::bgs::protocol::club::v1::ClubSharedSettings* setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete setting_;
  }
  if (setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  setting_ = setting;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMembershipState.setting)
}

// optional .bgs.protocol.ViewMarker mention_view = 4;
inline bool ClubMembershipState::_internal_has_mention_view() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mention_view_ != nullptr);
  return value;
}
inline bool ClubMembershipState::has_mention_view() const {
  return _internal_has_mention_view();
}
inline const ::bgs::protocol::ViewMarker& ClubMembershipState::_internal_mention_view() const {
  const ::bgs::protocol::ViewMarker* p = mention_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ViewMarker*>(
      &::bgs::protocol::_ViewMarker_default_instance_);
}
inline const ::bgs::protocol::ViewMarker& ClubMembershipState::mention_view() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMembershipState.mention_view)
  return _internal_mention_view();
}
inline ::bgs::protocol::ViewMarker* ClubMembershipState::release_mention_view() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMembershipState.mention_view)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::ViewMarker* temp = mention_view_;
  mention_view_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ViewMarker* ClubMembershipState::_internal_mutable_mention_view() {
  _has_bits_[0] |= 0x00000002u;
  if (mention_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ViewMarker>(GetArenaNoVirtual());
    mention_view_ = p;
  }
  return mention_view_;
}
inline ::bgs::protocol::ViewMarker* ClubMembershipState::mutable_mention_view() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMembershipState.mention_view)
  return _internal_mutable_mention_view();
}
inline void ClubMembershipState::set_allocated_mention_view(::bgs::protocol::ViewMarker* mention_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mention_view_);
  }
  if (mention_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mention_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mention_view, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mention_view_ = mention_view;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMembershipState.mention_view)
}

// -------------------------------------------------------------------

// ClubPosition

// repeated uint64 club_id = 1 [packed = true];
inline int ClubPosition::_internal_club_id_size() const {
  return club_id_.size();
}
inline int ClubPosition::club_id_size() const {
  return _internal_club_id_size();
}
inline void ClubPosition::clear_club_id() {
  club_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubPosition::_internal_club_id(int index) const {
  return club_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClubPosition::club_id(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPosition.club_id)
  return _internal_club_id(index);
}
inline void ClubPosition::set_club_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  club_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPosition.club_id)
}
inline void ClubPosition::_internal_add_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  club_id_.Add(value);
}
inline void ClubPosition::add_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_club_id(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubPosition.club_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ClubPosition::_internal_club_id() const {
  return club_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ClubPosition::club_id() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubPosition.club_id)
  return _internal_club_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ClubPosition::_internal_mutable_club_id() {
  return &club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ClubPosition::mutable_club_id() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubPosition.club_id)
  return _internal_mutable_club_id();
}

// -------------------------------------------------------------------

// ClubSharedSettings

// optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
inline bool ClubSharedSettings::_internal_has_club_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || club_position_ != nullptr);
  return value;
}
inline bool ClubSharedSettings::has_club_position() const {
  return _internal_has_club_position();
}
inline void ClubSharedSettings::clear_club_position() {
  if (club_position_ != nullptr) club_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::club::v1::ClubPosition& ClubSharedSettings::_internal_club_position() const {
  const ::bgs::protocol::club::v1::ClubPosition* p = club_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubPosition*>(
      &::bgs::protocol::club::v1::_ClubPosition_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubPosition& ClubSharedSettings::club_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSharedSettings.club_position)
  return _internal_club_position();
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettings::release_club_position() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSharedSettings.club_position)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubPosition* temp = club_position_;
  club_position_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettings::_internal_mutable_club_position() {
  _has_bits_[0] |= 0x00000001u;
  if (club_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubPosition>(GetArenaNoVirtual());
    club_position_ = p;
  }
  return club_position_;
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettings::mutable_club_position() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSharedSettings.club_position)
  return _internal_mutable_club_position();
}
inline void ClubSharedSettings::set_allocated_club_position(::bgs::protocol::club::v1::ClubPosition* club_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete club_position_;
  }
  if (club_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      club_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, club_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  club_position_ = club_position;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSharedSettings.club_position)
}

// -------------------------------------------------------------------

// ClubSharedSettingsOptions

// optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
inline bool ClubSharedSettingsOptions::_internal_has_club_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || club_position_ != nullptr);
  return value;
}
inline bool ClubSharedSettingsOptions::has_club_position() const {
  return _internal_has_club_position();
}
inline void ClubSharedSettingsOptions::clear_club_position() {
  if (club_position_ != nullptr) club_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::club::v1::ClubPosition& ClubSharedSettingsOptions::_internal_club_position() const {
  const ::bgs::protocol::club::v1::ClubPosition* p = club_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubPosition*>(
      &::bgs::protocol::club::v1::_ClubPosition_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubPosition& ClubSharedSettingsOptions::club_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSharedSettingsOptions.club_position)
  return _internal_club_position();
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettingsOptions::release_club_position() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSharedSettingsOptions.club_position)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubPosition* temp = club_position_;
  club_position_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettingsOptions::_internal_mutable_club_position() {
  _has_bits_[0] |= 0x00000001u;
  if (club_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubPosition>(GetArenaNoVirtual());
    club_position_ = p;
  }
  return club_position_;
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettingsOptions::mutable_club_position() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSharedSettingsOptions.club_position)
  return _internal_mutable_club_position();
}
inline void ClubSharedSettingsOptions::set_allocated_club_position(::bgs::protocol::club::v1::ClubPosition* club_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete club_position_;
  }
  if (club_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      club_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, club_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  club_position_ = club_position;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSharedSettingsOptions.club_position)
}

// -------------------------------------------------------------------

// ClubSharedSettingsAssignment

// optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
inline bool ClubSharedSettingsAssignment::_internal_has_club_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || club_position_ != nullptr);
  return value;
}
inline bool ClubSharedSettingsAssignment::has_club_position() const {
  return _internal_has_club_position();
}
inline void ClubSharedSettingsAssignment::clear_club_position() {
  if (club_position_ != nullptr) club_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::club::v1::ClubPosition& ClubSharedSettingsAssignment::_internal_club_position() const {
  const ::bgs::protocol::club::v1::ClubPosition* p = club_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubPosition*>(
      &::bgs::protocol::club::v1::_ClubPosition_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubPosition& ClubSharedSettingsAssignment::club_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSharedSettingsAssignment.club_position)
  return _internal_club_position();
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettingsAssignment::release_club_position() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSharedSettingsAssignment.club_position)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubPosition* temp = club_position_;
  club_position_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettingsAssignment::_internal_mutable_club_position() {
  _has_bits_[0] |= 0x00000001u;
  if (club_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubPosition>(GetArenaNoVirtual());
    club_position_ = p;
  }
  return club_position_;
}
inline ::bgs::protocol::club::v1::ClubPosition* ClubSharedSettingsAssignment::mutable_club_position() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSharedSettingsAssignment.club_position)
  return _internal_mutable_club_position();
}
inline void ClubSharedSettingsAssignment::set_allocated_club_position(::bgs::protocol::club::v1::ClubPosition* club_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete club_position_;
  }
  if (club_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      club_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, club_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  club_position_ = club_position;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSharedSettingsAssignment.club_position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fmembership_5ftypes_2eproto
