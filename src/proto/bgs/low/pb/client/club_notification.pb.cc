// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_notification.proto

#include "bgs/low/pb/client/club_notification.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Club_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubView_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberRemovedAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamAdvanceViewTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamEventTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamTypingIndicator_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscriberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class SubscribeNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeNotification> _instance;
} _SubscribeNotification_default_instance_;
class UnsubscribeNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeNotification> _instance;
} _UnsubscribeNotification_default_instance_;
class StateChangedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateChangedNotification> _instance;
} _StateChangedNotification_default_instance_;
class SettingsChangedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettingsChangedNotification> _instance;
} _SettingsChangedNotification_default_instance_;
class MemberAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberAddedNotification> _instance;
} _MemberAddedNotification_default_instance_;
class MemberRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberRemovedNotification> _instance;
} _MemberRemovedNotification_default_instance_;
class MemberStateChangedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberStateChangedNotification> _instance;
} _MemberStateChangedNotification_default_instance_;
class SubscriberStateChangedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriberStateChangedNotification> _instance;
} _SubscriberStateChangedNotification_default_instance_;
class MemberRoleChangedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberRoleChangedNotification> _instance;
} _MemberRoleChangedNotification_default_instance_;
class InvitationAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvitationAddedNotification> _instance;
} _InvitationAddedNotification_default_instance_;
class InvitationRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvitationRemovedNotification> _instance;
} _InvitationRemovedNotification_default_instance_;
class SuggestionAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuggestionAddedNotification> _instance;
} _SuggestionAddedNotification_default_instance_;
class SuggestionRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuggestionRemovedNotification> _instance;
} _SuggestionRemovedNotification_default_instance_;
class StreamAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamAddedNotification> _instance;
} _StreamAddedNotification_default_instance_;
class StreamRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamRemovedNotification> _instance;
} _StreamRemovedNotification_default_instance_;
class StreamStateChangedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStateChangedNotification> _instance;
} _StreamStateChangedNotification_default_instance_;
class StreamMessageAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMessageAddedNotification> _instance;
} _StreamMessageAddedNotification_default_instance_;
class StreamMessageUpdatedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMessageUpdatedNotification> _instance;
} _StreamMessageUpdatedNotification_default_instance_;
class StreamTypingIndicatorNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamTypingIndicatorNotification> _instance;
} _StreamTypingIndicatorNotification_default_instance_;
class StreamUnreadIndicatorNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamUnreadIndicatorNotification> _instance;
} _StreamUnreadIndicatorNotification_default_instance_;
class StreamAdvanceViewTimeNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamAdvanceViewTimeNotification> _instance;
} _StreamAdvanceViewTimeNotification_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_InvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_InvitationAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::InvitationAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::InvitationAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_InvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_InvitationRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::InvitationRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::InvitationRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_MemberAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_MemberRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_MemberRemovedAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_MemberRoleChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberRoleChangedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberRoleChangedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberRoleChangedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberRoleChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberRoleChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_RoleAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_MemberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MemberStateChangedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MemberStateChangedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MemberStateChangedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_MemberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_SettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SettingsChangedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SettingsChangedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SettingsChangedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubSettingsAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_StateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StateChangedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StateChangedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StateChangedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_StreamAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamAdvanceViewTimeNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamAdvanceViewTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamMessageAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamMessageAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamMessageAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamMessageAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamMessageAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamMessageAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamMessageUpdatedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamMessageUpdatedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamMessageUpdatedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamMessageUpdatedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamMessageUpdatedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamMessageUpdatedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_StreamStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamStateChangedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamStateChangedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamStateChangedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamTypingIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamTypingIndicatorNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamTypingIndicatorNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamTypingIndicatorNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamTypingIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamTypingIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamTypingIndicator_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamUnreadIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamUnreadIndicatorNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamUnreadIndicatorNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamUnreadIndicatorNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamUnreadIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamUnreadIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamEventTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SubscribeNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SubscribeNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SubscribeNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_Club_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_ClubView_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_ClubSettings_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_SubscriberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SubscriberStateChangedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SubscriberStateChangedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SubscriberStateChangedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscriberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubscriberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_SubscriberStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_SuggestionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SuggestionAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SuggestionAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SuggestionAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SuggestionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SuggestionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_SuggestionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SuggestionRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SuggestionRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SuggestionRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SuggestionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SuggestionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UnsubscribeNotification_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UnsubscribeNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UnsubscribeNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnsubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeNotification, club_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeNotification, view_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeNotification, settings_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeNotification, member_),
  0,
  5,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeNotification, club_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StateChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StateChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StateChangedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StateChangedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StateChangedNotification, assignment_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SettingsChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SettingsChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SettingsChangedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SettingsChangedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SettingsChangedNotification, assignment_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAddedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAddedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberAddedNotification, member_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRemovedNotification, member_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateChangedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateChangedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberStateChangedNotification, assignment_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateChangedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateChangedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscriberStateChangedNotification, assignment_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRoleChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRoleChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRoleChangedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRoleChangedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MemberRoleChangedNotification, assignment_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationAddedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationAddedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationAddedNotification, invitation_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationRemovedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationRemovedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationRemovedNotification, invitation_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::InvitationRemovedNotification, reason_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionAddedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionAddedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionAddedNotification, suggestion_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionRemovedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionRemovedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionRemovedNotification, suggestion_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SuggestionRemovedNotification, reason_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAddedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAddedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAddedNotification, stream_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamRemovedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamRemovedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamRemovedNotification, stream_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateChangedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateChangedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateChangedNotification, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateChangedNotification, assignment_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageAddedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageAddedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageAddedNotification, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageAddedNotification, message_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageUpdatedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageUpdatedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageUpdatedNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageUpdatedNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageUpdatedNotification, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessageUpdatedNotification, message_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicatorNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicatorNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicatorNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicatorNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicatorNotification, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicatorNotification, indicator_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamUnreadIndicatorNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamUnreadIndicatorNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamUnreadIndicatorNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamUnreadIndicatorNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamUnreadIndicatorNotification, event_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification, view_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::bgs::protocol::club::v1::SubscribeNotification)},
  { 17, 24, sizeof(::bgs::protocol::club::v1::UnsubscribeNotification)},
  { 26, 34, sizeof(::bgs::protocol::club::v1::StateChangedNotification)},
  { 37, 45, sizeof(::bgs::protocol::club::v1::SettingsChangedNotification)},
  { 48, 56, sizeof(::bgs::protocol::club::v1::MemberAddedNotification)},
  { 59, 67, sizeof(::bgs::protocol::club::v1::MemberRemovedNotification)},
  { 70, 78, sizeof(::bgs::protocol::club::v1::MemberStateChangedNotification)},
  { 81, 89, sizeof(::bgs::protocol::club::v1::SubscriberStateChangedNotification)},
  { 92, 100, sizeof(::bgs::protocol::club::v1::MemberRoleChangedNotification)},
  { 103, 111, sizeof(::bgs::protocol::club::v1::InvitationAddedNotification)},
  { 114, 123, sizeof(::bgs::protocol::club::v1::InvitationRemovedNotification)},
  { 127, 135, sizeof(::bgs::protocol::club::v1::SuggestionAddedNotification)},
  { 138, 147, sizeof(::bgs::protocol::club::v1::SuggestionRemovedNotification)},
  { 151, 159, sizeof(::bgs::protocol::club::v1::StreamAddedNotification)},
  { 162, 170, sizeof(::bgs::protocol::club::v1::StreamRemovedNotification)},
  { 173, 182, sizeof(::bgs::protocol::club::v1::StreamStateChangedNotification)},
  { 186, 195, sizeof(::bgs::protocol::club::v1::StreamMessageAddedNotification)},
  { 199, 208, sizeof(::bgs::protocol::club::v1::StreamMessageUpdatedNotification)},
  { 212, 221, sizeof(::bgs::protocol::club::v1::StreamTypingIndicatorNotification)},
  { 225, 233, sizeof(::bgs::protocol::club::v1::StreamUnreadIndicatorNotification)},
  { 236, 244, sizeof(::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SubscribeNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UnsubscribeNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StateChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SettingsChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberRemovedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberStateChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SubscriberStateChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MemberRoleChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_InvitationAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_InvitationRemovedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SuggestionAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SuggestionRemovedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamRemovedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamStateChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamMessageAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamMessageUpdatedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamTypingIndicatorNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamUnreadIndicatorNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamAdvanceViewTimeNotification_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)bgs/low/pb/client/club_notification.pr"
  "oto\022\024bgs.protocol.club.v1\032\"bgs/low/pb/cl"
  "ient/club_types.proto\032!bgs/low/pb/client"
  "/rpc_types.proto\"\226\002\n\025SubscribeNotificati"
  "on\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.club"
  ".v1.MemberId\022\017\n\007club_id\030\003 \001(\004\022(\n\004club\030\004 "
  "\001(\0132\032.bgs.protocol.club.v1.Club\022,\n\004view\030"
  "\005 \001(\0132\036.bgs.protocol.club.v1.ClubView\0224\n"
  "\010settings\030\n \001(\0132\".bgs.protocol.club.v1.C"
  "lubSettings\022,\n\006member\030\013 \001(\0132\034.bgs.protoc"
  "ol.club.v1.Member\"\\\n\027UnsubscribeNotifica"
  "tion\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.cl"
  "ub.v1.MemberId\022\017\n\007club_id\030\003 \001(\004\"\244\001\n\030Stat"
  "eChangedNotification\0220\n\010agent_id\030\001 \001(\0132\036"
  ".bgs.protocol.club.v1.MemberId\022\017\n\007club_i"
  "d\030\003 \001(\004\022=\n\nassignment\030\005 \001(\0132).bgs.protoc"
  "ol.club.v1.ClubStateAssignment:\006\202\371+\002\030\001\"\252"
  "\001\n\033SettingsChangedNotification\0220\n\010agent_"
  "id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId"
  "\022\017\n\007club_id\030\003 \001(\004\022@\n\nassignment\030\004 \001(\0132,."
  "bgs.protocol.club.v1.ClubSettingsAssignm"
  "ent:\006\202\371+\002\030\001\"\222\001\n\027MemberAddedNotification\022"
  "0\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.club.v1"
  ".MemberId\022\017\n\007club_id\030\003 \001(\004\022,\n\006member\030\004 \003"
  "(\0132\034.bgs.protocol.club.v1.Member:\006\202\371+\002\030\001"
  "\"\245\001\n\031MemberRemovedNotification\0220\n\010agent_"
  "id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId"
  "\022\017\n\007club_id\030\003 \001(\004\022=\n\006member\030\004 \003(\0132-.bgs."
  "protocol.club.v1.MemberRemovedAssignment"
  ":\006\202\371+\002\030\001\"\254\001\n\036MemberStateChangedNotificat"
  "ion\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.clu"
  "b.v1.MemberId\022\017\n\007club_id\030\003 \001(\004\022\?\n\nassign"
  "ment\030\004 \003(\0132+.bgs.protocol.club.v1.Member"
  "StateAssignment:\006\202\371+\002\030\001\"\264\001\n\"SubscriberSt"
  "ateChangedNotification\0220\n\010agent_id\030\001 \001(\013"
  "2\036.bgs.protocol.club.v1.MemberId\022\017\n\007club"
  "_id\030\003 \001(\004\022C\n\nassignment\030\004 \003(\0132/.bgs.prot"
  "ocol.club.v1.SubscriberStateAssignment:\006"
  "\202\371+\002\030\001\"\244\001\n\035MemberRoleChangedNotification"
  "\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.club.v"
  "1.MemberId\022\017\n\007club_id\030\003 \001(\004\0228\n\nassignmen"
  "t\030\004 \003(\0132$.bgs.protocol.club.v1.RoleAssig"
  "nment:\006\202\371+\002\030\001\"\242\001\n\033InvitationAddedNotific"
  "ation\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.c"
  "lub.v1.MemberId\022\017\n\007club_id\030\003 \001(\004\0228\n\ninvi"
  "tation\030\004 \001(\0132$.bgs.protocol.club.v1.Club"
  "Invitation:\006\202\371+\002\030\001\"\334\001\n\035InvitationRemoved"
  "Notification\0220\n\010agent_id\030\001 \001(\0132\036.bgs.pro"
  "tocol.club.v1.MemberId\022\017\n\007club_id\030\003 \001(\004\022"
  "\025\n\rinvitation_id\030\004 \001(\006\022Y\n\006reason\030\005 \001(\0162%"
  ".bgs.protocol.InvitationRemovedReason:\"I"
  "NVITATION_REMOVED_REASON_ACCEPTED:\006\202\371+\002\030"
  "\001\"\242\001\n\033SuggestionAddedNotification\0220\n\010age"
  "nt_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Membe"
  "rId\022\017\n\007club_id\030\003 \001(\004\0228\n\nsuggestion\030\004 \001(\013"
  "2$.bgs.protocol.club.v1.ClubSuggestion:\006"
  "\202\371+\002\030\001\"\334\001\n\035SuggestionRemovedNotification"
  "\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.club.v"
  "1.MemberId\022\017\n\007club_id\030\003 \001(\004\022\025\n\rsuggestio"
  "n_id\030\004 \001(\006\022Y\n\006reason\030\005 \001(\0162%.bgs.protoco"
  "l.SuggestionRemovedReason:\"SUGGESTION_RE"
  "MOVED_REASON_APPROVED:\006\202\371+\002\030\001\"\222\001\n\027Stream"
  "AddedNotification\0220\n\010agent_id\030\001 \001(\0132\036.bg"
  "s.protocol.club.v1.MemberId\022\017\n\007club_id\030\003"
  " \001(\004\022,\n\006stream\030\004 \001(\0132\034.bgs.protocol.club"
  ".v1.Stream:\006\202\371+\002\030\001\"y\n\031StreamRemovedNotif"
  "ication\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol"
  ".club.v1.MemberId\022\017\n\007club_id\030\003 \001(\004\022\021\n\tst"
  "ream_id\030\004 \001(\004:\006\202\371+\002\030\001\"\277\001\n\036StreamStateCha"
  "ngedNotification\0220\n\010agent_id\030\001 \001(\0132\036.bgs"
  ".protocol.club.v1.MemberId\022\017\n\007club_id\030\003 "
  "\001(\004\022\021\n\tstream_id\030\004 \001(\004\022\?\n\nassignment\030\005 \001"
  "(\0132+.bgs.protocol.club.v1.StreamStateAss"
  "ignment:\006\202\371+\002\030\001\"\264\001\n\036StreamMessageAddedNo"
  "tification\0220\n\010agent_id\030\001 \001(\0132\036.bgs.proto"
  "col.club.v1.MemberId\022\017\n\007club_id\030\003 \001(\004\022\021\n"
  "\tstream_id\030\004 \001(\004\0224\n\007message\030\005 \001(\0132#.bgs."
  "protocol.club.v1.StreamMessage:\006\202\371+\002\030\001\"\266"
  "\001\n StreamMessageUpdatedNotification\0220\n\010a"
  "gent_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Mem"
  "berId\022\017\n\007club_id\030\003 \001(\004\022\021\n\tstream_id\030\004 \001("
  "\004\0224\n\007message\030\005 \001(\0132#.bgs.protocol.club.v"
  "1.StreamMessage:\006\202\371+\002\030\001\"\301\001\n!StreamTyping"
  "IndicatorNotification\0220\n\010agent_id\030\001 \001(\0132"
  "\036.bgs.protocol.club.v1.MemberId\022\017\n\007club_"
  "id\030\003 \001(\004\022\021\n\tstream_id\030\004 \001(\004\022>\n\tindicator"
  "\030\005 \003(\0132+.bgs.protocol.club.v1.StreamTypi"
  "ngIndicator:\006\202\371+\002\030\001\"\244\001\n!StreamUnreadIndi"
  "catorNotification\0220\n\010agent_id\030\001 \001(\0132\036.bg"
  "s.protocol.club.v1.MemberId\022\017\n\007club_id\030\003"
  " \001(\004\0224\n\005event\030\004 \001(\0132%.bgs.protocol.club."
  "v1.StreamEventTime:\006\202\371+\002\030\001\"\251\001\n!StreamAdv"
  "anceViewTimeNotification\0220\n\010agent_id\030\001 \001"
  "(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007cl"
  "ub_id\030\003 \001(\004\0229\n\004view\030\004 \003(\0132+.bgs.protocol"
  ".club.v1.StreamAdvanceViewTime:\006\202\371+\002\030\001P\000"
  "P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto_deps[2] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto_sccs[21] = {
  &scc_info_InvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_InvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_MemberAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_MemberRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_MemberRoleChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_MemberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_SettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StreamAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StreamAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StreamMessageAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StreamMessageUpdatedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StreamRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StreamStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StreamTypingIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_StreamUnreadIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_SubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_SubscriberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_SuggestionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_SuggestionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
  &scc_info_UnsubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto, "bgs/low/pb/client/club_notification.proto", 3842,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto_deps, 21, 2,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto, 21, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void SubscribeNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SubscribeNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_SubscribeNotification_default_instance_._instance.get_mutable()->club_ = const_cast< ::bgs::protocol::club::v1::Club*>(
      ::bgs::protocol::club::v1::Club::internal_default_instance());
  ::bgs::protocol::club::v1::_SubscribeNotification_default_instance_._instance.get_mutable()->view_ = const_cast< ::bgs::protocol::club::v1::ClubView*>(
      ::bgs::protocol::club::v1::ClubView::internal_default_instance());
  ::bgs::protocol::club::v1::_SubscribeNotification_default_instance_._instance.get_mutable()->settings_ = const_cast< ::bgs::protocol::club::v1::ClubSettings*>(
      ::bgs::protocol::club::v1::ClubSettings::internal_default_instance());
  ::bgs::protocol::club::v1::_SubscribeNotification_default_instance_._instance.get_mutable()->member_ = const_cast< ::bgs::protocol::club::v1::Member*>(
      ::bgs::protocol::club::v1::Member::internal_default_instance());
}
class SubscribeNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SubscribeNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::bgs::protocol::club::v1::Club& club(const SubscribeNotification* msg);
  static void set_has_club(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::ClubView& view(const SubscribeNotification* msg);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubSettings& settings(const SubscribeNotification* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::Member& member(const SubscribeNotification* msg);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SubscribeNotification::_Internal::agent_id(const SubscribeNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::Club&
SubscribeNotification::_Internal::club(const SubscribeNotification* msg) {
  return *msg->club_;
}
const ::bgs::protocol::club::v1::ClubView&
SubscribeNotification::_Internal::view(const SubscribeNotification* msg) {
  return *msg->view_;
}
const ::bgs::protocol::club::v1::ClubSettings&
SubscribeNotification::_Internal::settings(const SubscribeNotification* msg) {
  return *msg->settings_;
}
const ::bgs::protocol::club::v1::Member&
SubscribeNotification::_Internal::member(const SubscribeNotification* msg) {
  return *msg->member_;
}
void SubscribeNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SubscribeNotification::clear_club() {
  if (club_ != nullptr) club_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SubscribeNotification::clear_view() {
  if (view_ != nullptr) view_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SubscribeNotification::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SubscribeNotification::clear_member() {
  if (member_ != nullptr) member_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
SubscribeNotification::SubscribeNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SubscribeNotification)
}
SubscribeNotification::SubscribeNotification(const SubscribeNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_club()) {
    club_ = new ::bgs::protocol::club::v1::Club(*from.club_);
  } else {
    club_ = nullptr;
  }
  if (from._internal_has_view()) {
    view_ = new ::bgs::protocol::club::v1::ClubView(*from.view_);
  } else {
    view_ = nullptr;
  }
  if (from._internal_has_settings()) {
    settings_ = new ::bgs::protocol::club::v1::ClubSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_member()) {
    member_ = new ::bgs::protocol::club::v1::Member(*from.member_);
  } else {
    member_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SubscribeNotification)
}

void SubscribeNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

SubscribeNotification::~SubscribeNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SubscribeNotification)
  SharedDtor();
}

void SubscribeNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete club_;
  if (this != internal_default_instance()) delete view_;
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete member_;
}

void SubscribeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeNotification& SubscribeNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void SubscribeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SubscribeNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(club_ != nullptr);
      club_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(view_ != nullptr);
      view_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(member_ != nullptr);
      member_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.Club club = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_club(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubView view = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSettings settings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.Member member = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SubscribeNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.Club club = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::club(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubView view = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::view(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSettings settings = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::settings(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.Member member = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::member(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SubscribeNotification)
  return target;
}

size_t SubscribeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SubscribeNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.Club club = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *club_);
    }

    // optional .bgs.protocol.club.v1.ClubView view = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *view_);
    }

    // optional .bgs.protocol.club.v1.ClubSettings settings = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional .bgs.protocol.club.v1.Member member = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SubscribeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SubscribeNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SubscribeNotification)
    MergeFrom(*source);
  }
}

void SubscribeNotification::MergeFrom(const SubscribeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SubscribeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_club()->::bgs::protocol::club::v1::Club::MergeFrom(from._internal_club());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_view()->::bgs::protocol::club::v1::ClubView::MergeFrom(from._internal_view());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_settings()->::bgs::protocol::club::v1::ClubSettings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_member()->::bgs::protocol::club::v1::Member::MergeFrom(from._internal_member());
    }
    if (cached_has_bits & 0x00000020u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SubscribeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeNotification::CopyFrom(const SubscribeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SubscribeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_club()) {
    if (!club_->IsInitialized()) return false;
  }
  if (_internal_has_member()) {
    if (!member_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeNotification::InternalSwap(SubscribeNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_, other->club_);
  swap(view_, other->view_);
  swap(settings_, other->settings_);
  swap(member_, other->member_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UnsubscribeNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class UnsubscribeNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UnsubscribeNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UnsubscribeNotification::_Internal::agent_id(const UnsubscribeNotification* msg) {
  return *msg->agent_id_;
}
void UnsubscribeNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UnsubscribeNotification::UnsubscribeNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UnsubscribeNotification)
}
UnsubscribeNotification::UnsubscribeNotification(const UnsubscribeNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UnsubscribeNotification)
}

void UnsubscribeNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

UnsubscribeNotification::~UnsubscribeNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UnsubscribeNotification)
  SharedDtor();
}

void UnsubscribeNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void UnsubscribeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeNotification& UnsubscribeNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UnsubscribeNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnsubscribeNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UnsubscribeNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UnsubscribeNotification)
  return target;
}

size_t UnsubscribeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UnsubscribeNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UnsubscribeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UnsubscribeNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UnsubscribeNotification)
    MergeFrom(*source);
  }
}

void UnsubscribeNotification::MergeFrom(const UnsubscribeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UnsubscribeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsubscribeNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UnsubscribeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeNotification::CopyFrom(const UnsubscribeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UnsubscribeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeNotification::InternalSwap(UnsubscribeNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateChangedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StateChangedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_StateChangedNotification_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::bgs::protocol::club::v1::ClubStateAssignment*>(
      ::bgs::protocol::club::v1::ClubStateAssignment::internal_default_instance());
}
class StateChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StateChangedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StateChangedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubStateAssignment& assignment(const StateChangedNotification* msg);
  static void set_has_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StateChangedNotification::_Internal::agent_id(const StateChangedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubStateAssignment&
StateChangedNotification::_Internal::assignment(const StateChangedNotification* msg) {
  return *msg->assignment_;
}
void StateChangedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StateChangedNotification::clear_assignment() {
  if (assignment_ != nullptr) assignment_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StateChangedNotification::StateChangedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StateChangedNotification)
}
StateChangedNotification::StateChangedNotification(const StateChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_assignment()) {
    assignment_ = new ::bgs::protocol::club::v1::ClubStateAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StateChangedNotification)
}

void StateChangedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

StateChangedNotification::~StateChangedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StateChangedNotification)
  SharedDtor();
}

void StateChangedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete assignment_;
}

void StateChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateChangedNotification& StateChangedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StateChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StateChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(assignment_ != nullptr);
      assignment_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StateChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubStateAssignment assignment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateChangedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StateChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubStateAssignment assignment = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StateChangedNotification)
  return target;
}

size_t StateChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StateChangedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubStateAssignment assignment = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assignment_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChangedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StateChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChangedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateChangedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StateChangedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StateChangedNotification)
    MergeFrom(*source);
  }
}

void StateChangedNotification::MergeFrom(const StateChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StateChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_assignment()->::bgs::protocol::club::v1::ClubStateAssignment::MergeFrom(from._internal_assignment());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateChangedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StateChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChangedNotification::CopyFrom(const StateChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StateChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChangedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_assignment()) {
    if (!assignment_->IsInitialized()) return false;
  }
  return true;
}

void StateChangedNotification::InternalSwap(StateChangedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(assignment_, other->assignment_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChangedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SettingsChangedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SettingsChangedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_SettingsChangedNotification_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::bgs::protocol::club::v1::ClubSettingsAssignment*>(
      ::bgs::protocol::club::v1::ClubSettingsAssignment::internal_default_instance());
}
class SettingsChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SettingsChangedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SettingsChangedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubSettingsAssignment& assignment(const SettingsChangedNotification* msg);
  static void set_has_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SettingsChangedNotification::_Internal::agent_id(const SettingsChangedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubSettingsAssignment&
SettingsChangedNotification::_Internal::assignment(const SettingsChangedNotification* msg) {
  return *msg->assignment_;
}
void SettingsChangedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SettingsChangedNotification::clear_assignment() {
  if (assignment_ != nullptr) assignment_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SettingsChangedNotification::SettingsChangedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SettingsChangedNotification)
}
SettingsChangedNotification::SettingsChangedNotification(const SettingsChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_assignment()) {
    assignment_ = new ::bgs::protocol::club::v1::ClubSettingsAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SettingsChangedNotification)
}

void SettingsChangedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

SettingsChangedNotification::~SettingsChangedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SettingsChangedNotification)
  SharedDtor();
}

void SettingsChangedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete assignment_;
}

void SettingsChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsChangedNotification& SettingsChangedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettingsChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void SettingsChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SettingsChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(assignment_ != nullptr);
      assignment_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SettingsChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSettingsAssignment assignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettingsChangedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SettingsChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSettingsAssignment assignment = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SettingsChangedNotification)
  return target;
}

size_t SettingsChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SettingsChangedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubSettingsAssignment assignment = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assignment_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsChangedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SettingsChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsChangedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettingsChangedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SettingsChangedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SettingsChangedNotification)
    MergeFrom(*source);
  }
}

void SettingsChangedNotification::MergeFrom(const SettingsChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SettingsChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_assignment()->::bgs::protocol::club::v1::ClubSettingsAssignment::MergeFrom(from._internal_assignment());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SettingsChangedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SettingsChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsChangedNotification::CopyFrom(const SettingsChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SettingsChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsChangedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SettingsChangedNotification::InternalSwap(SettingsChangedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(assignment_, other->assignment_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsChangedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberAddedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberAddedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const MemberAddedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberAddedNotification::_Internal::agent_id(const MemberAddedNotification* msg) {
  return *msg->agent_id_;
}
void MemberAddedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MemberAddedNotification::clear_member() {
  member_.Clear();
}
MemberAddedNotification::MemberAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberAddedNotification)
}
MemberAddedNotification::MemberAddedNotification(const MemberAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberAddedNotification)
}

void MemberAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

MemberAddedNotification::~MemberAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberAddedNotification)
  SharedDtor();
}

void MemberAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void MemberAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberAddedNotification& MemberAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void MemberAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.Member member = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // repeated .bgs.protocol.club.v1.Member member = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_member(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberAddedNotification)
  return target;
}

size_t MemberAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.Member member = 4;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberAddedNotification)
    MergeFrom(*source);
  }
}

void MemberAddedNotification::MergeFrom(const MemberAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAddedNotification::CopyFrom(const MemberAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAddedNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(member_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void MemberAddedNotification::InternalSwap(MemberAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.InternalSwap(&other->member_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberRemovedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const MemberRemovedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberRemovedNotification::_Internal::agent_id(const MemberRemovedNotification* msg) {
  return *msg->agent_id_;
}
void MemberRemovedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MemberRemovedNotification::clear_member() {
  member_.Clear();
}
MemberRemovedNotification::MemberRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberRemovedNotification)
}
MemberRemovedNotification::MemberRemovedNotification(const MemberRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberRemovedNotification)
}

void MemberRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

MemberRemovedNotification::~MemberRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberRemovedNotification)
  SharedDtor();
}

void MemberRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void MemberRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberRemovedNotification& MemberRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void MemberRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.MemberRemovedAssignment member = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // repeated .bgs.protocol.club.v1.MemberRemovedAssignment member = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_member(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberRemovedNotification)
  return target;
}

size_t MemberRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.MemberRemovedAssignment member = 4;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberRemovedNotification)
    MergeFrom(*source);
  }
}

void MemberRemovedNotification::MergeFrom(const MemberRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRemovedNotification::CopyFrom(const MemberRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemovedNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(member_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void MemberRemovedNotification::InternalSwap(MemberRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.InternalSwap(&other->member_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberStateChangedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberStateChangedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberStateChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberStateChangedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const MemberStateChangedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberStateChangedNotification::_Internal::agent_id(const MemberStateChangedNotification* msg) {
  return *msg->agent_id_;
}
void MemberStateChangedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MemberStateChangedNotification::clear_assignment() {
  assignment_.Clear();
}
MemberStateChangedNotification::MemberStateChangedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberStateChangedNotification)
}
MemberStateChangedNotification::MemberStateChangedNotification(const MemberStateChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      assignment_(from.assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberStateChangedNotification)
}

void MemberStateChangedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

MemberStateChangedNotification::~MemberStateChangedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberStateChangedNotification)
  SharedDtor();
}

void MemberStateChangedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void MemberStateChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberStateChangedNotification& MemberStateChangedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void MemberStateChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberStateChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assignment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberStateChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.MemberStateAssignment assignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberStateChangedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberStateChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // repeated .bgs.protocol.club.v1.MemberStateAssignment assignment = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assignment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_assignment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberStateChangedNotification)
  return target;
}

size_t MemberStateChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberStateChangedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.MemberStateAssignment assignment = 4;
  total_size += 1UL * this->_internal_assignment_size();
  for (const auto& msg : this->assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberStateChangedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberStateChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberStateChangedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberStateChangedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberStateChangedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberStateChangedNotification)
    MergeFrom(*source);
  }
}

void MemberStateChangedNotification::MergeFrom(const MemberStateChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberStateChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assignment_.MergeFrom(from.assignment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberStateChangedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberStateChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberStateChangedNotification::CopyFrom(const MemberStateChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberStateChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberStateChangedNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(assignment_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void MemberStateChangedNotification::InternalSwap(MemberStateChangedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assignment_.InternalSwap(&other->assignment_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberStateChangedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriberStateChangedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SubscriberStateChangedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class SubscriberStateChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriberStateChangedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SubscriberStateChangedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SubscriberStateChangedNotification::_Internal::agent_id(const SubscriberStateChangedNotification* msg) {
  return *msg->agent_id_;
}
void SubscriberStateChangedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SubscriberStateChangedNotification::clear_assignment() {
  assignment_.Clear();
}
SubscriberStateChangedNotification::SubscriberStateChangedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SubscriberStateChangedNotification)
}
SubscriberStateChangedNotification::SubscriberStateChangedNotification(const SubscriberStateChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      assignment_(from.assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SubscriberStateChangedNotification)
}

void SubscriberStateChangedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

SubscriberStateChangedNotification::~SubscriberStateChangedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  SharedDtor();
}

void SubscriberStateChangedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void SubscriberStateChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriberStateChangedNotification& SubscriberStateChangedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriberStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void SubscriberStateChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assignment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscriberStateChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.SubscriberStateAssignment assignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriberStateChangedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // repeated .bgs.protocol.club.v1.SubscriberStateAssignment assignment = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assignment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_assignment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  return target;
}

size_t SubscriberStateChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.SubscriberStateAssignment assignment = 4;
  total_size += 1UL * this->_internal_assignment_size();
  for (const auto& msg : this->assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberStateChangedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberStateChangedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriberStateChangedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SubscriberStateChangedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SubscriberStateChangedNotification)
    MergeFrom(*source);
  }
}

void SubscriberStateChangedNotification::MergeFrom(const SubscriberStateChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assignment_.MergeFrom(from.assignment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriberStateChangedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberStateChangedNotification::CopyFrom(const SubscriberStateChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SubscriberStateChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberStateChangedNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(assignment_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscriberStateChangedNotification::InternalSwap(SubscriberStateChangedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assignment_.InternalSwap(&other->assignment_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberStateChangedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberRoleChangedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_MemberRoleChangedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class MemberRoleChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberRoleChangedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const MemberRoleChangedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
MemberRoleChangedNotification::_Internal::agent_id(const MemberRoleChangedNotification* msg) {
  return *msg->agent_id_;
}
void MemberRoleChangedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MemberRoleChangedNotification::clear_assignment() {
  assignment_.Clear();
}
MemberRoleChangedNotification::MemberRoleChangedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberRoleChangedNotification)
}
MemberRoleChangedNotification::MemberRoleChangedNotification(const MemberRoleChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      assignment_(from.assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberRoleChangedNotification)
}

void MemberRoleChangedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberRoleChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

MemberRoleChangedNotification::~MemberRoleChangedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberRoleChangedNotification)
  SharedDtor();
}

void MemberRoleChangedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void MemberRoleChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberRoleChangedNotification& MemberRoleChangedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberRoleChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void MemberRoleChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MemberRoleChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assignment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberRoleChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.RoleAssignment assignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberRoleChangedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberRoleChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // repeated .bgs.protocol.club.v1.RoleAssignment assignment = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assignment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_assignment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberRoleChangedNotification)
  return target;
}

size_t MemberRoleChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MemberRoleChangedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.RoleAssignment assignment = 4;
  total_size += 1UL * this->_internal_assignment_size();
  for (const auto& msg : this->assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberRoleChangedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MemberRoleChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberRoleChangedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberRoleChangedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MemberRoleChangedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MemberRoleChangedNotification)
    MergeFrom(*source);
  }
}

void MemberRoleChangedNotification::MergeFrom(const MemberRoleChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MemberRoleChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assignment_.MergeFrom(from.assignment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberRoleChangedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MemberRoleChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRoleChangedNotification::CopyFrom(const MemberRoleChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MemberRoleChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRoleChangedNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(assignment_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void MemberRoleChangedNotification::InternalSwap(MemberRoleChangedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assignment_.InternalSwap(&other->assignment_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberRoleChangedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvitationAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_InvitationAddedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_InvitationAddedNotification_default_instance_._instance.get_mutable()->invitation_ = const_cast< ::bgs::protocol::club::v1::ClubInvitation*>(
      ::bgs::protocol::club::v1::ClubInvitation::internal_default_instance());
}
class InvitationAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<InvitationAddedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const InvitationAddedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubInvitation& invitation(const InvitationAddedNotification* msg);
  static void set_has_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
InvitationAddedNotification::_Internal::agent_id(const InvitationAddedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubInvitation&
InvitationAddedNotification::_Internal::invitation(const InvitationAddedNotification* msg) {
  return *msg->invitation_;
}
void InvitationAddedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InvitationAddedNotification::clear_invitation() {
  if (invitation_ != nullptr) invitation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
InvitationAddedNotification::InvitationAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.InvitationAddedNotification)
}
InvitationAddedNotification::InvitationAddedNotification(const InvitationAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_invitation()) {
    invitation_ = new ::bgs::protocol::club::v1::ClubInvitation(*from.invitation_);
  } else {
    invitation_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.InvitationAddedNotification)
}

void InvitationAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

InvitationAddedNotification::~InvitationAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.InvitationAddedNotification)
  SharedDtor();
}

void InvitationAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete invitation_;
}

void InvitationAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvitationAddedNotification& InvitationAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvitationAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void InvitationAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.InvitationAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(invitation_ != nullptr);
      invitation_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InvitationAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubInvitation invitation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvitationAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.InvitationAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubInvitation invitation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::invitation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.InvitationAddedNotification)
  return target;
}

size_t InvitationAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.InvitationAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubInvitation invitation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *invitation_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitationAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.InvitationAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvitationAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.InvitationAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.InvitationAddedNotification)
    MergeFrom(*source);
  }
}

void InvitationAddedNotification::MergeFrom(const InvitationAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.InvitationAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_invitation()->::bgs::protocol::club::v1::ClubInvitation::MergeFrom(from._internal_invitation());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InvitationAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.InvitationAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationAddedNotification::CopyFrom(const InvitationAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.InvitationAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationAddedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_invitation()) {
    if (!invitation_->IsInitialized()) return false;
  }
  return true;
}

void InvitationAddedNotification::InternalSwap(InvitationAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(invitation_, other->invitation_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvitationAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvitationRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_InvitationRemovedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class InvitationRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<InvitationRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const InvitationRemovedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
InvitationRemovedNotification::_Internal::agent_id(const InvitationRemovedNotification* msg) {
  return *msg->agent_id_;
}
void InvitationRemovedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
InvitationRemovedNotification::InvitationRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.InvitationRemovedNotification)
}
InvitationRemovedNotification::InvitationRemovedNotification(const InvitationRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.InvitationRemovedNotification)
}

void InvitationRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(reason_));
}

InvitationRemovedNotification::~InvitationRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.InvitationRemovedNotification)
  SharedDtor();
}

void InvitationRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void InvitationRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvitationRemovedNotification& InvitationRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void InvitationRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.InvitationRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InvitationRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invitation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.InvitationRemovedReason reason = 5 [default = INVITATION_REMOVED_REASON_ACCEPTED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::InvitationRemovedReason_IsValid(val))) {
            _internal_set_reason(static_cast<::bgs::protocol::InvitationRemovedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvitationRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.InvitationRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional fixed64 invitation_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_invitation_id(), target);
  }

  // optional .bgs.protocol.InvitationRemovedReason reason = 5 [default = INVITATION_REMOVED_REASON_ACCEPTED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.InvitationRemovedNotification)
  return target;
}

size_t InvitationRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.InvitationRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 invitation_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .bgs.protocol.InvitationRemovedReason reason = 5 [default = INVITATION_REMOVED_REASON_ACCEPTED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitationRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.InvitationRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvitationRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.InvitationRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.InvitationRemovedNotification)
    MergeFrom(*source);
  }
}

void InvitationRemovedNotification::MergeFrom(const InvitationRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.InvitationRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      invitation_id_ = from.invitation_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InvitationRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.InvitationRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationRemovedNotification::CopyFrom(const InvitationRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.InvitationRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationRemovedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void InvitationRemovedNotification::InternalSwap(InvitationRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(invitation_id_, other->invitation_id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvitationRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SuggestionAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SuggestionAddedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_SuggestionAddedNotification_default_instance_._instance.get_mutable()->suggestion_ = const_cast< ::bgs::protocol::club::v1::ClubSuggestion*>(
      ::bgs::protocol::club::v1::ClubSuggestion::internal_default_instance());
}
class SuggestionAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SuggestionAddedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SuggestionAddedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubSuggestion& suggestion(const SuggestionAddedNotification* msg);
  static void set_has_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SuggestionAddedNotification::_Internal::agent_id(const SuggestionAddedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubSuggestion&
SuggestionAddedNotification::_Internal::suggestion(const SuggestionAddedNotification* msg) {
  return *msg->suggestion_;
}
void SuggestionAddedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SuggestionAddedNotification::clear_suggestion() {
  if (suggestion_ != nullptr) suggestion_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SuggestionAddedNotification::SuggestionAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SuggestionAddedNotification)
}
SuggestionAddedNotification::SuggestionAddedNotification(const SuggestionAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_suggestion()) {
    suggestion_ = new ::bgs::protocol::club::v1::ClubSuggestion(*from.suggestion_);
  } else {
    suggestion_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SuggestionAddedNotification)
}

void SuggestionAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SuggestionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

SuggestionAddedNotification::~SuggestionAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SuggestionAddedNotification)
  SharedDtor();
}

void SuggestionAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete suggestion_;
}

void SuggestionAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuggestionAddedNotification& SuggestionAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuggestionAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void SuggestionAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SuggestionAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(suggestion_ != nullptr);
      suggestion_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SuggestionAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuggestionAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SuggestionAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::suggestion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SuggestionAddedNotification)
  return target;
}

size_t SuggestionAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SuggestionAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suggestion_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuggestionAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SuggestionAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggestionAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuggestionAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SuggestionAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SuggestionAddedNotification)
    MergeFrom(*source);
  }
}

void SuggestionAddedNotification::MergeFrom(const SuggestionAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SuggestionAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_suggestion()->::bgs::protocol::club::v1::ClubSuggestion::MergeFrom(from._internal_suggestion());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggestionAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SuggestionAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggestionAddedNotification::CopyFrom(const SuggestionAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SuggestionAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestionAddedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_suggestion()) {
    if (!suggestion_->IsInitialized()) return false;
  }
  return true;
}

void SuggestionAddedNotification::InternalSwap(SuggestionAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(suggestion_, other->suggestion_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuggestionAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SuggestionRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SuggestionRemovedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class SuggestionRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SuggestionRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SuggestionRemovedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_suggestion_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SuggestionRemovedNotification::_Internal::agent_id(const SuggestionRemovedNotification* msg) {
  return *msg->agent_id_;
}
void SuggestionRemovedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SuggestionRemovedNotification::SuggestionRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SuggestionRemovedNotification)
}
SuggestionRemovedNotification::SuggestionRemovedNotification(const SuggestionRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SuggestionRemovedNotification)
}

void SuggestionRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SuggestionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(reason_));
}

SuggestionRemovedNotification::~SuggestionRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SuggestionRemovedNotification)
  SharedDtor();
}

void SuggestionRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void SuggestionRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuggestionRemovedNotification& SuggestionRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuggestionRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void SuggestionRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SuggestionRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SuggestionRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 suggestion_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_suggestion_id(&has_bits);
          suggestion_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.SuggestionRemovedReason reason = 5 [default = SUGGESTION_REMOVED_REASON_APPROVED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::SuggestionRemovedReason_IsValid(val))) {
            _internal_set_reason(static_cast<::bgs::protocol::SuggestionRemovedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuggestionRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SuggestionRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional fixed64 suggestion_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_suggestion_id(), target);
  }

  // optional .bgs.protocol.SuggestionRemovedReason reason = 5 [default = SUGGESTION_REMOVED_REASON_APPROVED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SuggestionRemovedNotification)
  return target;
}

size_t SuggestionRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SuggestionRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 suggestion_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .bgs.protocol.SuggestionRemovedReason reason = 5 [default = SUGGESTION_REMOVED_REASON_APPROVED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuggestionRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SuggestionRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SuggestionRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuggestionRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SuggestionRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SuggestionRemovedNotification)
    MergeFrom(*source);
  }
}

void SuggestionRemovedNotification::MergeFrom(const SuggestionRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SuggestionRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      suggestion_id_ = from.suggestion_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggestionRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SuggestionRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggestionRemovedNotification::CopyFrom(const SuggestionRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SuggestionRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestionRemovedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SuggestionRemovedNotification::InternalSwap(SuggestionRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(suggestion_id_, other->suggestion_id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuggestionRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamAddedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamAddedNotification_default_instance_._instance.get_mutable()->stream_ = const_cast< ::bgs::protocol::club::v1::Stream*>(
      ::bgs::protocol::club::v1::Stream::internal_default_instance());
}
class StreamAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamAddedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamAddedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::Stream& stream(const StreamAddedNotification* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamAddedNotification::_Internal::agent_id(const StreamAddedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::Stream&
StreamAddedNotification::_Internal::stream(const StreamAddedNotification* msg) {
  return *msg->stream_;
}
void StreamAddedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamAddedNotification::clear_stream() {
  if (stream_ != nullptr) stream_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StreamAddedNotification::StreamAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamAddedNotification)
}
StreamAddedNotification::StreamAddedNotification(const StreamAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_stream()) {
    stream_ = new ::bgs::protocol::club::v1::Stream(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamAddedNotification)
}

void StreamAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

StreamAddedNotification::~StreamAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamAddedNotification)
  SharedDtor();
}

void StreamAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete stream_;
}

void StreamAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamAddedNotification& StreamAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StreamAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stream_ != nullptr);
      stream_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.Stream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.Stream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamAddedNotification)
  return target;
}

size_t StreamAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.Stream stream = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamAddedNotification)
    MergeFrom(*source);
  }
}

void StreamAddedNotification::MergeFrom(const StreamAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stream()->::bgs::protocol::club::v1::Stream::MergeFrom(from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAddedNotification::CopyFrom(const StreamAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAddedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamAddedNotification::InternalSwap(StreamAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(stream_, other->stream_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamRemovedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class StreamRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamRemovedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamRemovedNotification::_Internal::agent_id(const StreamRemovedNotification* msg) {
  return *msg->agent_id_;
}
void StreamRemovedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StreamRemovedNotification::StreamRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamRemovedNotification)
}
StreamRemovedNotification::StreamRemovedNotification(const StreamRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamRemovedNotification)
}

void StreamRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

StreamRemovedNotification::~StreamRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamRemovedNotification)
  SharedDtor();
}

void StreamRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void StreamRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamRemovedNotification& StreamRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamRemovedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StreamRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamRemovedNotification)
  return target;
}

size_t StreamRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamRemovedNotification)
    MergeFrom(*source);
  }
}

void StreamRemovedNotification::MergeFrom(const StreamRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamRemovedNotification::CopyFrom(const StreamRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamRemovedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamRemovedNotification::InternalSwap(StreamRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamStateChangedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamStateChangedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamStateChangedNotification_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::bgs::protocol::club::v1::StreamStateAssignment*>(
      ::bgs::protocol::club::v1::StreamStateAssignment::internal_default_instance());
}
class StreamStateChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamStateChangedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamStateChangedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::StreamStateAssignment& assignment(const StreamStateChangedNotification* msg);
  static void set_has_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamStateChangedNotification::_Internal::agent_id(const StreamStateChangedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::StreamStateAssignment&
StreamStateChangedNotification::_Internal::assignment(const StreamStateChangedNotification* msg) {
  return *msg->assignment_;
}
void StreamStateChangedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamStateChangedNotification::clear_assignment() {
  if (assignment_ != nullptr) assignment_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StreamStateChangedNotification::StreamStateChangedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamStateChangedNotification)
}
StreamStateChangedNotification::StreamStateChangedNotification(const StreamStateChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_assignment()) {
    assignment_ = new ::bgs::protocol::club::v1::StreamStateAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamStateChangedNotification)
}

void StreamStateChangedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

StreamStateChangedNotification::~StreamStateChangedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamStateChangedNotification)
  SharedDtor();
}

void StreamStateChangedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete assignment_;
}

void StreamStateChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStateChangedNotification& StreamStateChangedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStateChangedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StreamStateChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamStateChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(assignment_ != nullptr);
      assignment_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamStateChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamStateAssignment assignment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStateChangedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamStateChangedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.club.v1.StreamStateAssignment assignment = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamStateChangedNotification)
  return target;
}

size_t StreamStateChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamStateChangedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.StreamStateAssignment assignment = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assignment_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStateChangedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamStateChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStateChangedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStateChangedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamStateChangedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamStateChangedNotification)
    MergeFrom(*source);
  }
}

void StreamStateChangedNotification::MergeFrom(const StreamStateChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamStateChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_assignment()->::bgs::protocol::club::v1::StreamStateAssignment::MergeFrom(from._internal_assignment());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamStateChangedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamStateChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStateChangedNotification::CopyFrom(const StreamStateChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamStateChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateChangedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamStateChangedNotification::InternalSwap(StreamStateChangedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(assignment_, other->assignment_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStateChangedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMessageAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamMessageAddedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamMessageAddedNotification_default_instance_._instance.get_mutable()->message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(
      ::bgs::protocol::club::v1::StreamMessage::internal_default_instance());
}
class StreamMessageAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMessageAddedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamMessageAddedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::StreamMessage& message(const StreamMessageAddedNotification* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamMessageAddedNotification::_Internal::agent_id(const StreamMessageAddedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::StreamMessage&
StreamMessageAddedNotification::_Internal::message(const StreamMessageAddedNotification* msg) {
  return *msg->message_;
}
void StreamMessageAddedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamMessageAddedNotification::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StreamMessageAddedNotification::StreamMessageAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMessageAddedNotification)
}
StreamMessageAddedNotification::StreamMessageAddedNotification(const StreamMessageAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::bgs::protocol::club::v1::StreamMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMessageAddedNotification)
}

void StreamMessageAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMessageAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

StreamMessageAddedNotification::~StreamMessageAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMessageAddedNotification)
  SharedDtor();
}

void StreamMessageAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete message_;
}

void StreamMessageAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMessageAddedNotification& StreamMessageAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMessageAddedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StreamMessageAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamMessageAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_ != nullptr);
      message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamMessageAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamMessage message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessageAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamMessageAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.club.v1.StreamMessage message = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamMessageAddedNotification)
  return target;
}

size_t StreamMessageAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamMessageAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.StreamMessage message = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMessageAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamMessageAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMessageAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMessageAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamMessageAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamMessageAddedNotification)
    MergeFrom(*source);
  }
}

void StreamMessageAddedNotification::MergeFrom(const StreamMessageAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamMessageAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message()->::bgs::protocol::club::v1::StreamMessage::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamMessageAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamMessageAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessageAddedNotification::CopyFrom(const StreamMessageAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamMessageAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessageAddedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void StreamMessageAddedNotification::InternalSwap(StreamMessageAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(message_, other->message_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessageAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMessageUpdatedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamMessageUpdatedNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamMessageUpdatedNotification_default_instance_._instance.get_mutable()->message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(
      ::bgs::protocol::club::v1::StreamMessage::internal_default_instance());
}
class StreamMessageUpdatedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMessageUpdatedNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamMessageUpdatedNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::StreamMessage& message(const StreamMessageUpdatedNotification* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamMessageUpdatedNotification::_Internal::agent_id(const StreamMessageUpdatedNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::StreamMessage&
StreamMessageUpdatedNotification::_Internal::message(const StreamMessageUpdatedNotification* msg) {
  return *msg->message_;
}
void StreamMessageUpdatedNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamMessageUpdatedNotification::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StreamMessageUpdatedNotification::StreamMessageUpdatedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
}
StreamMessageUpdatedNotification::StreamMessageUpdatedNotification(const StreamMessageUpdatedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::bgs::protocol::club::v1::StreamMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
}

void StreamMessageUpdatedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMessageUpdatedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

StreamMessageUpdatedNotification::~StreamMessageUpdatedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  SharedDtor();
}

void StreamMessageUpdatedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete message_;
}

void StreamMessageUpdatedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMessageUpdatedNotification& StreamMessageUpdatedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMessageUpdatedNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StreamMessageUpdatedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_ != nullptr);
      message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamMessageUpdatedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamMessage message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessageUpdatedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.club.v1.StreamMessage message = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  return target;
}

size_t StreamMessageUpdatedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.StreamMessage message = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMessageUpdatedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMessageUpdatedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMessageUpdatedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
    MergeFrom(*source);
  }
}

void StreamMessageUpdatedNotification::MergeFrom(const StreamMessageUpdatedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message()->::bgs::protocol::club::v1::StreamMessage::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamMessageUpdatedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessageUpdatedNotification::CopyFrom(const StreamMessageUpdatedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessageUpdatedNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void StreamMessageUpdatedNotification::InternalSwap(StreamMessageUpdatedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(message_, other->message_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessageUpdatedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamTypingIndicatorNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamTypingIndicatorNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class StreamTypingIndicatorNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamTypingIndicatorNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamTypingIndicatorNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamTypingIndicatorNotification::_Internal::agent_id(const StreamTypingIndicatorNotification* msg) {
  return *msg->agent_id_;
}
void StreamTypingIndicatorNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamTypingIndicatorNotification::clear_indicator() {
  indicator_.Clear();
}
StreamTypingIndicatorNotification::StreamTypingIndicatorNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
}
StreamTypingIndicatorNotification::StreamTypingIndicatorNotification(const StreamTypingIndicatorNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      indicator_(from.indicator_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
}

void StreamTypingIndicatorNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamTypingIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

StreamTypingIndicatorNotification::~StreamTypingIndicatorNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  SharedDtor();
}

void StreamTypingIndicatorNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void StreamTypingIndicatorNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamTypingIndicatorNotification& StreamTypingIndicatorNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamTypingIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StreamTypingIndicatorNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indicator_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamTypingIndicatorNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.StreamTypingIndicator indicator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_indicator(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamTypingIndicatorNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_stream_id(), target);
  }

  // repeated .bgs.protocol.club.v1.StreamTypingIndicator indicator = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_indicator_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_indicator(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  return target;
}

size_t StreamTypingIndicatorNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamTypingIndicator indicator = 5;
  total_size += 1UL * this->_internal_indicator_size();
  for (const auto& msg : this->indicator_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamTypingIndicatorNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamTypingIndicatorNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamTypingIndicatorNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
    MergeFrom(*source);
  }
}

void StreamTypingIndicatorNotification::MergeFrom(const StreamTypingIndicatorNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indicator_.MergeFrom(from.indicator_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamTypingIndicatorNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamTypingIndicatorNotification::CopyFrom(const StreamTypingIndicatorNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTypingIndicatorNotification::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(indicator_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamTypingIndicatorNotification::InternalSwap(StreamTypingIndicatorNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  indicator_.InternalSwap(&other->indicator_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamTypingIndicatorNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamUnreadIndicatorNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamUnreadIndicatorNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamUnreadIndicatorNotification_default_instance_._instance.get_mutable()->event_ = const_cast< ::bgs::protocol::club::v1::StreamEventTime*>(
      ::bgs::protocol::club::v1::StreamEventTime::internal_default_instance());
}
class StreamUnreadIndicatorNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamUnreadIndicatorNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamUnreadIndicatorNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::StreamEventTime& event(const StreamUnreadIndicatorNotification* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamUnreadIndicatorNotification::_Internal::agent_id(const StreamUnreadIndicatorNotification* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::StreamEventTime&
StreamUnreadIndicatorNotification::_Internal::event(const StreamUnreadIndicatorNotification* msg) {
  return *msg->event_;
}
void StreamUnreadIndicatorNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamUnreadIndicatorNotification::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StreamUnreadIndicatorNotification::StreamUnreadIndicatorNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
}
StreamUnreadIndicatorNotification::StreamUnreadIndicatorNotification(const StreamUnreadIndicatorNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_event()) {
    event_ = new ::bgs::protocol::club::v1::StreamEventTime(*from.event_);
  } else {
    event_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
}

void StreamUnreadIndicatorNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamUnreadIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

StreamUnreadIndicatorNotification::~StreamUnreadIndicatorNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  SharedDtor();
}

void StreamUnreadIndicatorNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete event_;
}

void StreamUnreadIndicatorNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamUnreadIndicatorNotification& StreamUnreadIndicatorNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamUnreadIndicatorNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StreamUnreadIndicatorNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(event_ != nullptr);
      event_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamUnreadIndicatorNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamEventTime event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamUnreadIndicatorNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.StreamEventTime event = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  return target;
}

size_t StreamUnreadIndicatorNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.StreamEventTime event = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamUnreadIndicatorNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamUnreadIndicatorNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamUnreadIndicatorNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
    MergeFrom(*source);
  }
}

void StreamUnreadIndicatorNotification::MergeFrom(const StreamUnreadIndicatorNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_event()->::bgs::protocol::club::v1::StreamEventTime::MergeFrom(from._internal_event());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamUnreadIndicatorNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamUnreadIndicatorNotification::CopyFrom(const StreamUnreadIndicatorNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamUnreadIndicatorNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamUnreadIndicatorNotification::InternalSwap(StreamUnreadIndicatorNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(event_, other->event_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamUnreadIndicatorNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamAdvanceViewTimeNotification::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamAdvanceViewTimeNotification_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class StreamAdvanceViewTimeNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamAdvanceViewTimeNotification>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const StreamAdvanceViewTimeNotification* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamAdvanceViewTimeNotification::_Internal::agent_id(const StreamAdvanceViewTimeNotification* msg) {
  return *msg->agent_id_;
}
void StreamAdvanceViewTimeNotification::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamAdvanceViewTimeNotification::clear_view() {
  view_.Clear();
}
StreamAdvanceViewTimeNotification::StreamAdvanceViewTimeNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
}
StreamAdvanceViewTimeNotification::StreamAdvanceViewTimeNotification(const StreamAdvanceViewTimeNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      view_(from.view_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
}

void StreamAdvanceViewTimeNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

StreamAdvanceViewTimeNotification::~StreamAdvanceViewTimeNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  SharedDtor();
}

void StreamAdvanceViewTimeNotification::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void StreamAdvanceViewTimeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamAdvanceViewTimeNotification& StreamAdvanceViewTimeNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamAdvanceViewTimeNotification_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.base);
  return *internal_default_instance();
}


void StreamAdvanceViewTimeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamAdvanceViewTimeNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.StreamAdvanceViewTime view = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamAdvanceViewTimeNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_club_id(), target);
  }

  // repeated .bgs.protocol.club.v1.StreamAdvanceViewTime view = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_view_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_view(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  return target;
}

size_t StreamAdvanceViewTimeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamAdvanceViewTime view = 4;
  total_size += 1UL * this->_internal_view_size();
  for (const auto& msg : this->view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamAdvanceViewTimeNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAdvanceViewTimeNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamAdvanceViewTimeNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
    MergeFrom(*source);
  }
}

void StreamAdvanceViewTimeNotification::MergeFrom(const StreamAdvanceViewTimeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  view_.MergeFrom(from.view_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamAdvanceViewTimeNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAdvanceViewTimeNotification::CopyFrom(const StreamAdvanceViewTimeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAdvanceViewTimeNotification::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamAdvanceViewTimeNotification::InternalSwap(StreamAdvanceViewTimeNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  view_.InternalSwap(&other->view_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamAdvanceViewTimeNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SubscribeNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SubscribeNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SubscribeNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UnsubscribeNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UnsubscribeNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UnsubscribeNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StateChangedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StateChangedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StateChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SettingsChangedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SettingsChangedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SettingsChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberRemovedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberStateChangedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberStateChangedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberStateChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SubscriberStateChangedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SubscriberStateChangedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SubscriberStateChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MemberRoleChangedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MemberRoleChangedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MemberRoleChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::InvitationAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::InvitationAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::InvitationAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::InvitationRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::InvitationRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::InvitationRemovedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SuggestionAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SuggestionAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SuggestionAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SuggestionRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SuggestionRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SuggestionRemovedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamRemovedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamStateChangedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamStateChangedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamStateChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamMessageAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamMessageAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamMessageAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamMessageUpdatedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamMessageUpdatedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamMessageUpdatedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamTypingIndicatorNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamTypingIndicatorNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamTypingIndicatorNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamUnreadIndicatorNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamUnreadIndicatorNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamUnreadIndicatorNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
