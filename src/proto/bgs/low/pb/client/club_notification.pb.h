// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_notification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class InvitationAddedNotification;
class InvitationAddedNotificationDefaultTypeInternal;
extern InvitationAddedNotificationDefaultTypeInternal _InvitationAddedNotification_default_instance_;
class InvitationRemovedNotification;
class InvitationRemovedNotificationDefaultTypeInternal;
extern InvitationRemovedNotificationDefaultTypeInternal _InvitationRemovedNotification_default_instance_;
class MemberAddedNotification;
class MemberAddedNotificationDefaultTypeInternal;
extern MemberAddedNotificationDefaultTypeInternal _MemberAddedNotification_default_instance_;
class MemberRemovedNotification;
class MemberRemovedNotificationDefaultTypeInternal;
extern MemberRemovedNotificationDefaultTypeInternal _MemberRemovedNotification_default_instance_;
class MemberRoleChangedNotification;
class MemberRoleChangedNotificationDefaultTypeInternal;
extern MemberRoleChangedNotificationDefaultTypeInternal _MemberRoleChangedNotification_default_instance_;
class MemberStateChangedNotification;
class MemberStateChangedNotificationDefaultTypeInternal;
extern MemberStateChangedNotificationDefaultTypeInternal _MemberStateChangedNotification_default_instance_;
class SettingsChangedNotification;
class SettingsChangedNotificationDefaultTypeInternal;
extern SettingsChangedNotificationDefaultTypeInternal _SettingsChangedNotification_default_instance_;
class StateChangedNotification;
class StateChangedNotificationDefaultTypeInternal;
extern StateChangedNotificationDefaultTypeInternal _StateChangedNotification_default_instance_;
class StreamAddedNotification;
class StreamAddedNotificationDefaultTypeInternal;
extern StreamAddedNotificationDefaultTypeInternal _StreamAddedNotification_default_instance_;
class StreamAdvanceViewTimeNotification;
class StreamAdvanceViewTimeNotificationDefaultTypeInternal;
extern StreamAdvanceViewTimeNotificationDefaultTypeInternal _StreamAdvanceViewTimeNotification_default_instance_;
class StreamMessageAddedNotification;
class StreamMessageAddedNotificationDefaultTypeInternal;
extern StreamMessageAddedNotificationDefaultTypeInternal _StreamMessageAddedNotification_default_instance_;
class StreamMessageUpdatedNotification;
class StreamMessageUpdatedNotificationDefaultTypeInternal;
extern StreamMessageUpdatedNotificationDefaultTypeInternal _StreamMessageUpdatedNotification_default_instance_;
class StreamRemovedNotification;
class StreamRemovedNotificationDefaultTypeInternal;
extern StreamRemovedNotificationDefaultTypeInternal _StreamRemovedNotification_default_instance_;
class StreamStateChangedNotification;
class StreamStateChangedNotificationDefaultTypeInternal;
extern StreamStateChangedNotificationDefaultTypeInternal _StreamStateChangedNotification_default_instance_;
class StreamTypingIndicatorNotification;
class StreamTypingIndicatorNotificationDefaultTypeInternal;
extern StreamTypingIndicatorNotificationDefaultTypeInternal _StreamTypingIndicatorNotification_default_instance_;
class StreamUnreadIndicatorNotification;
class StreamUnreadIndicatorNotificationDefaultTypeInternal;
extern StreamUnreadIndicatorNotificationDefaultTypeInternal _StreamUnreadIndicatorNotification_default_instance_;
class SubscribeNotification;
class SubscribeNotificationDefaultTypeInternal;
extern SubscribeNotificationDefaultTypeInternal _SubscribeNotification_default_instance_;
class SubscriberStateChangedNotification;
class SubscriberStateChangedNotificationDefaultTypeInternal;
extern SubscriberStateChangedNotificationDefaultTypeInternal _SubscriberStateChangedNotification_default_instance_;
class SuggestionAddedNotification;
class SuggestionAddedNotificationDefaultTypeInternal;
extern SuggestionAddedNotificationDefaultTypeInternal _SuggestionAddedNotification_default_instance_;
class SuggestionRemovedNotification;
class SuggestionRemovedNotificationDefaultTypeInternal;
extern SuggestionRemovedNotificationDefaultTypeInternal _SuggestionRemovedNotification_default_instance_;
class UnsubscribeNotification;
class UnsubscribeNotificationDefaultTypeInternal;
extern UnsubscribeNotificationDefaultTypeInternal _UnsubscribeNotification_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::InvitationAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::InvitationAddedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::InvitationRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::InvitationRemovedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::MemberAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberAddedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::MemberRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberRemovedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::MemberRoleChangedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberRoleChangedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::MemberStateChangedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MemberStateChangedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::SettingsChangedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SettingsChangedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StateChangedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StateChangedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StreamAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamAddedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamAdvanceViewTimeNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StreamMessageAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessageAddedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StreamMessageUpdatedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessageUpdatedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StreamRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamRemovedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StreamStateChangedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamStateChangedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StreamTypingIndicatorNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamTypingIndicatorNotification>(Arena*);
template<> ::bgs::protocol::club::v1::StreamUnreadIndicatorNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamUnreadIndicatorNotification>(Arena*);
template<> ::bgs::protocol::club::v1::SubscribeNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SubscribeNotification>(Arena*);
template<> ::bgs::protocol::club::v1::SubscriberStateChangedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SubscriberStateChangedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::SuggestionAddedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SuggestionAddedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::SuggestionRemovedNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SuggestionRemovedNotification>(Arena*);
template<> ::bgs::protocol::club::v1::UnsubscribeNotification* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UnsubscribeNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class SubscribeNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SubscribeNotification) */ {
 public:
  SubscribeNotification();
  virtual ~SubscribeNotification();

  SubscribeNotification(const SubscribeNotification& from);
  SubscribeNotification(SubscribeNotification&& from) noexcept
    : SubscribeNotification() {
    *this = ::std::move(from);
  }

  inline SubscribeNotification& operator=(const SubscribeNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeNotification& operator=(SubscribeNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeNotification* internal_default_instance() {
    return reinterpret_cast<const SubscribeNotification*>(
               &_SubscribeNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeNotification& a, SubscribeNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeNotification* New() const final {
    return CreateMaybeMessage<SubscribeNotification>(nullptr);
  }

  SubscribeNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeNotification& from);
  void MergeFrom(const SubscribeNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SubscribeNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubFieldNumber = 4,
    kViewFieldNumber = 5,
    kSettingsFieldNumber = 10,
    kMemberFieldNumber = 11,
    kClubIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.Club club = 4;
  bool has_club() const;
  private:
  bool _internal_has_club() const;
  public:
  void clear_club();
  const ::bgs::protocol::club::v1::Club& club() const;
  ::bgs::protocol::club::v1::Club* release_club();
  ::bgs::protocol::club::v1::Club* mutable_club();
  void set_allocated_club(::bgs::protocol::club::v1::Club* club);
  private:
  const ::bgs::protocol::club::v1::Club& _internal_club() const;
  ::bgs::protocol::club::v1::Club* _internal_mutable_club();
  public:

  // optional .bgs.protocol.club.v1.ClubView view = 5;
  bool has_view() const;
  private:
  bool _internal_has_view() const;
  public:
  void clear_view();
  const ::bgs::protocol::club::v1::ClubView& view() const;
  ::bgs::protocol::club::v1::ClubView* release_view();
  ::bgs::protocol::club::v1::ClubView* mutable_view();
  void set_allocated_view(::bgs::protocol::club::v1::ClubView* view);
  private:
  const ::bgs::protocol::club::v1::ClubView& _internal_view() const;
  ::bgs::protocol::club::v1::ClubView* _internal_mutable_view();
  public:

  // optional .bgs.protocol.club.v1.ClubSettings settings = 10;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::bgs::protocol::club::v1::ClubSettings& settings() const;
  ::bgs::protocol::club::v1::ClubSettings* release_settings();
  ::bgs::protocol::club::v1::ClubSettings* mutable_settings();
  void set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings);
  private:
  const ::bgs::protocol::club::v1::ClubSettings& _internal_settings() const;
  ::bgs::protocol::club::v1::ClubSettings* _internal_mutable_settings();
  public:

  // optional .bgs.protocol.club.v1.Member member = 11;
  bool has_member() const;
  private:
  bool _internal_has_member() const;
  public:
  void clear_member();
  const ::bgs::protocol::club::v1::Member& member() const;
  ::bgs::protocol::club::v1::Member* release_member();
  ::bgs::protocol::club::v1::Member* mutable_member();
  void set_allocated_member(::bgs::protocol::club::v1::Member* member);
  private:
  const ::bgs::protocol::club::v1::Member& _internal_member() const;
  ::bgs::protocol::club::v1::Member* _internal_mutable_member();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SubscribeNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::Club* club_;
  ::bgs::protocol::club::v1::ClubView* view_;
  ::bgs::protocol::club::v1::ClubSettings* settings_;
  ::bgs::protocol::club::v1::Member* member_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UnsubscribeNotification) */ {
 public:
  UnsubscribeNotification();
  virtual ~UnsubscribeNotification();

  UnsubscribeNotification(const UnsubscribeNotification& from);
  UnsubscribeNotification(UnsubscribeNotification&& from) noexcept
    : UnsubscribeNotification() {
    *this = ::std::move(from);
  }

  inline UnsubscribeNotification& operator=(const UnsubscribeNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeNotification& operator=(UnsubscribeNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeNotification* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeNotification*>(
               &_UnsubscribeNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnsubscribeNotification& a, UnsubscribeNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeNotification* New() const final {
    return CreateMaybeMessage<UnsubscribeNotification>(nullptr);
  }

  UnsubscribeNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeNotification& from);
  void MergeFrom(const UnsubscribeNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UnsubscribeNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UnsubscribeNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StateChangedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StateChangedNotification) */ {
 public:
  StateChangedNotification();
  virtual ~StateChangedNotification();

  StateChangedNotification(const StateChangedNotification& from);
  StateChangedNotification(StateChangedNotification&& from) noexcept
    : StateChangedNotification() {
    *this = ::std::move(from);
  }

  inline StateChangedNotification& operator=(const StateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateChangedNotification& operator=(StateChangedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateChangedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateChangedNotification* internal_default_instance() {
    return reinterpret_cast<const StateChangedNotification*>(
               &_StateChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StateChangedNotification& a, StateChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StateChangedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateChangedNotification* New() const final {
    return CreateMaybeMessage<StateChangedNotification>(nullptr);
  }

  StateChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateChangedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateChangedNotification& from);
  void MergeFrom(const StateChangedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateChangedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StateChangedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kAssignmentFieldNumber = 5,
    kClubIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubStateAssignment assignment = 5;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::bgs::protocol::club::v1::ClubStateAssignment& assignment() const;
  ::bgs::protocol::club::v1::ClubStateAssignment* release_assignment();
  ::bgs::protocol::club::v1::ClubStateAssignment* mutable_assignment();
  void set_allocated_assignment(::bgs::protocol::club::v1::ClubStateAssignment* assignment);
  private:
  const ::bgs::protocol::club::v1::ClubStateAssignment& _internal_assignment() const;
  ::bgs::protocol::club::v1::ClubStateAssignment* _internal_mutable_assignment();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StateChangedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubStateAssignment* assignment_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class SettingsChangedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SettingsChangedNotification) */ {
 public:
  SettingsChangedNotification();
  virtual ~SettingsChangedNotification();

  SettingsChangedNotification(const SettingsChangedNotification& from);
  SettingsChangedNotification(SettingsChangedNotification&& from) noexcept
    : SettingsChangedNotification() {
    *this = ::std::move(from);
  }

  inline SettingsChangedNotification& operator=(const SettingsChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingsChangedNotification& operator=(SettingsChangedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettingsChangedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsChangedNotification* internal_default_instance() {
    return reinterpret_cast<const SettingsChangedNotification*>(
               &_SettingsChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SettingsChangedNotification& a, SettingsChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingsChangedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettingsChangedNotification* New() const final {
    return CreateMaybeMessage<SettingsChangedNotification>(nullptr);
  }

  SettingsChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettingsChangedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettingsChangedNotification& from);
  void MergeFrom(const SettingsChangedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsChangedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SettingsChangedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kAssignmentFieldNumber = 4,
    kClubIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubSettingsAssignment assignment = 4;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::bgs::protocol::club::v1::ClubSettingsAssignment& assignment() const;
  ::bgs::protocol::club::v1::ClubSettingsAssignment* release_assignment();
  ::bgs::protocol::club::v1::ClubSettingsAssignment* mutable_assignment();
  void set_allocated_assignment(::bgs::protocol::club::v1::ClubSettingsAssignment* assignment);
  private:
  const ::bgs::protocol::club::v1::ClubSettingsAssignment& _internal_assignment() const;
  ::bgs::protocol::club::v1::ClubSettingsAssignment* _internal_mutable_assignment();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SettingsChangedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubSettingsAssignment* assignment_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class MemberAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberAddedNotification) */ {
 public:
  MemberAddedNotification();
  virtual ~MemberAddedNotification();

  MemberAddedNotification(const MemberAddedNotification& from);
  MemberAddedNotification(MemberAddedNotification&& from) noexcept
    : MemberAddedNotification() {
    *this = ::std::move(from);
  }

  inline MemberAddedNotification& operator=(const MemberAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberAddedNotification& operator=(MemberAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberAddedNotification* internal_default_instance() {
    return reinterpret_cast<const MemberAddedNotification*>(
               &_MemberAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MemberAddedNotification& a, MemberAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberAddedNotification* New() const final {
    return CreateMaybeMessage<MemberAddedNotification>(nullptr);
  }

  MemberAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberAddedNotification& from);
  void MergeFrom(const MemberAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 4,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
  };
  // repeated .bgs.protocol.club.v1.Member member = 4;
  int member_size() const;
  private:
  int _internal_member_size() const;
  public:
  void clear_member();
  ::bgs::protocol::club::v1::Member* mutable_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member >*
      mutable_member();
  private:
  const ::bgs::protocol::club::v1::Member& _internal_member(int index) const;
  ::bgs::protocol::club::v1::Member* _internal_add_member();
  public:
  const ::bgs::protocol::club::v1::Member& member(int index) const;
  ::bgs::protocol::club::v1::Member* add_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member >&
      member() const;

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member > member_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class MemberRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberRemovedNotification) */ {
 public:
  MemberRemovedNotification();
  virtual ~MemberRemovedNotification();

  MemberRemovedNotification(const MemberRemovedNotification& from);
  MemberRemovedNotification(MemberRemovedNotification&& from) noexcept
    : MemberRemovedNotification() {
    *this = ::std::move(from);
  }

  inline MemberRemovedNotification& operator=(const MemberRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberRemovedNotification& operator=(MemberRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const MemberRemovedNotification*>(
               &_MemberRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MemberRemovedNotification& a, MemberRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberRemovedNotification* New() const final {
    return CreateMaybeMessage<MemberRemovedNotification>(nullptr);
  }

  MemberRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberRemovedNotification& from);
  void MergeFrom(const MemberRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 4,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
  };
  // repeated .bgs.protocol.club.v1.MemberRemovedAssignment member = 4;
  int member_size() const;
  private:
  int _internal_member_size() const;
  public:
  void clear_member();
  ::bgs::protocol::club::v1::MemberRemovedAssignment* mutable_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberRemovedAssignment >*
      mutable_member();
  private:
  const ::bgs::protocol::club::v1::MemberRemovedAssignment& _internal_member(int index) const;
  ::bgs::protocol::club::v1::MemberRemovedAssignment* _internal_add_member();
  public:
  const ::bgs::protocol::club::v1::MemberRemovedAssignment& member(int index) const;
  ::bgs::protocol::club::v1::MemberRemovedAssignment* add_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberRemovedAssignment >&
      member() const;

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberRemovedAssignment > member_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class MemberStateChangedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberStateChangedNotification) */ {
 public:
  MemberStateChangedNotification();
  virtual ~MemberStateChangedNotification();

  MemberStateChangedNotification(const MemberStateChangedNotification& from);
  MemberStateChangedNotification(MemberStateChangedNotification&& from) noexcept
    : MemberStateChangedNotification() {
    *this = ::std::move(from);
  }

  inline MemberStateChangedNotification& operator=(const MemberStateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberStateChangedNotification& operator=(MemberStateChangedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberStateChangedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberStateChangedNotification* internal_default_instance() {
    return reinterpret_cast<const MemberStateChangedNotification*>(
               &_MemberStateChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MemberStateChangedNotification& a, MemberStateChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberStateChangedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberStateChangedNotification* New() const final {
    return CreateMaybeMessage<MemberStateChangedNotification>(nullptr);
  }

  MemberStateChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberStateChangedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberStateChangedNotification& from);
  void MergeFrom(const MemberStateChangedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberStateChangedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberStateChangedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 4,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
  };
  // repeated .bgs.protocol.club.v1.MemberStateAssignment assignment = 4;
  int assignment_size() const;
  private:
  int _internal_assignment_size() const;
  public:
  void clear_assignment();
  ::bgs::protocol::club::v1::MemberStateAssignment* mutable_assignment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberStateAssignment >*
      mutable_assignment();
  private:
  const ::bgs::protocol::club::v1::MemberStateAssignment& _internal_assignment(int index) const;
  ::bgs::protocol::club::v1::MemberStateAssignment* _internal_add_assignment();
  public:
  const ::bgs::protocol::club::v1::MemberStateAssignment& assignment(int index) const;
  ::bgs::protocol::club::v1::MemberStateAssignment* add_assignment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberStateAssignment >&
      assignment() const;

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberStateChangedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberStateAssignment > assignment_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class SubscriberStateChangedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SubscriberStateChangedNotification) */ {
 public:
  SubscriberStateChangedNotification();
  virtual ~SubscriberStateChangedNotification();

  SubscriberStateChangedNotification(const SubscriberStateChangedNotification& from);
  SubscriberStateChangedNotification(SubscriberStateChangedNotification&& from) noexcept
    : SubscriberStateChangedNotification() {
    *this = ::std::move(from);
  }

  inline SubscriberStateChangedNotification& operator=(const SubscriberStateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriberStateChangedNotification& operator=(SubscriberStateChangedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriberStateChangedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriberStateChangedNotification* internal_default_instance() {
    return reinterpret_cast<const SubscriberStateChangedNotification*>(
               &_SubscriberStateChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SubscriberStateChangedNotification& a, SubscriberStateChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriberStateChangedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriberStateChangedNotification* New() const final {
    return CreateMaybeMessage<SubscriberStateChangedNotification>(nullptr);
  }

  SubscriberStateChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriberStateChangedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriberStateChangedNotification& from);
  void MergeFrom(const SubscriberStateChangedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriberStateChangedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SubscriberStateChangedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 4,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
  };
  // repeated .bgs.protocol.club.v1.SubscriberStateAssignment assignment = 4;
  int assignment_size() const;
  private:
  int _internal_assignment_size() const;
  public:
  void clear_assignment();
  ::bgs::protocol::club::v1::SubscriberStateAssignment* mutable_assignment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::SubscriberStateAssignment >*
      mutable_assignment();
  private:
  const ::bgs::protocol::club::v1::SubscriberStateAssignment& _internal_assignment(int index) const;
  ::bgs::protocol::club::v1::SubscriberStateAssignment* _internal_add_assignment();
  public:
  const ::bgs::protocol::club::v1::SubscriberStateAssignment& assignment(int index) const;
  ::bgs::protocol::club::v1::SubscriberStateAssignment* add_assignment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::SubscriberStateAssignment >&
      assignment() const;

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SubscriberStateChangedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::SubscriberStateAssignment > assignment_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class MemberRoleChangedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MemberRoleChangedNotification) */ {
 public:
  MemberRoleChangedNotification();
  virtual ~MemberRoleChangedNotification();

  MemberRoleChangedNotification(const MemberRoleChangedNotification& from);
  MemberRoleChangedNotification(MemberRoleChangedNotification&& from) noexcept
    : MemberRoleChangedNotification() {
    *this = ::std::move(from);
  }

  inline MemberRoleChangedNotification& operator=(const MemberRoleChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberRoleChangedNotification& operator=(MemberRoleChangedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberRoleChangedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberRoleChangedNotification* internal_default_instance() {
    return reinterpret_cast<const MemberRoleChangedNotification*>(
               &_MemberRoleChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MemberRoleChangedNotification& a, MemberRoleChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberRoleChangedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberRoleChangedNotification* New() const final {
    return CreateMaybeMessage<MemberRoleChangedNotification>(nullptr);
  }

  MemberRoleChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberRoleChangedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberRoleChangedNotification& from);
  void MergeFrom(const MemberRoleChangedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberRoleChangedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MemberRoleChangedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 4,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
  };
  // repeated .bgs.protocol.club.v1.RoleAssignment assignment = 4;
  int assignment_size() const;
  private:
  int _internal_assignment_size() const;
  public:
  void clear_assignment();
  ::bgs::protocol::club::v1::RoleAssignment* mutable_assignment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::RoleAssignment >*
      mutable_assignment();
  private:
  const ::bgs::protocol::club::v1::RoleAssignment& _internal_assignment(int index) const;
  ::bgs::protocol::club::v1::RoleAssignment* _internal_add_assignment();
  public:
  const ::bgs::protocol::club::v1::RoleAssignment& assignment(int index) const;
  ::bgs::protocol::club::v1::RoleAssignment* add_assignment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::RoleAssignment >&
      assignment() const;

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MemberRoleChangedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::RoleAssignment > assignment_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class InvitationAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.InvitationAddedNotification) */ {
 public:
  InvitationAddedNotification();
  virtual ~InvitationAddedNotification();

  InvitationAddedNotification(const InvitationAddedNotification& from);
  InvitationAddedNotification(InvitationAddedNotification&& from) noexcept
    : InvitationAddedNotification() {
    *this = ::std::move(from);
  }

  inline InvitationAddedNotification& operator=(const InvitationAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvitationAddedNotification& operator=(InvitationAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvitationAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvitationAddedNotification* internal_default_instance() {
    return reinterpret_cast<const InvitationAddedNotification*>(
               &_InvitationAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InvitationAddedNotification& a, InvitationAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(InvitationAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvitationAddedNotification* New() const final {
    return CreateMaybeMessage<InvitationAddedNotification>(nullptr);
  }

  InvitationAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvitationAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvitationAddedNotification& from);
  void MergeFrom(const InvitationAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvitationAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.InvitationAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kInvitationFieldNumber = 4,
    kClubIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubInvitation invitation = 4;
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::bgs::protocol::club::v1::ClubInvitation& invitation() const;
  ::bgs::protocol::club::v1::ClubInvitation* release_invitation();
  ::bgs::protocol::club::v1::ClubInvitation* mutable_invitation();
  void set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitation* invitation);
  private:
  const ::bgs::protocol::club::v1::ClubInvitation& _internal_invitation() const;
  ::bgs::protocol::club::v1::ClubInvitation* _internal_mutable_invitation();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.InvitationAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubInvitation* invitation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class InvitationRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.InvitationRemovedNotification) */ {
 public:
  InvitationRemovedNotification();
  virtual ~InvitationRemovedNotification();

  InvitationRemovedNotification(const InvitationRemovedNotification& from);
  InvitationRemovedNotification(InvitationRemovedNotification&& from) noexcept
    : InvitationRemovedNotification() {
    *this = ::std::move(from);
  }

  inline InvitationRemovedNotification& operator=(const InvitationRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvitationRemovedNotification& operator=(InvitationRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvitationRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvitationRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const InvitationRemovedNotification*>(
               &_InvitationRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InvitationRemovedNotification& a, InvitationRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(InvitationRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvitationRemovedNotification* New() const final {
    return CreateMaybeMessage<InvitationRemovedNotification>(nullptr);
  }

  InvitationRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvitationRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvitationRemovedNotification& from);
  void MergeFrom(const InvitationRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvitationRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.InvitationRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
    kInvitationIdFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 invitation_id = 4;
  bool has_invitation_id() const;
  private:
  bool _internal_has_invitation_id() const;
  public:
  void clear_invitation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id() const;
  void set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invitation_id() const;
  void _internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.InvitationRemovedReason reason = 5 [default = INVITATION_REMOVED_REASON_ACCEPTED];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::bgs::protocol::InvitationRemovedReason reason() const;
  void set_reason(::bgs::protocol::InvitationRemovedReason value);
  private:
  ::bgs::protocol::InvitationRemovedReason _internal_reason() const;
  void _internal_set_reason(::bgs::protocol::InvitationRemovedReason value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.InvitationRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id_;
  int reason_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class SuggestionAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SuggestionAddedNotification) */ {
 public:
  SuggestionAddedNotification();
  virtual ~SuggestionAddedNotification();

  SuggestionAddedNotification(const SuggestionAddedNotification& from);
  SuggestionAddedNotification(SuggestionAddedNotification&& from) noexcept
    : SuggestionAddedNotification() {
    *this = ::std::move(from);
  }

  inline SuggestionAddedNotification& operator=(const SuggestionAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestionAddedNotification& operator=(SuggestionAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuggestionAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuggestionAddedNotification* internal_default_instance() {
    return reinterpret_cast<const SuggestionAddedNotification*>(
               &_SuggestionAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SuggestionAddedNotification& a, SuggestionAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestionAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuggestionAddedNotification* New() const final {
    return CreateMaybeMessage<SuggestionAddedNotification>(nullptr);
  }

  SuggestionAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuggestionAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuggestionAddedNotification& from);
  void MergeFrom(const SuggestionAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestionAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SuggestionAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kSuggestionFieldNumber = 4,
    kClubIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 4;
  bool has_suggestion() const;
  private:
  bool _internal_has_suggestion() const;
  public:
  void clear_suggestion();
  const ::bgs::protocol::club::v1::ClubSuggestion& suggestion() const;
  ::bgs::protocol::club::v1::ClubSuggestion* release_suggestion();
  ::bgs::protocol::club::v1::ClubSuggestion* mutable_suggestion();
  void set_allocated_suggestion(::bgs::protocol::club::v1::ClubSuggestion* suggestion);
  private:
  const ::bgs::protocol::club::v1::ClubSuggestion& _internal_suggestion() const;
  ::bgs::protocol::club::v1::ClubSuggestion* _internal_mutable_suggestion();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SuggestionAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubSuggestion* suggestion_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class SuggestionRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SuggestionRemovedNotification) */ {
 public:
  SuggestionRemovedNotification();
  virtual ~SuggestionRemovedNotification();

  SuggestionRemovedNotification(const SuggestionRemovedNotification& from);
  SuggestionRemovedNotification(SuggestionRemovedNotification&& from) noexcept
    : SuggestionRemovedNotification() {
    *this = ::std::move(from);
  }

  inline SuggestionRemovedNotification& operator=(const SuggestionRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestionRemovedNotification& operator=(SuggestionRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuggestionRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuggestionRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const SuggestionRemovedNotification*>(
               &_SuggestionRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SuggestionRemovedNotification& a, SuggestionRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestionRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuggestionRemovedNotification* New() const final {
    return CreateMaybeMessage<SuggestionRemovedNotification>(nullptr);
  }

  SuggestionRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuggestionRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuggestionRemovedNotification& from);
  void MergeFrom(const SuggestionRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuggestionRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SuggestionRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
    kSuggestionIdFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 suggestion_id = 4;
  bool has_suggestion_id() const;
  private:
  bool _internal_has_suggestion_id() const;
  public:
  void clear_suggestion_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 suggestion_id() const;
  void set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_suggestion_id() const;
  void _internal_set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.SuggestionRemovedReason reason = 5 [default = SUGGESTION_REMOVED_REASON_APPROVED];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::bgs::protocol::SuggestionRemovedReason reason() const;
  void set_reason(::bgs::protocol::SuggestionRemovedReason value);
  private:
  ::bgs::protocol::SuggestionRemovedReason _internal_reason() const;
  void _internal_set_reason(::bgs::protocol::SuggestionRemovedReason value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SuggestionRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 suggestion_id_;
  int reason_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StreamAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamAddedNotification) */ {
 public:
  StreamAddedNotification();
  virtual ~StreamAddedNotification();

  StreamAddedNotification(const StreamAddedNotification& from);
  StreamAddedNotification(StreamAddedNotification&& from) noexcept
    : StreamAddedNotification() {
    *this = ::std::move(from);
  }

  inline StreamAddedNotification& operator=(const StreamAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAddedNotification& operator=(StreamAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamAddedNotification* internal_default_instance() {
    return reinterpret_cast<const StreamAddedNotification*>(
               &_StreamAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StreamAddedNotification& a, StreamAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamAddedNotification* New() const final {
    return CreateMaybeMessage<StreamAddedNotification>(nullptr);
  }

  StreamAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamAddedNotification& from);
  void MergeFrom(const StreamAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kStreamFieldNumber = 4,
    kClubIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.Stream stream = 4;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::bgs::protocol::club::v1::Stream& stream() const;
  ::bgs::protocol::club::v1::Stream* release_stream();
  ::bgs::protocol::club::v1::Stream* mutable_stream();
  void set_allocated_stream(::bgs::protocol::club::v1::Stream* stream);
  private:
  const ::bgs::protocol::club::v1::Stream& _internal_stream() const;
  ::bgs::protocol::club::v1::Stream* _internal_mutable_stream();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::Stream* stream_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StreamRemovedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamRemovedNotification) */ {
 public:
  StreamRemovedNotification();
  virtual ~StreamRemovedNotification();

  StreamRemovedNotification(const StreamRemovedNotification& from);
  StreamRemovedNotification(StreamRemovedNotification&& from) noexcept
    : StreamRemovedNotification() {
    *this = ::std::move(from);
  }

  inline StreamRemovedNotification& operator=(const StreamRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRemovedNotification& operator=(StreamRemovedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamRemovedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamRemovedNotification* internal_default_instance() {
    return reinterpret_cast<const StreamRemovedNotification*>(
               &_StreamRemovedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StreamRemovedNotification& a, StreamRemovedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamRemovedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamRemovedNotification* New() const final {
    return CreateMaybeMessage<StreamRemovedNotification>(nullptr);
  }

  StreamRemovedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamRemovedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamRemovedNotification& from);
  void MergeFrom(const StreamRemovedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamRemovedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamRemovedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
    kStreamIdFieldNumber = 4,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 4;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamRemovedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StreamStateChangedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamStateChangedNotification) */ {
 public:
  StreamStateChangedNotification();
  virtual ~StreamStateChangedNotification();

  StreamStateChangedNotification(const StreamStateChangedNotification& from);
  StreamStateChangedNotification(StreamStateChangedNotification&& from) noexcept
    : StreamStateChangedNotification() {
    *this = ::std::move(from);
  }

  inline StreamStateChangedNotification& operator=(const StreamStateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStateChangedNotification& operator=(StreamStateChangedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStateChangedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamStateChangedNotification* internal_default_instance() {
    return reinterpret_cast<const StreamStateChangedNotification*>(
               &_StreamStateChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StreamStateChangedNotification& a, StreamStateChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStateChangedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStateChangedNotification* New() const final {
    return CreateMaybeMessage<StreamStateChangedNotification>(nullptr);
  }

  StreamStateChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStateChangedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStateChangedNotification& from);
  void MergeFrom(const StreamStateChangedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStateChangedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamStateChangedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kAssignmentFieldNumber = 5,
    kClubIdFieldNumber = 3,
    kStreamIdFieldNumber = 4,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.StreamStateAssignment assignment = 5;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::bgs::protocol::club::v1::StreamStateAssignment& assignment() const;
  ::bgs::protocol::club::v1::StreamStateAssignment* release_assignment();
  ::bgs::protocol::club::v1::StreamStateAssignment* mutable_assignment();
  void set_allocated_assignment(::bgs::protocol::club::v1::StreamStateAssignment* assignment);
  private:
  const ::bgs::protocol::club::v1::StreamStateAssignment& _internal_assignment() const;
  ::bgs::protocol::club::v1::StreamStateAssignment* _internal_mutable_assignment();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 4;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamStateChangedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::StreamStateAssignment* assignment_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StreamMessageAddedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamMessageAddedNotification) */ {
 public:
  StreamMessageAddedNotification();
  virtual ~StreamMessageAddedNotification();

  StreamMessageAddedNotification(const StreamMessageAddedNotification& from);
  StreamMessageAddedNotification(StreamMessageAddedNotification&& from) noexcept
    : StreamMessageAddedNotification() {
    *this = ::std::move(from);
  }

  inline StreamMessageAddedNotification& operator=(const StreamMessageAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessageAddedNotification& operator=(StreamMessageAddedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMessageAddedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMessageAddedNotification* internal_default_instance() {
    return reinterpret_cast<const StreamMessageAddedNotification*>(
               &_StreamMessageAddedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StreamMessageAddedNotification& a, StreamMessageAddedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessageAddedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessageAddedNotification* New() const final {
    return CreateMaybeMessage<StreamMessageAddedNotification>(nullptr);
  }

  StreamMessageAddedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessageAddedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMessageAddedNotification& from);
  void MergeFrom(const StreamMessageAddedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessageAddedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamMessageAddedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMessageFieldNumber = 5,
    kClubIdFieldNumber = 3,
    kStreamIdFieldNumber = 4,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.StreamMessage message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::bgs::protocol::club::v1::StreamMessage& message() const;
  ::bgs::protocol::club::v1::StreamMessage* release_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message();
  void set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message);
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message() const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_mutable_message();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 4;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamMessageAddedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::StreamMessage* message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StreamMessageUpdatedNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamMessageUpdatedNotification) */ {
 public:
  StreamMessageUpdatedNotification();
  virtual ~StreamMessageUpdatedNotification();

  StreamMessageUpdatedNotification(const StreamMessageUpdatedNotification& from);
  StreamMessageUpdatedNotification(StreamMessageUpdatedNotification&& from) noexcept
    : StreamMessageUpdatedNotification() {
    *this = ::std::move(from);
  }

  inline StreamMessageUpdatedNotification& operator=(const StreamMessageUpdatedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessageUpdatedNotification& operator=(StreamMessageUpdatedNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMessageUpdatedNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMessageUpdatedNotification* internal_default_instance() {
    return reinterpret_cast<const StreamMessageUpdatedNotification*>(
               &_StreamMessageUpdatedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StreamMessageUpdatedNotification& a, StreamMessageUpdatedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessageUpdatedNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessageUpdatedNotification* New() const final {
    return CreateMaybeMessage<StreamMessageUpdatedNotification>(nullptr);
  }

  StreamMessageUpdatedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessageUpdatedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMessageUpdatedNotification& from);
  void MergeFrom(const StreamMessageUpdatedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessageUpdatedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamMessageUpdatedNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMessageFieldNumber = 5,
    kClubIdFieldNumber = 3,
    kStreamIdFieldNumber = 4,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.StreamMessage message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::bgs::protocol::club::v1::StreamMessage& message() const;
  ::bgs::protocol::club::v1::StreamMessage* release_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message();
  void set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message);
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message() const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_mutable_message();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 4;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamMessageUpdatedNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::StreamMessage* message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StreamTypingIndicatorNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamTypingIndicatorNotification) */ {
 public:
  StreamTypingIndicatorNotification();
  virtual ~StreamTypingIndicatorNotification();

  StreamTypingIndicatorNotification(const StreamTypingIndicatorNotification& from);
  StreamTypingIndicatorNotification(StreamTypingIndicatorNotification&& from) noexcept
    : StreamTypingIndicatorNotification() {
    *this = ::std::move(from);
  }

  inline StreamTypingIndicatorNotification& operator=(const StreamTypingIndicatorNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamTypingIndicatorNotification& operator=(StreamTypingIndicatorNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamTypingIndicatorNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamTypingIndicatorNotification* internal_default_instance() {
    return reinterpret_cast<const StreamTypingIndicatorNotification*>(
               &_StreamTypingIndicatorNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StreamTypingIndicatorNotification& a, StreamTypingIndicatorNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamTypingIndicatorNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamTypingIndicatorNotification* New() const final {
    return CreateMaybeMessage<StreamTypingIndicatorNotification>(nullptr);
  }

  StreamTypingIndicatorNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamTypingIndicatorNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamTypingIndicatorNotification& from);
  void MergeFrom(const StreamTypingIndicatorNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamTypingIndicatorNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamTypingIndicatorNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicatorFieldNumber = 5,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
    kStreamIdFieldNumber = 4,
  };
  // repeated .bgs.protocol.club.v1.StreamTypingIndicator indicator = 5;
  int indicator_size() const;
  private:
  int _internal_indicator_size() const;
  public:
  void clear_indicator();
  ::bgs::protocol::club::v1::StreamTypingIndicator* mutable_indicator(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamTypingIndicator >*
      mutable_indicator();
  private:
  const ::bgs::protocol::club::v1::StreamTypingIndicator& _internal_indicator(int index) const;
  ::bgs::protocol::club::v1::StreamTypingIndicator* _internal_add_indicator();
  public:
  const ::bgs::protocol::club::v1::StreamTypingIndicator& indicator(int index) const;
  ::bgs::protocol::club::v1::StreamTypingIndicator* add_indicator();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamTypingIndicator >&
      indicator() const;

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 4;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamTypingIndicatorNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamTypingIndicator > indicator_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StreamUnreadIndicatorNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamUnreadIndicatorNotification) */ {
 public:
  StreamUnreadIndicatorNotification();
  virtual ~StreamUnreadIndicatorNotification();

  StreamUnreadIndicatorNotification(const StreamUnreadIndicatorNotification& from);
  StreamUnreadIndicatorNotification(StreamUnreadIndicatorNotification&& from) noexcept
    : StreamUnreadIndicatorNotification() {
    *this = ::std::move(from);
  }

  inline StreamUnreadIndicatorNotification& operator=(const StreamUnreadIndicatorNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamUnreadIndicatorNotification& operator=(StreamUnreadIndicatorNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamUnreadIndicatorNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamUnreadIndicatorNotification* internal_default_instance() {
    return reinterpret_cast<const StreamUnreadIndicatorNotification*>(
               &_StreamUnreadIndicatorNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StreamUnreadIndicatorNotification& a, StreamUnreadIndicatorNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamUnreadIndicatorNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamUnreadIndicatorNotification* New() const final {
    return CreateMaybeMessage<StreamUnreadIndicatorNotification>(nullptr);
  }

  StreamUnreadIndicatorNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamUnreadIndicatorNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamUnreadIndicatorNotification& from);
  void MergeFrom(const StreamUnreadIndicatorNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamUnreadIndicatorNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamUnreadIndicatorNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kEventFieldNumber = 4,
    kClubIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.StreamEventTime event = 4;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::bgs::protocol::club::v1::StreamEventTime& event() const;
  ::bgs::protocol::club::v1::StreamEventTime* release_event();
  ::bgs::protocol::club::v1::StreamEventTime* mutable_event();
  void set_allocated_event(::bgs::protocol::club::v1::StreamEventTime* event);
  private:
  const ::bgs::protocol::club::v1::StreamEventTime& _internal_event() const;
  ::bgs::protocol::club::v1::StreamEventTime* _internal_mutable_event();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamUnreadIndicatorNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::StreamEventTime* event_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class StreamAdvanceViewTimeNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification) */ {
 public:
  StreamAdvanceViewTimeNotification();
  virtual ~StreamAdvanceViewTimeNotification();

  StreamAdvanceViewTimeNotification(const StreamAdvanceViewTimeNotification& from);
  StreamAdvanceViewTimeNotification(StreamAdvanceViewTimeNotification&& from) noexcept
    : StreamAdvanceViewTimeNotification() {
    *this = ::std::move(from);
  }

  inline StreamAdvanceViewTimeNotification& operator=(const StreamAdvanceViewTimeNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAdvanceViewTimeNotification& operator=(StreamAdvanceViewTimeNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamAdvanceViewTimeNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamAdvanceViewTimeNotification* internal_default_instance() {
    return reinterpret_cast<const StreamAdvanceViewTimeNotification*>(
               &_StreamAdvanceViewTimeNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StreamAdvanceViewTimeNotification& a, StreamAdvanceViewTimeNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAdvanceViewTimeNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamAdvanceViewTimeNotification* New() const final {
    return CreateMaybeMessage<StreamAdvanceViewTimeNotification>(nullptr);
  }

  StreamAdvanceViewTimeNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamAdvanceViewTimeNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamAdvanceViewTimeNotification& from);
  void MergeFrom(const StreamAdvanceViewTimeNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAdvanceViewTimeNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamAdvanceViewTimeNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewFieldNumber = 4,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 3,
  };
  // repeated .bgs.protocol.club.v1.StreamAdvanceViewTime view = 4;
  int view_size() const;
  private:
  int _internal_view_size() const;
  public:
  void clear_view();
  ::bgs::protocol::club::v1::StreamAdvanceViewTime* mutable_view(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamAdvanceViewTime >*
      mutable_view();
  private:
  const ::bgs::protocol::club::v1::StreamAdvanceViewTime& _internal_view(int index) const;
  ::bgs::protocol::club::v1::StreamAdvanceViewTime* _internal_add_view();
  public:
  const ::bgs::protocol::club::v1::StreamAdvanceViewTime& view(int index) const;
  ::bgs::protocol::club::v1::StreamAdvanceViewTime* add_view();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamAdvanceViewTime >&
      view() const;

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 3;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamAdvanceViewTime > view_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SubscribeNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SubscribeNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SubscribeNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SubscribeNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscribeNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscribeNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void SubscribeNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscribeNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SubscribeNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SubscribeNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void SubscribeNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeNotification.club_id)
  return _internal_club_id();
}
inline void SubscribeNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  club_id_ = value;
}
inline void SubscribeNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SubscribeNotification.club_id)
}

// optional .bgs.protocol.club.v1.Club club = 4;
inline bool SubscribeNotification::_internal_has_club() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || club_ != nullptr);
  return value;
}
inline bool SubscribeNotification::has_club() const {
  return _internal_has_club();
}
inline const ::bgs::protocol::club::v1::Club& SubscribeNotification::_internal_club() const {
  const ::bgs::protocol::club::v1::Club* p = club_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::Club*>(
      &::bgs::protocol::club::v1::_Club_default_instance_);
}
inline const ::bgs::protocol::club::v1::Club& SubscribeNotification::club() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeNotification.club)
  return _internal_club();
}
inline ::bgs::protocol::club::v1::Club* SubscribeNotification::release_club() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscribeNotification.club)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::Club* temp = club_;
  club_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::Club* SubscribeNotification::_internal_mutable_club() {
  _has_bits_[0] |= 0x00000002u;
  if (club_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::Club>(GetArenaNoVirtual());
    club_ = p;
  }
  return club_;
}
inline ::bgs::protocol::club::v1::Club* SubscribeNotification::mutable_club() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscribeNotification.club)
  return _internal_mutable_club();
}
inline void SubscribeNotification::set_allocated_club(::bgs::protocol::club::v1::Club* club) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(club_);
  }
  if (club) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      club = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, club, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  club_ = club;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscribeNotification.club)
}

// optional .bgs.protocol.club.v1.ClubView view = 5;
inline bool SubscribeNotification::_internal_has_view() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || view_ != nullptr);
  return value;
}
inline bool SubscribeNotification::has_view() const {
  return _internal_has_view();
}
inline const ::bgs::protocol::club::v1::ClubView& SubscribeNotification::_internal_view() const {
  const ::bgs::protocol::club::v1::ClubView* p = view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubView*>(
      &::bgs::protocol::club::v1::_ClubView_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubView& SubscribeNotification::view() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeNotification.view)
  return _internal_view();
}
inline ::bgs::protocol::club::v1::ClubView* SubscribeNotification::release_view() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscribeNotification.view)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::ClubView* temp = view_;
  view_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubView* SubscribeNotification::_internal_mutable_view() {
  _has_bits_[0] |= 0x00000004u;
  if (view_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubView>(GetArenaNoVirtual());
    view_ = p;
  }
  return view_;
}
inline ::bgs::protocol::club::v1::ClubView* SubscribeNotification::mutable_view() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscribeNotification.view)
  return _internal_mutable_view();
}
inline void SubscribeNotification::set_allocated_view(::bgs::protocol::club::v1::ClubView* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_);
  }
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  view_ = view;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscribeNotification.view)
}

// optional .bgs.protocol.club.v1.ClubSettings settings = 10;
inline bool SubscribeNotification::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool SubscribeNotification::has_settings() const {
  return _internal_has_settings();
}
inline const ::bgs::protocol::club::v1::ClubSettings& SubscribeNotification::_internal_settings() const {
  const ::bgs::protocol::club::v1::ClubSettings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSettings*>(
      &::bgs::protocol::club::v1::_ClubSettings_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSettings& SubscribeNotification::settings() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeNotification.settings)
  return _internal_settings();
}
inline ::bgs::protocol::club::v1::ClubSettings* SubscribeNotification::release_settings() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscribeNotification.settings)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::ClubSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSettings* SubscribeNotification::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000008u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSettings>(GetArenaNoVirtual());
    settings_ = p;
  }
  return settings_;
}
inline ::bgs::protocol::club::v1::ClubSettings* SubscribeNotification::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscribeNotification.settings)
  return _internal_mutable_settings();
}
inline void SubscribeNotification::set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscribeNotification.settings)
}

// optional .bgs.protocol.club.v1.Member member = 11;
inline bool SubscribeNotification::_internal_has_member() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || member_ != nullptr);
  return value;
}
inline bool SubscribeNotification::has_member() const {
  return _internal_has_member();
}
inline const ::bgs::protocol::club::v1::Member& SubscribeNotification::_internal_member() const {
  const ::bgs::protocol::club::v1::Member* p = member_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::Member*>(
      &::bgs::protocol::club::v1::_Member_default_instance_);
}
inline const ::bgs::protocol::club::v1::Member& SubscribeNotification::member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeNotification.member)
  return _internal_member();
}
inline ::bgs::protocol::club::v1::Member* SubscribeNotification::release_member() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscribeNotification.member)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::club::v1::Member* temp = member_;
  member_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::Member* SubscribeNotification::_internal_mutable_member() {
  _has_bits_[0] |= 0x00000010u;
  if (member_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::Member>(GetArenaNoVirtual());
    member_ = p;
  }
  return member_;
}
inline ::bgs::protocol::club::v1::Member* SubscribeNotification::mutable_member() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscribeNotification.member)
  return _internal_mutable_member();
}
inline void SubscribeNotification::set_allocated_member(::bgs::protocol::club::v1::Member* member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_);
  }
  if (member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscribeNotification.member)
}

// -------------------------------------------------------------------

// UnsubscribeNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UnsubscribeNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UnsubscribeNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UnsubscribeNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UnsubscribeNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnsubscribeNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UnsubscribeNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UnsubscribeNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void UnsubscribeNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UnsubscribeNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool UnsubscribeNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnsubscribeNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void UnsubscribeNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnsubscribeNotification.club_id)
  return _internal_club_id();
}
inline void UnsubscribeNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void UnsubscribeNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UnsubscribeNotification.club_id)
}

// -------------------------------------------------------------------

// StateChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StateChangedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StateChangedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StateChangedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StateChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StateChangedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StateChangedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StateChangedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StateChangedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StateChangedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StateChangedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StateChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StateChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StateChangedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StateChangedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StateChangedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChangedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StateChangedNotification.club_id)
  return _internal_club_id();
}
inline void StateChangedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void StateChangedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StateChangedNotification.club_id)
}

// optional .bgs.protocol.club.v1.ClubStateAssignment assignment = 5;
inline bool StateChangedNotification::_internal_has_assignment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || assignment_ != nullptr);
  return value;
}
inline bool StateChangedNotification::has_assignment() const {
  return _internal_has_assignment();
}
inline const ::bgs::protocol::club::v1::ClubStateAssignment& StateChangedNotification::_internal_assignment() const {
  const ::bgs::protocol::club::v1::ClubStateAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubStateAssignment*>(
      &::bgs::protocol::club::v1::_ClubStateAssignment_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubStateAssignment& StateChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StateChangedNotification.assignment)
  return _internal_assignment();
}
inline ::bgs::protocol::club::v1::ClubStateAssignment* StateChangedNotification::release_assignment() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StateChangedNotification.assignment)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubStateAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubStateAssignment* StateChangedNotification::_internal_mutable_assignment() {
  _has_bits_[0] |= 0x00000002u;
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubStateAssignment>(GetArenaNoVirtual());
    assignment_ = p;
  }
  return assignment_;
}
inline ::bgs::protocol::club::v1::ClubStateAssignment* StateChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StateChangedNotification.assignment)
  return _internal_mutable_assignment();
}
inline void StateChangedNotification::set_allocated_assignment(::bgs::protocol::club::v1::ClubStateAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(assignment_);
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StateChangedNotification.assignment)
}

// -------------------------------------------------------------------

// SettingsChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SettingsChangedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SettingsChangedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SettingsChangedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SettingsChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SettingsChangedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SettingsChangedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SettingsChangedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SettingsChangedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SettingsChangedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SettingsChangedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void SettingsChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SettingsChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SettingsChangedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SettingsChangedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void SettingsChangedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettingsChangedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettingsChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SettingsChangedNotification.club_id)
  return _internal_club_id();
}
inline void SettingsChangedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void SettingsChangedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SettingsChangedNotification.club_id)
}

// optional .bgs.protocol.club.v1.ClubSettingsAssignment assignment = 4;
inline bool SettingsChangedNotification::_internal_has_assignment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || assignment_ != nullptr);
  return value;
}
inline bool SettingsChangedNotification::has_assignment() const {
  return _internal_has_assignment();
}
inline const ::bgs::protocol::club::v1::ClubSettingsAssignment& SettingsChangedNotification::_internal_assignment() const {
  const ::bgs::protocol::club::v1::ClubSettingsAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSettingsAssignment*>(
      &::bgs::protocol::club::v1::_ClubSettingsAssignment_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSettingsAssignment& SettingsChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SettingsChangedNotification.assignment)
  return _internal_assignment();
}
inline ::bgs::protocol::club::v1::ClubSettingsAssignment* SettingsChangedNotification::release_assignment() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SettingsChangedNotification.assignment)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubSettingsAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSettingsAssignment* SettingsChangedNotification::_internal_mutable_assignment() {
  _has_bits_[0] |= 0x00000002u;
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSettingsAssignment>(GetArenaNoVirtual());
    assignment_ = p;
  }
  return assignment_;
}
inline ::bgs::protocol::club::v1::ClubSettingsAssignment* SettingsChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SettingsChangedNotification.assignment)
  return _internal_mutable_assignment();
}
inline void SettingsChangedNotification::set_allocated_assignment(::bgs::protocol::club::v1::ClubSettingsAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(assignment_);
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SettingsChangedNotification.assignment)
}

// -------------------------------------------------------------------

// MemberAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool MemberAddedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool MemberAddedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberAddedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberAddedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberAddedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberAddedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberAddedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberAddedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberAddedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void MemberAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool MemberAddedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberAddedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void MemberAddedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberAddedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberAddedNotification.club_id)
  return _internal_club_id();
}
inline void MemberAddedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void MemberAddedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberAddedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.Member member = 4;
inline int MemberAddedNotification::_internal_member_size() const {
  return member_.size();
}
inline int MemberAddedNotification::member_size() const {
  return _internal_member_size();
}
inline ::bgs::protocol::club::v1::Member* MemberAddedNotification::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberAddedNotification.member)
  return member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member >*
MemberAddedNotification::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MemberAddedNotification.member)
  return &member_;
}
inline const ::bgs::protocol::club::v1::Member& MemberAddedNotification::_internal_member(int index) const {
  return member_.Get(index);
}
inline const ::bgs::protocol::club::v1::Member& MemberAddedNotification::member(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberAddedNotification.member)
  return _internal_member(index);
}
inline ::bgs::protocol::club::v1::Member* MemberAddedNotification::_internal_add_member() {
  return member_.Add();
}
inline ::bgs::protocol::club::v1::Member* MemberAddedNotification::add_member() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MemberAddedNotification.member)
  return _internal_add_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member >&
MemberAddedNotification::member() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MemberAddedNotification.member)
  return member_;
}

// -------------------------------------------------------------------

// MemberRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool MemberRemovedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool MemberRemovedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberRemovedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberRemovedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberRemovedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberRemovedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRemovedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRemovedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberRemovedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void MemberRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberRemovedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool MemberRemovedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberRemovedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void MemberRemovedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberRemovedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberRemovedNotification.club_id)
  return _internal_club_id();
}
inline void MemberRemovedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void MemberRemovedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberRemovedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.MemberRemovedAssignment member = 4;
inline int MemberRemovedNotification::_internal_member_size() const {
  return member_.size();
}
inline int MemberRemovedNotification::member_size() const {
  return _internal_member_size();
}
inline ::bgs::protocol::club::v1::MemberRemovedAssignment* MemberRemovedNotification::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberRemovedNotification.member)
  return member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberRemovedAssignment >*
MemberRemovedNotification::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MemberRemovedNotification.member)
  return &member_;
}
inline const ::bgs::protocol::club::v1::MemberRemovedAssignment& MemberRemovedNotification::_internal_member(int index) const {
  return member_.Get(index);
}
inline const ::bgs::protocol::club::v1::MemberRemovedAssignment& MemberRemovedNotification::member(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberRemovedNotification.member)
  return _internal_member(index);
}
inline ::bgs::protocol::club::v1::MemberRemovedAssignment* MemberRemovedNotification::_internal_add_member() {
  return member_.Add();
}
inline ::bgs::protocol::club::v1::MemberRemovedAssignment* MemberRemovedNotification::add_member() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MemberRemovedNotification.member)
  return _internal_add_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberRemovedAssignment >&
MemberRemovedNotification::member() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MemberRemovedNotification.member)
  return member_;
}

// -------------------------------------------------------------------

// MemberStateChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool MemberStateChangedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool MemberStateChangedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberStateChangedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberStateChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateChangedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberStateChangedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberStateChangedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberStateChangedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberStateChangedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberStateChangedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void MemberStateChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberStateChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool MemberStateChangedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberStateChangedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void MemberStateChangedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberStateChangedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberStateChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateChangedNotification.club_id)
  return _internal_club_id();
}
inline void MemberStateChangedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void MemberStateChangedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberStateChangedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.MemberStateAssignment assignment = 4;
inline int MemberStateChangedNotification::_internal_assignment_size() const {
  return assignment_.size();
}
inline int MemberStateChangedNotification::assignment_size() const {
  return _internal_assignment_size();
}
inline ::bgs::protocol::club::v1::MemberStateAssignment* MemberStateChangedNotification::mutable_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberStateChangedNotification.assignment)
  return assignment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberStateAssignment >*
MemberStateChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MemberStateChangedNotification.assignment)
  return &assignment_;
}
inline const ::bgs::protocol::club::v1::MemberStateAssignment& MemberStateChangedNotification::_internal_assignment(int index) const {
  return assignment_.Get(index);
}
inline const ::bgs::protocol::club::v1::MemberStateAssignment& MemberStateChangedNotification::assignment(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberStateChangedNotification.assignment)
  return _internal_assignment(index);
}
inline ::bgs::protocol::club::v1::MemberStateAssignment* MemberStateChangedNotification::_internal_add_assignment() {
  return assignment_.Add();
}
inline ::bgs::protocol::club::v1::MemberStateAssignment* MemberStateChangedNotification::add_assignment() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MemberStateChangedNotification.assignment)
  return _internal_add_assignment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberStateAssignment >&
MemberStateChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MemberStateChangedNotification.assignment)
  return assignment_;
}

// -------------------------------------------------------------------

// SubscriberStateChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SubscriberStateChangedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SubscriberStateChangedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SubscriberStateChangedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SubscriberStateChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscriberStateChangedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SubscriberStateChangedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscriberStateChangedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SubscriberStateChangedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscriberStateChangedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscriberStateChangedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void SubscriberStateChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscriberStateChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SubscriberStateChangedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubscriberStateChangedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void SubscriberStateChangedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscriberStateChangedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscriberStateChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscriberStateChangedNotification.club_id)
  return _internal_club_id();
}
inline void SubscriberStateChangedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void SubscriberStateChangedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SubscriberStateChangedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.SubscriberStateAssignment assignment = 4;
inline int SubscriberStateChangedNotification::_internal_assignment_size() const {
  return assignment_.size();
}
inline int SubscriberStateChangedNotification::assignment_size() const {
  return _internal_assignment_size();
}
inline ::bgs::protocol::club::v1::SubscriberStateAssignment* SubscriberStateChangedNotification::mutable_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscriberStateChangedNotification.assignment)
  return assignment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::SubscriberStateAssignment >*
SubscriberStateChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.SubscriberStateChangedNotification.assignment)
  return &assignment_;
}
inline const ::bgs::protocol::club::v1::SubscriberStateAssignment& SubscriberStateChangedNotification::_internal_assignment(int index) const {
  return assignment_.Get(index);
}
inline const ::bgs::protocol::club::v1::SubscriberStateAssignment& SubscriberStateChangedNotification::assignment(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscriberStateChangedNotification.assignment)
  return _internal_assignment(index);
}
inline ::bgs::protocol::club::v1::SubscriberStateAssignment* SubscriberStateChangedNotification::_internal_add_assignment() {
  return assignment_.Add();
}
inline ::bgs::protocol::club::v1::SubscriberStateAssignment* SubscriberStateChangedNotification::add_assignment() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.SubscriberStateChangedNotification.assignment)
  return _internal_add_assignment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::SubscriberStateAssignment >&
SubscriberStateChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.SubscriberStateChangedNotification.assignment)
  return assignment_;
}

// -------------------------------------------------------------------

// MemberRoleChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool MemberRoleChangedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool MemberRoleChangedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberRoleChangedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& MemberRoleChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberRoleChangedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* MemberRoleChangedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.MemberRoleChangedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRoleChangedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRoleChangedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberRoleChangedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void MemberRoleChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.MemberRoleChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool MemberRoleChangedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberRoleChangedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void MemberRoleChangedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberRoleChangedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberRoleChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberRoleChangedNotification.club_id)
  return _internal_club_id();
}
inline void MemberRoleChangedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void MemberRoleChangedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MemberRoleChangedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.RoleAssignment assignment = 4;
inline int MemberRoleChangedNotification::_internal_assignment_size() const {
  return assignment_.size();
}
inline int MemberRoleChangedNotification::assignment_size() const {
  return _internal_assignment_size();
}
inline ::bgs::protocol::club::v1::RoleAssignment* MemberRoleChangedNotification::mutable_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MemberRoleChangedNotification.assignment)
  return assignment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::RoleAssignment >*
MemberRoleChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MemberRoleChangedNotification.assignment)
  return &assignment_;
}
inline const ::bgs::protocol::club::v1::RoleAssignment& MemberRoleChangedNotification::_internal_assignment(int index) const {
  return assignment_.Get(index);
}
inline const ::bgs::protocol::club::v1::RoleAssignment& MemberRoleChangedNotification::assignment(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MemberRoleChangedNotification.assignment)
  return _internal_assignment(index);
}
inline ::bgs::protocol::club::v1::RoleAssignment* MemberRoleChangedNotification::_internal_add_assignment() {
  return assignment_.Add();
}
inline ::bgs::protocol::club::v1::RoleAssignment* MemberRoleChangedNotification::add_assignment() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MemberRoleChangedNotification.assignment)
  return _internal_add_assignment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::RoleAssignment >&
MemberRoleChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MemberRoleChangedNotification.assignment)
  return assignment_;
}

// -------------------------------------------------------------------

// InvitationAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool InvitationAddedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool InvitationAddedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& InvitationAddedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& InvitationAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.InvitationAddedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* InvitationAddedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.InvitationAddedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* InvitationAddedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* InvitationAddedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.InvitationAddedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void InvitationAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.InvitationAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool InvitationAddedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InvitationAddedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void InvitationAddedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvitationAddedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvitationAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.InvitationAddedNotification.club_id)
  return _internal_club_id();
}
inline void InvitationAddedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void InvitationAddedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.InvitationAddedNotification.club_id)
}

// optional .bgs.protocol.club.v1.ClubInvitation invitation = 4;
inline bool InvitationAddedNotification::_internal_has_invitation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || invitation_ != nullptr);
  return value;
}
inline bool InvitationAddedNotification::has_invitation() const {
  return _internal_has_invitation();
}
inline const ::bgs::protocol::club::v1::ClubInvitation& InvitationAddedNotification::_internal_invitation() const {
  const ::bgs::protocol::club::v1::ClubInvitation* p = invitation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubInvitation*>(
      &::bgs::protocol::club::v1::_ClubInvitation_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubInvitation& InvitationAddedNotification::invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.InvitationAddedNotification.invitation)
  return _internal_invitation();
}
inline ::bgs::protocol::club::v1::ClubInvitation* InvitationAddedNotification::release_invitation() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.InvitationAddedNotification.invitation)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubInvitation* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubInvitation* InvitationAddedNotification::_internal_mutable_invitation() {
  _has_bits_[0] |= 0x00000002u;
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubInvitation>(GetArenaNoVirtual());
    invitation_ = p;
  }
  return invitation_;
}
inline ::bgs::protocol::club::v1::ClubInvitation* InvitationAddedNotification::mutable_invitation() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.InvitationAddedNotification.invitation)
  return _internal_mutable_invitation();
}
inline void InvitationAddedNotification::set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitation* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.InvitationAddedNotification.invitation)
}

// -------------------------------------------------------------------

// InvitationRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool InvitationRemovedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool InvitationRemovedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& InvitationRemovedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& InvitationRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.InvitationRemovedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* InvitationRemovedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.InvitationRemovedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* InvitationRemovedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* InvitationRemovedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.InvitationRemovedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void InvitationRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.InvitationRemovedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool InvitationRemovedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InvitationRemovedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void InvitationRemovedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvitationRemovedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvitationRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.InvitationRemovedNotification.club_id)
  return _internal_club_id();
}
inline void InvitationRemovedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void InvitationRemovedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.InvitationRemovedNotification.club_id)
}

// optional fixed64 invitation_id = 4;
inline bool InvitationRemovedNotification::_internal_has_invitation_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InvitationRemovedNotification::has_invitation_id() const {
  return _internal_has_invitation_id();
}
inline void InvitationRemovedNotification::clear_invitation_id() {
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvitationRemovedNotification::_internal_invitation_id() const {
  return invitation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvitationRemovedNotification::invitation_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.InvitationRemovedNotification.invitation_id)
  return _internal_invitation_id();
}
inline void InvitationRemovedNotification::_internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  invitation_id_ = value;
}
inline void InvitationRemovedNotification::set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invitation_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.InvitationRemovedNotification.invitation_id)
}

// optional .bgs.protocol.InvitationRemovedReason reason = 5 [default = INVITATION_REMOVED_REASON_ACCEPTED];
inline bool InvitationRemovedNotification::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InvitationRemovedNotification::has_reason() const {
  return _internal_has_reason();
}
inline void InvitationRemovedNotification::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::InvitationRemovedReason InvitationRemovedNotification::_internal_reason() const {
  return static_cast< ::bgs::protocol::InvitationRemovedReason >(reason_);
}
inline ::bgs::protocol::InvitationRemovedReason InvitationRemovedNotification::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.InvitationRemovedNotification.reason)
  return _internal_reason();
}
inline void InvitationRemovedNotification::_internal_set_reason(::bgs::protocol::InvitationRemovedReason value) {
  assert(::bgs::protocol::InvitationRemovedReason_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reason_ = value;
}
inline void InvitationRemovedNotification::set_reason(::bgs::protocol::InvitationRemovedReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.InvitationRemovedNotification.reason)
}

// -------------------------------------------------------------------

// SuggestionAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SuggestionAddedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SuggestionAddedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SuggestionAddedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SuggestionAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SuggestionAddedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionAddedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SuggestionAddedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionAddedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionAddedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SuggestionAddedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void SuggestionAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SuggestionAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SuggestionAddedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SuggestionAddedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void SuggestionAddedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuggestionAddedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuggestionAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SuggestionAddedNotification.club_id)
  return _internal_club_id();
}
inline void SuggestionAddedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void SuggestionAddedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SuggestionAddedNotification.club_id)
}

// optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 4;
inline bool SuggestionAddedNotification::_internal_has_suggestion() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || suggestion_ != nullptr);
  return value;
}
inline bool SuggestionAddedNotification::has_suggestion() const {
  return _internal_has_suggestion();
}
inline const ::bgs::protocol::club::v1::ClubSuggestion& SuggestionAddedNotification::_internal_suggestion() const {
  const ::bgs::protocol::club::v1::ClubSuggestion* p = suggestion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSuggestion*>(
      &::bgs::protocol::club::v1::_ClubSuggestion_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSuggestion& SuggestionAddedNotification::suggestion() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SuggestionAddedNotification.suggestion)
  return _internal_suggestion();
}
inline ::bgs::protocol::club::v1::ClubSuggestion* SuggestionAddedNotification::release_suggestion() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SuggestionAddedNotification.suggestion)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubSuggestion* temp = suggestion_;
  suggestion_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSuggestion* SuggestionAddedNotification::_internal_mutable_suggestion() {
  _has_bits_[0] |= 0x00000002u;
  if (suggestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSuggestion>(GetArenaNoVirtual());
    suggestion_ = p;
  }
  return suggestion_;
}
inline ::bgs::protocol::club::v1::ClubSuggestion* SuggestionAddedNotification::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SuggestionAddedNotification.suggestion)
  return _internal_mutable_suggestion();
}
inline void SuggestionAddedNotification::set_allocated_suggestion(::bgs::protocol::club::v1::ClubSuggestion* suggestion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggestion_);
  }
  if (suggestion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggestion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggestion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  suggestion_ = suggestion;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SuggestionAddedNotification.suggestion)
}

// -------------------------------------------------------------------

// SuggestionRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SuggestionRemovedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SuggestionRemovedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SuggestionRemovedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SuggestionRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SuggestionRemovedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionRemovedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SuggestionRemovedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionRemovedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionRemovedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SuggestionRemovedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void SuggestionRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SuggestionRemovedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SuggestionRemovedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SuggestionRemovedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void SuggestionRemovedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuggestionRemovedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuggestionRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SuggestionRemovedNotification.club_id)
  return _internal_club_id();
}
inline void SuggestionRemovedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void SuggestionRemovedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SuggestionRemovedNotification.club_id)
}

// optional fixed64 suggestion_id = 4;
inline bool SuggestionRemovedNotification::_internal_has_suggestion_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SuggestionRemovedNotification::has_suggestion_id() const {
  return _internal_has_suggestion_id();
}
inline void SuggestionRemovedNotification::clear_suggestion_id() {
  suggestion_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuggestionRemovedNotification::_internal_suggestion_id() const {
  return suggestion_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SuggestionRemovedNotification::suggestion_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SuggestionRemovedNotification.suggestion_id)
  return _internal_suggestion_id();
}
inline void SuggestionRemovedNotification::_internal_set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  suggestion_id_ = value;
}
inline void SuggestionRemovedNotification::set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_suggestion_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SuggestionRemovedNotification.suggestion_id)
}

// optional .bgs.protocol.SuggestionRemovedReason reason = 5 [default = SUGGESTION_REMOVED_REASON_APPROVED];
inline bool SuggestionRemovedNotification::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SuggestionRemovedNotification::has_reason() const {
  return _internal_has_reason();
}
inline void SuggestionRemovedNotification::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::SuggestionRemovedReason SuggestionRemovedNotification::_internal_reason() const {
  return static_cast< ::bgs::protocol::SuggestionRemovedReason >(reason_);
}
inline ::bgs::protocol::SuggestionRemovedReason SuggestionRemovedNotification::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SuggestionRemovedNotification.reason)
  return _internal_reason();
}
inline void SuggestionRemovedNotification::_internal_set_reason(::bgs::protocol::SuggestionRemovedReason value) {
  assert(::bgs::protocol::SuggestionRemovedReason_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reason_ = value;
}
inline void SuggestionRemovedNotification::set_reason(::bgs::protocol::SuggestionRemovedReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SuggestionRemovedNotification.reason)
}

// -------------------------------------------------------------------

// StreamAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamAddedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamAddedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamAddedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAddedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamAddedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamAddedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamAddedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamAddedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamAddedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamAddedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamAddedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamAddedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamAddedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAddedNotification.club_id)
  return _internal_club_id();
}
inline void StreamAddedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void StreamAddedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamAddedNotification.club_id)
}

// optional .bgs.protocol.club.v1.Stream stream = 4;
inline bool StreamAddedNotification::_internal_has_stream() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stream_ != nullptr);
  return value;
}
inline bool StreamAddedNotification::has_stream() const {
  return _internal_has_stream();
}
inline const ::bgs::protocol::club::v1::Stream& StreamAddedNotification::_internal_stream() const {
  const ::bgs::protocol::club::v1::Stream* p = stream_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::Stream*>(
      &::bgs::protocol::club::v1::_Stream_default_instance_);
}
inline const ::bgs::protocol::club::v1::Stream& StreamAddedNotification::stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAddedNotification.stream)
  return _internal_stream();
}
inline ::bgs::protocol::club::v1::Stream* StreamAddedNotification::release_stream() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamAddedNotification.stream)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::Stream* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::Stream* StreamAddedNotification::_internal_mutable_stream() {
  _has_bits_[0] |= 0x00000002u;
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::Stream>(GetArenaNoVirtual());
    stream_ = p;
  }
  return stream_;
}
inline ::bgs::protocol::club::v1::Stream* StreamAddedNotification::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamAddedNotification.stream)
  return _internal_mutable_stream();
}
inline void StreamAddedNotification::set_allocated_stream(::bgs::protocol::club::v1::Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamAddedNotification.stream)
}

// -------------------------------------------------------------------

// StreamRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamRemovedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamRemovedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamRemovedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamRemovedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamRemovedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamRemovedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamRemovedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamRemovedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamRemovedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamRemovedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamRemovedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamRemovedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamRemovedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamRemovedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamRemovedNotification.club_id)
  return _internal_club_id();
}
inline void StreamRemovedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void StreamRemovedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamRemovedNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamRemovedNotification::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamRemovedNotification::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamRemovedNotification::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamRemovedNotification::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamRemovedNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamRemovedNotification.stream_id)
  return _internal_stream_id();
}
inline void StreamRemovedNotification::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void StreamRemovedNotification::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamRemovedNotification.stream_id)
}

// -------------------------------------------------------------------

// StreamStateChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamStateChangedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamStateChangedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamStateChangedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamStateChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateChangedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamStateChangedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamStateChangedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamStateChangedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamStateChangedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateChangedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamStateChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamStateChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamStateChangedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamStateChangedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamStateChangedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamStateChangedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamStateChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateChangedNotification.club_id)
  return _internal_club_id();
}
inline void StreamStateChangedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void StreamStateChangedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateChangedNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamStateChangedNotification::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamStateChangedNotification::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamStateChangedNotification::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamStateChangedNotification::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamStateChangedNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateChangedNotification.stream_id)
  return _internal_stream_id();
}
inline void StreamStateChangedNotification::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void StreamStateChangedNotification::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateChangedNotification.stream_id)
}

// optional .bgs.protocol.club.v1.StreamStateAssignment assignment = 5;
inline bool StreamStateChangedNotification::_internal_has_assignment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || assignment_ != nullptr);
  return value;
}
inline bool StreamStateChangedNotification::has_assignment() const {
  return _internal_has_assignment();
}
inline const ::bgs::protocol::club::v1::StreamStateAssignment& StreamStateChangedNotification::_internal_assignment() const {
  const ::bgs::protocol::club::v1::StreamStateAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamStateAssignment*>(
      &::bgs::protocol::club::v1::_StreamStateAssignment_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamStateAssignment& StreamStateChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateChangedNotification.assignment)
  return _internal_assignment();
}
inline ::bgs::protocol::club::v1::StreamStateAssignment* StreamStateChangedNotification::release_assignment() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamStateChangedNotification.assignment)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::StreamStateAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamStateAssignment* StreamStateChangedNotification::_internal_mutable_assignment() {
  _has_bits_[0] |= 0x00000002u;
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamStateAssignment>(GetArenaNoVirtual());
    assignment_ = p;
  }
  return assignment_;
}
inline ::bgs::protocol::club::v1::StreamStateAssignment* StreamStateChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateChangedNotification.assignment)
  return _internal_mutable_assignment();
}
inline void StreamStateChangedNotification::set_allocated_assignment(::bgs::protocol::club::v1::StreamStateAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(assignment_);
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamStateChangedNotification.assignment)
}

// -------------------------------------------------------------------

// StreamMessageAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamMessageAddedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamMessageAddedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMessageAddedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMessageAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessageAddedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageAddedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMessageAddedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageAddedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageAddedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMessageAddedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamMessageAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMessageAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamMessageAddedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamMessageAddedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamMessageAddedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessageAddedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessageAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessageAddedNotification.club_id)
  return _internal_club_id();
}
inline void StreamMessageAddedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void StreamMessageAddedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMessageAddedNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamMessageAddedNotification::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamMessageAddedNotification::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamMessageAddedNotification::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessageAddedNotification::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessageAddedNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessageAddedNotification.stream_id)
  return _internal_stream_id();
}
inline void StreamMessageAddedNotification::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void StreamMessageAddedNotification::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMessageAddedNotification.stream_id)
}

// optional .bgs.protocol.club.v1.StreamMessage message = 5;
inline bool StreamMessageAddedNotification::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool StreamMessageAddedNotification::has_message() const {
  return _internal_has_message();
}
inline const ::bgs::protocol::club::v1::StreamMessage& StreamMessageAddedNotification::_internal_message() const {
  const ::bgs::protocol::club::v1::StreamMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamMessage*>(
      &::bgs::protocol::club::v1::_StreamMessage_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamMessage& StreamMessageAddedNotification::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessageAddedNotification.message)
  return _internal_message();
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMessageAddedNotification::release_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMessageAddedNotification.message)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::StreamMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMessageAddedNotification::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMessageAddedNotification::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMessageAddedNotification.message)
  return _internal_mutable_message();
}
inline void StreamMessageAddedNotification::set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMessageAddedNotification.message)
}

// -------------------------------------------------------------------

// StreamMessageUpdatedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamMessageUpdatedNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamMessageUpdatedNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMessageUpdatedNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMessageUpdatedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessageUpdatedNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageUpdatedNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMessageUpdatedNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageUpdatedNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageUpdatedNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMessageUpdatedNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamMessageUpdatedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMessageUpdatedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamMessageUpdatedNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamMessageUpdatedNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamMessageUpdatedNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessageUpdatedNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessageUpdatedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessageUpdatedNotification.club_id)
  return _internal_club_id();
}
inline void StreamMessageUpdatedNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void StreamMessageUpdatedNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMessageUpdatedNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamMessageUpdatedNotification::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamMessageUpdatedNotification::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamMessageUpdatedNotification::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessageUpdatedNotification::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessageUpdatedNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessageUpdatedNotification.stream_id)
  return _internal_stream_id();
}
inline void StreamMessageUpdatedNotification::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void StreamMessageUpdatedNotification::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMessageUpdatedNotification.stream_id)
}

// optional .bgs.protocol.club.v1.StreamMessage message = 5;
inline bool StreamMessageUpdatedNotification::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool StreamMessageUpdatedNotification::has_message() const {
  return _internal_has_message();
}
inline const ::bgs::protocol::club::v1::StreamMessage& StreamMessageUpdatedNotification::_internal_message() const {
  const ::bgs::protocol::club::v1::StreamMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamMessage*>(
      &::bgs::protocol::club::v1::_StreamMessage_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamMessage& StreamMessageUpdatedNotification::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessageUpdatedNotification.message)
  return _internal_message();
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMessageUpdatedNotification::release_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMessageUpdatedNotification.message)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::StreamMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMessageUpdatedNotification::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMessageUpdatedNotification::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMessageUpdatedNotification.message)
  return _internal_mutable_message();
}
inline void StreamMessageUpdatedNotification::set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMessageUpdatedNotification.message)
}

// -------------------------------------------------------------------

// StreamTypingIndicatorNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamTypingIndicatorNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamTypingIndicatorNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamTypingIndicatorNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamTypingIndicatorNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamTypingIndicatorNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamTypingIndicatorNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamTypingIndicatorNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamTypingIndicatorNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamTypingIndicatorNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamTypingIndicatorNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamTypingIndicatorNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamTypingIndicatorNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamTypingIndicatorNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamTypingIndicatorNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamTypingIndicatorNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamTypingIndicatorNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamTypingIndicatorNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamTypingIndicatorNotification.club_id)
  return _internal_club_id();
}
inline void StreamTypingIndicatorNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void StreamTypingIndicatorNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamTypingIndicatorNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamTypingIndicatorNotification::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamTypingIndicatorNotification::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamTypingIndicatorNotification::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamTypingIndicatorNotification::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamTypingIndicatorNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamTypingIndicatorNotification.stream_id)
  return _internal_stream_id();
}
inline void StreamTypingIndicatorNotification::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void StreamTypingIndicatorNotification::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamTypingIndicatorNotification.stream_id)
}

// repeated .bgs.protocol.club.v1.StreamTypingIndicator indicator = 5;
inline int StreamTypingIndicatorNotification::_internal_indicator_size() const {
  return indicator_.size();
}
inline int StreamTypingIndicatorNotification::indicator_size() const {
  return _internal_indicator_size();
}
inline ::bgs::protocol::club::v1::StreamTypingIndicator* StreamTypingIndicatorNotification::mutable_indicator(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamTypingIndicatorNotification.indicator)
  return indicator_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamTypingIndicator >*
StreamTypingIndicatorNotification::mutable_indicator() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.StreamTypingIndicatorNotification.indicator)
  return &indicator_;
}
inline const ::bgs::protocol::club::v1::StreamTypingIndicator& StreamTypingIndicatorNotification::_internal_indicator(int index) const {
  return indicator_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamTypingIndicator& StreamTypingIndicatorNotification::indicator(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamTypingIndicatorNotification.indicator)
  return _internal_indicator(index);
}
inline ::bgs::protocol::club::v1::StreamTypingIndicator* StreamTypingIndicatorNotification::_internal_add_indicator() {
  return indicator_.Add();
}
inline ::bgs::protocol::club::v1::StreamTypingIndicator* StreamTypingIndicatorNotification::add_indicator() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.StreamTypingIndicatorNotification.indicator)
  return _internal_add_indicator();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamTypingIndicator >&
StreamTypingIndicatorNotification::indicator() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.StreamTypingIndicatorNotification.indicator)
  return indicator_;
}

// -------------------------------------------------------------------

// StreamUnreadIndicatorNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamUnreadIndicatorNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamUnreadIndicatorNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamUnreadIndicatorNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamUnreadIndicatorNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamUnreadIndicatorNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamUnreadIndicatorNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamUnreadIndicatorNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamUnreadIndicatorNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamUnreadIndicatorNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamUnreadIndicatorNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamUnreadIndicatorNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamUnreadIndicatorNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamUnreadIndicatorNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.club_id)
  return _internal_club_id();
}
inline void StreamUnreadIndicatorNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void StreamUnreadIndicatorNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.club_id)
}

// optional .bgs.protocol.club.v1.StreamEventTime event = 4;
inline bool StreamUnreadIndicatorNotification::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || event_ != nullptr);
  return value;
}
inline bool StreamUnreadIndicatorNotification::has_event() const {
  return _internal_has_event();
}
inline const ::bgs::protocol::club::v1::StreamEventTime& StreamUnreadIndicatorNotification::_internal_event() const {
  const ::bgs::protocol::club::v1::StreamEventTime* p = event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamEventTime*>(
      &::bgs::protocol::club::v1::_StreamEventTime_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamEventTime& StreamUnreadIndicatorNotification::event() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.event)
  return _internal_event();
}
inline ::bgs::protocol::club::v1::StreamEventTime* StreamUnreadIndicatorNotification::release_event() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.event)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::StreamEventTime* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamEventTime* StreamUnreadIndicatorNotification::_internal_mutable_event() {
  _has_bits_[0] |= 0x00000002u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamEventTime>(GetArenaNoVirtual());
    event_ = p;
  }
  return event_;
}
inline ::bgs::protocol::club::v1::StreamEventTime* StreamUnreadIndicatorNotification::mutable_event() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.event)
  return _internal_mutable_event();
}
inline void StreamUnreadIndicatorNotification::set_allocated_event(::bgs::protocol::club::v1::StreamEventTime* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamUnreadIndicatorNotification.event)
}

// -------------------------------------------------------------------

// StreamAdvanceViewTimeNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamAdvanceViewTimeNotification::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool StreamAdvanceViewTimeNotification::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamAdvanceViewTimeNotification::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamAdvanceViewTimeNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamAdvanceViewTimeNotification::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamAdvanceViewTimeNotification::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamAdvanceViewTimeNotification::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.agent_id)
  return _internal_mutable_agent_id();
}
inline void StreamAdvanceViewTimeNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamAdvanceViewTimeNotification::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamAdvanceViewTimeNotification::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamAdvanceViewTimeNotification::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamAdvanceViewTimeNotification::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamAdvanceViewTimeNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.club_id)
  return _internal_club_id();
}
inline void StreamAdvanceViewTimeNotification::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void StreamAdvanceViewTimeNotification::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.club_id)
}

// repeated .bgs.protocol.club.v1.StreamAdvanceViewTime view = 4;
inline int StreamAdvanceViewTimeNotification::_internal_view_size() const {
  return view_.size();
}
inline int StreamAdvanceViewTimeNotification::view_size() const {
  return _internal_view_size();
}
inline ::bgs::protocol::club::v1::StreamAdvanceViewTime* StreamAdvanceViewTimeNotification::mutable_view(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.view)
  return view_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamAdvanceViewTime >*
StreamAdvanceViewTimeNotification::mutable_view() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.view)
  return &view_;
}
inline const ::bgs::protocol::club::v1::StreamAdvanceViewTime& StreamAdvanceViewTimeNotification::_internal_view(int index) const {
  return view_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamAdvanceViewTime& StreamAdvanceViewTimeNotification::view(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.view)
  return _internal_view(index);
}
inline ::bgs::protocol::club::v1::StreamAdvanceViewTime* StreamAdvanceViewTimeNotification::_internal_add_view() {
  return view_.Add();
}
inline ::bgs::protocol::club::v1::StreamAdvanceViewTime* StreamAdvanceViewTimeNotification::add_view() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.view)
  return _internal_add_view();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamAdvanceViewTime >&
StreamAdvanceViewTimeNotification::view() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.StreamAdvanceViewTimeNotification.view)
  return view_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fnotification_2eproto
