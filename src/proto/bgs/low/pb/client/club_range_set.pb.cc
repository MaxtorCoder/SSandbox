// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_range_set.proto

#include "bgs/low/pb/client/club_range_set.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsignedIntRange_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubBanRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubInvitationRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubMemberRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubStreamRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubSuggestionRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubTicketRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubTypeRangeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubTypeRangeSet> _instance;
} _ClubTypeRangeSet_default_instance_;
class ClubMemberRangeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubMemberRangeSet> _instance;
} _ClubMemberRangeSet_default_instance_;
class ClubStreamRangeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubStreamRangeSet> _instance;
} _ClubStreamRangeSet_default_instance_;
class ClubInvitationRangeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubInvitationRangeSet> _instance;
} _ClubInvitationRangeSet_default_instance_;
class ClubSuggestionRangeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubSuggestionRangeSet> _instance;
} _ClubSuggestionRangeSet_default_instance_;
class ClubTicketRangeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubTicketRangeSet> _instance;
} _ClubTicketRangeSet_default_instance_;
class ClubBanRangeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubBanRangeSet> _instance;
} _ClubBanRangeSet_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ClubBanRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubBanRangeSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubBanRangeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubBanRangeSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubBanRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubBanRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto}, {
      &scc_info_UnsignedIntRange_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto.base,}};

static void InitDefaultsscc_info_ClubInvitationRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubInvitationRangeSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubInvitationRangeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubInvitationRangeSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubInvitationRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubInvitationRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto}, {
      &scc_info_UnsignedIntRange_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto.base,}};

static void InitDefaultsscc_info_ClubMemberRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubMemberRangeSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubMemberRangeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubMemberRangeSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubMemberRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubMemberRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto}, {
      &scc_info_UnsignedIntRange_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto.base,}};

static void InitDefaultsscc_info_ClubStreamRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubStreamRangeSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubStreamRangeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubStreamRangeSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubStreamRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubStreamRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto}, {
      &scc_info_UnsignedIntRange_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto.base,}};

static void InitDefaultsscc_info_ClubSuggestionRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubSuggestionRangeSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubSuggestionRangeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubSuggestionRangeSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubSuggestionRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubSuggestionRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto}, {
      &scc_info_UnsignedIntRange_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto.base,}};

static void InitDefaultsscc_info_ClubTicketRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubTicketRangeSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubTicketRangeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubTicketRangeSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubTicketRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubTicketRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto}, {
      &scc_info_UnsignedIntRange_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto.base,}};

static void InitDefaultsscc_info_ClubTypeRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubTypeRangeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubTypeRangeSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ClubTypeRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ClubTypeRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto}, {
      &scc_info_UnsignedIntRange_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto.base,
      &scc_info_ClubMemberRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
      &scc_info_ClubStreamRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
      &scc_info_ClubInvitationRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
      &scc_info_ClubSuggestionRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
      &scc_info_ClubTicketRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
      &scc_info_ClubBanRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, name_range_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, description_range_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, broadcast_range_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, short_name_range_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, member_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, suggestion_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, ticket_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTypeRangeSet, ban_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMemberRangeSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMemberRangeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMemberRangeSet, count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMemberRangeSet, voice_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMemberRangeSet, stream_subscriptions_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubMemberRangeSet, note_range_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamRangeSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamRangeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamRangeSet, count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamRangeSet, name_range_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamRangeSet, subject_range_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamRangeSet, message_range_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitationRangeSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitationRangeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubInvitationRangeSet, count_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestionRangeSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestionRangeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubSuggestionRangeSet, count_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicketRangeSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicketRangeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubTicketRangeSet, count_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBanRangeSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBanRangeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBanRangeSet, count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubBanRangeSet, reason_range_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::bgs::protocol::club::v1::ClubTypeRangeSet)},
  { 25, 34, sizeof(::bgs::protocol::club::v1::ClubMemberRangeSet)},
  { 38, 47, sizeof(::bgs::protocol::club::v1::ClubStreamRangeSet)},
  { 51, 57, sizeof(::bgs::protocol::club::v1::ClubInvitationRangeSet)},
  { 58, 64, sizeof(::bgs::protocol::club::v1::ClubSuggestionRangeSet)},
  { 65, 71, sizeof(::bgs::protocol::club::v1::ClubTicketRangeSet)},
  { 72, 79, sizeof(::bgs::protocol::club::v1::ClubBanRangeSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubMemberRangeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubStreamRangeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubInvitationRangeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubSuggestionRangeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubTicketRangeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubBanRangeSet_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&bgs/low/pb/client/club_range_set.proto"
  "\022\024bgs.protocol.club.v1\032/bgs/low/pb/clien"
  "t/global_extensions/range.proto\"\332\004\n\020Club"
  "TypeRangeSet\0222\n\nname_range\030\002 \001(\0132\036.bgs.p"
  "rotocol.UnsignedIntRange\0229\n\021description_"
  "range\030\003 \001(\0132\036.bgs.protocol.UnsignedIntRa"
  "nge\0227\n\017broadcast_range\030\004 \001(\0132\036.bgs.proto"
  "col.UnsignedIntRange\0228\n\020short_name_range"
  "\030\007 \001(\0132\036.bgs.protocol.UnsignedIntRange\0228"
  "\n\006member\030\031 \001(\0132(.bgs.protocol.club.v1.Cl"
  "ubMemberRangeSet\0228\n\006stream\030\032 \001(\0132(.bgs.p"
  "rotocol.club.v1.ClubStreamRangeSet\022@\n\nin"
  "vitation\030\033 \001(\0132,.bgs.protocol.club.v1.Cl"
  "ubInvitationRangeSet\022@\n\nsuggestion\030\034 \001(\013"
  "2,.bgs.protocol.club.v1.ClubSuggestionRa"
  "ngeSet\0228\n\006ticket\030\035 \001(\0132(.bgs.protocol.cl"
  "ub.v1.ClubTicketRangeSet\0222\n\003ban\030\036 \001(\0132%."
  "bgs.protocol.club.v1.ClubBanRangeSet\"\344\001\n"
  "\022ClubMemberRangeSet\022-\n\005count\030\001 \001(\0132\036.bgs"
  ".protocol.UnsignedIntRange\022-\n\005voice\030\003 \001("
  "\0132\036.bgs.protocol.UnsignedIntRange\022<\n\024str"
  "eam_subscriptions\030\005 \001(\0132\036.bgs.protocol.U"
  "nsignedIntRange\0222\n\nnote_range\030\007 \001(\0132\036.bg"
  "s.protocol.UnsignedIntRange\"\345\001\n\022ClubStre"
  "amRangeSet\022-\n\005count\030\001 \001(\0132\036.bgs.protocol"
  ".UnsignedIntRange\0222\n\nname_range\030\003 \001(\0132\036."
  "bgs.protocol.UnsignedIntRange\0225\n\rsubject"
  "_range\030\004 \001(\0132\036.bgs.protocol.UnsignedIntR"
  "ange\0225\n\rmessage_range\030\005 \001(\0132\036.bgs.protoc"
  "ol.UnsignedIntRange\"G\n\026ClubInvitationRan"
  "geSet\022-\n\005count\030\001 \001(\0132\036.bgs.protocol.Unsi"
  "gnedIntRange\"G\n\026ClubSuggestionRangeSet\022-"
  "\n\005count\030\001 \001(\0132\036.bgs.protocol.UnsignedInt"
  "Range\"C\n\022ClubTicketRangeSet\022-\n\005count\030\001 \001"
  "(\0132\036.bgs.protocol.UnsignedIntRange\"v\n\017Cl"
  "ubBanRangeSet\022-\n\005count\030\001 \001(\0132\036.bgs.proto"
  "col.UnsignedIntRange\0224\n\014reason_range\030\003 \001"
  "(\0132\036.bgs.protocol.UnsignedIntRange"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto_deps[1] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2frange_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto_sccs[7] = {
  &scc_info_ClubBanRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
  &scc_info_ClubInvitationRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
  &scc_info_ClubMemberRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
  &scc_info_ClubStreamRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
  &scc_info_ClubSuggestionRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
  &scc_info_ClubTicketRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
  &scc_info_ClubTypeRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto, "bgs/low/pb/client/club_range_set.proto", 1514,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto, 7, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void ClubTypeRangeSet::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->name_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->description_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->broadcast_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->short_name_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->member_ = const_cast< ::bgs::protocol::club::v1::ClubMemberRangeSet*>(
      ::bgs::protocol::club::v1::ClubMemberRangeSet::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->stream_ = const_cast< ::bgs::protocol::club::v1::ClubStreamRangeSet*>(
      ::bgs::protocol::club::v1::ClubStreamRangeSet::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->invitation_ = const_cast< ::bgs::protocol::club::v1::ClubInvitationRangeSet*>(
      ::bgs::protocol::club::v1::ClubInvitationRangeSet::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->suggestion_ = const_cast< ::bgs::protocol::club::v1::ClubSuggestionRangeSet*>(
      ::bgs::protocol::club::v1::ClubSuggestionRangeSet::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::bgs::protocol::club::v1::ClubTicketRangeSet*>(
      ::bgs::protocol::club::v1::ClubTicketRangeSet::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_._instance.get_mutable()->ban_ = const_cast< ::bgs::protocol::club::v1::ClubBanRangeSet*>(
      ::bgs::protocol::club::v1::ClubBanRangeSet::internal_default_instance());
}
class ClubTypeRangeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubTypeRangeSet>()._has_bits_);
  static const ::bgs::protocol::UnsignedIntRange& name_range(const ClubTypeRangeSet* msg);
  static void set_has_name_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::UnsignedIntRange& description_range(const ClubTypeRangeSet* msg);
  static void set_has_description_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::UnsignedIntRange& broadcast_range(const ClubTypeRangeSet* msg);
  static void set_has_broadcast_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::UnsignedIntRange& short_name_range(const ClubTypeRangeSet* msg);
  static void set_has_short_name_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::ClubMemberRangeSet& member(const ClubTypeRangeSet* msg);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::club::v1::ClubStreamRangeSet& stream(const ClubTypeRangeSet* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::bgs::protocol::club::v1::ClubInvitationRangeSet& invitation(const ClubTypeRangeSet* msg);
  static void set_has_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::bgs::protocol::club::v1::ClubSuggestionRangeSet& suggestion(const ClubTypeRangeSet* msg);
  static void set_has_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::bgs::protocol::club::v1::ClubTicketRangeSet& ticket(const ClubTypeRangeSet* msg);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::bgs::protocol::club::v1::ClubBanRangeSet& ban(const ClubTypeRangeSet* msg);
  static void set_has_ban(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::bgs::protocol::UnsignedIntRange&
ClubTypeRangeSet::_Internal::name_range(const ClubTypeRangeSet* msg) {
  return *msg->name_range_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubTypeRangeSet::_Internal::description_range(const ClubTypeRangeSet* msg) {
  return *msg->description_range_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubTypeRangeSet::_Internal::broadcast_range(const ClubTypeRangeSet* msg) {
  return *msg->broadcast_range_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubTypeRangeSet::_Internal::short_name_range(const ClubTypeRangeSet* msg) {
  return *msg->short_name_range_;
}
const ::bgs::protocol::club::v1::ClubMemberRangeSet&
ClubTypeRangeSet::_Internal::member(const ClubTypeRangeSet* msg) {
  return *msg->member_;
}
const ::bgs::protocol::club::v1::ClubStreamRangeSet&
ClubTypeRangeSet::_Internal::stream(const ClubTypeRangeSet* msg) {
  return *msg->stream_;
}
const ::bgs::protocol::club::v1::ClubInvitationRangeSet&
ClubTypeRangeSet::_Internal::invitation(const ClubTypeRangeSet* msg) {
  return *msg->invitation_;
}
const ::bgs::protocol::club::v1::ClubSuggestionRangeSet&
ClubTypeRangeSet::_Internal::suggestion(const ClubTypeRangeSet* msg) {
  return *msg->suggestion_;
}
const ::bgs::protocol::club::v1::ClubTicketRangeSet&
ClubTypeRangeSet::_Internal::ticket(const ClubTypeRangeSet* msg) {
  return *msg->ticket_;
}
const ::bgs::protocol::club::v1::ClubBanRangeSet&
ClubTypeRangeSet::_Internal::ban(const ClubTypeRangeSet* msg) {
  return *msg->ban_;
}
void ClubTypeRangeSet::clear_name_range() {
  if (name_range_ != nullptr) name_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubTypeRangeSet::clear_description_range() {
  if (description_range_ != nullptr) description_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ClubTypeRangeSet::clear_broadcast_range() {
  if (broadcast_range_ != nullptr) broadcast_range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ClubTypeRangeSet::clear_short_name_range() {
  if (short_name_range_ != nullptr) short_name_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ClubTypeRangeSet::ClubTypeRangeSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubTypeRangeSet)
}
ClubTypeRangeSet::ClubTypeRangeSet(const ClubTypeRangeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_name_range()) {
    name_range_ = new ::bgs::protocol::UnsignedIntRange(*from.name_range_);
  } else {
    name_range_ = nullptr;
  }
  if (from._internal_has_description_range()) {
    description_range_ = new ::bgs::protocol::UnsignedIntRange(*from.description_range_);
  } else {
    description_range_ = nullptr;
  }
  if (from._internal_has_broadcast_range()) {
    broadcast_range_ = new ::bgs::protocol::UnsignedIntRange(*from.broadcast_range_);
  } else {
    broadcast_range_ = nullptr;
  }
  if (from._internal_has_short_name_range()) {
    short_name_range_ = new ::bgs::protocol::UnsignedIntRange(*from.short_name_range_);
  } else {
    short_name_range_ = nullptr;
  }
  if (from._internal_has_member()) {
    member_ = new ::bgs::protocol::club::v1::ClubMemberRangeSet(*from.member_);
  } else {
    member_ = nullptr;
  }
  if (from._internal_has_stream()) {
    stream_ = new ::bgs::protocol::club::v1::ClubStreamRangeSet(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  if (from._internal_has_invitation()) {
    invitation_ = new ::bgs::protocol::club::v1::ClubInvitationRangeSet(*from.invitation_);
  } else {
    invitation_ = nullptr;
  }
  if (from._internal_has_suggestion()) {
    suggestion_ = new ::bgs::protocol::club::v1::ClubSuggestionRangeSet(*from.suggestion_);
  } else {
    suggestion_ = nullptr;
  }
  if (from._internal_has_ticket()) {
    ticket_ = new ::bgs::protocol::club::v1::ClubTicketRangeSet(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  if (from._internal_has_ban()) {
    ban_ = new ::bgs::protocol::club::v1::ClubBanRangeSet(*from.ban_);
  } else {
    ban_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubTypeRangeSet)
}

void ClubTypeRangeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubTypeRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  ::memset(&name_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_) -
      reinterpret_cast<char*>(&name_range_)) + sizeof(ban_));
}

ClubTypeRangeSet::~ClubTypeRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubTypeRangeSet)
  SharedDtor();
}

void ClubTypeRangeSet::SharedDtor() {
  if (this != internal_default_instance()) delete name_range_;
  if (this != internal_default_instance()) delete description_range_;
  if (this != internal_default_instance()) delete broadcast_range_;
  if (this != internal_default_instance()) delete short_name_range_;
  if (this != internal_default_instance()) delete member_;
  if (this != internal_default_instance()) delete stream_;
  if (this != internal_default_instance()) delete invitation_;
  if (this != internal_default_instance()) delete suggestion_;
  if (this != internal_default_instance()) delete ticket_;
  if (this != internal_default_instance()) delete ban_;
}

void ClubTypeRangeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubTypeRangeSet& ClubTypeRangeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubTypeRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  return *internal_default_instance();
}


void ClubTypeRangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(name_range_ != nullptr);
      name_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(description_range_ != nullptr);
      description_range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(broadcast_range_ != nullptr);
      broadcast_range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(short_name_range_ != nullptr);
      short_name_range_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(member_ != nullptr);
      member_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(stream_ != nullptr);
      stream_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(invitation_ != nullptr);
      invitation_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(suggestion_ != nullptr);
      suggestion_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(ticket_ != nullptr);
      ticket_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ban_ != nullptr);
      ban_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubTypeRangeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.UnsignedIntRange name_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange description_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_description_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_short_name_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_ban(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubTypeRangeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.UnsignedIntRange name_range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::name_range(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange description_range = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::description_range(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::broadcast_range(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::short_name_range(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::member(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::stream(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::invitation(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::suggestion(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::ticket(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::ban(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubTypeRangeSet)
  return target;
}

size_t ClubTypeRangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .bgs.protocol.UnsignedIntRange name_range = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_range_);
    }

    // optional .bgs.protocol.UnsignedIntRange description_range = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *description_range_);
    }

    // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_range_);
    }

    // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *short_name_range_);
    }

    // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_);
    }

    // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_);
    }

    // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *invitation_);
    }

    // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suggestion_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ticket_);
    }

    // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ban_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubTypeRangeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubTypeRangeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubTypeRangeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubTypeRangeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubTypeRangeSet)
    MergeFrom(*source);
  }
}

void ClubTypeRangeSet::MergeFrom(const ClubTypeRangeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_name_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_name_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_description_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_description_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_broadcast_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_broadcast_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_short_name_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_short_name_range());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_member()->::bgs::protocol::club::v1::ClubMemberRangeSet::MergeFrom(from._internal_member());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_stream()->::bgs::protocol::club::v1::ClubStreamRangeSet::MergeFrom(from._internal_stream());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_invitation()->::bgs::protocol::club::v1::ClubInvitationRangeSet::MergeFrom(from._internal_invitation());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_suggestion()->::bgs::protocol::club::v1::ClubSuggestionRangeSet::MergeFrom(from._internal_suggestion());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_ticket()->::bgs::protocol::club::v1::ClubTicketRangeSet::MergeFrom(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_ban()->::bgs::protocol::club::v1::ClubBanRangeSet::MergeFrom(from._internal_ban());
    }
  }
}

void ClubTypeRangeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubTypeRangeSet::CopyFrom(const ClubTypeRangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubTypeRangeSet::IsInitialized() const {
  return true;
}

void ClubTypeRangeSet::InternalSwap(ClubTypeRangeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_range_, other->name_range_);
  swap(description_range_, other->description_range_);
  swap(broadcast_range_, other->broadcast_range_);
  swap(short_name_range_, other->short_name_range_);
  swap(member_, other->member_);
  swap(stream_, other->stream_);
  swap(invitation_, other->invitation_);
  swap(suggestion_, other->suggestion_);
  swap(ticket_, other->ticket_);
  swap(ban_, other->ban_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubTypeRangeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubMemberRangeSet::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubMemberRangeSet_default_instance_._instance.get_mutable()->count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubMemberRangeSet_default_instance_._instance.get_mutable()->voice_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubMemberRangeSet_default_instance_._instance.get_mutable()->stream_subscriptions_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubMemberRangeSet_default_instance_._instance.get_mutable()->note_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
}
class ClubMemberRangeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubMemberRangeSet>()._has_bits_);
  static const ::bgs::protocol::UnsignedIntRange& count(const ClubMemberRangeSet* msg);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::UnsignedIntRange& voice(const ClubMemberRangeSet* msg);
  static void set_has_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::UnsignedIntRange& stream_subscriptions(const ClubMemberRangeSet* msg);
  static void set_has_stream_subscriptions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::UnsignedIntRange& note_range(const ClubMemberRangeSet* msg);
  static void set_has_note_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::UnsignedIntRange&
ClubMemberRangeSet::_Internal::count(const ClubMemberRangeSet* msg) {
  return *msg->count_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubMemberRangeSet::_Internal::voice(const ClubMemberRangeSet* msg) {
  return *msg->voice_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubMemberRangeSet::_Internal::stream_subscriptions(const ClubMemberRangeSet* msg) {
  return *msg->stream_subscriptions_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubMemberRangeSet::_Internal::note_range(const ClubMemberRangeSet* msg) {
  return *msg->note_range_;
}
void ClubMemberRangeSet::clear_count() {
  if (count_ != nullptr) count_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubMemberRangeSet::clear_voice() {
  if (voice_ != nullptr) voice_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ClubMemberRangeSet::clear_stream_subscriptions() {
  if (stream_subscriptions_ != nullptr) stream_subscriptions_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ClubMemberRangeSet::clear_note_range() {
  if (note_range_ != nullptr) note_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ClubMemberRangeSet::ClubMemberRangeSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMemberRangeSet)
}
ClubMemberRangeSet::ClubMemberRangeSet(const ClubMemberRangeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_count()) {
    count_ = new ::bgs::protocol::UnsignedIntRange(*from.count_);
  } else {
    count_ = nullptr;
  }
  if (from._internal_has_voice()) {
    voice_ = new ::bgs::protocol::UnsignedIntRange(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  if (from._internal_has_stream_subscriptions()) {
    stream_subscriptions_ = new ::bgs::protocol::UnsignedIntRange(*from.stream_subscriptions_);
  } else {
    stream_subscriptions_ = nullptr;
  }
  if (from._internal_has_note_range()) {
    note_range_ = new ::bgs::protocol::UnsignedIntRange(*from.note_range_);
  } else {
    note_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMemberRangeSet)
}

void ClubMemberRangeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubMemberRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&note_range_) -
      reinterpret_cast<char*>(&count_)) + sizeof(note_range_));
}

ClubMemberRangeSet::~ClubMemberRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMemberRangeSet)
  SharedDtor();
}

void ClubMemberRangeSet::SharedDtor() {
  if (this != internal_default_instance()) delete count_;
  if (this != internal_default_instance()) delete voice_;
  if (this != internal_default_instance()) delete stream_subscriptions_;
  if (this != internal_default_instance()) delete note_range_;
}

void ClubMemberRangeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubMemberRangeSet& ClubMemberRangeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubMemberRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  return *internal_default_instance();
}


void ClubMemberRangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(count_ != nullptr);
      count_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(voice_ != nullptr);
      voice_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stream_subscriptions_ != nullptr);
      stream_subscriptions_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(note_range_ != nullptr);
      note_range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubMemberRangeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange voice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_subscriptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange note_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_note_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubMemberRangeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::count(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange voice = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::voice(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stream_subscriptions(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange note_range = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::note_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMemberRangeSet)
  return target;
}

size_t ClubMemberRangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *count_);
    }

    // optional .bgs.protocol.UnsignedIntRange voice = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_);
    }

    // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_subscriptions_);
    }

    // optional .bgs.protocol.UnsignedIntRange note_range = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *note_range_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubMemberRangeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubMemberRangeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubMemberRangeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubMemberRangeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubMemberRangeSet)
    MergeFrom(*source);
  }
}

void ClubMemberRangeSet::MergeFrom(const ClubMemberRangeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_count());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_voice()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_voice());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stream_subscriptions()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_stream_subscriptions());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_note_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_note_range());
    }
  }
}

void ClubMemberRangeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMemberRangeSet::CopyFrom(const ClubMemberRangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMemberRangeSet::IsInitialized() const {
  return true;
}

void ClubMemberRangeSet::InternalSwap(ClubMemberRangeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
  swap(voice_, other->voice_);
  swap(stream_subscriptions_, other->stream_subscriptions_);
  swap(note_range_, other->note_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubMemberRangeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubStreamRangeSet::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubStreamRangeSet_default_instance_._instance.get_mutable()->count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubStreamRangeSet_default_instance_._instance.get_mutable()->name_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubStreamRangeSet_default_instance_._instance.get_mutable()->subject_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubStreamRangeSet_default_instance_._instance.get_mutable()->message_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
}
class ClubStreamRangeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubStreamRangeSet>()._has_bits_);
  static const ::bgs::protocol::UnsignedIntRange& count(const ClubStreamRangeSet* msg);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::UnsignedIntRange& name_range(const ClubStreamRangeSet* msg);
  static void set_has_name_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::UnsignedIntRange& subject_range(const ClubStreamRangeSet* msg);
  static void set_has_subject_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::UnsignedIntRange& message_range(const ClubStreamRangeSet* msg);
  static void set_has_message_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::UnsignedIntRange&
ClubStreamRangeSet::_Internal::count(const ClubStreamRangeSet* msg) {
  return *msg->count_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubStreamRangeSet::_Internal::name_range(const ClubStreamRangeSet* msg) {
  return *msg->name_range_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubStreamRangeSet::_Internal::subject_range(const ClubStreamRangeSet* msg) {
  return *msg->subject_range_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubStreamRangeSet::_Internal::message_range(const ClubStreamRangeSet* msg) {
  return *msg->message_range_;
}
void ClubStreamRangeSet::clear_count() {
  if (count_ != nullptr) count_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubStreamRangeSet::clear_name_range() {
  if (name_range_ != nullptr) name_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ClubStreamRangeSet::clear_subject_range() {
  if (subject_range_ != nullptr) subject_range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ClubStreamRangeSet::clear_message_range() {
  if (message_range_ != nullptr) message_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ClubStreamRangeSet::ClubStreamRangeSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStreamRangeSet)
}
ClubStreamRangeSet::ClubStreamRangeSet(const ClubStreamRangeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_count()) {
    count_ = new ::bgs::protocol::UnsignedIntRange(*from.count_);
  } else {
    count_ = nullptr;
  }
  if (from._internal_has_name_range()) {
    name_range_ = new ::bgs::protocol::UnsignedIntRange(*from.name_range_);
  } else {
    name_range_ = nullptr;
  }
  if (from._internal_has_subject_range()) {
    subject_range_ = new ::bgs::protocol::UnsignedIntRange(*from.subject_range_);
  } else {
    subject_range_ = nullptr;
  }
  if (from._internal_has_message_range()) {
    message_range_ = new ::bgs::protocol::UnsignedIntRange(*from.message_range_);
  } else {
    message_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStreamRangeSet)
}

void ClubStreamRangeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubStreamRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_range_) -
      reinterpret_cast<char*>(&count_)) + sizeof(message_range_));
}

ClubStreamRangeSet::~ClubStreamRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStreamRangeSet)
  SharedDtor();
}

void ClubStreamRangeSet::SharedDtor() {
  if (this != internal_default_instance()) delete count_;
  if (this != internal_default_instance()) delete name_range_;
  if (this != internal_default_instance()) delete subject_range_;
  if (this != internal_default_instance()) delete message_range_;
}

void ClubStreamRangeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubStreamRangeSet& ClubStreamRangeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubStreamRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  return *internal_default_instance();
}


void ClubStreamRangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(count_ != nullptr);
      count_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(name_range_ != nullptr);
      name_range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(subject_range_ != nullptr);
      subject_range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(message_range_ != nullptr);
      message_range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubStreamRangeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange name_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange message_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubStreamRangeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::count(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange name_range = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::name_range(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::subject_range(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange message_range = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::message_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubStreamRangeSet)
  return target;
}

size_t ClubStreamRangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *count_);
    }

    // optional .bgs.protocol.UnsignedIntRange name_range = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_range_);
    }

    // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subject_range_);
    }

    // optional .bgs.protocol.UnsignedIntRange message_range = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_range_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubStreamRangeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubStreamRangeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubStreamRangeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubStreamRangeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubStreamRangeSet)
    MergeFrom(*source);
  }
}

void ClubStreamRangeSet::MergeFrom(const ClubStreamRangeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_count());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_name_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_name_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_subject_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_subject_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_message_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_message_range());
    }
  }
}

void ClubStreamRangeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubStreamRangeSet::CopyFrom(const ClubStreamRangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubStreamRangeSet::IsInitialized() const {
  return true;
}

void ClubStreamRangeSet::InternalSwap(ClubStreamRangeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
  swap(name_range_, other->name_range_);
  swap(subject_range_, other->subject_range_);
  swap(message_range_, other->message_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubStreamRangeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubInvitationRangeSet::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubInvitationRangeSet_default_instance_._instance.get_mutable()->count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
}
class ClubInvitationRangeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubInvitationRangeSet>()._has_bits_);
  static const ::bgs::protocol::UnsignedIntRange& count(const ClubInvitationRangeSet* msg);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::UnsignedIntRange&
ClubInvitationRangeSet::_Internal::count(const ClubInvitationRangeSet* msg) {
  return *msg->count_;
}
void ClubInvitationRangeSet::clear_count() {
  if (count_ != nullptr) count_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClubInvitationRangeSet::ClubInvitationRangeSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubInvitationRangeSet)
}
ClubInvitationRangeSet::ClubInvitationRangeSet(const ClubInvitationRangeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_count()) {
    count_ = new ::bgs::protocol::UnsignedIntRange(*from.count_);
  } else {
    count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubInvitationRangeSet)
}

void ClubInvitationRangeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubInvitationRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  count_ = nullptr;
}

ClubInvitationRangeSet::~ClubInvitationRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubInvitationRangeSet)
  SharedDtor();
}

void ClubInvitationRangeSet::SharedDtor() {
  if (this != internal_default_instance()) delete count_;
}

void ClubInvitationRangeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubInvitationRangeSet& ClubInvitationRangeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubInvitationRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  return *internal_default_instance();
}


void ClubInvitationRangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(count_ != nullptr);
    count_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubInvitationRangeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubInvitationRangeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::count(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubInvitationRangeSet)
  return target;
}

size_t ClubInvitationRangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubInvitationRangeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubInvitationRangeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubInvitationRangeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubInvitationRangeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubInvitationRangeSet)
    MergeFrom(*source);
  }
}

void ClubInvitationRangeSet::MergeFrom(const ClubInvitationRangeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_count()) {
    _internal_mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_count());
  }
}

void ClubInvitationRangeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubInvitationRangeSet::CopyFrom(const ClubInvitationRangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubInvitationRangeSet::IsInitialized() const {
  return true;
}

void ClubInvitationRangeSet::InternalSwap(ClubInvitationRangeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubInvitationRangeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubSuggestionRangeSet::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubSuggestionRangeSet_default_instance_._instance.get_mutable()->count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
}
class ClubSuggestionRangeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubSuggestionRangeSet>()._has_bits_);
  static const ::bgs::protocol::UnsignedIntRange& count(const ClubSuggestionRangeSet* msg);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::UnsignedIntRange&
ClubSuggestionRangeSet::_Internal::count(const ClubSuggestionRangeSet* msg) {
  return *msg->count_;
}
void ClubSuggestionRangeSet::clear_count() {
  if (count_ != nullptr) count_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClubSuggestionRangeSet::ClubSuggestionRangeSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSuggestionRangeSet)
}
ClubSuggestionRangeSet::ClubSuggestionRangeSet(const ClubSuggestionRangeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_count()) {
    count_ = new ::bgs::protocol::UnsignedIntRange(*from.count_);
  } else {
    count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSuggestionRangeSet)
}

void ClubSuggestionRangeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubSuggestionRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  count_ = nullptr;
}

ClubSuggestionRangeSet::~ClubSuggestionRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  SharedDtor();
}

void ClubSuggestionRangeSet::SharedDtor() {
  if (this != internal_default_instance()) delete count_;
}

void ClubSuggestionRangeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubSuggestionRangeSet& ClubSuggestionRangeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubSuggestionRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  return *internal_default_instance();
}


void ClubSuggestionRangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(count_ != nullptr);
    count_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubSuggestionRangeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubSuggestionRangeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::count(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  return target;
}

size_t ClubSuggestionRangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubSuggestionRangeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubSuggestionRangeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubSuggestionRangeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubSuggestionRangeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubSuggestionRangeSet)
    MergeFrom(*source);
  }
}

void ClubSuggestionRangeSet::MergeFrom(const ClubSuggestionRangeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_count()) {
    _internal_mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_count());
  }
}

void ClubSuggestionRangeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSuggestionRangeSet::CopyFrom(const ClubSuggestionRangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSuggestionRangeSet::IsInitialized() const {
  return true;
}

void ClubSuggestionRangeSet::InternalSwap(ClubSuggestionRangeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubSuggestionRangeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubTicketRangeSet::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubTicketRangeSet_default_instance_._instance.get_mutable()->count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
}
class ClubTicketRangeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubTicketRangeSet>()._has_bits_);
  static const ::bgs::protocol::UnsignedIntRange& count(const ClubTicketRangeSet* msg);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::UnsignedIntRange&
ClubTicketRangeSet::_Internal::count(const ClubTicketRangeSet* msg) {
  return *msg->count_;
}
void ClubTicketRangeSet::clear_count() {
  if (count_ != nullptr) count_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClubTicketRangeSet::ClubTicketRangeSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubTicketRangeSet)
}
ClubTicketRangeSet::ClubTicketRangeSet(const ClubTicketRangeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_count()) {
    count_ = new ::bgs::protocol::UnsignedIntRange(*from.count_);
  } else {
    count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubTicketRangeSet)
}

void ClubTicketRangeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubTicketRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  count_ = nullptr;
}

ClubTicketRangeSet::~ClubTicketRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubTicketRangeSet)
  SharedDtor();
}

void ClubTicketRangeSet::SharedDtor() {
  if (this != internal_default_instance()) delete count_;
}

void ClubTicketRangeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubTicketRangeSet& ClubTicketRangeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubTicketRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  return *internal_default_instance();
}


void ClubTicketRangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(count_ != nullptr);
    count_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubTicketRangeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubTicketRangeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::count(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubTicketRangeSet)
  return target;
}

size_t ClubTicketRangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubTicketRangeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubTicketRangeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubTicketRangeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubTicketRangeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubTicketRangeSet)
    MergeFrom(*source);
  }
}

void ClubTicketRangeSet::MergeFrom(const ClubTicketRangeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_count()) {
    _internal_mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_count());
  }
}

void ClubTicketRangeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubTicketRangeSet::CopyFrom(const ClubTicketRangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubTicketRangeSet::IsInitialized() const {
  return true;
}

void ClubTicketRangeSet::InternalSwap(ClubTicketRangeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubTicketRangeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubBanRangeSet::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubBanRangeSet_default_instance_._instance.get_mutable()->count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubBanRangeSet_default_instance_._instance.get_mutable()->reason_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(
      ::bgs::protocol::UnsignedIntRange::internal_default_instance());
}
class ClubBanRangeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubBanRangeSet>()._has_bits_);
  static const ::bgs::protocol::UnsignedIntRange& count(const ClubBanRangeSet* msg);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::UnsignedIntRange& reason_range(const ClubBanRangeSet* msg);
  static void set_has_reason_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::UnsignedIntRange&
ClubBanRangeSet::_Internal::count(const ClubBanRangeSet* msg) {
  return *msg->count_;
}
const ::bgs::protocol::UnsignedIntRange&
ClubBanRangeSet::_Internal::reason_range(const ClubBanRangeSet* msg) {
  return *msg->reason_range_;
}
void ClubBanRangeSet::clear_count() {
  if (count_ != nullptr) count_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClubBanRangeSet::clear_reason_range() {
  if (reason_range_ != nullptr) reason_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ClubBanRangeSet::ClubBanRangeSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubBanRangeSet)
}
ClubBanRangeSet::ClubBanRangeSet(const ClubBanRangeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_count()) {
    count_ = new ::bgs::protocol::UnsignedIntRange(*from.count_);
  } else {
    count_ = nullptr;
  }
  if (from._internal_has_reason_range()) {
    reason_range_ = new ::bgs::protocol::UnsignedIntRange(*from.reason_range_);
  } else {
    reason_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubBanRangeSet)
}

void ClubBanRangeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubBanRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_range_) -
      reinterpret_cast<char*>(&count_)) + sizeof(reason_range_));
}

ClubBanRangeSet::~ClubBanRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubBanRangeSet)
  SharedDtor();
}

void ClubBanRangeSet::SharedDtor() {
  if (this != internal_default_instance()) delete count_;
  if (this != internal_default_instance()) delete reason_range_;
}

void ClubBanRangeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubBanRangeSet& ClubBanRangeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubBanRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base);
  return *internal_default_instance();
}


void ClubBanRangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubBanRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(count_ != nullptr);
      count_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reason_range_ != nullptr);
      reason_range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubBanRangeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reason_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubBanRangeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubBanRangeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::count(this), target, stream);
  }

  // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reason_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubBanRangeSet)
  return target;
}

size_t ClubBanRangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubBanRangeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *count_);
    }

    // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reason_range_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubBanRangeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubBanRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubBanRangeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubBanRangeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubBanRangeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubBanRangeSet)
    MergeFrom(*source);
  }
}

void ClubBanRangeSet::MergeFrom(const ClubBanRangeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubBanRangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_count());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_reason_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from._internal_reason_range());
    }
  }
}

void ClubBanRangeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubBanRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubBanRangeSet::CopyFrom(const ClubBanRangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubBanRangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubBanRangeSet::IsInitialized() const {
  return true;
}

void ClubBanRangeSet::InternalSwap(ClubBanRangeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
  swap(reason_range_, other->reason_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubBanRangeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubTypeRangeSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubTypeRangeSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubTypeRangeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubMemberRangeSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubMemberRangeSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubMemberRangeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubStreamRangeSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubStreamRangeSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubStreamRangeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubInvitationRangeSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubInvitationRangeSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubInvitationRangeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubSuggestionRangeSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubSuggestionRangeSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubSuggestionRangeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubTicketRangeSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubTicketRangeSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubTicketRangeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubBanRangeSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubBanRangeSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubBanRangeSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
