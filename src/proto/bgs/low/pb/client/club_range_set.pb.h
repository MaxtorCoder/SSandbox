// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_range_set.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/global_extensions/range.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubBanRangeSet;
class ClubBanRangeSetDefaultTypeInternal;
extern ClubBanRangeSetDefaultTypeInternal _ClubBanRangeSet_default_instance_;
class ClubInvitationRangeSet;
class ClubInvitationRangeSetDefaultTypeInternal;
extern ClubInvitationRangeSetDefaultTypeInternal _ClubInvitationRangeSet_default_instance_;
class ClubMemberRangeSet;
class ClubMemberRangeSetDefaultTypeInternal;
extern ClubMemberRangeSetDefaultTypeInternal _ClubMemberRangeSet_default_instance_;
class ClubStreamRangeSet;
class ClubStreamRangeSetDefaultTypeInternal;
extern ClubStreamRangeSetDefaultTypeInternal _ClubStreamRangeSet_default_instance_;
class ClubSuggestionRangeSet;
class ClubSuggestionRangeSetDefaultTypeInternal;
extern ClubSuggestionRangeSetDefaultTypeInternal _ClubSuggestionRangeSet_default_instance_;
class ClubTicketRangeSet;
class ClubTicketRangeSetDefaultTypeInternal;
extern ClubTicketRangeSetDefaultTypeInternal _ClubTicketRangeSet_default_instance_;
class ClubTypeRangeSet;
class ClubTypeRangeSetDefaultTypeInternal;
extern ClubTypeRangeSetDefaultTypeInternal _ClubTypeRangeSet_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::ClubBanRangeSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubBanRangeSet>(Arena*);
template<> ::bgs::protocol::club::v1::ClubInvitationRangeSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubInvitationRangeSet>(Arena*);
template<> ::bgs::protocol::club::v1::ClubMemberRangeSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubMemberRangeSet>(Arena*);
template<> ::bgs::protocol::club::v1::ClubStreamRangeSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubStreamRangeSet>(Arena*);
template<> ::bgs::protocol::club::v1::ClubSuggestionRangeSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubSuggestionRangeSet>(Arena*);
template<> ::bgs::protocol::club::v1::ClubTicketRangeSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubTicketRangeSet>(Arena*);
template<> ::bgs::protocol::club::v1::ClubTypeRangeSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubTypeRangeSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class ClubTypeRangeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubTypeRangeSet) */ {
 public:
  ClubTypeRangeSet();
  virtual ~ClubTypeRangeSet();

  ClubTypeRangeSet(const ClubTypeRangeSet& from);
  ClubTypeRangeSet(ClubTypeRangeSet&& from) noexcept
    : ClubTypeRangeSet() {
    *this = ::std::move(from);
  }

  inline ClubTypeRangeSet& operator=(const ClubTypeRangeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubTypeRangeSet& operator=(ClubTypeRangeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubTypeRangeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubTypeRangeSet* internal_default_instance() {
    return reinterpret_cast<const ClubTypeRangeSet*>(
               &_ClubTypeRangeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClubTypeRangeSet& a, ClubTypeRangeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubTypeRangeSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubTypeRangeSet* New() const final {
    return CreateMaybeMessage<ClubTypeRangeSet>(nullptr);
  }

  ClubTypeRangeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubTypeRangeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubTypeRangeSet& from);
  void MergeFrom(const ClubTypeRangeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubTypeRangeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubTypeRangeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameRangeFieldNumber = 2,
    kDescriptionRangeFieldNumber = 3,
    kBroadcastRangeFieldNumber = 4,
    kShortNameRangeFieldNumber = 7,
    kMemberFieldNumber = 25,
    kStreamFieldNumber = 26,
    kInvitationFieldNumber = 27,
    kSuggestionFieldNumber = 28,
    kTicketFieldNumber = 29,
    kBanFieldNumber = 30,
  };
  // optional .bgs.protocol.UnsignedIntRange name_range = 2;
  bool has_name_range() const;
  private:
  bool _internal_has_name_range() const;
  public:
  void clear_name_range();
  const ::bgs::protocol::UnsignedIntRange& name_range() const;
  ::bgs::protocol::UnsignedIntRange* release_name_range();
  ::bgs::protocol::UnsignedIntRange* mutable_name_range();
  void set_allocated_name_range(::bgs::protocol::UnsignedIntRange* name_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_name_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_name_range();
  public:

  // optional .bgs.protocol.UnsignedIntRange description_range = 3;
  bool has_description_range() const;
  private:
  bool _internal_has_description_range() const;
  public:
  void clear_description_range();
  const ::bgs::protocol::UnsignedIntRange& description_range() const;
  ::bgs::protocol::UnsignedIntRange* release_description_range();
  ::bgs::protocol::UnsignedIntRange* mutable_description_range();
  void set_allocated_description_range(::bgs::protocol::UnsignedIntRange* description_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_description_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_description_range();
  public:

  // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
  bool has_broadcast_range() const;
  private:
  bool _internal_has_broadcast_range() const;
  public:
  void clear_broadcast_range();
  const ::bgs::protocol::UnsignedIntRange& broadcast_range() const;
  ::bgs::protocol::UnsignedIntRange* release_broadcast_range();
  ::bgs::protocol::UnsignedIntRange* mutable_broadcast_range();
  void set_allocated_broadcast_range(::bgs::protocol::UnsignedIntRange* broadcast_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_broadcast_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_broadcast_range();
  public:

  // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
  bool has_short_name_range() const;
  private:
  bool _internal_has_short_name_range() const;
  public:
  void clear_short_name_range();
  const ::bgs::protocol::UnsignedIntRange& short_name_range() const;
  ::bgs::protocol::UnsignedIntRange* release_short_name_range();
  ::bgs::protocol::UnsignedIntRange* mutable_short_name_range();
  void set_allocated_short_name_range(::bgs::protocol::UnsignedIntRange* short_name_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_short_name_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_short_name_range();
  public:

  // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
  bool has_member() const;
  private:
  bool _internal_has_member() const;
  public:
  void clear_member();
  const ::bgs::protocol::club::v1::ClubMemberRangeSet& member() const;
  ::bgs::protocol::club::v1::ClubMemberRangeSet* release_member();
  ::bgs::protocol::club::v1::ClubMemberRangeSet* mutable_member();
  void set_allocated_member(::bgs::protocol::club::v1::ClubMemberRangeSet* member);
  private:
  const ::bgs::protocol::club::v1::ClubMemberRangeSet& _internal_member() const;
  ::bgs::protocol::club::v1::ClubMemberRangeSet* _internal_mutable_member();
  public:

  // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::bgs::protocol::club::v1::ClubStreamRangeSet& stream() const;
  ::bgs::protocol::club::v1::ClubStreamRangeSet* release_stream();
  ::bgs::protocol::club::v1::ClubStreamRangeSet* mutable_stream();
  void set_allocated_stream(::bgs::protocol::club::v1::ClubStreamRangeSet* stream);
  private:
  const ::bgs::protocol::club::v1::ClubStreamRangeSet& _internal_stream() const;
  ::bgs::protocol::club::v1::ClubStreamRangeSet* _internal_mutable_stream();
  public:

  // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::bgs::protocol::club::v1::ClubInvitationRangeSet& invitation() const;
  ::bgs::protocol::club::v1::ClubInvitationRangeSet* release_invitation();
  ::bgs::protocol::club::v1::ClubInvitationRangeSet* mutable_invitation();
  void set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitationRangeSet* invitation);
  private:
  const ::bgs::protocol::club::v1::ClubInvitationRangeSet& _internal_invitation() const;
  ::bgs::protocol::club::v1::ClubInvitationRangeSet* _internal_mutable_invitation();
  public:

  // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
  bool has_suggestion() const;
  private:
  bool _internal_has_suggestion() const;
  public:
  void clear_suggestion();
  const ::bgs::protocol::club::v1::ClubSuggestionRangeSet& suggestion() const;
  ::bgs::protocol::club::v1::ClubSuggestionRangeSet* release_suggestion();
  ::bgs::protocol::club::v1::ClubSuggestionRangeSet* mutable_suggestion();
  void set_allocated_suggestion(::bgs::protocol::club::v1::ClubSuggestionRangeSet* suggestion);
  private:
  const ::bgs::protocol::club::v1::ClubSuggestionRangeSet& _internal_suggestion() const;
  ::bgs::protocol::club::v1::ClubSuggestionRangeSet* _internal_mutable_suggestion();
  public:

  // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::bgs::protocol::club::v1::ClubTicketRangeSet& ticket() const;
  ::bgs::protocol::club::v1::ClubTicketRangeSet* release_ticket();
  ::bgs::protocol::club::v1::ClubTicketRangeSet* mutable_ticket();
  void set_allocated_ticket(::bgs::protocol::club::v1::ClubTicketRangeSet* ticket);
  private:
  const ::bgs::protocol::club::v1::ClubTicketRangeSet& _internal_ticket() const;
  ::bgs::protocol::club::v1::ClubTicketRangeSet* _internal_mutable_ticket();
  public:

  // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
  bool has_ban() const;
  private:
  bool _internal_has_ban() const;
  public:
  void clear_ban();
  const ::bgs::protocol::club::v1::ClubBanRangeSet& ban() const;
  ::bgs::protocol::club::v1::ClubBanRangeSet* release_ban();
  ::bgs::protocol::club::v1::ClubBanRangeSet* mutable_ban();
  void set_allocated_ban(::bgs::protocol::club::v1::ClubBanRangeSet* ban);
  private:
  const ::bgs::protocol::club::v1::ClubBanRangeSet& _internal_ban() const;
  ::bgs::protocol::club::v1::ClubBanRangeSet* _internal_mutable_ban();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubTypeRangeSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::UnsignedIntRange* name_range_;
  ::bgs::protocol::UnsignedIntRange* description_range_;
  ::bgs::protocol::UnsignedIntRange* broadcast_range_;
  ::bgs::protocol::UnsignedIntRange* short_name_range_;
  ::bgs::protocol::club::v1::ClubMemberRangeSet* member_;
  ::bgs::protocol::club::v1::ClubStreamRangeSet* stream_;
  ::bgs::protocol::club::v1::ClubInvitationRangeSet* invitation_;
  ::bgs::protocol::club::v1::ClubSuggestionRangeSet* suggestion_;
  ::bgs::protocol::club::v1::ClubTicketRangeSet* ticket_;
  ::bgs::protocol::club::v1::ClubBanRangeSet* ban_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
};
// -------------------------------------------------------------------

class ClubMemberRangeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubMemberRangeSet) */ {
 public:
  ClubMemberRangeSet();
  virtual ~ClubMemberRangeSet();

  ClubMemberRangeSet(const ClubMemberRangeSet& from);
  ClubMemberRangeSet(ClubMemberRangeSet&& from) noexcept
    : ClubMemberRangeSet() {
    *this = ::std::move(from);
  }

  inline ClubMemberRangeSet& operator=(const ClubMemberRangeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubMemberRangeSet& operator=(ClubMemberRangeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubMemberRangeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubMemberRangeSet* internal_default_instance() {
    return reinterpret_cast<const ClubMemberRangeSet*>(
               &_ClubMemberRangeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClubMemberRangeSet& a, ClubMemberRangeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubMemberRangeSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubMemberRangeSet* New() const final {
    return CreateMaybeMessage<ClubMemberRangeSet>(nullptr);
  }

  ClubMemberRangeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubMemberRangeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubMemberRangeSet& from);
  void MergeFrom(const ClubMemberRangeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubMemberRangeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubMemberRangeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kVoiceFieldNumber = 3,
    kStreamSubscriptionsFieldNumber = 5,
    kNoteRangeFieldNumber = 7,
  };
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::bgs::protocol::UnsignedIntRange& count() const;
  ::bgs::protocol::UnsignedIntRange* release_count();
  ::bgs::protocol::UnsignedIntRange* mutable_count();
  void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_count() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_count();
  public:

  // optional .bgs.protocol.UnsignedIntRange voice = 3;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::bgs::protocol::UnsignedIntRange& voice() const;
  ::bgs::protocol::UnsignedIntRange* release_voice();
  ::bgs::protocol::UnsignedIntRange* mutable_voice();
  void set_allocated_voice(::bgs::protocol::UnsignedIntRange* voice);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_voice() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_voice();
  public:

  // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
  bool has_stream_subscriptions() const;
  private:
  bool _internal_has_stream_subscriptions() const;
  public:
  void clear_stream_subscriptions();
  const ::bgs::protocol::UnsignedIntRange& stream_subscriptions() const;
  ::bgs::protocol::UnsignedIntRange* release_stream_subscriptions();
  ::bgs::protocol::UnsignedIntRange* mutable_stream_subscriptions();
  void set_allocated_stream_subscriptions(::bgs::protocol::UnsignedIntRange* stream_subscriptions);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_stream_subscriptions() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_stream_subscriptions();
  public:

  // optional .bgs.protocol.UnsignedIntRange note_range = 7;
  bool has_note_range() const;
  private:
  bool _internal_has_note_range() const;
  public:
  void clear_note_range();
  const ::bgs::protocol::UnsignedIntRange& note_range() const;
  ::bgs::protocol::UnsignedIntRange* release_note_range();
  ::bgs::protocol::UnsignedIntRange* mutable_note_range();
  void set_allocated_note_range(::bgs::protocol::UnsignedIntRange* note_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_note_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_note_range();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubMemberRangeSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  ::bgs::protocol::UnsignedIntRange* voice_;
  ::bgs::protocol::UnsignedIntRange* stream_subscriptions_;
  ::bgs::protocol::UnsignedIntRange* note_range_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
};
// -------------------------------------------------------------------

class ClubStreamRangeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubStreamRangeSet) */ {
 public:
  ClubStreamRangeSet();
  virtual ~ClubStreamRangeSet();

  ClubStreamRangeSet(const ClubStreamRangeSet& from);
  ClubStreamRangeSet(ClubStreamRangeSet&& from) noexcept
    : ClubStreamRangeSet() {
    *this = ::std::move(from);
  }

  inline ClubStreamRangeSet& operator=(const ClubStreamRangeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubStreamRangeSet& operator=(ClubStreamRangeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubStreamRangeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubStreamRangeSet* internal_default_instance() {
    return reinterpret_cast<const ClubStreamRangeSet*>(
               &_ClubStreamRangeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClubStreamRangeSet& a, ClubStreamRangeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubStreamRangeSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubStreamRangeSet* New() const final {
    return CreateMaybeMessage<ClubStreamRangeSet>(nullptr);
  }

  ClubStreamRangeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubStreamRangeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubStreamRangeSet& from);
  void MergeFrom(const ClubStreamRangeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubStreamRangeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubStreamRangeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kNameRangeFieldNumber = 3,
    kSubjectRangeFieldNumber = 4,
    kMessageRangeFieldNumber = 5,
  };
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::bgs::protocol::UnsignedIntRange& count() const;
  ::bgs::protocol::UnsignedIntRange* release_count();
  ::bgs::protocol::UnsignedIntRange* mutable_count();
  void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_count() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_count();
  public:

  // optional .bgs.protocol.UnsignedIntRange name_range = 3;
  bool has_name_range() const;
  private:
  bool _internal_has_name_range() const;
  public:
  void clear_name_range();
  const ::bgs::protocol::UnsignedIntRange& name_range() const;
  ::bgs::protocol::UnsignedIntRange* release_name_range();
  ::bgs::protocol::UnsignedIntRange* mutable_name_range();
  void set_allocated_name_range(::bgs::protocol::UnsignedIntRange* name_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_name_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_name_range();
  public:

  // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
  bool has_subject_range() const;
  private:
  bool _internal_has_subject_range() const;
  public:
  void clear_subject_range();
  const ::bgs::protocol::UnsignedIntRange& subject_range() const;
  ::bgs::protocol::UnsignedIntRange* release_subject_range();
  ::bgs::protocol::UnsignedIntRange* mutable_subject_range();
  void set_allocated_subject_range(::bgs::protocol::UnsignedIntRange* subject_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_subject_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_subject_range();
  public:

  // optional .bgs.protocol.UnsignedIntRange message_range = 5;
  bool has_message_range() const;
  private:
  bool _internal_has_message_range() const;
  public:
  void clear_message_range();
  const ::bgs::protocol::UnsignedIntRange& message_range() const;
  ::bgs::protocol::UnsignedIntRange* release_message_range();
  ::bgs::protocol::UnsignedIntRange* mutable_message_range();
  void set_allocated_message_range(::bgs::protocol::UnsignedIntRange* message_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_message_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_message_range();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubStreamRangeSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  ::bgs::protocol::UnsignedIntRange* name_range_;
  ::bgs::protocol::UnsignedIntRange* subject_range_;
  ::bgs::protocol::UnsignedIntRange* message_range_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
};
// -------------------------------------------------------------------

class ClubInvitationRangeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubInvitationRangeSet) */ {
 public:
  ClubInvitationRangeSet();
  virtual ~ClubInvitationRangeSet();

  ClubInvitationRangeSet(const ClubInvitationRangeSet& from);
  ClubInvitationRangeSet(ClubInvitationRangeSet&& from) noexcept
    : ClubInvitationRangeSet() {
    *this = ::std::move(from);
  }

  inline ClubInvitationRangeSet& operator=(const ClubInvitationRangeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubInvitationRangeSet& operator=(ClubInvitationRangeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubInvitationRangeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubInvitationRangeSet* internal_default_instance() {
    return reinterpret_cast<const ClubInvitationRangeSet*>(
               &_ClubInvitationRangeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClubInvitationRangeSet& a, ClubInvitationRangeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubInvitationRangeSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubInvitationRangeSet* New() const final {
    return CreateMaybeMessage<ClubInvitationRangeSet>(nullptr);
  }

  ClubInvitationRangeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubInvitationRangeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubInvitationRangeSet& from);
  void MergeFrom(const ClubInvitationRangeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubInvitationRangeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubInvitationRangeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::bgs::protocol::UnsignedIntRange& count() const;
  ::bgs::protocol::UnsignedIntRange* release_count();
  ::bgs::protocol::UnsignedIntRange* mutable_count();
  void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_count() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_count();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubInvitationRangeSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
};
// -------------------------------------------------------------------

class ClubSuggestionRangeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubSuggestionRangeSet) */ {
 public:
  ClubSuggestionRangeSet();
  virtual ~ClubSuggestionRangeSet();

  ClubSuggestionRangeSet(const ClubSuggestionRangeSet& from);
  ClubSuggestionRangeSet(ClubSuggestionRangeSet&& from) noexcept
    : ClubSuggestionRangeSet() {
    *this = ::std::move(from);
  }

  inline ClubSuggestionRangeSet& operator=(const ClubSuggestionRangeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubSuggestionRangeSet& operator=(ClubSuggestionRangeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubSuggestionRangeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubSuggestionRangeSet* internal_default_instance() {
    return reinterpret_cast<const ClubSuggestionRangeSet*>(
               &_ClubSuggestionRangeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClubSuggestionRangeSet& a, ClubSuggestionRangeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubSuggestionRangeSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubSuggestionRangeSet* New() const final {
    return CreateMaybeMessage<ClubSuggestionRangeSet>(nullptr);
  }

  ClubSuggestionRangeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubSuggestionRangeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubSuggestionRangeSet& from);
  void MergeFrom(const ClubSuggestionRangeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubSuggestionRangeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubSuggestionRangeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::bgs::protocol::UnsignedIntRange& count() const;
  ::bgs::protocol::UnsignedIntRange* release_count();
  ::bgs::protocol::UnsignedIntRange* mutable_count();
  void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_count() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_count();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSuggestionRangeSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
};
// -------------------------------------------------------------------

class ClubTicketRangeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubTicketRangeSet) */ {
 public:
  ClubTicketRangeSet();
  virtual ~ClubTicketRangeSet();

  ClubTicketRangeSet(const ClubTicketRangeSet& from);
  ClubTicketRangeSet(ClubTicketRangeSet&& from) noexcept
    : ClubTicketRangeSet() {
    *this = ::std::move(from);
  }

  inline ClubTicketRangeSet& operator=(const ClubTicketRangeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubTicketRangeSet& operator=(ClubTicketRangeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubTicketRangeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubTicketRangeSet* internal_default_instance() {
    return reinterpret_cast<const ClubTicketRangeSet*>(
               &_ClubTicketRangeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClubTicketRangeSet& a, ClubTicketRangeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubTicketRangeSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubTicketRangeSet* New() const final {
    return CreateMaybeMessage<ClubTicketRangeSet>(nullptr);
  }

  ClubTicketRangeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubTicketRangeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubTicketRangeSet& from);
  void MergeFrom(const ClubTicketRangeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubTicketRangeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubTicketRangeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::bgs::protocol::UnsignedIntRange& count() const;
  ::bgs::protocol::UnsignedIntRange* release_count();
  ::bgs::protocol::UnsignedIntRange* mutable_count();
  void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_count() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_count();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubTicketRangeSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
};
// -------------------------------------------------------------------

class ClubBanRangeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubBanRangeSet) */ {
 public:
  ClubBanRangeSet();
  virtual ~ClubBanRangeSet();

  ClubBanRangeSet(const ClubBanRangeSet& from);
  ClubBanRangeSet(ClubBanRangeSet&& from) noexcept
    : ClubBanRangeSet() {
    *this = ::std::move(from);
  }

  inline ClubBanRangeSet& operator=(const ClubBanRangeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubBanRangeSet& operator=(ClubBanRangeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubBanRangeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubBanRangeSet* internal_default_instance() {
    return reinterpret_cast<const ClubBanRangeSet*>(
               &_ClubBanRangeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClubBanRangeSet& a, ClubBanRangeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubBanRangeSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubBanRangeSet* New() const final {
    return CreateMaybeMessage<ClubBanRangeSet>(nullptr);
  }

  ClubBanRangeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubBanRangeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubBanRangeSet& from);
  void MergeFrom(const ClubBanRangeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubBanRangeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubBanRangeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kReasonRangeFieldNumber = 3,
  };
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::bgs::protocol::UnsignedIntRange& count() const;
  ::bgs::protocol::UnsignedIntRange* release_count();
  ::bgs::protocol::UnsignedIntRange* mutable_count();
  void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_count() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_count();
  public:

  // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
  bool has_reason_range() const;
  private:
  bool _internal_has_reason_range() const;
  public:
  void clear_reason_range();
  const ::bgs::protocol::UnsignedIntRange& reason_range() const;
  ::bgs::protocol::UnsignedIntRange* release_reason_range();
  ::bgs::protocol::UnsignedIntRange* mutable_reason_range();
  void set_allocated_reason_range(::bgs::protocol::UnsignedIntRange* reason_range);
  private:
  const ::bgs::protocol::UnsignedIntRange& _internal_reason_range() const;
  ::bgs::protocol::UnsignedIntRange* _internal_mutable_reason_range();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubBanRangeSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  ::bgs::protocol::UnsignedIntRange* reason_range_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClubTypeRangeSet

// optional .bgs.protocol.UnsignedIntRange name_range = 2;
inline bool ClubTypeRangeSet::_internal_has_name_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || name_range_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_name_range() const {
  return _internal_has_name_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::_internal_name_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = name_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::name_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.name_range)
  return _internal_name_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::release_name_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.name_range)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::UnsignedIntRange* temp = name_range_;
  name_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::_internal_mutable_name_range() {
  _has_bits_[0] |= 0x00000001u;
  if (name_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    name_range_ = p;
  }
  return name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::mutable_name_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.name_range)
  return _internal_mutable_name_range();
}
inline void ClubTypeRangeSet::set_allocated_name_range(::bgs::protocol::UnsignedIntRange* name_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_range_);
  }
  if (name_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      name_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_range_ = name_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.name_range)
}

// optional .bgs.protocol.UnsignedIntRange description_range = 3;
inline bool ClubTypeRangeSet::_internal_has_description_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || description_range_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_description_range() const {
  return _internal_has_description_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::_internal_description_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = description_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::description_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.description_range)
  return _internal_description_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::release_description_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.description_range)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::UnsignedIntRange* temp = description_range_;
  description_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::_internal_mutable_description_range() {
  _has_bits_[0] |= 0x00000002u;
  if (description_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    description_range_ = p;
  }
  return description_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::mutable_description_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.description_range)
  return _internal_mutable_description_range();
}
inline void ClubTypeRangeSet::set_allocated_description_range(::bgs::protocol::UnsignedIntRange* description_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_range_);
  }
  if (description_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      description_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_range_ = description_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.description_range)
}

// optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
inline bool ClubTypeRangeSet::_internal_has_broadcast_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || broadcast_range_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_broadcast_range() const {
  return _internal_has_broadcast_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::_internal_broadcast_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = broadcast_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::broadcast_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.broadcast_range)
  return _internal_broadcast_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::release_broadcast_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.broadcast_range)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::UnsignedIntRange* temp = broadcast_range_;
  broadcast_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::_internal_mutable_broadcast_range() {
  _has_bits_[0] |= 0x00000004u;
  if (broadcast_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    broadcast_range_ = p;
  }
  return broadcast_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::mutable_broadcast_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.broadcast_range)
  return _internal_mutable_broadcast_range();
}
inline void ClubTypeRangeSet::set_allocated_broadcast_range(::bgs::protocol::UnsignedIntRange* broadcast_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(broadcast_range_);
  }
  if (broadcast_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcast_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  broadcast_range_ = broadcast_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.broadcast_range)
}

// optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
inline bool ClubTypeRangeSet::_internal_has_short_name_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || short_name_range_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_short_name_range() const {
  return _internal_has_short_name_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::_internal_short_name_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = short_name_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::short_name_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.short_name_range)
  return _internal_short_name_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::release_short_name_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.short_name_range)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::UnsignedIntRange* temp = short_name_range_;
  short_name_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::_internal_mutable_short_name_range() {
  _has_bits_[0] |= 0x00000008u;
  if (short_name_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    short_name_range_ = p;
  }
  return short_name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::mutable_short_name_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.short_name_range)
  return _internal_mutable_short_name_range();
}
inline void ClubTypeRangeSet::set_allocated_short_name_range(::bgs::protocol::UnsignedIntRange* short_name_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_name_range_);
  }
  if (short_name_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      short_name_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_name_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  short_name_range_ = short_name_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.short_name_range)
}

// optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
inline bool ClubTypeRangeSet::_internal_has_member() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || member_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_member() const {
  return _internal_has_member();
}
inline void ClubTypeRangeSet::clear_member() {
  if (member_ != nullptr) member_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::club::v1::ClubMemberRangeSet& ClubTypeRangeSet::_internal_member() const {
  const ::bgs::protocol::club::v1::ClubMemberRangeSet* p = member_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubMemberRangeSet*>(
      &::bgs::protocol::club::v1::_ClubMemberRangeSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubMemberRangeSet& ClubTypeRangeSet::member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.member)
  return _internal_member();
}
inline ::bgs::protocol::club::v1::ClubMemberRangeSet* ClubTypeRangeSet::release_member() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.member)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::club::v1::ClubMemberRangeSet* temp = member_;
  member_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubMemberRangeSet* ClubTypeRangeSet::_internal_mutable_member() {
  _has_bits_[0] |= 0x00000010u;
  if (member_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubMemberRangeSet>(GetArenaNoVirtual());
    member_ = p;
  }
  return member_;
}
inline ::bgs::protocol::club::v1::ClubMemberRangeSet* ClubTypeRangeSet::mutable_member() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.member)
  return _internal_mutable_member();
}
inline void ClubTypeRangeSet::set_allocated_member(::bgs::protocol::club::v1::ClubMemberRangeSet* member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete member_;
  }
  if (member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.member)
}

// optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
inline bool ClubTypeRangeSet::_internal_has_stream() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || stream_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_stream() const {
  return _internal_has_stream();
}
inline void ClubTypeRangeSet::clear_stream() {
  if (stream_ != nullptr) stream_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::bgs::protocol::club::v1::ClubStreamRangeSet& ClubTypeRangeSet::_internal_stream() const {
  const ::bgs::protocol::club::v1::ClubStreamRangeSet* p = stream_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubStreamRangeSet*>(
      &::bgs::protocol::club::v1::_ClubStreamRangeSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubStreamRangeSet& ClubTypeRangeSet::stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.stream)
  return _internal_stream();
}
inline ::bgs::protocol::club::v1::ClubStreamRangeSet* ClubTypeRangeSet::release_stream() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.stream)
  _has_bits_[0] &= ~0x00000020u;
  ::bgs::protocol::club::v1::ClubStreamRangeSet* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubStreamRangeSet* ClubTypeRangeSet::_internal_mutable_stream() {
  _has_bits_[0] |= 0x00000020u;
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubStreamRangeSet>(GetArenaNoVirtual());
    stream_ = p;
  }
  return stream_;
}
inline ::bgs::protocol::club::v1::ClubStreamRangeSet* ClubTypeRangeSet::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.stream)
  return _internal_mutable_stream();
}
inline void ClubTypeRangeSet::set_allocated_stream(::bgs::protocol::club::v1::ClubStreamRangeSet* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.stream)
}

// optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
inline bool ClubTypeRangeSet::_internal_has_invitation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || invitation_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_invitation() const {
  return _internal_has_invitation();
}
inline void ClubTypeRangeSet::clear_invitation() {
  if (invitation_ != nullptr) invitation_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::bgs::protocol::club::v1::ClubInvitationRangeSet& ClubTypeRangeSet::_internal_invitation() const {
  const ::bgs::protocol::club::v1::ClubInvitationRangeSet* p = invitation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubInvitationRangeSet*>(
      &::bgs::protocol::club::v1::_ClubInvitationRangeSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubInvitationRangeSet& ClubTypeRangeSet::invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.invitation)
  return _internal_invitation();
}
inline ::bgs::protocol::club::v1::ClubInvitationRangeSet* ClubTypeRangeSet::release_invitation() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.invitation)
  _has_bits_[0] &= ~0x00000040u;
  ::bgs::protocol::club::v1::ClubInvitationRangeSet* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubInvitationRangeSet* ClubTypeRangeSet::_internal_mutable_invitation() {
  _has_bits_[0] |= 0x00000040u;
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubInvitationRangeSet>(GetArenaNoVirtual());
    invitation_ = p;
  }
  return invitation_;
}
inline ::bgs::protocol::club::v1::ClubInvitationRangeSet* ClubTypeRangeSet::mutable_invitation() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.invitation)
  return _internal_mutable_invitation();
}
inline void ClubTypeRangeSet::set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitationRangeSet* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete invitation_;
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.invitation)
}

// optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
inline bool ClubTypeRangeSet::_internal_has_suggestion() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || suggestion_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_suggestion() const {
  return _internal_has_suggestion();
}
inline void ClubTypeRangeSet::clear_suggestion() {
  if (suggestion_ != nullptr) suggestion_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::bgs::protocol::club::v1::ClubSuggestionRangeSet& ClubTypeRangeSet::_internal_suggestion() const {
  const ::bgs::protocol::club::v1::ClubSuggestionRangeSet* p = suggestion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSuggestionRangeSet*>(
      &::bgs::protocol::club::v1::_ClubSuggestionRangeSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSuggestionRangeSet& ClubTypeRangeSet::suggestion() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.suggestion)
  return _internal_suggestion();
}
inline ::bgs::protocol::club::v1::ClubSuggestionRangeSet* ClubTypeRangeSet::release_suggestion() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.suggestion)
  _has_bits_[0] &= ~0x00000080u;
  ::bgs::protocol::club::v1::ClubSuggestionRangeSet* temp = suggestion_;
  suggestion_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSuggestionRangeSet* ClubTypeRangeSet::_internal_mutable_suggestion() {
  _has_bits_[0] |= 0x00000080u;
  if (suggestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSuggestionRangeSet>(GetArenaNoVirtual());
    suggestion_ = p;
  }
  return suggestion_;
}
inline ::bgs::protocol::club::v1::ClubSuggestionRangeSet* ClubTypeRangeSet::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.suggestion)
  return _internal_mutable_suggestion();
}
inline void ClubTypeRangeSet::set_allocated_suggestion(::bgs::protocol::club::v1::ClubSuggestionRangeSet* suggestion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete suggestion_;
  }
  if (suggestion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggestion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggestion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  suggestion_ = suggestion;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.suggestion)
}

// optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
inline bool ClubTypeRangeSet::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || ticket_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_ticket() const {
  return _internal_has_ticket();
}
inline void ClubTypeRangeSet::clear_ticket() {
  if (ticket_ != nullptr) ticket_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::bgs::protocol::club::v1::ClubTicketRangeSet& ClubTypeRangeSet::_internal_ticket() const {
  const ::bgs::protocol::club::v1::ClubTicketRangeSet* p = ticket_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubTicketRangeSet*>(
      &::bgs::protocol::club::v1::_ClubTicketRangeSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubTicketRangeSet& ClubTypeRangeSet::ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.ticket)
  return _internal_ticket();
}
inline ::bgs::protocol::club::v1::ClubTicketRangeSet* ClubTypeRangeSet::release_ticket() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.ticket)
  _has_bits_[0] &= ~0x00000100u;
  ::bgs::protocol::club::v1::ClubTicketRangeSet* temp = ticket_;
  ticket_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubTicketRangeSet* ClubTypeRangeSet::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000100u;
  if (ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubTicketRangeSet>(GetArenaNoVirtual());
    ticket_ = p;
  }
  return ticket_;
}
inline ::bgs::protocol::club::v1::ClubTicketRangeSet* ClubTypeRangeSet::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.ticket)
  return _internal_mutable_ticket();
}
inline void ClubTypeRangeSet::set_allocated_ticket(::bgs::protocol::club::v1::ClubTicketRangeSet* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ticket_;
  }
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.ticket)
}

// optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
inline bool ClubTypeRangeSet::_internal_has_ban() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || ban_ != nullptr);
  return value;
}
inline bool ClubTypeRangeSet::has_ban() const {
  return _internal_has_ban();
}
inline void ClubTypeRangeSet::clear_ban() {
  if (ban_ != nullptr) ban_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::bgs::protocol::club::v1::ClubBanRangeSet& ClubTypeRangeSet::_internal_ban() const {
  const ::bgs::protocol::club::v1::ClubBanRangeSet* p = ban_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubBanRangeSet*>(
      &::bgs::protocol::club::v1::_ClubBanRangeSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubBanRangeSet& ClubTypeRangeSet::ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.ban)
  return _internal_ban();
}
inline ::bgs::protocol::club::v1::ClubBanRangeSet* ClubTypeRangeSet::release_ban() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTypeRangeSet.ban)
  _has_bits_[0] &= ~0x00000200u;
  ::bgs::protocol::club::v1::ClubBanRangeSet* temp = ban_;
  ban_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubBanRangeSet* ClubTypeRangeSet::_internal_mutable_ban() {
  _has_bits_[0] |= 0x00000200u;
  if (ban_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubBanRangeSet>(GetArenaNoVirtual());
    ban_ = p;
  }
  return ban_;
}
inline ::bgs::protocol::club::v1::ClubBanRangeSet* ClubTypeRangeSet::mutable_ban() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.ban)
  return _internal_mutable_ban();
}
inline void ClubTypeRangeSet::set_allocated_ban(::bgs::protocol::club::v1::ClubBanRangeSet* ban) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ban_;
  }
  if (ban) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ban = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ban, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  ban_ = ban;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.ban)
}

// -------------------------------------------------------------------

// ClubMemberRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubMemberRangeSet::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || count_ != nullptr);
  return value;
}
inline bool ClubMemberRangeSet::has_count() const {
  return _internal_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::_internal_count() const {
  const ::bgs::protocol::UnsignedIntRange* p = count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMemberRangeSet.count)
  return _internal_count();
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::release_count() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMemberRangeSet.count)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::_internal_mutable_count() {
  _has_bits_[0] |= 0x00000001u;
  if (count_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    count_ = p;
  }
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::mutable_count() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMemberRangeSet.count)
  return _internal_mutable_count();
}
inline void ClubMemberRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_);
  }
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMemberRangeSet.count)
}

// optional .bgs.protocol.UnsignedIntRange voice = 3;
inline bool ClubMemberRangeSet::_internal_has_voice() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || voice_ != nullptr);
  return value;
}
inline bool ClubMemberRangeSet::has_voice() const {
  return _internal_has_voice();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::_internal_voice() const {
  const ::bgs::protocol::UnsignedIntRange* p = voice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMemberRangeSet.voice)
  return _internal_voice();
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::release_voice() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMemberRangeSet.voice)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::UnsignedIntRange* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::_internal_mutable_voice() {
  _has_bits_[0] |= 0x00000002u;
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    voice_ = p;
  }
  return voice_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMemberRangeSet.voice)
  return _internal_mutable_voice();
}
inline void ClubMemberRangeSet::set_allocated_voice(::bgs::protocol::UnsignedIntRange* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_);
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMemberRangeSet.voice)
}

// optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
inline bool ClubMemberRangeSet::_internal_has_stream_subscriptions() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || stream_subscriptions_ != nullptr);
  return value;
}
inline bool ClubMemberRangeSet::has_stream_subscriptions() const {
  return _internal_has_stream_subscriptions();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::_internal_stream_subscriptions() const {
  const ::bgs::protocol::UnsignedIntRange* p = stream_subscriptions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::stream_subscriptions() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMemberRangeSet.stream_subscriptions)
  return _internal_stream_subscriptions();
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::release_stream_subscriptions() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMemberRangeSet.stream_subscriptions)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::UnsignedIntRange* temp = stream_subscriptions_;
  stream_subscriptions_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::_internal_mutable_stream_subscriptions() {
  _has_bits_[0] |= 0x00000004u;
  if (stream_subscriptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    stream_subscriptions_ = p;
  }
  return stream_subscriptions_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::mutable_stream_subscriptions() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMemberRangeSet.stream_subscriptions)
  return _internal_mutable_stream_subscriptions();
}
inline void ClubMemberRangeSet::set_allocated_stream_subscriptions(::bgs::protocol::UnsignedIntRange* stream_subscriptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_subscriptions_);
  }
  if (stream_subscriptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream_subscriptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_subscriptions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stream_subscriptions_ = stream_subscriptions;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMemberRangeSet.stream_subscriptions)
}

// optional .bgs.protocol.UnsignedIntRange note_range = 7;
inline bool ClubMemberRangeSet::_internal_has_note_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || note_range_ != nullptr);
  return value;
}
inline bool ClubMemberRangeSet::has_note_range() const {
  return _internal_has_note_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::_internal_note_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = note_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::note_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMemberRangeSet.note_range)
  return _internal_note_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::release_note_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubMemberRangeSet.note_range)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::UnsignedIntRange* temp = note_range_;
  note_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::_internal_mutable_note_range() {
  _has_bits_[0] |= 0x00000008u;
  if (note_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    note_range_ = p;
  }
  return note_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::mutable_note_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMemberRangeSet.note_range)
  return _internal_mutable_note_range();
}
inline void ClubMemberRangeSet::set_allocated_note_range(::bgs::protocol::UnsignedIntRange* note_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(note_range_);
  }
  if (note_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      note_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, note_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  note_range_ = note_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMemberRangeSet.note_range)
}

// -------------------------------------------------------------------

// ClubStreamRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubStreamRangeSet::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || count_ != nullptr);
  return value;
}
inline bool ClubStreamRangeSet::has_count() const {
  return _internal_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::_internal_count() const {
  const ::bgs::protocol::UnsignedIntRange* p = count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamRangeSet.count)
  return _internal_count();
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::release_count() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStreamRangeSet.count)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::_internal_mutable_count() {
  _has_bits_[0] |= 0x00000001u;
  if (count_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    count_ = p;
  }
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::mutable_count() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamRangeSet.count)
  return _internal_mutable_count();
}
inline void ClubStreamRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_);
  }
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStreamRangeSet.count)
}

// optional .bgs.protocol.UnsignedIntRange name_range = 3;
inline bool ClubStreamRangeSet::_internal_has_name_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || name_range_ != nullptr);
  return value;
}
inline bool ClubStreamRangeSet::has_name_range() const {
  return _internal_has_name_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::_internal_name_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = name_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::name_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamRangeSet.name_range)
  return _internal_name_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::release_name_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStreamRangeSet.name_range)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::UnsignedIntRange* temp = name_range_;
  name_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::_internal_mutable_name_range() {
  _has_bits_[0] |= 0x00000002u;
  if (name_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    name_range_ = p;
  }
  return name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::mutable_name_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamRangeSet.name_range)
  return _internal_mutable_name_range();
}
inline void ClubStreamRangeSet::set_allocated_name_range(::bgs::protocol::UnsignedIntRange* name_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_range_);
  }
  if (name_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      name_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_range_ = name_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStreamRangeSet.name_range)
}

// optional .bgs.protocol.UnsignedIntRange subject_range = 4;
inline bool ClubStreamRangeSet::_internal_has_subject_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || subject_range_ != nullptr);
  return value;
}
inline bool ClubStreamRangeSet::has_subject_range() const {
  return _internal_has_subject_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::_internal_subject_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = subject_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::subject_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamRangeSet.subject_range)
  return _internal_subject_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::release_subject_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStreamRangeSet.subject_range)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::UnsignedIntRange* temp = subject_range_;
  subject_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::_internal_mutable_subject_range() {
  _has_bits_[0] |= 0x00000004u;
  if (subject_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    subject_range_ = p;
  }
  return subject_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::mutable_subject_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamRangeSet.subject_range)
  return _internal_mutable_subject_range();
}
inline void ClubStreamRangeSet::set_allocated_subject_range(::bgs::protocol::UnsignedIntRange* subject_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subject_range_);
  }
  if (subject_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  subject_range_ = subject_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStreamRangeSet.subject_range)
}

// optional .bgs.protocol.UnsignedIntRange message_range = 5;
inline bool ClubStreamRangeSet::_internal_has_message_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || message_range_ != nullptr);
  return value;
}
inline bool ClubStreamRangeSet::has_message_range() const {
  return _internal_has_message_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::_internal_message_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = message_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::message_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamRangeSet.message_range)
  return _internal_message_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::release_message_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubStreamRangeSet.message_range)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::UnsignedIntRange* temp = message_range_;
  message_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::_internal_mutable_message_range() {
  _has_bits_[0] |= 0x00000008u;
  if (message_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    message_range_ = p;
  }
  return message_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::mutable_message_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamRangeSet.message_range)
  return _internal_mutable_message_range();
}
inline void ClubStreamRangeSet::set_allocated_message_range(::bgs::protocol::UnsignedIntRange* message_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_range_);
  }
  if (message_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  message_range_ = message_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStreamRangeSet.message_range)
}

// -------------------------------------------------------------------

// ClubInvitationRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubInvitationRangeSet::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || count_ != nullptr);
  return value;
}
inline bool ClubInvitationRangeSet::has_count() const {
  return _internal_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubInvitationRangeSet::_internal_count() const {
  const ::bgs::protocol::UnsignedIntRange* p = count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubInvitationRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitationRangeSet.count)
  return _internal_count();
}
inline ::bgs::protocol::UnsignedIntRange* ClubInvitationRangeSet::release_count() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubInvitationRangeSet.count)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubInvitationRangeSet::_internal_mutable_count() {
  _has_bits_[0] |= 0x00000001u;
  if (count_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    count_ = p;
  }
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubInvitationRangeSet::mutable_count() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubInvitationRangeSet.count)
  return _internal_mutable_count();
}
inline void ClubInvitationRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_);
  }
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubInvitationRangeSet.count)
}

// -------------------------------------------------------------------

// ClubSuggestionRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubSuggestionRangeSet::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || count_ != nullptr);
  return value;
}
inline bool ClubSuggestionRangeSet::has_count() const {
  return _internal_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubSuggestionRangeSet::_internal_count() const {
  const ::bgs::protocol::UnsignedIntRange* p = count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubSuggestionRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestionRangeSet.count)
  return _internal_count();
}
inline ::bgs::protocol::UnsignedIntRange* ClubSuggestionRangeSet::release_count() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubSuggestionRangeSet.count)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubSuggestionRangeSet::_internal_mutable_count() {
  _has_bits_[0] |= 0x00000001u;
  if (count_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    count_ = p;
  }
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubSuggestionRangeSet::mutable_count() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSuggestionRangeSet.count)
  return _internal_mutable_count();
}
inline void ClubSuggestionRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_);
  }
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSuggestionRangeSet.count)
}

// -------------------------------------------------------------------

// ClubTicketRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubTicketRangeSet::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || count_ != nullptr);
  return value;
}
inline bool ClubTicketRangeSet::has_count() const {
  return _internal_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTicketRangeSet::_internal_count() const {
  const ::bgs::protocol::UnsignedIntRange* p = count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTicketRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicketRangeSet.count)
  return _internal_count();
}
inline ::bgs::protocol::UnsignedIntRange* ClubTicketRangeSet::release_count() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubTicketRangeSet.count)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTicketRangeSet::_internal_mutable_count() {
  _has_bits_[0] |= 0x00000001u;
  if (count_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    count_ = p;
  }
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTicketRangeSet::mutable_count() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTicketRangeSet.count)
  return _internal_mutable_count();
}
inline void ClubTicketRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_);
  }
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTicketRangeSet.count)
}

// -------------------------------------------------------------------

// ClubBanRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubBanRangeSet::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || count_ != nullptr);
  return value;
}
inline bool ClubBanRangeSet::has_count() const {
  return _internal_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubBanRangeSet::_internal_count() const {
  const ::bgs::protocol::UnsignedIntRange* p = count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubBanRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBanRangeSet.count)
  return _internal_count();
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::release_count() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubBanRangeSet.count)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::_internal_mutable_count() {
  _has_bits_[0] |= 0x00000001u;
  if (count_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    count_ = p;
  }
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::mutable_count() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBanRangeSet.count)
  return _internal_mutable_count();
}
inline void ClubBanRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_);
  }
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubBanRangeSet.count)
}

// optional .bgs.protocol.UnsignedIntRange reason_range = 3;
inline bool ClubBanRangeSet::_internal_has_reason_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || reason_range_ != nullptr);
  return value;
}
inline bool ClubBanRangeSet::has_reason_range() const {
  return _internal_has_reason_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubBanRangeSet::_internal_reason_range() const {
  const ::bgs::protocol::UnsignedIntRange* p = reason_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::UnsignedIntRange*>(
      &::bgs::protocol::_UnsignedIntRange_default_instance_);
}
inline const ::bgs::protocol::UnsignedIntRange& ClubBanRangeSet::reason_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBanRangeSet.reason_range)
  return _internal_reason_range();
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::release_reason_range() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubBanRangeSet.reason_range)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::UnsignedIntRange* temp = reason_range_;
  reason_range_ = nullptr;
  return temp;
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::_internal_mutable_reason_range() {
  _has_bits_[0] |= 0x00000002u;
  if (reason_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::UnsignedIntRange>(GetArenaNoVirtual());
    reason_range_ = p;
  }
  return reason_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::mutable_reason_range() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBanRangeSet.reason_range)
  return _internal_mutable_reason_range();
}
inline void ClubBanRangeSet::set_allocated_reason_range(::bgs::protocol::UnsignedIntRange* reason_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reason_range_);
  }
  if (reason_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reason_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reason_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reason_range_ = reason_range;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubBanRangeSet.reason_range)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto
