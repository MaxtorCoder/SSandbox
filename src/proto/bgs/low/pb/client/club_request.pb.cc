// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_request.proto

#include "bgs/low/pb/client/club_request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoiceCredentials_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddBanOptions_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ClubCreateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ClubTypeRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateTicketOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendInvitationOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendSuggestionOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
} _SubscribeRequest_default_instance_;
class UnsubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeRequest> _instance;
} _UnsubscribeRequest_default_instance_;
class CreateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRequest> _instance;
} _CreateRequest_default_instance_;
class CreateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateResponse> _instance;
} _CreateResponse_default_instance_;
class DestroyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroyRequest> _instance;
} _DestroyRequest_default_instance_;
class GetDescriptionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDescriptionRequest> _instance;
} _GetDescriptionRequest_default_instance_;
class GetDescriptionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDescriptionResponse> _instance;
} _GetDescriptionResponse_default_instance_;
class GetClubTypeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetClubTypeRequest> _instance;
} _GetClubTypeRequest_default_instance_;
class GetClubTypeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetClubTypeResponse> _instance;
} _GetClubTypeResponse_default_instance_;
class UpdateClubStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateClubStateRequest> _instance;
} _UpdateClubStateRequest_default_instance_;
class UpdateClubSettingsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateClubSettingsRequest> _instance;
} _UpdateClubSettingsRequest_default_instance_;
class JoinRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinRequest> _instance;
} _JoinRequest_default_instance_;
class LeaveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveRequest> _instance;
} _LeaveRequest_default_instance_;
class KickRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickRequest> _instance;
} _KickRequest_default_instance_;
class GetMemberRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMemberRequest> _instance;
} _GetMemberRequest_default_instance_;
class GetMemberResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMemberResponse> _instance;
} _GetMemberResponse_default_instance_;
class GetMembersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMembersRequest> _instance;
} _GetMembersRequest_default_instance_;
class GetMembersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMembersResponse> _instance;
} _GetMembersResponse_default_instance_;
class UpdateMemberStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMemberStateRequest> _instance;
} _UpdateMemberStateRequest_default_instance_;
class UpdateSubscriberStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSubscriberStateRequest> _instance;
} _UpdateSubscriberStateRequest_default_instance_;
class AssignRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssignRoleRequest> _instance;
} _AssignRoleRequest_default_instance_;
class UnassignRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnassignRoleRequest> _instance;
} _UnassignRoleRequest_default_instance_;
class SendInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendInvitationRequest> _instance;
} _SendInvitationRequest_default_instance_;
class AcceptInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptInvitationRequest> _instance;
} _AcceptInvitationRequest_default_instance_;
class DeclineInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeclineInvitationRequest> _instance;
} _DeclineInvitationRequest_default_instance_;
class RevokeInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevokeInvitationRequest> _instance;
} _RevokeInvitationRequest_default_instance_;
class GetInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInvitationRequest> _instance;
} _GetInvitationRequest_default_instance_;
class GetInvitationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInvitationResponse> _instance;
} _GetInvitationResponse_default_instance_;
class GetInvitationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInvitationsRequest> _instance;
} _GetInvitationsRequest_default_instance_;
class GetInvitationsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInvitationsResponse> _instance;
} _GetInvitationsResponse_default_instance_;
class SendSuggestionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendSuggestionRequest> _instance;
} _SendSuggestionRequest_default_instance_;
class AcceptSuggestionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptSuggestionRequest> _instance;
} _AcceptSuggestionRequest_default_instance_;
class DeclineSuggestionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeclineSuggestionRequest> _instance;
} _DeclineSuggestionRequest_default_instance_;
class GetSuggestionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSuggestionRequest> _instance;
} _GetSuggestionRequest_default_instance_;
class GetSuggestionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSuggestionResponse> _instance;
} _GetSuggestionResponse_default_instance_;
class GetSuggestionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSuggestionsRequest> _instance;
} _GetSuggestionsRequest_default_instance_;
class GetSuggestionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSuggestionsResponse> _instance;
} _GetSuggestionsResponse_default_instance_;
class CreateTicketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTicketRequest> _instance;
} _CreateTicketRequest_default_instance_;
class CreateTicketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTicketResponse> _instance;
} _CreateTicketResponse_default_instance_;
class DestroyTicketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroyTicketRequest> _instance;
} _DestroyTicketRequest_default_instance_;
class RedeemTicketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedeemTicketRequest> _instance;
} _RedeemTicketRequest_default_instance_;
class GetTicketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTicketRequest> _instance;
} _GetTicketRequest_default_instance_;
class GetTicketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTicketResponse> _instance;
} _GetTicketResponse_default_instance_;
class GetTicketsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTicketsRequest> _instance;
} _GetTicketsRequest_default_instance_;
class GetTicketsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTicketsResponse> _instance;
} _GetTicketsResponse_default_instance_;
class AddBanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddBanRequest> _instance;
} _AddBanRequest_default_instance_;
class RemoveBanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveBanRequest> _instance;
} _RemoveBanRequest_default_instance_;
class GetBanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBanRequest> _instance;
} _GetBanRequest_default_instance_;
class GetBanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBanResponse> _instance;
} _GetBanResponse_default_instance_;
class GetBansRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBansRequest> _instance;
} _GetBansRequest_default_instance_;
class GetBansResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBansResponse> _instance;
} _GetBansResponse_default_instance_;
class SubscribeStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeStreamRequest> _instance;
} _SubscribeStreamRequest_default_instance_;
class UnsubscribeStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeStreamRequest> _instance;
} _UnsubscribeStreamRequest_default_instance_;
class CreateStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateStreamRequest> _instance;
} _CreateStreamRequest_default_instance_;
class CreateStreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateStreamResponse> _instance;
} _CreateStreamResponse_default_instance_;
class DestroyStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroyStreamRequest> _instance;
} _DestroyStreamRequest_default_instance_;
class GetStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamRequest> _instance;
} _GetStreamRequest_default_instance_;
class GetStreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamResponse> _instance;
} _GetStreamResponse_default_instance_;
class GetStreamsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamsRequest> _instance;
} _GetStreamsRequest_default_instance_;
class GetStreamsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamsResponse> _instance;
} _GetStreamsResponse_default_instance_;
class UpdateStreamStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateStreamStateRequest> _instance;
} _UpdateStreamStateRequest_default_instance_;
class SetStreamFocusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetStreamFocusRequest> _instance;
} _SetStreamFocusRequest_default_instance_;
class CreateMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMessageRequest> _instance;
} _CreateMessageRequest_default_instance_;
class CreateMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMessageResponse> _instance;
} _CreateMessageResponse_default_instance_;
class DestroyMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroyMessageRequest> _instance;
} _DestroyMessageRequest_default_instance_;
class DestroyMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestroyMessageResponse> _instance;
} _DestroyMessageResponse_default_instance_;
class EditMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditMessageRequest> _instance;
} _EditMessageRequest_default_instance_;
class EditMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditMessageResponse> _instance;
} _EditMessageResponse_default_instance_;
class SetMessagePinnedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMessagePinnedRequest> _instance;
} _SetMessagePinnedRequest_default_instance_;
class SetTypingIndicatorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTypingIndicatorRequest> _instance;
} _SetTypingIndicatorRequest_default_instance_;
class AdvanceStreamViewTimeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvanceStreamViewTimeRequest> _instance;
} _AdvanceStreamViewTimeRequest_default_instance_;
class AdvanceStreamMentionViewTimeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvanceStreamMentionViewTimeRequest> _instance;
} _AdvanceStreamMentionViewTimeRequest_default_instance_;
class AdvanceActivityViewTimeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvanceActivityViewTimeRequest> _instance;
} _AdvanceActivityViewTimeRequest_default_instance_;
class GetStreamHistoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamHistoryRequest> _instance;
} _GetStreamHistoryRequest_default_instance_;
class GetStreamHistoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamHistoryResponse> _instance;
} _GetStreamHistoryResponse_default_instance_;
class GetStreamMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamMessageRequest> _instance;
} _GetStreamMessageRequest_default_instance_;
class GetStreamMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamMessageResponse> _instance;
} _GetStreamMessageResponse_default_instance_;
class GetClubActivityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetClubActivityRequest> _instance;
} _GetClubActivityRequest_default_instance_;
class GetClubActivityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetClubActivityResponse> _instance;
} _GetClubActivityResponse_default_instance_;
class GetStreamVoiceTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamVoiceTokenRequest> _instance;
} _GetStreamVoiceTokenRequest_default_instance_;
class GetStreamVoiceTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamVoiceTokenResponse> _instance;
} _GetStreamVoiceTokenResponse_default_instance_;
class KickFromStreamVoiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickFromStreamVoiceRequest> _instance;
} _KickFromStreamVoiceRequest_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AcceptInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AcceptInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AcceptInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_AcceptSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AcceptSuggestionRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AcceptSuggestionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AcceptSuggestionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AcceptSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AcceptSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_AddBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AddBanRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AddBanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AddBanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_AddBanOptions_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base,}};

static void InitDefaultsscc_info_AdvanceActivityViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AdvanceActivityViewTimeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvanceActivityViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdvanceActivityViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AdvanceStreamMentionViewTimeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_AdvanceStreamViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AdvanceStreamViewTimeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvanceStreamViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdvanceStreamViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_AssignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_AssignRoleRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::AssignRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::AssignRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AssignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AssignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_CreateMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateMessageRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_CreateMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateMessageResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_CreateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubCreateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_CreateResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_CreateStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateStreamRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_CreateStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateStreamResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateStreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateStreamResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_CreateTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateTicketRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateTicketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateTicketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_CreateTicketOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_CreateTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateTicketResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateTicketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateTicketResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_DeclineInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::DeclineInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::DeclineInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_DeclineSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_DeclineSuggestionRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::DeclineSuggestionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::DeclineSuggestionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeclineSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeclineSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_DestroyMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_DestroyMessageRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::DestroyMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::DestroyMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DestroyMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DestroyMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_DestroyMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_DestroyMessageResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::DestroyMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::DestroyMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DestroyMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DestroyMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_DestroyRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_DestroyRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::DestroyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::DestroyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DestroyRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DestroyRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_DestroyStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_DestroyStreamRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::DestroyStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::DestroyStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DestroyStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DestroyStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_DestroyTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_DestroyTicketRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::DestroyTicketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::DestroyTicketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DestroyTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DestroyTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_EditMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_EditMessageRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::EditMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::EditMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EditMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_EditMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto.base,
      &scc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_EditMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_EditMessageResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::EditMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::EditMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EditMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EditMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_GetBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetBanRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetBanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetBanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetBanResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetBanResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetBanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetBanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBanResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBanResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base,}};

static void InitDefaultsscc_info_GetBansRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetBansRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetBansRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetBansRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBansRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBansRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetBansResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetBansResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetBansResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetBansResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBansResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBansResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubBan_bgs_2flow_2fpb_2fclient_2fclub_5fban_2eproto.base,}};

static void InitDefaultsscc_info_GetClubActivityRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetClubActivityRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetClubActivityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetClubActivityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetClubActivityRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetClubActivityRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetClubActivityResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetClubActivityResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetClubActivityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetClubActivityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetClubActivityResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetClubActivityResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_GetClubTypeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetClubTypeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetClubTypeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetClubTypeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetClubTypeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetClubTypeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_GetClubTypeResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetClubTypeResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetClubTypeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetClubTypeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetClubTypeResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetClubTypeResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_UniqueClubType_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,
      &scc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base,
      &scc_info_ClubTypeRangeSet_bgs_2flow_2fpb_2fclient_2fclub_5frange_5fset_2eproto.base,}};

static void InitDefaultsscc_info_GetDescriptionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetDescriptionRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetDescriptionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetDescriptionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDescriptionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDescriptionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetDescriptionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetDescriptionResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetDescriptionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetDescriptionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDescriptionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDescriptionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubDescription_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_GetInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetInvitationResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetInvitationResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetInvitationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetInvitationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInvitationResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInvitationResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_GetInvitationsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetInvitationsRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetInvitationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetInvitationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInvitationsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInvitationsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetInvitationsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetInvitationsResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetInvitationsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetInvitationsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInvitationsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInvitationsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubInvitation_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_GetMemberRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetMemberRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetMemberRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetMemberRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMemberRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMemberRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetMemberResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetMemberResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetMemberResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetMemberResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMemberResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMemberResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_GetMembersRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetMembersRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetMembersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetMembersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMembersRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMembersRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetMembersResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetMembersResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetMembersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetMembersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMembersResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMembersResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_Member_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamHistoryRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamHistoryRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamHistoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamHistoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStreamHistoryRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStreamHistoryRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamHistoryResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamHistoryResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamHistoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamHistoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamHistoryResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamHistoryResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamMessageRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStreamMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStreamMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamMessageResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamVoiceTokenRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamVoiceTokenRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamVoiceTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamVoiceTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamVoiceTokenRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamVoiceTokenRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamVoiceTokenResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamVoiceTokenResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamVoiceTokenResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamVoiceTokenResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_VoiceCredentials_bgs_2flow_2fpb_2fclient_2fvoice_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamsRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetStreamsResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetStreamsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetStreamsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStreamsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStreamsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
      &scc_info_StreamView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_GetSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetSuggestionRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetSuggestionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetSuggestionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetSuggestionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetSuggestionResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetSuggestionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetSuggestionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSuggestionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSuggestionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_GetSuggestionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetSuggestionsRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetSuggestionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetSuggestionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSuggestionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSuggestionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetSuggestionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetSuggestionsResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetSuggestionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetSuggestionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSuggestionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSuggestionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubSuggestion_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_GetTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetTicketRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetTicketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetTicketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetTicketResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetTicketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetTicketResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_GetTicketsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetTicketsRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetTicketsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetTicketsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTicketsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTicketsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_GetTicketsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_GetTicketsResponse_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::GetTicketsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::GetTicketsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTicketsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTicketsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_ClubTicket_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_JoinRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_JoinRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::JoinRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::JoinRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JoinRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_JoinRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_CreateMemberOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_KickFromStreamVoiceRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_KickFromStreamVoiceRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::KickFromStreamVoiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::KickFromStreamVoiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KickFromStreamVoiceRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KickFromStreamVoiceRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_KickRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_KickRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::KickRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::KickRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KickRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KickRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_LeaveRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_LeaveRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::LeaveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::LeaveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaveRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaveRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_RedeemTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_RedeemTicketRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::RedeemTicketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::RedeemTicketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RedeemTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RedeemTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_RemoveBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_RemoveBanRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::RemoveBanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::RemoveBanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoveBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoveBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_RevokeInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::RevokeInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::RevokeInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SendInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SendInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SendInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_SendInvitationOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_SendSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SendSuggestionRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SendSuggestionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SendSuggestionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SendSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_SendSuggestionOptions_bgs_2flow_2fpb_2fclient_2fclub_5finvitation_2eproto.base,}};

static void InitDefaultsscc_info_SetMessagePinnedRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SetMessagePinnedRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SetMessagePinnedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SetMessagePinnedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetMessagePinnedRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetMessagePinnedRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_SetStreamFocusRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SetStreamFocusRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SetStreamFocusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SetStreamFocusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetStreamFocusRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetStreamFocusRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_SetTypingIndicatorRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SetTypingIndicatorRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SetTypingIndicatorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SetTypingIndicatorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetTypingIndicatorRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetTypingIndicatorRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_SubscribeStreamRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::SubscribeStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::SubscribeStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_UnassignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UnassignRoleRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UnassignRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UnassignRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UnassignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UnassignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_RoleOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UnsubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UnsubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UnsubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UnsubscribeStreamRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UnsubscribeStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UnsubscribeStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnsubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_UpdateClubSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UpdateClubSettingsRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UpdateClubSettingsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UpdateClubSettingsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateClubSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateClubSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubSettingsOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_UpdateClubStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UpdateClubStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UpdateClubStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UpdateClubStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateClubStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateClubStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_ClubStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fcore_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMemberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UpdateMemberStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UpdateMemberStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UpdateMemberStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateMemberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateMemberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_MemberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static void InitDefaultsscc_info_UpdateStreamStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UpdateStreamStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UpdateStreamStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UpdateStreamStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateStreamStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateStreamStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_UpdateSubscriberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_UpdateSubscriberStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::UpdateSubscriberStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::UpdateSubscriberStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateSubscriberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateSubscriberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_SubscriberStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto[82];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeRequest, club_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeRequest, club_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateRequest, options_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateResponse, club_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyRequest, club_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetDescriptionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetDescriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetDescriptionRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetDescriptionRequest, club_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetDescriptionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetDescriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetDescriptionResponse, club_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeRequest, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeResponse, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeResponse, role_set_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubTypeResponse, range_set_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubStateRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubStateRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubStateRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubSettingsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubSettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubSettingsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubSettingsRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateClubSettingsRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::JoinRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::JoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::JoinRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::JoinRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::JoinRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::LeaveRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::LeaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::LeaveRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::LeaveRequest, club_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickRequest, target_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMemberRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMemberRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMemberRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMemberRequest, member_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMemberResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMemberResponse, member_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersRequest, continuation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersResponse, member_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetMembersResponse, continuation_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateMemberStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateMemberStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateMemberStateRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateMemberStateRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateMemberStateRequest, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateMemberStateRequest, options_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateSubscriberStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateSubscriberStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateSubscriberStateRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateSubscriberStateRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateSubscriberStateRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AssignRoleRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AssignRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AssignRoleRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AssignRoleRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AssignRoleRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnassignRoleRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnassignRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnassignRoleRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnassignRoleRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnassignRoleRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendInvitationRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptInvitationRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptInvitationRequest, invitation_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineInvitationRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineInvitationRequest, invitation_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RevokeInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RevokeInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RevokeInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RevokeInvitationRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RevokeInvitationRequest, invitation_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationRequest, invitation_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationResponse, invitation_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsRequest, continuation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsResponse, invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetInvitationsResponse, continuation_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SendSuggestionRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptSuggestionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptSuggestionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptSuggestionRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptSuggestionRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AcceptSuggestionRequest, suggestion_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineSuggestionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineSuggestionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineSuggestionRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineSuggestionRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DeclineSuggestionRequest, suggestion_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionRequest, suggestion_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionResponse, suggestion_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsRequest, continuation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsResponse, suggestion_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetSuggestionsResponse, continuation_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateTicketResponse, ticket_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyTicketRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyTicketRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyTicketRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyTicketRequest, ticket_id_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RedeemTicketRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RedeemTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RedeemTicketRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RedeemTicketRequest, ticket_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketRequest, ticket_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketResponse, ticket_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsRequest, continuation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsResponse, ticket_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetTicketsResponse, continuation_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AddBanRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveBanRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveBanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveBanRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveBanRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::RemoveBanRequest, target_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBanRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBanRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBanRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBanRequest, target_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBanResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBanResponse, ban_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansRequest, continuation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansResponse, ban_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetBansResponse, continuation_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeStreamRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeStreamRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeStreamRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SubscribeStreamRequest, stream_id_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeStreamRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeStreamRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeStreamRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UnsubscribeStreamRequest, stream_id_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamResponse, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamResponse, stream_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyStreamRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyStreamRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyStreamRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyStreamRequest, stream_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamRequest, stream_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamResponse, stream_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsRequest, continuation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsResponse, stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsResponse, view_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamsResponse, continuation_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateStreamStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateStreamStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateStreamStateRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateStreamStateRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateStreamStateRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::UpdateStreamStateRequest, options_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetStreamFocusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetStreamFocusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetStreamFocusRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetStreamFocusRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetStreamFocusRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetStreamFocusRequest, focus_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageRequest, options_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageResponse, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageRequest, message_id_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::DestroyMessageResponse, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageRequest, message_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageRequest, options_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::EditMessageResponse, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetMessagePinnedRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetMessagePinnedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetMessagePinnedRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetMessagePinnedRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetMessagePinnedRequest, stream_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetTypingIndicatorRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetTypingIndicatorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetTypingIndicatorRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetTypingIndicatorRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetTypingIndicatorRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::SetTypingIndicatorRequest, indicator_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest, stream_id_deprecated_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest, stream_id_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest, stream_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest, club_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryRequest, options_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryResponse, message_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamHistoryResponse, continuation_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageRequest, message_id_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamMessageResponse, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubActivityRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubActivityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubActivityRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubActivityRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubActivityRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubActivityResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubActivityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetClubActivityResponse, continuation_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenRequest, stream_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenResponse, channel_uri_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::GetStreamVoiceTokenResponse, credentials_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickFromStreamVoiceRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickFromStreamVoiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickFromStreamVoiceRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickFromStreamVoiceRequest, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickFromStreamVoiceRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::KickFromStreamVoiceRequest, target_id_),
  0,
  2,
  3,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::club::v1::SubscribeRequest)},
  { 9, 16, sizeof(::bgs::protocol::club::v1::UnsubscribeRequest)},
  { 18, 25, sizeof(::bgs::protocol::club::v1::CreateRequest)},
  { 27, 33, sizeof(::bgs::protocol::club::v1::CreateResponse)},
  { 34, 41, sizeof(::bgs::protocol::club::v1::DestroyRequest)},
  { 43, 50, sizeof(::bgs::protocol::club::v1::GetDescriptionRequest)},
  { 52, 58, sizeof(::bgs::protocol::club::v1::GetDescriptionResponse)},
  { 59, 66, sizeof(::bgs::protocol::club::v1::GetClubTypeRequest)},
  { 68, 76, sizeof(::bgs::protocol::club::v1::GetClubTypeResponse)},
  { 79, 87, sizeof(::bgs::protocol::club::v1::UpdateClubStateRequest)},
  { 90, 98, sizeof(::bgs::protocol::club::v1::UpdateClubSettingsRequest)},
  { 101, 109, sizeof(::bgs::protocol::club::v1::JoinRequest)},
  { 112, 119, sizeof(::bgs::protocol::club::v1::LeaveRequest)},
  { 121, 129, sizeof(::bgs::protocol::club::v1::KickRequest)},
  { 132, 140, sizeof(::bgs::protocol::club::v1::GetMemberRequest)},
  { 143, 149, sizeof(::bgs::protocol::club::v1::GetMemberResponse)},
  { 150, 158, sizeof(::bgs::protocol::club::v1::GetMembersRequest)},
  { 161, 168, sizeof(::bgs::protocol::club::v1::GetMembersResponse)},
  { 170, 179, sizeof(::bgs::protocol::club::v1::UpdateMemberStateRequest)},
  { 183, 191, sizeof(::bgs::protocol::club::v1::UpdateSubscriberStateRequest)},
  { 194, 202, sizeof(::bgs::protocol::club::v1::AssignRoleRequest)},
  { 205, 213, sizeof(::bgs::protocol::club::v1::UnassignRoleRequest)},
  { 216, 224, sizeof(::bgs::protocol::club::v1::SendInvitationRequest)},
  { 227, 235, sizeof(::bgs::protocol::club::v1::AcceptInvitationRequest)},
  { 238, 246, sizeof(::bgs::protocol::club::v1::DeclineInvitationRequest)},
  { 249, 257, sizeof(::bgs::protocol::club::v1::RevokeInvitationRequest)},
  { 260, 268, sizeof(::bgs::protocol::club::v1::GetInvitationRequest)},
  { 271, 277, sizeof(::bgs::protocol::club::v1::GetInvitationResponse)},
  { 278, 286, sizeof(::bgs::protocol::club::v1::GetInvitationsRequest)},
  { 289, 296, sizeof(::bgs::protocol::club::v1::GetInvitationsResponse)},
  { 298, 306, sizeof(::bgs::protocol::club::v1::SendSuggestionRequest)},
  { 309, 317, sizeof(::bgs::protocol::club::v1::AcceptSuggestionRequest)},
  { 320, 328, sizeof(::bgs::protocol::club::v1::DeclineSuggestionRequest)},
  { 331, 339, sizeof(::bgs::protocol::club::v1::GetSuggestionRequest)},
  { 342, 348, sizeof(::bgs::protocol::club::v1::GetSuggestionResponse)},
  { 349, 357, sizeof(::bgs::protocol::club::v1::GetSuggestionsRequest)},
  { 360, 367, sizeof(::bgs::protocol::club::v1::GetSuggestionsResponse)},
  { 369, 377, sizeof(::bgs::protocol::club::v1::CreateTicketRequest)},
  { 380, 386, sizeof(::bgs::protocol::club::v1::CreateTicketResponse)},
  { 387, 395, sizeof(::bgs::protocol::club::v1::DestroyTicketRequest)},
  { 398, 405, sizeof(::bgs::protocol::club::v1::RedeemTicketRequest)},
  { 407, 414, sizeof(::bgs::protocol::club::v1::GetTicketRequest)},
  { 416, 422, sizeof(::bgs::protocol::club::v1::GetTicketResponse)},
  { 423, 431, sizeof(::bgs::protocol::club::v1::GetTicketsRequest)},
  { 434, 441, sizeof(::bgs::protocol::club::v1::GetTicketsResponse)},
  { 443, 451, sizeof(::bgs::protocol::club::v1::AddBanRequest)},
  { 454, 462, sizeof(::bgs::protocol::club::v1::RemoveBanRequest)},
  { 465, 473, sizeof(::bgs::protocol::club::v1::GetBanRequest)},
  { 476, 482, sizeof(::bgs::protocol::club::v1::GetBanResponse)},
  { 483, 491, sizeof(::bgs::protocol::club::v1::GetBansRequest)},
  { 494, 501, sizeof(::bgs::protocol::club::v1::GetBansResponse)},
  { 503, 511, sizeof(::bgs::protocol::club::v1::SubscribeStreamRequest)},
  { 514, 522, sizeof(::bgs::protocol::club::v1::UnsubscribeStreamRequest)},
  { 525, 533, sizeof(::bgs::protocol::club::v1::CreateStreamRequest)},
  { 536, 543, sizeof(::bgs::protocol::club::v1::CreateStreamResponse)},
  { 545, 553, sizeof(::bgs::protocol::club::v1::DestroyStreamRequest)},
  { 556, 564, sizeof(::bgs::protocol::club::v1::GetStreamRequest)},
  { 567, 573, sizeof(::bgs::protocol::club::v1::GetStreamResponse)},
  { 574, 582, sizeof(::bgs::protocol::club::v1::GetStreamsRequest)},
  { 585, 593, sizeof(::bgs::protocol::club::v1::GetStreamsResponse)},
  { 596, 605, sizeof(::bgs::protocol::club::v1::UpdateStreamStateRequest)},
  { 609, 618, sizeof(::bgs::protocol::club::v1::SetStreamFocusRequest)},
  { 622, 631, sizeof(::bgs::protocol::club::v1::CreateMessageRequest)},
  { 635, 641, sizeof(::bgs::protocol::club::v1::CreateMessageResponse)},
  { 642, 651, sizeof(::bgs::protocol::club::v1::DestroyMessageRequest)},
  { 655, 661, sizeof(::bgs::protocol::club::v1::DestroyMessageResponse)},
  { 662, 672, sizeof(::bgs::protocol::club::v1::EditMessageRequest)},
  { 677, 683, sizeof(::bgs::protocol::club::v1::EditMessageResponse)},
  { 684, 692, sizeof(::bgs::protocol::club::v1::SetMessagePinnedRequest)},
  { 695, 704, sizeof(::bgs::protocol::club::v1::SetTypingIndicatorRequest)},
  { 708, 717, sizeof(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest)},
  { 721, 729, sizeof(::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest)},
  { 732, 739, sizeof(::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest)},
  { 741, 750, sizeof(::bgs::protocol::club::v1::GetStreamHistoryRequest)},
  { 754, 761, sizeof(::bgs::protocol::club::v1::GetStreamHistoryResponse)},
  { 763, 772, sizeof(::bgs::protocol::club::v1::GetStreamMessageRequest)},
  { 776, 782, sizeof(::bgs::protocol::club::v1::GetStreamMessageResponse)},
  { 783, 791, sizeof(::bgs::protocol::club::v1::GetClubActivityRequest)},
  { 794, 800, sizeof(::bgs::protocol::club::v1::GetClubActivityResponse)},
  { 801, 809, sizeof(::bgs::protocol::club::v1::GetStreamVoiceTokenRequest)},
  { 812, 819, sizeof(::bgs::protocol::club::v1::GetStreamVoiceTokenResponse)},
  { 821, 830, sizeof(::bgs::protocol::club::v1::KickFromStreamVoiceRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UnsubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_DestroyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetDescriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetDescriptionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetClubTypeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetClubTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UpdateClubStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UpdateClubSettingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_JoinRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_LeaveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_KickRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetMemberRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetMemberResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetMembersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetMembersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UpdateMemberStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UpdateSubscriberStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AssignRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UnassignRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SendInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AcceptInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_DeclineInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_RevokeInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetInvitationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetInvitationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetInvitationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SendSuggestionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AcceptSuggestionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_DeclineSuggestionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetSuggestionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetSuggestionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetSuggestionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetSuggestionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateTicketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateTicketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_DestroyTicketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_RedeemTicketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetTicketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetTicketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetTicketsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetTicketsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AddBanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_RemoveBanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetBanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetBanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetBansRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetBansResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SubscribeStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UnsubscribeStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateStreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_DestroyStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_UpdateStreamStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SetStreamFocusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_DestroyMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_DestroyMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_EditMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_EditMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SetMessagePinnedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_SetTypingIndicatorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AdvanceStreamViewTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AdvanceStreamMentionViewTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_AdvanceActivityViewTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamHistoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamHistoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetClubActivityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetClubActivityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamVoiceTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_GetStreamVoiceTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_KickFromStreamVoiceRequest_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$bgs/low/pb/client/club_request.proto\022\024"
  "bgs.protocol.club.v1\032\"bgs/low/pb/client/"
  "club_types.proto\"U\n\020SubscribeRequest\0220\n\010"
  "agent_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Me"
  "mberId\022\017\n\007club_id\030\002 \001(\004\"W\n\022UnsubscribeRe"
  "quest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.c"
  "lub.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\"{\n\rCrea"
  "teRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protoc"
  "ol.club.v1.MemberId\0228\n\007options\030\002 \001(\0132\'.b"
  "gs.protocol.club.v1.ClubCreateOptions\"!\n"
  "\016CreateResponse\022\017\n\007club_id\030\001 \001(\004\"S\n\016Dest"
  "royRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.proto"
  "col.club.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\"Z\n"
  "\025GetDescriptionRequest\0220\n\010agent_id\030\001 \001(\013"
  "2\036.bgs.protocol.club.v1.MemberId\022\017\n\007club"
  "_id\030\002 \001(\004\"M\n\026GetDescriptionResponse\0223\n\004c"
  "lub\030\001 \001(\0132%.bgs.protocol.club.v1.ClubDes"
  "cription\"z\n\022GetClubTypeRequest\0220\n\010agent_"
  "id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId"
  "\0222\n\004type\030\002 \001(\0132$.bgs.protocol.club.v1.Un"
  "iqueClubType\"\271\001\n\023GetClubTypeResponse\0222\n\004"
  "type\030\001 \001(\0132$.bgs.protocol.club.v1.Unique"
  "ClubType\0223\n\010role_set\030\002 \001(\0132!.bgs.protoco"
  "l.club.v1.ClubRoleSet\0229\n\trange_set\030\003 \001(\013"
  "2&.bgs.protocol.club.v1.ClubTypeRangeSet"
  "\"\224\001\n\026UpdateClubStateRequest\0220\n\010agent_id\030"
  "\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n"
  "\007club_id\030\002 \001(\004\0227\n\007options\030\003 \001(\0132&.bgs.pr"
  "otocol.club.v1.ClubStateOptions\"\232\001\n\031Upda"
  "teClubSettingsRequest\0220\n\010agent_id\030\001 \001(\0132"
  "\036.bgs.protocol.club.v1.MemberId\022\017\n\007club_"
  "id\030\002 \001(\004\022:\n\007options\030\003 \001(\0132).bgs.protocol"
  ".club.v1.ClubSettingsOptions\"\214\001\n\013JoinReq"
  "uest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.cl"
  "ub.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\022:\n\007optio"
  "ns\030\003 \001(\0132).bgs.protocol.club.v1.CreateMe"
  "mberOptions\"Q\n\014LeaveRequest\0220\n\010agent_id\030"
  "\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n"
  "\007club_id\030\002 \001(\004\"\203\001\n\013KickRequest\0220\n\010agent_"
  "id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId"
  "\022\017\n\007club_id\030\002 \001(\004\0221\n\ttarget_id\030\003 \001(\0132\036.b"
  "gs.protocol.club.v1.MemberId\"\210\001\n\020GetMemb"
  "erRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protoc"
  "ol.club.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\0221\n\t"
  "member_id\030\003 \001(\0132\036.bgs.protocol.club.v1.M"
  "emberId\"A\n\021GetMemberResponse\022,\n\006member\030\001"
  " \001(\0132\034.bgs.protocol.club.v1.Member\"l\n\021Ge"
  "tMembersRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs."
  "protocol.club.v1.MemberId\022\017\n\007club_id\030\002 \001"
  "(\004\022\024\n\014continuation\030\004 \001(\004\"X\n\022GetMembersRe"
  "sponse\022,\n\006member\030\001 \003(\0132\034.bgs.protocol.cl"
  "ub.v1.Member\022\024\n\014continuation\030\002 \001(\004\"\313\001\n\030U"
  "pdateMemberStateRequest\0220\n\010agent_id\030\001 \001("
  "\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007clu"
  "b_id\030\002 \001(\004\0221\n\tmember_id\030\003 \001(\0132\036.bgs.prot"
  "ocol.club.v1.MemberId\0229\n\007options\030\005 \001(\0132("
  ".bgs.protocol.club.v1.MemberStateOptions"
  "\"\240\001\n\034UpdateSubscriberStateRequest\0220\n\010age"
  "nt_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Membe"
  "rId\022\017\n\007club_id\030\002 \001(\004\022=\n\007options\030\003 \001(\0132,."
  "bgs.protocol.club.v1.SubscriberStateOpti"
  "ons\"\212\001\n\021AssignRoleRequest\0220\n\010agent_id\030\001 "
  "\001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007c"
  "lub_id\030\002 \001(\004\0222\n\007options\030\003 \001(\0132!.bgs.prot"
  "ocol.club.v1.RoleOptions\"\214\001\n\023UnassignRol"
  "eRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protoco"
  "l.club.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\0222\n\007o"
  "ptions\030\003 \001(\0132!.bgs.protocol.club.v1.Role"
  "Options\"\230\001\n\025SendInvitationRequest\0220\n\010age"
  "nt_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Membe"
  "rId\022\017\n\007club_id\030\002 \001(\004\022<\n\007options\030\003 \001(\0132+."
  "bgs.protocol.club.v1.SendInvitationOptio"
  "ns\"s\n\027AcceptInvitationRequest\0220\n\010agent_i"
  "d\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022"
  "\017\n\007club_id\030\002 \001(\004\022\025\n\rinvitation_id\030\003 \001(\006\""
  "t\n\030DeclineInvitationRequest\0220\n\010agent_id\030"
  "\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n"
  "\007club_id\030\002 \001(\004\022\025\n\rinvitation_id\030\003 \001(\006\"s\n"
  "\027RevokeInvitationRequest\0220\n\010agent_id\030\001 \001"
  "(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007cl"
  "ub_id\030\002 \001(\004\022\025\n\rinvitation_id\030\003 \001(\006\"p\n\024Ge"
  "tInvitationRequest\0220\n\010agent_id\030\001 \001(\0132\036.b"
  "gs.protocol.club.v1.MemberId\022\017\n\007club_id\030"
  "\002 \001(\004\022\025\n\rinvitation_id\030\003 \001(\006\"Q\n\025GetInvit"
  "ationResponse\0228\n\ninvitation\030\001 \001(\0132$.bgs."
  "protocol.club.v1.ClubInvitation\"p\n\025GetIn"
  "vitationsRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs"
  ".protocol.club.v1.MemberId\022\017\n\007club_id\030\002 "
  "\001(\004\022\024\n\014continuation\030\003 \001(\004\"h\n\026GetInvitati"
  "onsResponse\0228\n\ninvitation\030\001 \003(\0132$.bgs.pr"
  "otocol.club.v1.ClubInvitation\022\024\n\014continu"
  "ation\030\002 \001(\004\"\230\001\n\025SendSuggestionRequest\0220\n"
  "\010agent_id\030\001 \001(\0132\036.bgs.protocol.club.v1.M"
  "emberId\022\017\n\007club_id\030\002 \001(\004\022<\n\007options\030\003 \001("
  "\0132+.bgs.protocol.club.v1.SendSuggestionO"
  "ptions\"s\n\027AcceptSuggestionRequest\0220\n\010age"
  "nt_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Membe"
  "rId\022\017\n\007club_id\030\002 \001(\004\022\025\n\rsuggestion_id\030\003 "
  "\001(\006\"t\n\030DeclineSuggestionRequest\0220\n\010agent"
  "_id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberI"
  "d\022\017\n\007club_id\030\002 \001(\004\022\025\n\rsuggestion_id\030\003 \001("
  "\006\"p\n\024GetSuggestionRequest\0220\n\010agent_id\030\001 "
  "\001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007c"
  "lub_id\030\002 \001(\004\022\025\n\rsuggestion_id\030\003 \001(\006\"Q\n\025G"
  "etSuggestionResponse\0228\n\nsuggestion\030\001 \001(\013"
  "2$.bgs.protocol.club.v1.ClubSuggestion\"p"
  "\n\025GetSuggestionsRequest\0220\n\010agent_id\030\001 \001("
  "\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007clu"
  "b_id\030\002 \001(\004\022\024\n\014continuation\030\003 \001(\004\"h\n\026GetS"
  "uggestionsResponse\0228\n\nsuggestion\030\001 \003(\0132$"
  ".bgs.protocol.club.v1.ClubSuggestion\022\024\n\014"
  "continuation\030\002 \001(\004\"\224\001\n\023CreateTicketReque"
  "st\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.club"
  ".v1.MemberId\022\017\n\007club_id\030\002 \001(\004\022:\n\007options"
  "\030\003 \001(\0132).bgs.protocol.club.v1.CreateTick"
  "etOptions\"H\n\024CreateTicketResponse\0220\n\006tic"
  "ket\030\001 \001(\0132 .bgs.protocol.club.v1.ClubTic"
  "ket\"l\n\024DestroyTicketRequest\0220\n\010agent_id\030"
  "\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n"
  "\007club_id\030\002 \001(\004\022\021\n\tticket_id\030\003 \001(\t\"Z\n\023Red"
  "eemTicketRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs"
  ".protocol.club.v1.MemberId\022\021\n\tticket_id\030"
  "\003 \001(\t\"W\n\020GetTicketRequest\0220\n\010agent_id\030\001 "
  "\001(\0132\036.bgs.protocol.club.v1.MemberId\022\021\n\tt"
  "icket_id\030\003 \001(\t\"E\n\021GetTicketResponse\0220\n\006t"
  "icket\030\001 \001(\0132 .bgs.protocol.club.v1.ClubT"
  "icket\"l\n\021GetTicketsRequest\0220\n\010agent_id\030\001"
  " \001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007"
  "club_id\030\002 \001(\004\022\024\n\014continuation\030\003 \001(\004\"\\\n\022G"
  "etTicketsResponse\0220\n\006ticket\030\001 \003(\0132 .bgs."
  "protocol.club.v1.ClubTicket\022\024\n\014continuat"
  "ion\030\002 \001(\004\"\210\001\n\rAddBanRequest\0220\n\010agent_id\030"
  "\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n"
  "\007club_id\030\002 \001(\004\0224\n\007options\030\003 \001(\0132#.bgs.pr"
  "otocol.club.v1.AddBanOptions\"\210\001\n\020RemoveB"
  "anRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protoc"
  "ol.club.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\0221\n\t"
  "target_id\030\003 \001(\0132\036.bgs.protocol.club.v1.M"
  "emberId\"\205\001\n\rGetBanRequest\0220\n\010agent_id\030\001 "
  "\001(\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007c"
  "lub_id\030\002 \001(\004\0221\n\ttarget_id\030\003 \001(\0132\036.bgs.pr"
  "otocol.club.v1.MemberId\"<\n\016GetBanRespons"
  "e\022*\n\003ban\030\001 \001(\0132\035.bgs.protocol.club.v1.Cl"
  "ubBan\"i\n\016GetBansRequest\0220\n\010agent_id\030\001 \001("
  "\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007clu"
  "b_id\030\002 \001(\004\022\024\n\014continuation\030\003 \001(\004\"S\n\017GetB"
  "ansResponse\022*\n\003ban\030\001 \003(\0132\035.bgs.protocol."
  "club.v1.ClubBan\022\024\n\014continuation\030\002 \001(\004\"n\n"
  "\026SubscribeStreamRequest\0220\n\010agent_id\030\001 \001("
  "\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007clu"
  "b_id\030\002 \001(\004\022\021\n\tstream_id\030\003 \003(\004\"p\n\030Unsubsc"
  "ribeStreamRequest\0220\n\010agent_id\030\001 \001(\0132\036.bg"
  "s.protocol.club.v1.MemberId\022\017\n\007club_id\030\002"
  " \001(\004\022\021\n\tstream_id\030\003 \003(\004\"\224\001\n\023CreateStream"
  "Request\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol"
  ".club.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\022:\n\007op"
  "tions\030\003 \001(\0132).bgs.protocol.club.v1.Creat"
  "eStreamOptions\":\n\024CreateStreamResponse\022\017"
  "\n\007club_id\030\001 \001(\004\022\021\n\tstream_id\030\002 \001(\004\"l\n\024De"
  "stroyStreamRequest\0220\n\010agent_id\030\001 \001(\0132\036.b"
  "gs.protocol.club.v1.MemberId\022\017\n\007club_id\030"
  "\002 \001(\004\022\021\n\tstream_id\030\003 \001(\004\"h\n\020GetStreamReq"
  "uest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.cl"
  "ub.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\022\021\n\tstrea"
  "m_id\030\003 \001(\004\"A\n\021GetStreamResponse\022,\n\006strea"
  "m\030\001 \001(\0132\034.bgs.protocol.club.v1.Stream\"l\n"
  "\021GetStreamsRequest\0220\n\010agent_id\030\001 \001(\0132\036.b"
  "gs.protocol.club.v1.MemberId\022\017\n\007club_id\030"
  "\002 \001(\004\022\024\n\014continuation\030\003 \001(\004\"\210\001\n\022GetStrea"
  "msResponse\022,\n\006stream\030\001 \003(\0132\034.bgs.protoco"
  "l.club.v1.Stream\022.\n\004view\030\002 \003(\0132 .bgs.pro"
  "tocol.club.v1.StreamView\022\024\n\014continuation"
  "\030\003 \001(\004\"\253\001\n\030UpdateStreamStateRequest\0220\n\010a"
  "gent_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Mem"
  "berId\022\017\n\007club_id\030\002 \001(\004\022\021\n\tstream_id\030\003 \001("
  "\004\0229\n\007options\030\005 \001(\0132(.bgs.protocol.club.v"
  "1.StreamStateOptions\"|\n\025SetStreamFocusRe"
  "quest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.protocol.c"
  "lub.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\022\021\n\tstre"
  "am_id\030\003 \001(\004\022\r\n\005focus\030\004 \001(\010\"\251\001\n\024CreateMes"
  "sageRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.prot"
  "ocol.club.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\022\021"
  "\n\tstream_id\030\003 \001(\004\022;\n\007options\030\004 \001(\0132*.bgs"
  ".protocol.club.v1.CreateMessageOptions\"M"
  "\n\025CreateMessageResponse\0224\n\007message\030\001 \001(\013"
  "2#.bgs.protocol.club.v1.StreamMessage\"\232\001"
  "\n\025DestroyMessageRequest\0220\n\010agent_id\030\001 \001("
  "\0132\036.bgs.protocol.club.v1.MemberId\022\017\n\007clu"
  "b_id\030\002 \001(\004\022\021\n\tstream_id\030\003 \001(\004\022+\n\nmessage"
  "_id\030\004 \001(\0132\027.bgs.protocol.MessageId\"N\n\026De"
  "stroyMessageResponse\0224\n\007message\030\001 \001(\0132#."
  "bgs.protocol.club.v1.StreamMessage\"\324\001\n\022E"
  "ditMessageRequest\0220\n\010agent_id\030\001 \001(\0132\036.bg"
  "s.protocol.club.v1.MemberId\022\017\n\007club_id\030\002"
  " \001(\004\022\021\n\tstream_id\030\003 \001(\004\022+\n\nmessage_id\030\004 "
  "\001(\0132\027.bgs.protocol.MessageId\022;\n\007options\030"
  "\005 \001(\0132*.bgs.protocol.club.v1.CreateMessa"
  "geOptions\"K\n\023EditMessageResponse\0224\n\007mess"
  "age\030\001 \001(\0132#.bgs.protocol.club.v1.StreamM"
  "essage\"o\n\027SetMessagePinnedRequest\0220\n\010age"
  "nt_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Membe"
  "rId\022\017\n\007club_id\030\002 \001(\004\022\021\n\tstream_id\030\003 \001(\004\""
  "\261\001\n\031SetTypingIndicatorRequest\0220\n\010agent_i"
  "d\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022"
  "\017\n\007club_id\030\002 \001(\004\022\021\n\tstream_id\030\003 \001(\004\022>\n\ti"
  "ndicator\030\004 \001(\0162\035.bgs.protocol.TypingIndi"
  "cator:\014TYPING_START\"\232\001\n\034AdvanceStreamVie"
  "wTimeRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.pro"
  "tocol.club.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\022"
  " \n\024stream_id_deprecated\030\003 \001(\004B\002\030\001\022\025\n\tstr"
  "eam_id\030\004 \003(\004B\002\020\001\"{\n#AdvanceStreamMention"
  "ViewTimeRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs."
  "protocol.club.v1.MemberId\022\017\n\007club_id\030\002 \001"
  "(\004\022\021\n\tstream_id\030\003 \001(\004\"c\n\036AdvanceActivity"
  "ViewTimeRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs."
  "protocol.club.v1.MemberId\022\017\n\007club_id\030\002 \001"
  "(\004\"\237\001\n\027GetStreamHistoryRequest\0220\n\010agent_"
  "id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId"
  "\022\017\n\007club_id\030\002 \001(\004\022\021\n\tstream_id\030\003 \001(\004\022.\n\007"
  "options\030\004 \001(\0132\035.bgs.protocol.GetEventOpt"
  "ions\"f\n\030GetStreamHistoryResponse\0224\n\007mess"
  "age\030\001 \003(\0132#.bgs.protocol.club.v1.StreamM"
  "essage\022\024\n\014continuation\030\002 \001(\004\"\234\001\n\027GetStre"
  "amMessageRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs"
  ".protocol.club.v1.MemberId\022\017\n\007club_id\030\002 "
  "\001(\004\022\021\n\tstream_id\030\003 \001(\004\022+\n\nmessage_id\030\004 \001"
  "(\0132\027.bgs.protocol.MessageId\"P\n\030GetStream"
  "MessageResponse\0224\n\007message\030\001 \001(\0132#.bgs.p"
  "rotocol.club.v1.StreamMessage\"\213\001\n\026GetClu"
  "bActivityRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs"
  ".protocol.club.v1.MemberId\022\017\n\007club_id\030\002 "
  "\001(\004\022.\n\007options\030\003 \001(\0132\035.bgs.protocol.GetE"
  "ventOptions\"/\n\027GetClubActivityResponse\022\024"
  "\n\014continuation\030\002 \001(\004\"r\n\032GetStreamVoiceTo"
  "kenRequest\0220\n\010agent_id\030\001 \001(\0132\036.bgs.proto"
  "col.club.v1.MemberId\022\017\n\007club_id\030\002 \001(\004\022\021\n"
  "\tstream_id\030\003 \001(\004\"g\n\033GetStreamVoiceTokenR"
  "esponse\022\023\n\013channel_uri\030\001 \001(\t\0223\n\013credenti"
  "als\030\002 \001(\0132\036.bgs.protocol.VoiceCredential"
  "s\"\245\001\n\032KickFromStreamVoiceRequest\0220\n\010agen"
  "t_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Member"
  "Id\022\017\n\007club_id\030\002 \001(\004\022\021\n\tstream_id\030\003 \001(\004\0221"
  "\n\ttarget_id\030\004 \001(\0132\036.bgs.protocol.club.v1"
  ".MemberIdP\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto_deps[1] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto_sccs[82] = {
  &scc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_AcceptSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_AddBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_AdvanceActivityViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_AdvanceStreamViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_AssignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_CreateMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_CreateMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_CreateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_CreateResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_CreateStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_CreateStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_CreateTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_CreateTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_DeclineSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_DestroyMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_DestroyMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_DestroyRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_DestroyStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_DestroyTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_EditMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_EditMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetBanResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetBansRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetBansResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetClubActivityRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetClubActivityResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetClubTypeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetClubTypeResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetDescriptionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetDescriptionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetInvitationResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetInvitationsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetInvitationsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetMemberRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetMemberResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetMembersRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetMembersResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamHistoryRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamHistoryResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamVoiceTokenRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamVoiceTokenResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetStreamsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetSuggestionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetSuggestionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetSuggestionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetTicketsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_GetTicketsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_JoinRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_KickFromStreamVoiceRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_KickRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_LeaveRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_RedeemTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_RemoveBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_SendSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_SetMessagePinnedRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_SetStreamFocusRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_SetTypingIndicatorRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_SubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_UnassignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_UnsubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_UpdateClubSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_UpdateClubStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_UpdateMemberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_UpdateStreamStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
  &scc_info_UpdateSubscriberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto, "bgs/low/pb/client/club_request.proto", 9731,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto_deps, 82, 1,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto, 82, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SubscribeRequest::_Internal::agent_id(const SubscribeRequest* msg) {
  return *msg->agent_id_;
}
void SubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubscribeRequest::SubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UnsubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class UnsubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UnsubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UnsubscribeRequest::_Internal::agent_id(const UnsubscribeRequest* msg) {
  return *msg->agent_id_;
}
void UnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UnsubscribeRequest::UnsubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UnsubscribeRequest)
}
UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnsubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UnsubscribeRequest)
  return target;
}

size_t UnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UnsubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UnsubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UnsubscribeRequest)
    MergeFrom(*source);
  }
}

void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeRequest::InternalSwap(UnsubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_CreateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::ClubCreateOptions*>(
      ::bgs::protocol::club::v1::ClubCreateOptions::internal_default_instance());
}
class CreateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const CreateRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubCreateOptions& options(const CreateRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
CreateRequest::_Internal::agent_id(const CreateRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubCreateOptions&
CreateRequest::_Internal::options(const CreateRequest* msg) {
  return *msg->options_;
}
void CreateRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CreateRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CreateRequest::CreateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::ClubCreateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateRequest)
}

void CreateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(options_));
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateRequest)
  SharedDtor();
}

void CreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRequest& CreateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubCreateOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubCreateOptions options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubCreateOptions options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateRequest)
    MergeFrom(*source);
  }
}

void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::ClubCreateOptions::MergeFrom(from._internal_options());
    }
  }
}

void CreateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateResponse::InitAsDefaultInstance() {
}
class CreateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateResponse>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreateResponse::CreateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateResponse)
}
CreateResponse::CreateResponse(const CreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateResponse)
}

void CreateResponse::SharedCtor() {
  club_id_ = PROTOBUF_ULONGLONG(0);
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateResponse)
  SharedDtor();
}

void CreateResponse::SharedDtor() {
}

void CreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateResponse& CreateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateResponse)
  return target;
}

size_t CreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 club_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_club_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateResponse)
    MergeFrom(*source);
  }
}

void CreateResponse::MergeFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_club_id()) {
    _internal_set_club_id(from._internal_club_id());
  }
}

void CreateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  return true;
}

void CreateResponse::InternalSwap(CreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestroyRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_DestroyRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class DestroyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const DestroyRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
DestroyRequest::_Internal::agent_id(const DestroyRequest* msg) {
  return *msg->agent_id_;
}
void DestroyRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DestroyRequest::DestroyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.DestroyRequest)
}
DestroyRequest::DestroyRequest(const DestroyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.DestroyRequest)
}

void DestroyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DestroyRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

DestroyRequest::~DestroyRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.DestroyRequest)
  SharedDtor();
}

void DestroyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void DestroyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyRequest& DestroyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroyRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DestroyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.DestroyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DestroyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.DestroyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.DestroyRequest)
  return target;
}

size_t DestroyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.DestroyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.DestroyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.DestroyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.DestroyRequest)
    MergeFrom(*source);
  }
}

void DestroyRequest::MergeFrom(const DestroyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.DestroyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DestroyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.DestroyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyRequest::CopyFrom(const DestroyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.DestroyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void DestroyRequest::InternalSwap(DestroyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDescriptionRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetDescriptionRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetDescriptionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDescriptionRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetDescriptionRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetDescriptionRequest::_Internal::agent_id(const GetDescriptionRequest* msg) {
  return *msg->agent_id_;
}
void GetDescriptionRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetDescriptionRequest::GetDescriptionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetDescriptionRequest)
}
GetDescriptionRequest::GetDescriptionRequest(const GetDescriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetDescriptionRequest)
}

void GetDescriptionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDescriptionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

GetDescriptionRequest::~GetDescriptionRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetDescriptionRequest)
  SharedDtor();
}

void GetDescriptionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetDescriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDescriptionRequest& GetDescriptionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDescriptionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetDescriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetDescriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDescriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDescriptionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetDescriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetDescriptionRequest)
  return target;
}

size_t GetDescriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetDescriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDescriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetDescriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDescriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDescriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetDescriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetDescriptionRequest)
    MergeFrom(*source);
  }
}

void GetDescriptionRequest::MergeFrom(const GetDescriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetDescriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetDescriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetDescriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDescriptionRequest::CopyFrom(const GetDescriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetDescriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDescriptionRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetDescriptionRequest::InternalSwap(GetDescriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDescriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDescriptionResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetDescriptionResponse_default_instance_._instance.get_mutable()->club_ = const_cast< ::bgs::protocol::club::v1::ClubDescription*>(
      ::bgs::protocol::club::v1::ClubDescription::internal_default_instance());
}
class GetDescriptionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDescriptionResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubDescription& club(const GetDescriptionResponse* msg);
  static void set_has_club(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubDescription&
GetDescriptionResponse::_Internal::club(const GetDescriptionResponse* msg) {
  return *msg->club_;
}
void GetDescriptionResponse::clear_club() {
  if (club_ != nullptr) club_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetDescriptionResponse::GetDescriptionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetDescriptionResponse)
}
GetDescriptionResponse::GetDescriptionResponse(const GetDescriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_club()) {
    club_ = new ::bgs::protocol::club::v1::ClubDescription(*from.club_);
  } else {
    club_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetDescriptionResponse)
}

void GetDescriptionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDescriptionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  club_ = nullptr;
}

GetDescriptionResponse::~GetDescriptionResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetDescriptionResponse)
  SharedDtor();
}

void GetDescriptionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete club_;
}

void GetDescriptionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDescriptionResponse& GetDescriptionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDescriptionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetDescriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetDescriptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(club_ != nullptr);
    club_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDescriptionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubDescription club = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_club(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDescriptionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetDescriptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubDescription club = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::club(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetDescriptionResponse)
  return target;
}

size_t GetDescriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetDescriptionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubDescription club = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *club_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDescriptionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetDescriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDescriptionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDescriptionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetDescriptionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetDescriptionResponse)
    MergeFrom(*source);
  }
}

void GetDescriptionResponse::MergeFrom(const GetDescriptionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetDescriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_club()) {
    _internal_mutable_club()->::bgs::protocol::club::v1::ClubDescription::MergeFrom(from._internal_club());
  }
}

void GetDescriptionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetDescriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDescriptionResponse::CopyFrom(const GetDescriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetDescriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDescriptionResponse::IsInitialized() const {
  if (_internal_has_club()) {
    if (!club_->IsInitialized()) return false;
  }
  return true;
}

void GetDescriptionResponse::InternalSwap(GetDescriptionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(club_, other->club_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDescriptionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetClubTypeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetClubTypeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_GetClubTypeRequest_default_instance_._instance.get_mutable()->type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(
      ::bgs::protocol::club::v1::UniqueClubType::internal_default_instance());
}
class GetClubTypeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetClubTypeRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetClubTypeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::UniqueClubType& type(const GetClubTypeRequest* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetClubTypeRequest::_Internal::agent_id(const GetClubTypeRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::UniqueClubType&
GetClubTypeRequest::_Internal::type(const GetClubTypeRequest* msg) {
  return *msg->type_;
}
void GetClubTypeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetClubTypeRequest::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetClubTypeRequest::GetClubTypeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetClubTypeRequest)
}
GetClubTypeRequest::GetClubTypeRequest(const GetClubTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::bgs::protocol::club::v1::UniqueClubType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetClubTypeRequest)
}

void GetClubTypeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetClubTypeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(type_));
}

GetClubTypeRequest::~GetClubTypeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetClubTypeRequest)
  SharedDtor();
}

void GetClubTypeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete type_;
}

void GetClubTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClubTypeRequest& GetClubTypeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetClubTypeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetClubTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetClubTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetClubTypeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetClubTypeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetClubTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetClubTypeRequest)
  return target;
}

size_t GetClubTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetClubTypeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClubTypeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetClubTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClubTypeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetClubTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetClubTypeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetClubTypeRequest)
    MergeFrom(*source);
  }
}

void GetClubTypeRequest::MergeFrom(const GetClubTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetClubTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from._internal_type());
    }
  }
}

void GetClubTypeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetClubTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClubTypeRequest::CopyFrom(const GetClubTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetClubTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClubTypeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetClubTypeRequest::InternalSwap(GetClubTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClubTypeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetClubTypeResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetClubTypeResponse_default_instance_._instance.get_mutable()->type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(
      ::bgs::protocol::club::v1::UniqueClubType::internal_default_instance());
  ::bgs::protocol::club::v1::_GetClubTypeResponse_default_instance_._instance.get_mutable()->role_set_ = const_cast< ::bgs::protocol::club::v1::ClubRoleSet*>(
      ::bgs::protocol::club::v1::ClubRoleSet::internal_default_instance());
  ::bgs::protocol::club::v1::_GetClubTypeResponse_default_instance_._instance.get_mutable()->range_set_ = const_cast< ::bgs::protocol::club::v1::ClubTypeRangeSet*>(
      ::bgs::protocol::club::v1::ClubTypeRangeSet::internal_default_instance());
}
class GetClubTypeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetClubTypeResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::UniqueClubType& type(const GetClubTypeResponse* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubRoleSet& role_set(const GetClubTypeResponse* msg);
  static void set_has_role_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::ClubTypeRangeSet& range_set(const GetClubTypeResponse* msg);
  static void set_has_range_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::UniqueClubType&
GetClubTypeResponse::_Internal::type(const GetClubTypeResponse* msg) {
  return *msg->type_;
}
const ::bgs::protocol::club::v1::ClubRoleSet&
GetClubTypeResponse::_Internal::role_set(const GetClubTypeResponse* msg) {
  return *msg->role_set_;
}
const ::bgs::protocol::club::v1::ClubTypeRangeSet&
GetClubTypeResponse::_Internal::range_set(const GetClubTypeResponse* msg) {
  return *msg->range_set_;
}
void GetClubTypeResponse::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetClubTypeResponse::clear_role_set() {
  if (role_set_ != nullptr) role_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GetClubTypeResponse::clear_range_set() {
  if (range_set_ != nullptr) range_set_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GetClubTypeResponse::GetClubTypeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetClubTypeResponse)
}
GetClubTypeResponse::GetClubTypeResponse(const GetClubTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::bgs::protocol::club::v1::UniqueClubType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_role_set()) {
    role_set_ = new ::bgs::protocol::club::v1::ClubRoleSet(*from.role_set_);
  } else {
    role_set_ = nullptr;
  }
  if (from._internal_has_range_set()) {
    range_set_ = new ::bgs::protocol::club::v1::ClubTypeRangeSet(*from.range_set_);
  } else {
    range_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetClubTypeResponse)
}

void GetClubTypeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetClubTypeResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_set_) -
      reinterpret_cast<char*>(&type_)) + sizeof(range_set_));
}

GetClubTypeResponse::~GetClubTypeResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetClubTypeResponse)
  SharedDtor();
}

void GetClubTypeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete role_set_;
  if (this != internal_default_instance()) delete range_set_;
}

void GetClubTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClubTypeResponse& GetClubTypeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetClubTypeResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetClubTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetClubTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(role_set_ != nullptr);
      role_set_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(range_set_ != nullptr);
      range_set_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetClubTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubTypeRangeSet range_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetClubTypeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetClubTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role_set(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubTypeRangeSet range_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetClubTypeResponse)
  return target;
}

size_t GetClubTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetClubTypeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *role_set_);
    }

    // optional .bgs.protocol.club.v1.ClubTypeRangeSet range_set = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_set_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClubTypeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetClubTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClubTypeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetClubTypeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetClubTypeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetClubTypeResponse)
    MergeFrom(*source);
  }
}

void GetClubTypeResponse::MergeFrom(const GetClubTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetClubTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_role_set()->::bgs::protocol::club::v1::ClubRoleSet::MergeFrom(from._internal_role_set());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_range_set()->::bgs::protocol::club::v1::ClubTypeRangeSet::MergeFrom(from._internal_range_set());
    }
  }
}

void GetClubTypeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetClubTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClubTypeResponse::CopyFrom(const GetClubTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetClubTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClubTypeResponse::IsInitialized() const {
  return true;
}

void GetClubTypeResponse::InternalSwap(GetClubTypeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(role_set_, other->role_set_);
  swap(range_set_, other->range_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClubTypeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateClubStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UpdateClubStateRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_UpdateClubStateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::ClubStateOptions*>(
      ::bgs::protocol::club::v1::ClubStateOptions::internal_default_instance());
}
class UpdateClubStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateClubStateRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UpdateClubStateRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubStateOptions& options(const UpdateClubStateRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UpdateClubStateRequest::_Internal::agent_id(const UpdateClubStateRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubStateOptions&
UpdateClubStateRequest::_Internal::options(const UpdateClubStateRequest* msg) {
  return *msg->options_;
}
void UpdateClubStateRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateClubStateRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UpdateClubStateRequest::UpdateClubStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UpdateClubStateRequest)
}
UpdateClubStateRequest::UpdateClubStateRequest(const UpdateClubStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::ClubStateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UpdateClubStateRequest)
}

void UpdateClubStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateClubStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

UpdateClubStateRequest::~UpdateClubStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UpdateClubStateRequest)
  SharedDtor();
}

void UpdateClubStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateClubStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateClubStateRequest& UpdateClubStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateClubStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void UpdateClubStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UpdateClubStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateClubStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubStateOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateClubStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UpdateClubStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubStateOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UpdateClubStateRequest)
  return target;
}

size_t UpdateClubStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UpdateClubStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubStateOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateClubStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UpdateClubStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateClubStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateClubStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UpdateClubStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UpdateClubStateRequest)
    MergeFrom(*source);
  }
}

void UpdateClubStateRequest::MergeFrom(const UpdateClubStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UpdateClubStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::ClubStateOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateClubStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UpdateClubStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateClubStateRequest::CopyFrom(const UpdateClubStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UpdateClubStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateClubStateRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateClubStateRequest::InternalSwap(UpdateClubStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateClubStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateClubSettingsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UpdateClubSettingsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_UpdateClubSettingsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::ClubSettingsOptions*>(
      ::bgs::protocol::club::v1::ClubSettingsOptions::internal_default_instance());
}
class UpdateClubSettingsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateClubSettingsRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UpdateClubSettingsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::ClubSettingsOptions& options(const UpdateClubSettingsRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UpdateClubSettingsRequest::_Internal::agent_id(const UpdateClubSettingsRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::ClubSettingsOptions&
UpdateClubSettingsRequest::_Internal::options(const UpdateClubSettingsRequest* msg) {
  return *msg->options_;
}
void UpdateClubSettingsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateClubSettingsRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UpdateClubSettingsRequest::UpdateClubSettingsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UpdateClubSettingsRequest)
}
UpdateClubSettingsRequest::UpdateClubSettingsRequest(const UpdateClubSettingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::ClubSettingsOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UpdateClubSettingsRequest)
}

void UpdateClubSettingsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateClubSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

UpdateClubSettingsRequest::~UpdateClubSettingsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  SharedDtor();
}

void UpdateClubSettingsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateClubSettingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateClubSettingsRequest& UpdateClubSettingsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateClubSettingsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void UpdateClubSettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateClubSettingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubSettingsOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateClubSettingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSettingsOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  return target;
}

size_t UpdateClubSettingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.ClubSettingsOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateClubSettingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateClubSettingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateClubSettingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UpdateClubSettingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UpdateClubSettingsRequest)
    MergeFrom(*source);
  }
}

void UpdateClubSettingsRequest::MergeFrom(const UpdateClubSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::ClubSettingsOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateClubSettingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateClubSettingsRequest::CopyFrom(const UpdateClubSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UpdateClubSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateClubSettingsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateClubSettingsRequest::InternalSwap(UpdateClubSettingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateClubSettingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_JoinRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_JoinRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::CreateMemberOptions*>(
      ::bgs::protocol::club::v1::CreateMemberOptions::internal_default_instance());
}
class JoinRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const JoinRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::CreateMemberOptions& options(const JoinRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
JoinRequest::_Internal::agent_id(const JoinRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::CreateMemberOptions&
JoinRequest::_Internal::options(const JoinRequest* msg) {
  return *msg->options_;
}
void JoinRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void JoinRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
JoinRequest::JoinRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.JoinRequest)
}
JoinRequest::JoinRequest(const JoinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::CreateMemberOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.JoinRequest)
}

void JoinRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

JoinRequest::~JoinRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.JoinRequest)
  SharedDtor();
}

void JoinRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void JoinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinRequest& JoinRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void JoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.JoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* JoinRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.CreateMemberOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.JoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.CreateMemberOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.JoinRequest)
  return target;
}

size_t JoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.JoinRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.CreateMemberOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.JoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.JoinRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.JoinRequest)
    MergeFrom(*source);
  }
}

void JoinRequest::MergeFrom(const JoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.JoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::CreateMemberOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.JoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRequest::CopyFrom(const JoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.JoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void JoinRequest::InternalSwap(JoinRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaveRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_LeaveRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class LeaveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const LeaveRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
LeaveRequest::_Internal::agent_id(const LeaveRequest* msg) {
  return *msg->agent_id_;
}
void LeaveRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LeaveRequest::LeaveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.LeaveRequest)
}
LeaveRequest::LeaveRequest(const LeaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.LeaveRequest)
}

void LeaveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaveRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

LeaveRequest::~LeaveRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.LeaveRequest)
  SharedDtor();
}

void LeaveRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void LeaveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveRequest& LeaveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void LeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.LeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LeaveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.LeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.LeaveRequest)
  return target;
}

size_t LeaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.LeaveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.LeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.LeaveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.LeaveRequest)
    MergeFrom(*source);
  }
}

void LeaveRequest::MergeFrom(const LeaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.LeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.LeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRequest::CopyFrom(const LeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.LeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void LeaveRequest::InternalSwap(LeaveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_KickRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_KickRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class KickRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KickRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const KickRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::MemberId& target_id(const KickRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
KickRequest::_Internal::agent_id(const KickRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::MemberId&
KickRequest::_Internal::target_id(const KickRequest* msg) {
  return *msg->target_id_;
}
void KickRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void KickRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
KickRequest::KickRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.KickRequest)
}
KickRequest::KickRequest(const KickRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::club::v1::MemberId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.KickRequest)
}

void KickRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

KickRequest::~KickRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.KickRequest)
  SharedDtor();
}

void KickRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void KickRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickRequest& KickRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void KickRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.KickRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* KickRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberId target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.KickRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberId target_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.KickRequest)
  return target;
}

size_t KickRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.KickRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.MemberId target_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.KickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.KickRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.KickRequest)
    MergeFrom(*source);
  }
}

void KickRequest::MergeFrom(const KickRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.KickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.KickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickRequest::CopyFrom(const KickRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.KickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void KickRequest::InternalSwap(KickRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMemberRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetMemberRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_GetMemberRequest_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetMemberRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMemberRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetMemberRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::MemberId& member_id(const GetMemberRequest* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetMemberRequest::_Internal::agent_id(const GetMemberRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::MemberId&
GetMemberRequest::_Internal::member_id(const GetMemberRequest* msg) {
  return *msg->member_id_;
}
void GetMemberRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetMemberRequest::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetMemberRequest::GetMemberRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetMemberRequest)
}
GetMemberRequest::GetMemberRequest(const GetMemberRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetMemberRequest)
}

void GetMemberRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMemberRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

GetMemberRequest::~GetMemberRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetMemberRequest)
  SharedDtor();
}

void GetMemberRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete member_id_;
}

void GetMemberRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMemberRequest& GetMemberRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMemberRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetMemberRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(member_id_ != nullptr);
      member_id_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetMemberRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberId member_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMemberRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetMemberRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::member_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetMemberRequest)
  return target;
}

size_t GetMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetMemberRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.MemberId member_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMemberRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMemberRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMemberRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetMemberRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetMemberRequest)
    MergeFrom(*source);
  }
}

void GetMemberRequest::MergeFrom(const GetMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMemberRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemberRequest::CopyFrom(const GetMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemberRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void GetMemberRequest::InternalSwap(GetMemberRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(member_id_, other->member_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMemberRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMemberResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetMemberResponse_default_instance_._instance.get_mutable()->member_ = const_cast< ::bgs::protocol::club::v1::Member*>(
      ::bgs::protocol::club::v1::Member::internal_default_instance());
}
class GetMemberResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMemberResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::Member& member(const GetMemberResponse* msg);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::Member&
GetMemberResponse::_Internal::member(const GetMemberResponse* msg) {
  return *msg->member_;
}
void GetMemberResponse::clear_member() {
  if (member_ != nullptr) member_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetMemberResponse::GetMemberResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetMemberResponse)
}
GetMemberResponse::GetMemberResponse(const GetMemberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member()) {
    member_ = new ::bgs::protocol::club::v1::Member(*from.member_);
  } else {
    member_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetMemberResponse)
}

void GetMemberResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMemberResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  member_ = nullptr;
}

GetMemberResponse::~GetMemberResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetMemberResponse)
  SharedDtor();
}

void GetMemberResponse::SharedDtor() {
  if (this != internal_default_instance()) delete member_;
}

void GetMemberResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMemberResponse& GetMemberResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMemberResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetMemberResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_ != nullptr);
    member_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetMemberResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.Member member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMemberResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetMemberResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.Member member = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetMemberResponse)
  return target;
}

size_t GetMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetMemberResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.Member member = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMemberResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMemberResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMemberResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetMemberResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetMemberResponse)
    MergeFrom(*source);
  }
}

void GetMemberResponse::MergeFrom(const GetMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_member()) {
    _internal_mutable_member()->::bgs::protocol::club::v1::Member::MergeFrom(from._internal_member());
  }
}

void GetMemberResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemberResponse::CopyFrom(const GetMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemberResponse::IsInitialized() const {
  if (_internal_has_member()) {
    if (!member_->IsInitialized()) return false;
  }
  return true;
}

void GetMemberResponse::InternalSwap(GetMemberResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(member_, other->member_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMemberResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMembersRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetMembersRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetMembersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMembersRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetMembersRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetMembersRequest::_Internal::agent_id(const GetMembersRequest* msg) {
  return *msg->agent_id_;
}
void GetMembersRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetMembersRequest::GetMembersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetMembersRequest)
}
GetMembersRequest::GetMembersRequest(const GetMembersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuation_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetMembersRequest)
}

void GetMembersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMembersRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuation_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(continuation_));
}

GetMembersRequest::~GetMembersRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetMembersRequest)
  SharedDtor();
}

void GetMembersRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetMembersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMembersRequest& GetMembersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMembersRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetMembersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetMembersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continuation_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetMembersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMembersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetMembersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 continuation = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetMembersRequest)
  return target;
}

size_t GetMembersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetMembersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 continuation = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_continuation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMembersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetMembersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMembersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMembersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetMembersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetMembersRequest)
    MergeFrom(*source);
  }
}

void GetMembersRequest::MergeFrom(const GetMembersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetMembersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      continuation_ = from.continuation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMembersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersRequest::CopyFrom(const GetMembersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetMembersRequest::InternalSwap(GetMembersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMembersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMembersResponse::InitAsDefaultInstance() {
}
class GetMembersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMembersResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetMembersResponse::clear_member() {
  member_.Clear();
}
GetMembersResponse::GetMembersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetMembersResponse)
}
GetMembersResponse::GetMembersResponse(const GetMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetMembersResponse)
}

void GetMembersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMembersResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetMembersResponse::~GetMembersResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetMembersResponse)
  SharedDtor();
}

void GetMembersResponse::SharedDtor() {
}

void GetMembersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMembersResponse& GetMembersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMembersResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetMembersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.Member member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMembersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.Member member = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_member(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetMembersResponse)
  return target;
}

size_t GetMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetMembersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.Member member = 1;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 continuation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMembersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMembersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMembersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetMembersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetMembersResponse)
    MergeFrom(*source);
  }
}

void GetMembersResponse::MergeFrom(const GetMembersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetMembersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersResponse::CopyFrom(const GetMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(member_)) return false;
  return true;
}

void GetMembersResponse::InternalSwap(GetMembersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_.InternalSwap(&other->member_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMembersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMemberStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UpdateMemberStateRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_UpdateMemberStateRequest_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_UpdateMemberStateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::MemberStateOptions*>(
      ::bgs::protocol::club::v1::MemberStateOptions::internal_default_instance());
}
class UpdateMemberStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateMemberStateRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UpdateMemberStateRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::MemberId& member_id(const UpdateMemberStateRequest* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::MemberStateOptions& options(const UpdateMemberStateRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UpdateMemberStateRequest::_Internal::agent_id(const UpdateMemberStateRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::MemberId&
UpdateMemberStateRequest::_Internal::member_id(const UpdateMemberStateRequest* msg) {
  return *msg->member_id_;
}
const ::bgs::protocol::club::v1::MemberStateOptions&
UpdateMemberStateRequest::_Internal::options(const UpdateMemberStateRequest* msg) {
  return *msg->options_;
}
void UpdateMemberStateRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateMemberStateRequest::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateMemberStateRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
UpdateMemberStateRequest::UpdateMemberStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UpdateMemberStateRequest)
}
UpdateMemberStateRequest::UpdateMemberStateRequest(const UpdateMemberStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::MemberStateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UpdateMemberStateRequest)
}

void UpdateMemberStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMemberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

UpdateMemberStateRequest::~UpdateMemberStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UpdateMemberStateRequest)
  SharedDtor();
}

void UpdateMemberStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete member_id_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateMemberStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMemberStateRequest& UpdateMemberStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMemberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void UpdateMemberStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UpdateMemberStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(member_id_ != nullptr);
      member_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateMemberStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberId member_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberStateOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMemberStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UpdateMemberStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::member_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.MemberStateOptions options = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UpdateMemberStateRequest)
  return target;
}

size_t UpdateMemberStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UpdateMemberStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.MemberId member_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional .bgs.protocol.club.v1.MemberStateOptions options = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMemberStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UpdateMemberStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMemberStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMemberStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UpdateMemberStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UpdateMemberStateRequest)
    MergeFrom(*source);
  }
}

void UpdateMemberStateRequest::MergeFrom(const UpdateMemberStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UpdateMemberStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::MemberStateOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000008u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateMemberStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UpdateMemberStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMemberStateRequest::CopyFrom(const UpdateMemberStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UpdateMemberStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMemberStateRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateMemberStateRequest::InternalSwap(UpdateMemberStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(member_id_, other->member_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMemberStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSubscriberStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UpdateSubscriberStateRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_UpdateSubscriberStateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::SubscriberStateOptions*>(
      ::bgs::protocol::club::v1::SubscriberStateOptions::internal_default_instance());
}
class UpdateSubscriberStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateSubscriberStateRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UpdateSubscriberStateRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::SubscriberStateOptions& options(const UpdateSubscriberStateRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UpdateSubscriberStateRequest::_Internal::agent_id(const UpdateSubscriberStateRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::SubscriberStateOptions&
UpdateSubscriberStateRequest::_Internal::options(const UpdateSubscriberStateRequest* msg) {
  return *msg->options_;
}
void UpdateSubscriberStateRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateSubscriberStateRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UpdateSubscriberStateRequest::UpdateSubscriberStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
}
UpdateSubscriberStateRequest::UpdateSubscriberStateRequest(const UpdateSubscriberStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::SubscriberStateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
}

void UpdateSubscriberStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSubscriberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

UpdateSubscriberStateRequest::~UpdateSubscriberStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  SharedDtor();
}

void UpdateSubscriberStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateSubscriberStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSubscriberStateRequest& UpdateSubscriberStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSubscriberStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void UpdateSubscriberStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateSubscriberStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.SubscriberStateOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSubscriberStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.SubscriberStateOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  return target;
}

size_t UpdateSubscriberStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.SubscriberStateOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSubscriberStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSubscriberStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSubscriberStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
    MergeFrom(*source);
  }
}

void UpdateSubscriberStateRequest::MergeFrom(const UpdateSubscriberStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::SubscriberStateOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateSubscriberStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSubscriberStateRequest::CopyFrom(const UpdateSubscriberStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriberStateRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateSubscriberStateRequest::InternalSwap(UpdateSubscriberStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSubscriberStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssignRoleRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_AssignRoleRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_AssignRoleRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::RoleOptions*>(
      ::bgs::protocol::club::v1::RoleOptions::internal_default_instance());
}
class AssignRoleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AssignRoleRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const AssignRoleRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::RoleOptions& options(const AssignRoleRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
AssignRoleRequest::_Internal::agent_id(const AssignRoleRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::RoleOptions&
AssignRoleRequest::_Internal::options(const AssignRoleRequest* msg) {
  return *msg->options_;
}
void AssignRoleRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AssignRoleRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AssignRoleRequest::AssignRoleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AssignRoleRequest)
}
AssignRoleRequest::AssignRoleRequest(const AssignRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::RoleOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AssignRoleRequest)
}

void AssignRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

AssignRoleRequest::~AssignRoleRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AssignRoleRequest)
  SharedDtor();
}

void AssignRoleRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void AssignRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssignRoleRequest& AssignRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void AssignRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AssignRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AssignRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.RoleOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssignRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AssignRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.RoleOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AssignRoleRequest)
  return target;
}

size_t AssignRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AssignRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.RoleOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssignRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AssignRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssignRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssignRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AssignRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AssignRoleRequest)
    MergeFrom(*source);
  }
}

void AssignRoleRequest::MergeFrom(const AssignRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AssignRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::RoleOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AssignRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AssignRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignRoleRequest::CopyFrom(const AssignRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AssignRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignRoleRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void AssignRoleRequest::InternalSwap(AssignRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnassignRoleRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UnassignRoleRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_UnassignRoleRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::RoleOptions*>(
      ::bgs::protocol::club::v1::RoleOptions::internal_default_instance());
}
class UnassignRoleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnassignRoleRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UnassignRoleRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::RoleOptions& options(const UnassignRoleRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UnassignRoleRequest::_Internal::agent_id(const UnassignRoleRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::RoleOptions&
UnassignRoleRequest::_Internal::options(const UnassignRoleRequest* msg) {
  return *msg->options_;
}
void UnassignRoleRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UnassignRoleRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UnassignRoleRequest::UnassignRoleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UnassignRoleRequest)
}
UnassignRoleRequest::UnassignRoleRequest(const UnassignRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::RoleOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UnassignRoleRequest)
}

void UnassignRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnassignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

UnassignRoleRequest::~UnassignRoleRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UnassignRoleRequest)
  SharedDtor();
}

void UnassignRoleRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void UnassignRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnassignRoleRequest& UnassignRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnassignRoleRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void UnassignRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UnassignRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnassignRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.RoleOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnassignRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UnassignRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.RoleOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UnassignRoleRequest)
  return target;
}

size_t UnassignRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UnassignRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.RoleOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnassignRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UnassignRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnassignRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnassignRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UnassignRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UnassignRoleRequest)
    MergeFrom(*source);
  }
}

void UnassignRoleRequest::MergeFrom(const UnassignRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UnassignRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::RoleOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnassignRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UnassignRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnassignRoleRequest::CopyFrom(const UnassignRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UnassignRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnassignRoleRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void UnassignRoleRequest::InternalSwap(UnassignRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnassignRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SendInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_SendInvitationRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::SendInvitationOptions*>(
      ::bgs::protocol::club::v1::SendInvitationOptions::internal_default_instance());
}
class SendInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SendInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::SendInvitationOptions& options(const SendInvitationRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SendInvitationRequest::_Internal::agent_id(const SendInvitationRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::SendInvitationOptions&
SendInvitationRequest::_Internal::options(const SendInvitationRequest* msg) {
  return *msg->options_;
}
void SendInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SendInvitationRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SendInvitationRequest::SendInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SendInvitationRequest)
}
SendInvitationRequest::SendInvitationRequest(const SendInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::SendInvitationOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SendInvitationRequest)
}

void SendInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

SendInvitationRequest::~SendInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SendInvitationRequest)
  SharedDtor();
}

void SendInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void SendInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendInvitationRequest& SendInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SendInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SendInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SendInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.SendInvitationOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SendInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.SendInvitationOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SendInvitationRequest)
  return target;
}

size_t SendInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SendInvitationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.SendInvitationOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SendInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SendInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SendInvitationRequest)
    MergeFrom(*source);
  }
}

void SendInvitationRequest::MergeFrom(const SendInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SendInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::SendInvitationOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SendInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitationRequest::CopyFrom(const SendInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SendInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void SendInvitationRequest::InternalSwap(SendInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_AcceptInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class AcceptInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AcceptInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const AcceptInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
AcceptInvitationRequest::_Internal::agent_id(const AcceptInvitationRequest* msg) {
  return *msg->agent_id_;
}
void AcceptInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AcceptInvitationRequest::AcceptInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AcceptInvitationRequest)
}
AcceptInvitationRequest::AcceptInvitationRequest(const AcceptInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invitation_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(invitation_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AcceptInvitationRequest)
}

void AcceptInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitation_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(invitation_id_));
}

AcceptInvitationRequest::~AcceptInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AcceptInvitationRequest)
  SharedDtor();
}

void AcceptInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void AcceptInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptInvitationRequest& AcceptInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void AcceptInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AcceptInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invitation_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(invitation_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AcceptInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invitation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AcceptInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional fixed64 invitation_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_invitation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AcceptInvitationRequest)
  return target;
}

size_t AcceptInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AcceptInvitationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 invitation_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AcceptInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AcceptInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AcceptInvitationRequest)
    MergeFrom(*source);
  }
}

void AcceptInvitationRequest::MergeFrom(const AcceptInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AcceptInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      invitation_id_ = from.invitation_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AcceptInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptInvitationRequest::CopyFrom(const AcceptInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AcceptInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptInvitationRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void AcceptInvitationRequest::InternalSwap(AcceptInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(invitation_id_, other->invitation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeclineInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_DeclineInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class DeclineInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeclineInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const DeclineInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
DeclineInvitationRequest::_Internal::agent_id(const DeclineInvitationRequest* msg) {
  return *msg->agent_id_;
}
void DeclineInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DeclineInvitationRequest::DeclineInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.DeclineInvitationRequest)
}
DeclineInvitationRequest::DeclineInvitationRequest(const DeclineInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invitation_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(invitation_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.DeclineInvitationRequest)
}

void DeclineInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitation_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(invitation_id_));
}

DeclineInvitationRequest::~DeclineInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.DeclineInvitationRequest)
  SharedDtor();
}

void DeclineInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void DeclineInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeclineInvitationRequest& DeclineInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DeclineInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.DeclineInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invitation_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(invitation_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeclineInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invitation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeclineInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.DeclineInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional fixed64 invitation_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_invitation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.DeclineInvitationRequest)
  return target;
}

size_t DeclineInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.DeclineInvitationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 invitation_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeclineInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.DeclineInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeclineInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeclineInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.DeclineInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.DeclineInvitationRequest)
    MergeFrom(*source);
  }
}

void DeclineInvitationRequest::MergeFrom(const DeclineInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.DeclineInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      invitation_id_ = from.invitation_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeclineInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.DeclineInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeclineInvitationRequest::CopyFrom(const DeclineInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.DeclineInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclineInvitationRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void DeclineInvitationRequest::InternalSwap(DeclineInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(invitation_id_, other->invitation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeclineInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevokeInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_RevokeInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class RevokeInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RevokeInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const RevokeInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
RevokeInvitationRequest::_Internal::agent_id(const RevokeInvitationRequest* msg) {
  return *msg->agent_id_;
}
void RevokeInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RevokeInvitationRequest::RevokeInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RevokeInvitationRequest)
}
RevokeInvitationRequest::RevokeInvitationRequest(const RevokeInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invitation_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(invitation_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RevokeInvitationRequest)
}

void RevokeInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitation_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(invitation_id_));
}

RevokeInvitationRequest::~RevokeInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RevokeInvitationRequest)
  SharedDtor();
}

void RevokeInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void RevokeInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevokeInvitationRequest& RevokeInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void RevokeInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.RevokeInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invitation_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(invitation_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RevokeInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invitation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RevokeInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional fixed64 invitation_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_invitation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RevokeInvitationRequest)
  return target;
}

size_t RevokeInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.RevokeInvitationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 invitation_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.RevokeInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokeInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.RevokeInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.RevokeInvitationRequest)
    MergeFrom(*source);
  }
}

void RevokeInvitationRequest::MergeFrom(const RevokeInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.RevokeInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      invitation_id_ = from.invitation_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RevokeInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.RevokeInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeInvitationRequest::CopyFrom(const RevokeInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.RevokeInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeInvitationRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void RevokeInvitationRequest::InternalSwap(RevokeInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(invitation_id_, other->invitation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetInvitationRequest::_Internal::agent_id(const GetInvitationRequest* msg) {
  return *msg->agent_id_;
}
void GetInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetInvitationRequest::GetInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetInvitationRequest)
}
GetInvitationRequest::GetInvitationRequest(const GetInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invitation_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(invitation_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetInvitationRequest)
}

void GetInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitation_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(invitation_id_));
}

GetInvitationRequest::~GetInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetInvitationRequest)
  SharedDtor();
}

void GetInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInvitationRequest& GetInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInvitationRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invitation_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(invitation_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invitation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional fixed64 invitation_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_invitation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetInvitationRequest)
  return target;
}

size_t GetInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetInvitationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 invitation_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetInvitationRequest)
    MergeFrom(*source);
  }
}

void GetInvitationRequest::MergeFrom(const GetInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      invitation_id_ = from.invitation_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvitationRequest::CopyFrom(const GetInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvitationRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetInvitationRequest::InternalSwap(GetInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(invitation_id_, other->invitation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInvitationResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetInvitationResponse_default_instance_._instance.get_mutable()->invitation_ = const_cast< ::bgs::protocol::club::v1::ClubInvitation*>(
      ::bgs::protocol::club::v1::ClubInvitation::internal_default_instance());
}
class GetInvitationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInvitationResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubInvitation& invitation(const GetInvitationResponse* msg);
  static void set_has_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubInvitation&
GetInvitationResponse::_Internal::invitation(const GetInvitationResponse* msg) {
  return *msg->invitation_;
}
void GetInvitationResponse::clear_invitation() {
  if (invitation_ != nullptr) invitation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetInvitationResponse::GetInvitationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetInvitationResponse)
}
GetInvitationResponse::GetInvitationResponse(const GetInvitationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_invitation()) {
    invitation_ = new ::bgs::protocol::club::v1::ClubInvitation(*from.invitation_);
  } else {
    invitation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetInvitationResponse)
}

void GetInvitationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInvitationResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  invitation_ = nullptr;
}

GetInvitationResponse::~GetInvitationResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetInvitationResponse)
  SharedDtor();
}

void GetInvitationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete invitation_;
}

void GetInvitationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInvitationResponse& GetInvitationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInvitationResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetInvitationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetInvitationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(invitation_ != nullptr);
    invitation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetInvitationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubInvitation invitation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvitationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetInvitationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubInvitation invitation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::invitation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetInvitationResponse)
  return target;
}

size_t GetInvitationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetInvitationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubInvitation invitation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invitation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInvitationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetInvitationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInvitationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInvitationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetInvitationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetInvitationResponse)
    MergeFrom(*source);
  }
}

void GetInvitationResponse::MergeFrom(const GetInvitationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetInvitationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation()) {
    _internal_mutable_invitation()->::bgs::protocol::club::v1::ClubInvitation::MergeFrom(from._internal_invitation());
  }
}

void GetInvitationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetInvitationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvitationResponse::CopyFrom(const GetInvitationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetInvitationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvitationResponse::IsInitialized() const {
  if (_internal_has_invitation()) {
    if (!invitation_->IsInitialized()) return false;
  }
  return true;
}

void GetInvitationResponse::InternalSwap(GetInvitationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(invitation_, other->invitation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvitationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInvitationsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetInvitationsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetInvitationsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInvitationsRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetInvitationsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetInvitationsRequest::_Internal::agent_id(const GetInvitationsRequest* msg) {
  return *msg->agent_id_;
}
void GetInvitationsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetInvitationsRequest::GetInvitationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetInvitationsRequest)
}
GetInvitationsRequest::GetInvitationsRequest(const GetInvitationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuation_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetInvitationsRequest)
}

void GetInvitationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInvitationsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuation_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(continuation_));
}

GetInvitationsRequest::~GetInvitationsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetInvitationsRequest)
  SharedDtor();
}

void GetInvitationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetInvitationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInvitationsRequest& GetInvitationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInvitationsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetInvitationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetInvitationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continuation_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetInvitationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvitationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetInvitationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 continuation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetInvitationsRequest)
  return target;
}

size_t GetInvitationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetInvitationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 continuation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_continuation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInvitationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetInvitationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInvitationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInvitationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetInvitationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetInvitationsRequest)
    MergeFrom(*source);
  }
}

void GetInvitationsRequest::MergeFrom(const GetInvitationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetInvitationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      continuation_ = from.continuation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetInvitationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetInvitationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvitationsRequest::CopyFrom(const GetInvitationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetInvitationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvitationsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetInvitationsRequest::InternalSwap(GetInvitationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvitationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInvitationsResponse::InitAsDefaultInstance() {
}
class GetInvitationsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInvitationsResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetInvitationsResponse::clear_invitation() {
  invitation_.Clear();
}
GetInvitationsResponse::GetInvitationsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetInvitationsResponse)
}
GetInvitationsResponse::GetInvitationsResponse(const GetInvitationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      invitation_(from.invitation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetInvitationsResponse)
}

void GetInvitationsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInvitationsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetInvitationsResponse::~GetInvitationsResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetInvitationsResponse)
  SharedDtor();
}

void GetInvitationsResponse::SharedDtor() {
}

void GetInvitationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInvitationsResponse& GetInvitationsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInvitationsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetInvitationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetInvitationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitation_.Clear();
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetInvitationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invitation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvitationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetInvitationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invitation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_invitation(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetInvitationsResponse)
  return target;
}

size_t GetInvitationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetInvitationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 1;
  total_size += 1UL * this->_internal_invitation_size();
  for (const auto& msg : this->invitation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 continuation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInvitationsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetInvitationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInvitationsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInvitationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetInvitationsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetInvitationsResponse)
    MergeFrom(*source);
  }
}

void GetInvitationsResponse::MergeFrom(const GetInvitationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetInvitationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invitation_.MergeFrom(from.invitation_);
  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetInvitationsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetInvitationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvitationsResponse::CopyFrom(const GetInvitationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetInvitationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvitationsResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(invitation_)) return false;
  return true;
}

void GetInvitationsResponse::InternalSwap(GetInvitationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitation_.InternalSwap(&other->invitation_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvitationsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendSuggestionRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SendSuggestionRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_SendSuggestionRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::SendSuggestionOptions*>(
      ::bgs::protocol::club::v1::SendSuggestionOptions::internal_default_instance());
}
class SendSuggestionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendSuggestionRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SendSuggestionRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::SendSuggestionOptions& options(const SendSuggestionRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SendSuggestionRequest::_Internal::agent_id(const SendSuggestionRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::SendSuggestionOptions&
SendSuggestionRequest::_Internal::options(const SendSuggestionRequest* msg) {
  return *msg->options_;
}
void SendSuggestionRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SendSuggestionRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SendSuggestionRequest::SendSuggestionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SendSuggestionRequest)
}
SendSuggestionRequest::SendSuggestionRequest(const SendSuggestionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::SendSuggestionOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SendSuggestionRequest)
}

void SendSuggestionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

SendSuggestionRequest::~SendSuggestionRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SendSuggestionRequest)
  SharedDtor();
}

void SendSuggestionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void SendSuggestionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendSuggestionRequest& SendSuggestionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SendSuggestionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SendSuggestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SendSuggestionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.SendSuggestionOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendSuggestionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SendSuggestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.SendSuggestionOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SendSuggestionRequest)
  return target;
}

size_t SendSuggestionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SendSuggestionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.SendSuggestionOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendSuggestionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SendSuggestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendSuggestionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendSuggestionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SendSuggestionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SendSuggestionRequest)
    MergeFrom(*source);
  }
}

void SendSuggestionRequest::MergeFrom(const SendSuggestionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SendSuggestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::SendSuggestionOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendSuggestionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SendSuggestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSuggestionRequest::CopyFrom(const SendSuggestionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SendSuggestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSuggestionRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void SendSuggestionRequest::InternalSwap(SendSuggestionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendSuggestionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptSuggestionRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_AcceptSuggestionRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class AcceptSuggestionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AcceptSuggestionRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const AcceptSuggestionRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_suggestion_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
AcceptSuggestionRequest::_Internal::agent_id(const AcceptSuggestionRequest* msg) {
  return *msg->agent_id_;
}
void AcceptSuggestionRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AcceptSuggestionRequest::AcceptSuggestionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AcceptSuggestionRequest)
}
AcceptSuggestionRequest::AcceptSuggestionRequest(const AcceptSuggestionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&suggestion_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(suggestion_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AcceptSuggestionRequest)
}

void AcceptSuggestionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suggestion_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(suggestion_id_));
}

AcceptSuggestionRequest::~AcceptSuggestionRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AcceptSuggestionRequest)
  SharedDtor();
}

void AcceptSuggestionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void AcceptSuggestionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptSuggestionRequest& AcceptSuggestionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void AcceptSuggestionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AcceptSuggestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suggestion_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(suggestion_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AcceptSuggestionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 suggestion_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_suggestion_id(&has_bits);
          suggestion_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptSuggestionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AcceptSuggestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional fixed64 suggestion_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_suggestion_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AcceptSuggestionRequest)
  return target;
}

size_t AcceptSuggestionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AcceptSuggestionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 suggestion_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptSuggestionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AcceptSuggestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptSuggestionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptSuggestionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AcceptSuggestionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AcceptSuggestionRequest)
    MergeFrom(*source);
  }
}

void AcceptSuggestionRequest::MergeFrom(const AcceptSuggestionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AcceptSuggestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      suggestion_id_ = from.suggestion_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptSuggestionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AcceptSuggestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptSuggestionRequest::CopyFrom(const AcceptSuggestionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AcceptSuggestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptSuggestionRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void AcceptSuggestionRequest::InternalSwap(AcceptSuggestionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(suggestion_id_, other->suggestion_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptSuggestionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeclineSuggestionRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_DeclineSuggestionRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class DeclineSuggestionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeclineSuggestionRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const DeclineSuggestionRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_suggestion_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
DeclineSuggestionRequest::_Internal::agent_id(const DeclineSuggestionRequest* msg) {
  return *msg->agent_id_;
}
void DeclineSuggestionRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DeclineSuggestionRequest::DeclineSuggestionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.DeclineSuggestionRequest)
}
DeclineSuggestionRequest::DeclineSuggestionRequest(const DeclineSuggestionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&suggestion_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(suggestion_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.DeclineSuggestionRequest)
}

void DeclineSuggestionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeclineSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suggestion_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(suggestion_id_));
}

DeclineSuggestionRequest::~DeclineSuggestionRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.DeclineSuggestionRequest)
  SharedDtor();
}

void DeclineSuggestionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void DeclineSuggestionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeclineSuggestionRequest& DeclineSuggestionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeclineSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DeclineSuggestionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.DeclineSuggestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suggestion_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(suggestion_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeclineSuggestionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 suggestion_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_suggestion_id(&has_bits);
          suggestion_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeclineSuggestionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.DeclineSuggestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional fixed64 suggestion_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_suggestion_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.DeclineSuggestionRequest)
  return target;
}

size_t DeclineSuggestionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.DeclineSuggestionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 suggestion_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeclineSuggestionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.DeclineSuggestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeclineSuggestionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeclineSuggestionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.DeclineSuggestionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.DeclineSuggestionRequest)
    MergeFrom(*source);
  }
}

void DeclineSuggestionRequest::MergeFrom(const DeclineSuggestionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.DeclineSuggestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      suggestion_id_ = from.suggestion_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeclineSuggestionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.DeclineSuggestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeclineSuggestionRequest::CopyFrom(const DeclineSuggestionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.DeclineSuggestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclineSuggestionRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void DeclineSuggestionRequest::InternalSwap(DeclineSuggestionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(suggestion_id_, other->suggestion_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeclineSuggestionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSuggestionRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetSuggestionRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetSuggestionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSuggestionRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetSuggestionRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_suggestion_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetSuggestionRequest::_Internal::agent_id(const GetSuggestionRequest* msg) {
  return *msg->agent_id_;
}
void GetSuggestionRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetSuggestionRequest::GetSuggestionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetSuggestionRequest)
}
GetSuggestionRequest::GetSuggestionRequest(const GetSuggestionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&suggestion_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(suggestion_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetSuggestionRequest)
}

void GetSuggestionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suggestion_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(suggestion_id_));
}

GetSuggestionRequest::~GetSuggestionRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetSuggestionRequest)
  SharedDtor();
}

void GetSuggestionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetSuggestionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSuggestionRequest& GetSuggestionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSuggestionRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetSuggestionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetSuggestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suggestion_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(suggestion_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSuggestionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 suggestion_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_suggestion_id(&has_bits);
          suggestion_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSuggestionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetSuggestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional fixed64 suggestion_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_suggestion_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetSuggestionRequest)
  return target;
}

size_t GetSuggestionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetSuggestionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional fixed64 suggestion_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSuggestionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetSuggestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSuggestionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSuggestionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetSuggestionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetSuggestionRequest)
    MergeFrom(*source);
  }
}

void GetSuggestionRequest::MergeFrom(const GetSuggestionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetSuggestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      suggestion_id_ = from.suggestion_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSuggestionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetSuggestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSuggestionRequest::CopyFrom(const GetSuggestionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetSuggestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSuggestionRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetSuggestionRequest::InternalSwap(GetSuggestionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(suggestion_id_, other->suggestion_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSuggestionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSuggestionResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetSuggestionResponse_default_instance_._instance.get_mutable()->suggestion_ = const_cast< ::bgs::protocol::club::v1::ClubSuggestion*>(
      ::bgs::protocol::club::v1::ClubSuggestion::internal_default_instance());
}
class GetSuggestionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSuggestionResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubSuggestion& suggestion(const GetSuggestionResponse* msg);
  static void set_has_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubSuggestion&
GetSuggestionResponse::_Internal::suggestion(const GetSuggestionResponse* msg) {
  return *msg->suggestion_;
}
void GetSuggestionResponse::clear_suggestion() {
  if (suggestion_ != nullptr) suggestion_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetSuggestionResponse::GetSuggestionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetSuggestionResponse)
}
GetSuggestionResponse::GetSuggestionResponse(const GetSuggestionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_suggestion()) {
    suggestion_ = new ::bgs::protocol::club::v1::ClubSuggestion(*from.suggestion_);
  } else {
    suggestion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetSuggestionResponse)
}

void GetSuggestionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSuggestionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  suggestion_ = nullptr;
}

GetSuggestionResponse::~GetSuggestionResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetSuggestionResponse)
  SharedDtor();
}

void GetSuggestionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete suggestion_;
}

void GetSuggestionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSuggestionResponse& GetSuggestionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSuggestionResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetSuggestionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetSuggestionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(suggestion_ != nullptr);
    suggestion_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSuggestionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSuggestionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetSuggestionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::suggestion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetSuggestionResponse)
  return target;
}

size_t GetSuggestionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetSuggestionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suggestion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSuggestionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetSuggestionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSuggestionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSuggestionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetSuggestionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetSuggestionResponse)
    MergeFrom(*source);
  }
}

void GetSuggestionResponse::MergeFrom(const GetSuggestionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetSuggestionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_suggestion()) {
    _internal_mutable_suggestion()->::bgs::protocol::club::v1::ClubSuggestion::MergeFrom(from._internal_suggestion());
  }
}

void GetSuggestionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetSuggestionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSuggestionResponse::CopyFrom(const GetSuggestionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetSuggestionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSuggestionResponse::IsInitialized() const {
  if (_internal_has_suggestion()) {
    if (!suggestion_->IsInitialized()) return false;
  }
  return true;
}

void GetSuggestionResponse::InternalSwap(GetSuggestionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(suggestion_, other->suggestion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSuggestionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSuggestionsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetSuggestionsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetSuggestionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSuggestionsRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetSuggestionsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetSuggestionsRequest::_Internal::agent_id(const GetSuggestionsRequest* msg) {
  return *msg->agent_id_;
}
void GetSuggestionsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetSuggestionsRequest::GetSuggestionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetSuggestionsRequest)
}
GetSuggestionsRequest::GetSuggestionsRequest(const GetSuggestionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuation_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetSuggestionsRequest)
}

void GetSuggestionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSuggestionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuation_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(continuation_));
}

GetSuggestionsRequest::~GetSuggestionsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetSuggestionsRequest)
  SharedDtor();
}

void GetSuggestionsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetSuggestionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSuggestionsRequest& GetSuggestionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSuggestionsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetSuggestionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetSuggestionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continuation_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSuggestionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSuggestionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetSuggestionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 continuation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetSuggestionsRequest)
  return target;
}

size_t GetSuggestionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetSuggestionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 continuation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_continuation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSuggestionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetSuggestionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSuggestionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSuggestionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetSuggestionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetSuggestionsRequest)
    MergeFrom(*source);
  }
}

void GetSuggestionsRequest::MergeFrom(const GetSuggestionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetSuggestionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      continuation_ = from.continuation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSuggestionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetSuggestionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSuggestionsRequest::CopyFrom(const GetSuggestionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetSuggestionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSuggestionsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetSuggestionsRequest::InternalSwap(GetSuggestionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSuggestionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSuggestionsResponse::InitAsDefaultInstance() {
}
class GetSuggestionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSuggestionsResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetSuggestionsResponse::clear_suggestion() {
  suggestion_.Clear();
}
GetSuggestionsResponse::GetSuggestionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetSuggestionsResponse)
}
GetSuggestionsResponse::GetSuggestionsResponse(const GetSuggestionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      suggestion_(from.suggestion_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetSuggestionsResponse)
}

void GetSuggestionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSuggestionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetSuggestionsResponse::~GetSuggestionsResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetSuggestionsResponse)
  SharedDtor();
}

void GetSuggestionsResponse::SharedDtor() {
}

void GetSuggestionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSuggestionsResponse& GetSuggestionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSuggestionsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetSuggestionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetSuggestionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suggestion_.Clear();
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSuggestionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_suggestion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSuggestionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetSuggestionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_suggestion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_suggestion(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetSuggestionsResponse)
  return target;
}

size_t GetSuggestionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetSuggestionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
  total_size += 1UL * this->_internal_suggestion_size();
  for (const auto& msg : this->suggestion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 continuation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSuggestionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetSuggestionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSuggestionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSuggestionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetSuggestionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetSuggestionsResponse)
    MergeFrom(*source);
  }
}

void GetSuggestionsResponse::MergeFrom(const GetSuggestionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetSuggestionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  suggestion_.MergeFrom(from.suggestion_);
  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetSuggestionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetSuggestionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSuggestionsResponse::CopyFrom(const GetSuggestionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetSuggestionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSuggestionsResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(suggestion_)) return false;
  return true;
}

void GetSuggestionsResponse::InternalSwap(GetSuggestionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  suggestion_.InternalSwap(&other->suggestion_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSuggestionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTicketRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateTicketRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_CreateTicketRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::CreateTicketOptions*>(
      ::bgs::protocol::club::v1::CreateTicketOptions::internal_default_instance());
}
class CreateTicketRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateTicketRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const CreateTicketRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::CreateTicketOptions& options(const CreateTicketRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
CreateTicketRequest::_Internal::agent_id(const CreateTicketRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::CreateTicketOptions&
CreateTicketRequest::_Internal::options(const CreateTicketRequest* msg) {
  return *msg->options_;
}
void CreateTicketRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CreateTicketRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CreateTicketRequest::CreateTicketRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateTicketRequest)
}
CreateTicketRequest::CreateTicketRequest(const CreateTicketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::CreateTicketOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateTicketRequest)
}

void CreateTicketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

CreateTicketRequest::~CreateTicketRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateTicketRequest)
  SharedDtor();
}

void CreateTicketRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void CreateTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTicketRequest& CreateTicketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CreateTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateTicketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.CreateTicketOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTicketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.CreateTicketOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateTicketRequest)
  return target;
}

size_t CreateTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateTicketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.CreateTicketOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTicketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTicketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTicketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateTicketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateTicketRequest)
    MergeFrom(*source);
  }
}

void CreateTicketRequest::MergeFrom(const CreateTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::CreateTicketOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateTicketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTicketRequest::CopyFrom(const CreateTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTicketRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void CreateTicketRequest::InternalSwap(CreateTicketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTicketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTicketResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateTicketResponse_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::bgs::protocol::club::v1::ClubTicket*>(
      ::bgs::protocol::club::v1::ClubTicket::internal_default_instance());
}
class CreateTicketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateTicketResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubTicket& ticket(const CreateTicketResponse* msg);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubTicket&
CreateTicketResponse::_Internal::ticket(const CreateTicketResponse* msg) {
  return *msg->ticket_;
}
void CreateTicketResponse::clear_ticket() {
  if (ticket_ != nullptr) ticket_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CreateTicketResponse::CreateTicketResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateTicketResponse)
}
CreateTicketResponse::CreateTicketResponse(const CreateTicketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ticket()) {
    ticket_ = new ::bgs::protocol::club::v1::ClubTicket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateTicketResponse)
}

void CreateTicketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ticket_ = nullptr;
}

CreateTicketResponse::~CreateTicketResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateTicketResponse)
  SharedDtor();
}

void CreateTicketResponse::SharedDtor() {
  if (this != internal_default_instance()) delete ticket_;
}

void CreateTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTicketResponse& CreateTicketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CreateTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ticket_ != nullptr);
    ticket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateTicketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTicketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateTicketResponse)
  return target;
}

size_t CreateTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateTicketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTicketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTicketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateTicketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateTicketResponse)
    MergeFrom(*source);
  }
}

void CreateTicketResponse::MergeFrom(const CreateTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ticket()) {
    _internal_mutable_ticket()->::bgs::protocol::club::v1::ClubTicket::MergeFrom(from._internal_ticket());
  }
}

void CreateTicketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTicketResponse::CopyFrom(const CreateTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTicketResponse::IsInitialized() const {
  if (_internal_has_ticket()) {
    if (!ticket_->IsInitialized()) return false;
  }
  return true;
}

void CreateTicketResponse::InternalSwap(CreateTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ticket_, other->ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTicketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestroyTicketRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_DestroyTicketRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class DestroyTicketRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyTicketRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const DestroyTicketRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ticket_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
DestroyTicketRequest::_Internal::agent_id(const DestroyTicketRequest* msg) {
  return *msg->agent_id_;
}
void DestroyTicketRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DestroyTicketRequest::DestroyTicketRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.DestroyTicketRequest)
}
DestroyTicketRequest::DestroyTicketRequest(const DestroyTicketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket_id()) {
    ticket_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticket_id_);
  }
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.DestroyTicketRequest)
}

void DestroyTicketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DestroyTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ticket_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

DestroyTicketRequest::~DestroyTicketRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.DestroyTicketRequest)
  SharedDtor();
}

void DestroyTicketRequest::SharedDtor() {
  ticket_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete agent_id_;
}

void DestroyTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyTicketRequest& DestroyTicketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroyTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DestroyTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.DestroyTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DestroyTicketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ticket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ticket_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.DestroyTicketRequest.ticket_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyTicketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.DestroyTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional string ticket_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ticket_id().data(), static_cast<int>(this->_internal_ticket_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.DestroyTicketRequest.ticket_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ticket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.DestroyTicketRequest)
  return target;
}

size_t DestroyTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.DestroyTicketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ticket_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ticket_id());
    }

    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyTicketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.DestroyTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyTicketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroyTicketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.DestroyTicketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.DestroyTicketRequest)
    MergeFrom(*source);
  }
}

void DestroyTicketRequest::MergeFrom(const DestroyTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.DestroyTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ticket_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticket_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DestroyTicketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.DestroyTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyTicketRequest::CopyFrom(const DestroyTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.DestroyTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyTicketRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void DestroyTicketRequest::InternalSwap(DestroyTicketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_id_.Swap(&other->ticket_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyTicketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedeemTicketRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_RedeemTicketRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class RedeemTicketRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RedeemTicketRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const RedeemTicketRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ticket_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
RedeemTicketRequest::_Internal::agent_id(const RedeemTicketRequest* msg) {
  return *msg->agent_id_;
}
void RedeemTicketRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RedeemTicketRequest::RedeemTicketRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RedeemTicketRequest)
}
RedeemTicketRequest::RedeemTicketRequest(const RedeemTicketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket_id()) {
    ticket_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticket_id_);
  }
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RedeemTicketRequest)
}

void RedeemTicketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedeemTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ticket_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agent_id_ = nullptr;
}

RedeemTicketRequest::~RedeemTicketRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RedeemTicketRequest)
  SharedDtor();
}

void RedeemTicketRequest::SharedDtor() {
  ticket_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete agent_id_;
}

void RedeemTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedeemTicketRequest& RedeemTicketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedeemTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void RedeemTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.RedeemTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RedeemTicketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ticket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ticket_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.RedeemTicketRequest.ticket_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedeemTicketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RedeemTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional string ticket_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ticket_id().data(), static_cast<int>(this->_internal_ticket_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.RedeemTicketRequest.ticket_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ticket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RedeemTicketRequest)
  return target;
}

size_t RedeemTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.RedeemTicketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ticket_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ticket_id());
    }

    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedeemTicketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.RedeemTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RedeemTicketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedeemTicketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.RedeemTicketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.RedeemTicketRequest)
    MergeFrom(*source);
  }
}

void RedeemTicketRequest::MergeFrom(const RedeemTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.RedeemTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ticket_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticket_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
  }
}

void RedeemTicketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.RedeemTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedeemTicketRequest::CopyFrom(const RedeemTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.RedeemTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedeemTicketRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void RedeemTicketRequest::InternalSwap(RedeemTicketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_id_.Swap(&other->ticket_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(agent_id_, other->agent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedeemTicketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTicketRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetTicketRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetTicketRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTicketRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetTicketRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ticket_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetTicketRequest::_Internal::agent_id(const GetTicketRequest* msg) {
  return *msg->agent_id_;
}
void GetTicketRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetTicketRequest::GetTicketRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetTicketRequest)
}
GetTicketRequest::GetTicketRequest(const GetTicketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket_id()) {
    ticket_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticket_id_);
  }
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetTicketRequest)
}

void GetTicketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ticket_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agent_id_ = nullptr;
}

GetTicketRequest::~GetTicketRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetTicketRequest)
  SharedDtor();
}

void GetTicketRequest::SharedDtor() {
  ticket_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete agent_id_;
}

void GetTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTicketRequest& GetTicketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTicketRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetTicketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ticket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ticket_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.GetTicketRequest.ticket_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTicketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional string ticket_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ticket_id().data(), static_cast<int>(this->_internal_ticket_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.GetTicketRequest.ticket_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ticket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetTicketRequest)
  return target;
}

size_t GetTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetTicketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ticket_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ticket_id());
    }

    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTicketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTicketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTicketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetTicketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetTicketRequest)
    MergeFrom(*source);
  }
}

void GetTicketRequest::MergeFrom(const GetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ticket_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticket_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
  }
}

void GetTicketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTicketRequest::CopyFrom(const GetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTicketRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetTicketRequest::InternalSwap(GetTicketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_id_.Swap(&other->ticket_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(agent_id_, other->agent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTicketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTicketResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetTicketResponse_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::bgs::protocol::club::v1::ClubTicket*>(
      ::bgs::protocol::club::v1::ClubTicket::internal_default_instance());
}
class GetTicketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTicketResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubTicket& ticket(const GetTicketResponse* msg);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubTicket&
GetTicketResponse::_Internal::ticket(const GetTicketResponse* msg) {
  return *msg->ticket_;
}
void GetTicketResponse::clear_ticket() {
  if (ticket_ != nullptr) ticket_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetTicketResponse::GetTicketResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetTicketResponse)
}
GetTicketResponse::GetTicketResponse(const GetTicketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ticket()) {
    ticket_ = new ::bgs::protocol::club::v1::ClubTicket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetTicketResponse)
}

void GetTicketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ticket_ = nullptr;
}

GetTicketResponse::~GetTicketResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetTicketResponse)
  SharedDtor();
}

void GetTicketResponse::SharedDtor() {
  if (this != internal_default_instance()) delete ticket_;
}

void GetTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTicketResponse& GetTicketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTicketResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ticket_ != nullptr);
    ticket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetTicketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTicketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetTicketResponse)
  return target;
}

size_t GetTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetTicketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTicketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTicketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetTicketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetTicketResponse)
    MergeFrom(*source);
  }
}

void GetTicketResponse::MergeFrom(const GetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ticket()) {
    _internal_mutable_ticket()->::bgs::protocol::club::v1::ClubTicket::MergeFrom(from._internal_ticket());
  }
}

void GetTicketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTicketResponse::CopyFrom(const GetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTicketResponse::IsInitialized() const {
  if (_internal_has_ticket()) {
    if (!ticket_->IsInitialized()) return false;
  }
  return true;
}

void GetTicketResponse::InternalSwap(GetTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ticket_, other->ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTicketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTicketsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetTicketsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetTicketsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTicketsRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetTicketsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetTicketsRequest::_Internal::agent_id(const GetTicketsRequest* msg) {
  return *msg->agent_id_;
}
void GetTicketsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetTicketsRequest::GetTicketsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetTicketsRequest)
}
GetTicketsRequest::GetTicketsRequest(const GetTicketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuation_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetTicketsRequest)
}

void GetTicketsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTicketsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuation_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(continuation_));
}

GetTicketsRequest::~GetTicketsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetTicketsRequest)
  SharedDtor();
}

void GetTicketsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetTicketsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTicketsRequest& GetTicketsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTicketsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetTicketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetTicketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continuation_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetTicketsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTicketsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetTicketsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 continuation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetTicketsRequest)
  return target;
}

size_t GetTicketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetTicketsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 continuation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_continuation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTicketsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetTicketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTicketsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTicketsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetTicketsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetTicketsRequest)
    MergeFrom(*source);
  }
}

void GetTicketsRequest::MergeFrom(const GetTicketsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetTicketsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      continuation_ = from.continuation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTicketsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetTicketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTicketsRequest::CopyFrom(const GetTicketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetTicketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTicketsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetTicketsRequest::InternalSwap(GetTicketsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTicketsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTicketsResponse::InitAsDefaultInstance() {
}
class GetTicketsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTicketsResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetTicketsResponse::clear_ticket() {
  ticket_.Clear();
}
GetTicketsResponse::GetTicketsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetTicketsResponse)
}
GetTicketsResponse::GetTicketsResponse(const GetTicketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ticket_(from.ticket_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetTicketsResponse)
}

void GetTicketsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTicketsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetTicketsResponse::~GetTicketsResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetTicketsResponse)
  SharedDtor();
}

void GetTicketsResponse::SharedDtor() {
}

void GetTicketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTicketsResponse& GetTicketsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTicketsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetTicketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetTicketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.Clear();
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetTicketsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.ClubTicket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ticket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTicketsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetTicketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubTicket ticket = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ticket_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ticket(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetTicketsResponse)
  return target;
}

size_t GetTicketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetTicketsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubTicket ticket = 1;
  total_size += 1UL * this->_internal_ticket_size();
  for (const auto& msg : this->ticket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 continuation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTicketsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetTicketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTicketsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTicketsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetTicketsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetTicketsResponse)
    MergeFrom(*source);
  }
}

void GetTicketsResponse::MergeFrom(const GetTicketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetTicketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ticket_.MergeFrom(from.ticket_);
  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetTicketsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetTicketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTicketsResponse::CopyFrom(const GetTicketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetTicketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTicketsResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ticket_)) return false;
  return true;
}

void GetTicketsResponse::InternalSwap(GetTicketsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.InternalSwap(&other->ticket_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTicketsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddBanRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_AddBanRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_AddBanRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::AddBanOptions*>(
      ::bgs::protocol::club::v1::AddBanOptions::internal_default_instance());
}
class AddBanRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AddBanRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const AddBanRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::AddBanOptions& options(const AddBanRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
AddBanRequest::_Internal::agent_id(const AddBanRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::AddBanOptions&
AddBanRequest::_Internal::options(const AddBanRequest* msg) {
  return *msg->options_;
}
void AddBanRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AddBanRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AddBanRequest::AddBanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AddBanRequest)
}
AddBanRequest::AddBanRequest(const AddBanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::AddBanOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AddBanRequest)
}

void AddBanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

AddBanRequest::~AddBanRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AddBanRequest)
  SharedDtor();
}

void AddBanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void AddBanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddBanRequest& AddBanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void AddBanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AddBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddBanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.AddBanOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddBanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AddBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.AddBanOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AddBanRequest)
  return target;
}

size_t AddBanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AddBanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.AddBanOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddBanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AddBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddBanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AddBanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AddBanRequest)
    MergeFrom(*source);
  }
}

void AddBanRequest::MergeFrom(const AddBanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AddBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::AddBanOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddBanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AddBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBanRequest::CopyFrom(const AddBanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AddBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBanRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void AddBanRequest::InternalSwap(AddBanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveBanRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_RemoveBanRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_RemoveBanRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class RemoveBanRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveBanRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const RemoveBanRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::MemberId& target_id(const RemoveBanRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
RemoveBanRequest::_Internal::agent_id(const RemoveBanRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::MemberId&
RemoveBanRequest::_Internal::target_id(const RemoveBanRequest* msg) {
  return *msg->target_id_;
}
void RemoveBanRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveBanRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RemoveBanRequest::RemoveBanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RemoveBanRequest)
}
RemoveBanRequest::RemoveBanRequest(const RemoveBanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::club::v1::MemberId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RemoveBanRequest)
}

void RemoveBanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

RemoveBanRequest::~RemoveBanRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RemoveBanRequest)
  SharedDtor();
}

void RemoveBanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void RemoveBanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveBanRequest& RemoveBanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void RemoveBanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.RemoveBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveBanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberId target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveBanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RemoveBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberId target_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RemoveBanRequest)
  return target;
}

size_t RemoveBanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.RemoveBanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.MemberId target_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveBanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.RemoveBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveBanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveBanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.RemoveBanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.RemoveBanRequest)
    MergeFrom(*source);
  }
}

void RemoveBanRequest::MergeFrom(const RemoveBanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.RemoveBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoveBanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.RemoveBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveBanRequest::CopyFrom(const RemoveBanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.RemoveBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveBanRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void RemoveBanRequest::InternalSwap(RemoveBanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveBanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBanRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetBanRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_GetBanRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetBanRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBanRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetBanRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::MemberId& target_id(const GetBanRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetBanRequest::_Internal::agent_id(const GetBanRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::MemberId&
GetBanRequest::_Internal::target_id(const GetBanRequest* msg) {
  return *msg->target_id_;
}
void GetBanRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetBanRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetBanRequest::GetBanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetBanRequest)
}
GetBanRequest::GetBanRequest(const GetBanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::club::v1::MemberId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetBanRequest)
}

void GetBanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

GetBanRequest::~GetBanRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetBanRequest)
  SharedDtor();
}

void GetBanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void GetBanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBanRequest& GetBanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBanRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetBanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberId target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberId target_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetBanRequest)
  return target;
}

size_t GetBanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetBanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.MemberId target_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetBanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetBanRequest)
    MergeFrom(*source);
  }
}

void GetBanRequest::MergeFrom(const GetBanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetBanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBanRequest::CopyFrom(const GetBanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBanRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void GetBanRequest::InternalSwap(GetBanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBanResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetBanResponse_default_instance_._instance.get_mutable()->ban_ = const_cast< ::bgs::protocol::club::v1::ClubBan*>(
      ::bgs::protocol::club::v1::ClubBan::internal_default_instance());
}
class GetBanResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBanResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::ClubBan& ban(const GetBanResponse* msg);
  static void set_has_ban(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::ClubBan&
GetBanResponse::_Internal::ban(const GetBanResponse* msg) {
  return *msg->ban_;
}
void GetBanResponse::clear_ban() {
  if (ban_ != nullptr) ban_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetBanResponse::GetBanResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetBanResponse)
}
GetBanResponse::GetBanResponse(const GetBanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ban()) {
    ban_ = new ::bgs::protocol::club::v1::ClubBan(*from.ban_);
  } else {
    ban_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetBanResponse)
}

void GetBanResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBanResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ban_ = nullptr;
}

GetBanResponse::~GetBanResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetBanResponse)
  SharedDtor();
}

void GetBanResponse::SharedDtor() {
  if (this != internal_default_instance()) delete ban_;
}

void GetBanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBanResponse& GetBanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBanResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetBanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetBanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ban_ != nullptr);
    ban_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.ClubBan ban = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ban(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetBanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.ClubBan ban = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ban(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetBanResponse)
  return target;
}

size_t GetBanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetBanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.ClubBan ban = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ban_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetBanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetBanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetBanResponse)
    MergeFrom(*source);
  }
}

void GetBanResponse::MergeFrom(const GetBanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetBanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ban()) {
    _internal_mutable_ban()->::bgs::protocol::club::v1::ClubBan::MergeFrom(from._internal_ban());
  }
}

void GetBanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetBanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBanResponse::CopyFrom(const GetBanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetBanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBanResponse::IsInitialized() const {
  if (_internal_has_ban()) {
    if (!ban_->IsInitialized()) return false;
  }
  return true;
}

void GetBanResponse::InternalSwap(GetBanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ban_, other->ban_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBansRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetBansRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetBansRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBansRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetBansRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetBansRequest::_Internal::agent_id(const GetBansRequest* msg) {
  return *msg->agent_id_;
}
void GetBansRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetBansRequest::GetBansRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetBansRequest)
}
GetBansRequest::GetBansRequest(const GetBansRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuation_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetBansRequest)
}

void GetBansRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBansRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuation_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(continuation_));
}

GetBansRequest::~GetBansRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetBansRequest)
  SharedDtor();
}

void GetBansRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetBansRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBansRequest& GetBansRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBansRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetBansRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continuation_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBansRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBansRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetBansRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 continuation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetBansRequest)
  return target;
}

size_t GetBansRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetBansRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 continuation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_continuation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBansRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBansRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBansRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetBansRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetBansRequest)
    MergeFrom(*source);
  }
}

void GetBansRequest::MergeFrom(const GetBansRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetBansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      continuation_ = from.continuation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetBansRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBansRequest::CopyFrom(const GetBansRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetBansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBansRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetBansRequest::InternalSwap(GetBansRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBansRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBansResponse::InitAsDefaultInstance() {
}
class GetBansResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBansResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetBansResponse::clear_ban() {
  ban_.Clear();
}
GetBansResponse::GetBansResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetBansResponse)
}
GetBansResponse::GetBansResponse(const GetBansResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ban_(from.ban_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetBansResponse)
}

void GetBansResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBansResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetBansResponse::~GetBansResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetBansResponse)
  SharedDtor();
}

void GetBansResponse::SharedDtor() {
}

void GetBansResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBansResponse& GetBansResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBansResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetBansResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetBansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ban_.Clear();
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBansResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.ClubBan ban = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ban(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBansResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetBansResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubBan ban = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ban_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ban(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetBansResponse)
  return target;
}

size_t GetBansResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetBansResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubBan ban = 1;
  total_size += 1UL * this->_internal_ban_size();
  for (const auto& msg : this->ban_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 continuation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBansResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetBansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBansResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBansResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetBansResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetBansResponse)
    MergeFrom(*source);
  }
}

void GetBansResponse::MergeFrom(const GetBansResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetBansResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ban_.MergeFrom(from.ban_);
  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetBansResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetBansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBansResponse::CopyFrom(const GetBansResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetBansResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBansResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ban_)) return false;
  return true;
}

void GetBansResponse::InternalSwap(GetBansResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ban_.InternalSwap(&other->ban_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBansResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeStreamRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SubscribeStreamRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class SubscribeStreamRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeStreamRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SubscribeStreamRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SubscribeStreamRequest::_Internal::agent_id(const SubscribeStreamRequest* msg) {
  return *msg->agent_id_;
}
void SubscribeStreamRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubscribeStreamRequest::SubscribeStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SubscribeStreamRequest)
}
SubscribeStreamRequest::SubscribeStreamRequest(const SubscribeStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_id_(from.stream_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SubscribeStreamRequest)
}

void SubscribeStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

SubscribeStreamRequest::~SubscribeStreamRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SubscribeStreamRequest)
  SharedDtor();
}

void SubscribeStreamRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void SubscribeStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeStreamRequest& SubscribeStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SubscribeStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SubscribeStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_stream_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SubscribeStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // repeated uint64 stream_id = 3;
  for (int i = 0, n = this->_internal_stream_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SubscribeStreamRequest)
  return target;
}

size_t SubscribeStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SubscribeStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 stream_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->stream_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SubscribeStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SubscribeStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SubscribeStreamRequest)
    MergeFrom(*source);
  }
}

void SubscribeStreamRequest::MergeFrom(const SubscribeStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SubscribeStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_id_.MergeFrom(from.stream_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SubscribeStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeStreamRequest::CopyFrom(const SubscribeStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SubscribeStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeStreamRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeStreamRequest::InternalSwap(SubscribeStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_id_.InternalSwap(&other->stream_id_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeStreamRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UnsubscribeStreamRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class UnsubscribeStreamRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeStreamRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UnsubscribeStreamRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UnsubscribeStreamRequest::_Internal::agent_id(const UnsubscribeStreamRequest* msg) {
  return *msg->agent_id_;
}
void UnsubscribeStreamRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UnsubscribeStreamRequest::UnsubscribeStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UnsubscribeStreamRequest)
}
UnsubscribeStreamRequest::UnsubscribeStreamRequest(const UnsubscribeStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_id_(from.stream_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UnsubscribeStreamRequest)
}

void UnsubscribeStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

UnsubscribeStreamRequest::~UnsubscribeStreamRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  SharedDtor();
}

void UnsubscribeStreamRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void UnsubscribeStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeStreamRequest& UnsubscribeStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnsubscribeStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_stream_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // repeated uint64 stream_id = 3;
  for (int i = 0, n = this->_internal_stream_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  return target;
}

size_t UnsubscribeStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 stream_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->stream_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UnsubscribeStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UnsubscribeStreamRequest)
    MergeFrom(*source);
  }
}

void UnsubscribeStreamRequest::MergeFrom(const UnsubscribeStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_id_.MergeFrom(from.stream_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsubscribeStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeStreamRequest::CopyFrom(const UnsubscribeStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UnsubscribeStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeStreamRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeStreamRequest::InternalSwap(UnsubscribeStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_id_.InternalSwap(&other->stream_id_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateStreamRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateStreamRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_CreateStreamRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::CreateStreamOptions*>(
      ::bgs::protocol::club::v1::CreateStreamOptions::internal_default_instance());
}
class CreateStreamRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateStreamRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const CreateStreamRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::CreateStreamOptions& options(const CreateStreamRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
CreateStreamRequest::_Internal::agent_id(const CreateStreamRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::CreateStreamOptions&
CreateStreamRequest::_Internal::options(const CreateStreamRequest* msg) {
  return *msg->options_;
}
void CreateStreamRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CreateStreamRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CreateStreamRequest::CreateStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateStreamRequest)
}
CreateStreamRequest::CreateStreamRequest(const CreateStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::CreateStreamOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateStreamRequest)
}

void CreateStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

CreateStreamRequest::~CreateStreamRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateStreamRequest)
  SharedDtor();
}

void CreateStreamRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void CreateStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateStreamRequest& CreateStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CreateStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.CreateStreamOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.club.v1.CreateStreamOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateStreamRequest)
  return target;
}

size_t CreateStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.CreateStreamOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateStreamRequest)
    MergeFrom(*source);
  }
}

void CreateStreamRequest::MergeFrom(const CreateStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::CreateStreamOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStreamRequest::CopyFrom(const CreateStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStreamRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void CreateStreamRequest::InternalSwap(CreateStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateStreamResponse::InitAsDefaultInstance() {
}
class CreateStreamResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateStreamResponse>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CreateStreamResponse::CreateStreamResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateStreamResponse)
}
CreateStreamResponse::CreateStreamResponse(const CreateStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateStreamResponse)
}

void CreateStreamResponse::SharedCtor() {
  ::memset(&club_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
}

CreateStreamResponse::~CreateStreamResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateStreamResponse)
  SharedDtor();
}

void CreateStreamResponse::SharedDtor() {
}

void CreateStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateStreamResponse& CreateStreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CreateStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateStreamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateStreamResponse)
  return target;
}

size_t CreateStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateStreamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 club_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateStreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateStreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateStreamResponse)
    MergeFrom(*source);
  }
}

void CreateStreamResponse::MergeFrom(const CreateStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateStreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStreamResponse::CopyFrom(const CreateStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStreamResponse::IsInitialized() const {
  return true;
}

void CreateStreamResponse::InternalSwap(CreateStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestroyStreamRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_DestroyStreamRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class DestroyStreamRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyStreamRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const DestroyStreamRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
DestroyStreamRequest::_Internal::agent_id(const DestroyStreamRequest* msg) {
  return *msg->agent_id_;
}
void DestroyStreamRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DestroyStreamRequest::DestroyStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.DestroyStreamRequest)
}
DestroyStreamRequest::DestroyStreamRequest(const DestroyStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.DestroyStreamRequest)
}

void DestroyStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DestroyStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

DestroyStreamRequest::~DestroyStreamRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.DestroyStreamRequest)
  SharedDtor();
}

void DestroyStreamRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void DestroyStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyStreamRequest& DestroyStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroyStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DestroyStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.DestroyStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DestroyStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.DestroyStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.DestroyStreamRequest)
  return target;
}

size_t DestroyStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.DestroyStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.DestroyStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroyStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.DestroyStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.DestroyStreamRequest)
    MergeFrom(*source);
  }
}

void DestroyStreamRequest::MergeFrom(const DestroyStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.DestroyStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DestroyStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.DestroyStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyStreamRequest::CopyFrom(const DestroyStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.DestroyStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyStreamRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void DestroyStreamRequest::InternalSwap(DestroyStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetStreamRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetStreamRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetStreamRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetStreamRequest::_Internal::agent_id(const GetStreamRequest* msg) {
  return *msg->agent_id_;
}
void GetStreamRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetStreamRequest::GetStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamRequest)
}
GetStreamRequest::GetStreamRequest(const GetStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamRequest)
}

void GetStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

GetStreamRequest::~GetStreamRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamRequest)
  SharedDtor();
}

void GetStreamRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamRequest& GetStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamRequest)
  return target;
}

size_t GetStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamRequest)
    MergeFrom(*source);
  }
}

void GetStreamRequest::MergeFrom(const GetStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamRequest::CopyFrom(const GetStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetStreamRequest::InternalSwap(GetStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetStreamResponse_default_instance_._instance.get_mutable()->stream_ = const_cast< ::bgs::protocol::club::v1::Stream*>(
      ::bgs::protocol::club::v1::Stream::internal_default_instance());
}
class GetStreamResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::Stream& stream(const GetStreamResponse* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::Stream&
GetStreamResponse::_Internal::stream(const GetStreamResponse* msg) {
  return *msg->stream_;
}
void GetStreamResponse::clear_stream() {
  if (stream_ != nullptr) stream_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetStreamResponse::GetStreamResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamResponse)
}
GetStreamResponse::GetStreamResponse(const GetStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stream()) {
    stream_ = new ::bgs::protocol::club::v1::Stream(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamResponse)
}

void GetStreamResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  stream_ = nullptr;
}

GetStreamResponse::~GetStreamResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamResponse)
  SharedDtor();
}

void GetStreamResponse::SharedDtor() {
  if (this != internal_default_instance()) delete stream_;
}

void GetStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamResponse& GetStreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stream_ != nullptr);
    stream_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.Stream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.Stream stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamResponse)
  return target;
}

size_t GetStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.Stream stream = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamResponse)
    MergeFrom(*source);
  }
}

void GetStreamResponse::MergeFrom(const GetStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stream()) {
    _internal_mutable_stream()->::bgs::protocol::club::v1::Stream::MergeFrom(from._internal_stream());
  }
}

void GetStreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamResponse::CopyFrom(const GetStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamResponse::IsInitialized() const {
  return true;
}

void GetStreamResponse::InternalSwap(GetStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stream_, other->stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetStreamsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetStreamsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamsRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetStreamsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetStreamsRequest::_Internal::agent_id(const GetStreamsRequest* msg) {
  return *msg->agent_id_;
}
void GetStreamsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetStreamsRequest::GetStreamsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamsRequest)
}
GetStreamsRequest::GetStreamsRequest(const GetStreamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuation_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamsRequest)
}

void GetStreamsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuation_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(continuation_));
}

GetStreamsRequest::~GetStreamsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamsRequest)
  SharedDtor();
}

void GetStreamsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetStreamsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamsRequest& GetStreamsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamsRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continuation_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(continuation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 continuation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamsRequest)
  return target;
}

size_t GetStreamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 continuation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_continuation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamsRequest)
    MergeFrom(*source);
  }
}

void GetStreamsRequest::MergeFrom(const GetStreamsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      continuation_ = from.continuation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetStreamsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamsRequest::CopyFrom(const GetStreamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetStreamsRequest::InternalSwap(GetStreamsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamsResponse::InitAsDefaultInstance() {
}
class GetStreamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamsResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetStreamsResponse::clear_stream() {
  stream_.Clear();
}
void GetStreamsResponse::clear_view() {
  view_.Clear();
}
GetStreamsResponse::GetStreamsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamsResponse)
}
GetStreamsResponse::GetStreamsResponse(const GetStreamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_(from.stream_),
      view_(from.view_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamsResponse)
}

void GetStreamsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetStreamsResponse::~GetStreamsResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamsResponse)
  SharedDtor();
}

void GetStreamsResponse::SharedDtor() {
}

void GetStreamsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamsResponse& GetStreamsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamsResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.Clear();
  view_.Clear();
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.Stream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stream(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.StreamView view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.Stream stream = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stream_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stream(i), target, stream);
  }

  // repeated .bgs.protocol.club.v1.StreamView view = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_view_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_view(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamsResponse)
  return target;
}

size_t GetStreamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.Stream stream = 1;
  total_size += 1UL * this->_internal_stream_size();
  for (const auto& msg : this->stream_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.club.v1.StreamView view = 2;
  total_size += 1UL * this->_internal_view_size();
  for (const auto& msg : this->view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 continuation = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamsResponse)
    MergeFrom(*source);
  }
}

void GetStreamsResponse::MergeFrom(const GetStreamsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_.MergeFrom(from.stream_);
  view_.MergeFrom(from.view_);
  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetStreamsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamsResponse::CopyFrom(const GetStreamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamsResponse::IsInitialized() const {
  return true;
}

void GetStreamsResponse::InternalSwap(GetStreamsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_.InternalSwap(&other->stream_);
  view_.InternalSwap(&other->view_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateStreamStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_UpdateStreamStateRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_UpdateStreamStateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::StreamStateOptions*>(
      ::bgs::protocol::club::v1::StreamStateOptions::internal_default_instance());
}
class UpdateStreamStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateStreamStateRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const UpdateStreamStateRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::StreamStateOptions& options(const UpdateStreamStateRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
UpdateStreamStateRequest::_Internal::agent_id(const UpdateStreamStateRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::StreamStateOptions&
UpdateStreamStateRequest::_Internal::options(const UpdateStreamStateRequest* msg) {
  return *msg->options_;
}
void UpdateStreamStateRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateStreamStateRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UpdateStreamStateRequest::UpdateStreamStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UpdateStreamStateRequest)
}
UpdateStreamStateRequest::UpdateStreamStateRequest(const UpdateStreamStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::StreamStateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UpdateStreamStateRequest)
}

void UpdateStreamStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateStreamStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

UpdateStreamStateRequest::~UpdateStreamStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UpdateStreamStateRequest)
  SharedDtor();
}

void UpdateStreamStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void UpdateStreamStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateStreamStateRequest& UpdateStreamStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateStreamStateRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void UpdateStreamStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.UpdateStreamStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateStreamStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamStateOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateStreamStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UpdateStreamStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.club.v1.StreamStateOptions options = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UpdateStreamStateRequest)
  return target;
}

size_t UpdateStreamStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.UpdateStreamStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.StreamStateOptions options = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateStreamStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.UpdateStreamStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateStreamStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateStreamStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.UpdateStreamStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.UpdateStreamStateRequest)
    MergeFrom(*source);
  }
}

void UpdateStreamStateRequest::MergeFrom(const UpdateStreamStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.UpdateStreamStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::StreamStateOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateStreamStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.UpdateStreamStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStreamStateRequest::CopyFrom(const UpdateStreamStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.UpdateStreamStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStreamStateRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateStreamStateRequest::InternalSwap(UpdateStreamStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateStreamStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetStreamFocusRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SetStreamFocusRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class SetStreamFocusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetStreamFocusRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SetStreamFocusRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_focus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SetStreamFocusRequest::_Internal::agent_id(const SetStreamFocusRequest* msg) {
  return *msg->agent_id_;
}
void SetStreamFocusRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SetStreamFocusRequest::SetStreamFocusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SetStreamFocusRequest)
}
SetStreamFocusRequest::SetStreamFocusRequest(const SetStreamFocusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&focus_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(focus_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SetStreamFocusRequest)
}

void SetStreamFocusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetStreamFocusRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&focus_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(focus_));
}

SetStreamFocusRequest::~SetStreamFocusRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SetStreamFocusRequest)
  SharedDtor();
}

void SetStreamFocusRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void SetStreamFocusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetStreamFocusRequest& SetStreamFocusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetStreamFocusRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SetStreamFocusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SetStreamFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&focus_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(focus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetStreamFocusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool focus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_focus(&has_bits);
          focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetStreamFocusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SetStreamFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional bool focus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_focus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SetStreamFocusRequest)
  return target;
}

size_t SetStreamFocusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SetStreamFocusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional bool focus = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetStreamFocusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SetStreamFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetStreamFocusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetStreamFocusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SetStreamFocusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SetStreamFocusRequest)
    MergeFrom(*source);
  }
}

void SetStreamFocusRequest::MergeFrom(const SetStreamFocusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SetStreamFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      focus_ = from.focus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetStreamFocusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SetStreamFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStreamFocusRequest::CopyFrom(const SetStreamFocusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SetStreamFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStreamFocusRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SetStreamFocusRequest::InternalSwap(SetStreamFocusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
  swap(focus_, other->focus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStreamFocusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMessageRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateMessageRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_CreateMessageRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::CreateMessageOptions*>(
      ::bgs::protocol::club::v1::CreateMessageOptions::internal_default_instance());
}
class CreateMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateMessageRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const CreateMessageRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::CreateMessageOptions& options(const CreateMessageRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
CreateMessageRequest::_Internal::agent_id(const CreateMessageRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::CreateMessageOptions&
CreateMessageRequest::_Internal::options(const CreateMessageRequest* msg) {
  return *msg->options_;
}
void CreateMessageRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CreateMessageRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CreateMessageRequest::CreateMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateMessageRequest)
}
CreateMessageRequest::CreateMessageRequest(const CreateMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::CreateMessageOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateMessageRequest)
}

void CreateMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

CreateMessageRequest::~CreateMessageRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateMessageRequest)
  SharedDtor();
}

void CreateMessageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void CreateMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMessageRequest& CreateMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CreateMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.CreateMessageOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.club.v1.CreateMessageOptions options = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateMessageRequest)
  return target;
}

size_t CreateMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.CreateMessageOptions options = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateMessageRequest)
    MergeFrom(*source);
  }
}

void CreateMessageRequest::MergeFrom(const CreateMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::CreateMessageOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMessageRequest::CopyFrom(const CreateMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMessageRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void CreateMessageRequest::InternalSwap(CreateMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMessageResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateMessageResponse_default_instance_._instance.get_mutable()->message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(
      ::bgs::protocol::club::v1::StreamMessage::internal_default_instance());
}
class CreateMessageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateMessageResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::StreamMessage& message(const CreateMessageResponse* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::StreamMessage&
CreateMessageResponse::_Internal::message(const CreateMessageResponse* msg) {
  return *msg->message_;
}
void CreateMessageResponse::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CreateMessageResponse::CreateMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateMessageResponse)
}
CreateMessageResponse::CreateMessageResponse(const CreateMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::bgs::protocol::club::v1::StreamMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateMessageResponse)
}

void CreateMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  message_ = nullptr;
}

CreateMessageResponse::~CreateMessageResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateMessageResponse)
  SharedDtor();
}

void CreateMessageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_;
}

void CreateMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMessageResponse& CreateMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CreateMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.StreamMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateMessageResponse)
  return target;
}

size_t CreateMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateMessageResponse)
    MergeFrom(*source);
  }
}

void CreateMessageResponse::MergeFrom(const CreateMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_mutable_message()->::bgs::protocol::club::v1::StreamMessage::MergeFrom(from._internal_message());
  }
}

void CreateMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMessageResponse::CopyFrom(const CreateMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMessageResponse::IsInitialized() const {
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void CreateMessageResponse::InternalSwap(CreateMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestroyMessageRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_DestroyMessageRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_DestroyMessageRequest_default_instance_._instance.get_mutable()->message_id_ = const_cast< ::bgs::protocol::MessageId*>(
      ::bgs::protocol::MessageId::internal_default_instance());
}
class DestroyMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyMessageRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const DestroyMessageRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::MessageId& message_id(const DestroyMessageRequest* msg);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
DestroyMessageRequest::_Internal::agent_id(const DestroyMessageRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::MessageId&
DestroyMessageRequest::_Internal::message_id(const DestroyMessageRequest* msg) {
  return *msg->message_id_;
}
void DestroyMessageRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DestroyMessageRequest::clear_message_id() {
  if (message_id_ != nullptr) message_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DestroyMessageRequest::DestroyMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.DestroyMessageRequest)
}
DestroyMessageRequest::DestroyMessageRequest(const DestroyMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_message_id()) {
    message_id_ = new ::bgs::protocol::MessageId(*from.message_id_);
  } else {
    message_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.DestroyMessageRequest)
}

void DestroyMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DestroyMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

DestroyMessageRequest::~DestroyMessageRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.DestroyMessageRequest)
  SharedDtor();
}

void DestroyMessageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete message_id_;
}

void DestroyMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyMessageRequest& DestroyMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroyMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DestroyMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.DestroyMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_id_ != nullptr);
      message_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DestroyMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.MessageId message_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.DestroyMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.MessageId message_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::message_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.DestroyMessageRequest)
  return target;
}

size_t DestroyMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.DestroyMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.MessageId message_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.DestroyMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroyMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.DestroyMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.DestroyMessageRequest)
    MergeFrom(*source);
  }
}

void DestroyMessageRequest::MergeFrom(const DestroyMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.DestroyMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message_id()->::bgs::protocol::MessageId::MergeFrom(from._internal_message_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DestroyMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.DestroyMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyMessageRequest::CopyFrom(const DestroyMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.DestroyMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyMessageRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void DestroyMessageRequest::InternalSwap(DestroyMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(message_id_, other->message_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestroyMessageResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_DestroyMessageResponse_default_instance_._instance.get_mutable()->message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(
      ::bgs::protocol::club::v1::StreamMessage::internal_default_instance());
}
class DestroyMessageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyMessageResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::StreamMessage& message(const DestroyMessageResponse* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::StreamMessage&
DestroyMessageResponse::_Internal::message(const DestroyMessageResponse* msg) {
  return *msg->message_;
}
void DestroyMessageResponse::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DestroyMessageResponse::DestroyMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.DestroyMessageResponse)
}
DestroyMessageResponse::DestroyMessageResponse(const DestroyMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::bgs::protocol::club::v1::StreamMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.DestroyMessageResponse)
}

void DestroyMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DestroyMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  message_ = nullptr;
}

DestroyMessageResponse::~DestroyMessageResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.DestroyMessageResponse)
  SharedDtor();
}

void DestroyMessageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_;
}

void DestroyMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyMessageResponse& DestroyMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestroyMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DestroyMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.DestroyMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DestroyMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.StreamMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.DestroyMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.DestroyMessageResponse)
  return target;
}

size_t DestroyMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.DestroyMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.DestroyMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroyMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.DestroyMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.DestroyMessageResponse)
    MergeFrom(*source);
  }
}

void DestroyMessageResponse::MergeFrom(const DestroyMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.DestroyMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_mutable_message()->::bgs::protocol::club::v1::StreamMessage::MergeFrom(from._internal_message());
  }
}

void DestroyMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.DestroyMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyMessageResponse::CopyFrom(const DestroyMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.DestroyMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyMessageResponse::IsInitialized() const {
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void DestroyMessageResponse::InternalSwap(DestroyMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EditMessageRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_EditMessageRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_EditMessageRequest_default_instance_._instance.get_mutable()->message_id_ = const_cast< ::bgs::protocol::MessageId*>(
      ::bgs::protocol::MessageId::internal_default_instance());
  ::bgs::protocol::club::v1::_EditMessageRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::club::v1::CreateMessageOptions*>(
      ::bgs::protocol::club::v1::CreateMessageOptions::internal_default_instance());
}
class EditMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EditMessageRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const EditMessageRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::MessageId& message_id(const EditMessageRequest* msg);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::CreateMessageOptions& options(const EditMessageRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
EditMessageRequest::_Internal::agent_id(const EditMessageRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::MessageId&
EditMessageRequest::_Internal::message_id(const EditMessageRequest* msg) {
  return *msg->message_id_;
}
const ::bgs::protocol::club::v1::CreateMessageOptions&
EditMessageRequest::_Internal::options(const EditMessageRequest* msg) {
  return *msg->options_;
}
void EditMessageRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void EditMessageRequest::clear_message_id() {
  if (message_id_ != nullptr) message_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void EditMessageRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
EditMessageRequest::EditMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.EditMessageRequest)
}
EditMessageRequest::EditMessageRequest(const EditMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_message_id()) {
    message_id_ = new ::bgs::protocol::MessageId(*from.message_id_);
  } else {
    message_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::club::v1::CreateMessageOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.EditMessageRequest)
}

void EditMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EditMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

EditMessageRequest::~EditMessageRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.EditMessageRequest)
  SharedDtor();
}

void EditMessageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete message_id_;
  if (this != internal_default_instance()) delete options_;
}

void EditMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditMessageRequest& EditMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void EditMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.EditMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_id_ != nullptr);
      message_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EditMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.MessageId message_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.CreateMessageOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.EditMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.MessageId message_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::message_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.CreateMessageOptions options = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.EditMessageRequest)
  return target;
}

size_t EditMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.EditMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.MessageId message_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_id_);
    }

    // optional .bgs.protocol.club.v1.CreateMessageOptions options = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.EditMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EditMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.EditMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.EditMessageRequest)
    MergeFrom(*source);
  }
}

void EditMessageRequest::MergeFrom(const EditMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.EditMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message_id()->::bgs::protocol::MessageId::MergeFrom(from._internal_message_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_options()->::bgs::protocol::club::v1::CreateMessageOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000008u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EditMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.EditMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditMessageRequest::CopyFrom(const EditMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.EditMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMessageRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void EditMessageRequest::InternalSwap(EditMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(message_id_, other->message_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EditMessageResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_EditMessageResponse_default_instance_._instance.get_mutable()->message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(
      ::bgs::protocol::club::v1::StreamMessage::internal_default_instance());
}
class EditMessageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EditMessageResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::StreamMessage& message(const EditMessageResponse* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::StreamMessage&
EditMessageResponse::_Internal::message(const EditMessageResponse* msg) {
  return *msg->message_;
}
void EditMessageResponse::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EditMessageResponse::EditMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.EditMessageResponse)
}
EditMessageResponse::EditMessageResponse(const EditMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::bgs::protocol::club::v1::StreamMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.EditMessageResponse)
}

void EditMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EditMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  message_ = nullptr;
}

EditMessageResponse::~EditMessageResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.EditMessageResponse)
  SharedDtor();
}

void EditMessageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_;
}

void EditMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditMessageResponse& EditMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void EditMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.EditMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EditMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.StreamMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.EditMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.EditMessageResponse)
  return target;
}

size_t EditMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.EditMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.EditMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EditMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.EditMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.EditMessageResponse)
    MergeFrom(*source);
  }
}

void EditMessageResponse::MergeFrom(const EditMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.EditMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_mutable_message()->::bgs::protocol::club::v1::StreamMessage::MergeFrom(from._internal_message());
  }
}

void EditMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.EditMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditMessageResponse::CopyFrom(const EditMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.EditMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMessageResponse::IsInitialized() const {
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void EditMessageResponse::InternalSwap(EditMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMessagePinnedRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SetMessagePinnedRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class SetMessagePinnedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMessagePinnedRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SetMessagePinnedRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SetMessagePinnedRequest::_Internal::agent_id(const SetMessagePinnedRequest* msg) {
  return *msg->agent_id_;
}
void SetMessagePinnedRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SetMessagePinnedRequest::SetMessagePinnedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SetMessagePinnedRequest)
}
SetMessagePinnedRequest::SetMessagePinnedRequest(const SetMessagePinnedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SetMessagePinnedRequest)
}

void SetMessagePinnedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMessagePinnedRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

SetMessagePinnedRequest::~SetMessagePinnedRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SetMessagePinnedRequest)
  SharedDtor();
}

void SetMessagePinnedRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void SetMessagePinnedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMessagePinnedRequest& SetMessagePinnedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMessagePinnedRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SetMessagePinnedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SetMessagePinnedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetMessagePinnedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMessagePinnedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SetMessagePinnedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SetMessagePinnedRequest)
  return target;
}

size_t SetMessagePinnedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SetMessagePinnedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMessagePinnedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SetMessagePinnedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMessagePinnedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMessagePinnedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SetMessagePinnedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SetMessagePinnedRequest)
    MergeFrom(*source);
  }
}

void SetMessagePinnedRequest::MergeFrom(const SetMessagePinnedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SetMessagePinnedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetMessagePinnedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SetMessagePinnedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMessagePinnedRequest::CopyFrom(const SetMessagePinnedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SetMessagePinnedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMessagePinnedRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SetMessagePinnedRequest::InternalSwap(SetMessagePinnedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMessagePinnedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTypingIndicatorRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_SetTypingIndicatorRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class SetTypingIndicatorRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTypingIndicatorRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const SetTypingIndicatorRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
SetTypingIndicatorRequest::_Internal::agent_id(const SetTypingIndicatorRequest* msg) {
  return *msg->agent_id_;
}
void SetTypingIndicatorRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SetTypingIndicatorRequest::SetTypingIndicatorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SetTypingIndicatorRequest)
}
SetTypingIndicatorRequest::SetTypingIndicatorRequest(const SetTypingIndicatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&indicator_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(indicator_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SetTypingIndicatorRequest)
}

void SetTypingIndicatorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetTypingIndicatorRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indicator_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(indicator_));
}

SetTypingIndicatorRequest::~SetTypingIndicatorRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  SharedDtor();
}

void SetTypingIndicatorRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void SetTypingIndicatorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTypingIndicatorRequest& SetTypingIndicatorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTypingIndicatorRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SetTypingIndicatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&indicator_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(indicator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetTypingIndicatorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.TypingIndicator indicator = 4 [default = TYPING_START];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::TypingIndicator_IsValid(val))) {
            _internal_set_indicator(static_cast<::bgs::protocol::TypingIndicator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTypingIndicatorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.TypingIndicator indicator = 4 [default = TYPING_START];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_indicator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  return target;
}

size_t SetTypingIndicatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional .bgs.protocol.TypingIndicator indicator = 4 [default = TYPING_START];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_indicator());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTypingIndicatorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTypingIndicatorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTypingIndicatorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.SetTypingIndicatorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.SetTypingIndicatorRequest)
    MergeFrom(*source);
  }
}

void SetTypingIndicatorRequest::MergeFrom(const SetTypingIndicatorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      indicator_ = from.indicator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetTypingIndicatorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTypingIndicatorRequest::CopyFrom(const SetTypingIndicatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.SetTypingIndicatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTypingIndicatorRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void SetTypingIndicatorRequest::InternalSwap(SetTypingIndicatorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
  swap(indicator_, other->indicator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTypingIndicatorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvanceStreamViewTimeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_AdvanceStreamViewTimeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class AdvanceStreamViewTimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AdvanceStreamViewTimeRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const AdvanceStreamViewTimeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
AdvanceStreamViewTimeRequest::_Internal::agent_id(const AdvanceStreamViewTimeRequest* msg) {
  return *msg->agent_id_;
}
void AdvanceStreamViewTimeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AdvanceStreamViewTimeRequest::AdvanceStreamViewTimeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
}
AdvanceStreamViewTimeRequest::AdvanceStreamViewTimeRequest(const AdvanceStreamViewTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_id_(from.stream_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_deprecated_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_deprecated_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
}

void AdvanceStreamViewTimeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvanceStreamViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_deprecated_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_deprecated_));
}

AdvanceStreamViewTimeRequest::~AdvanceStreamViewTimeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  SharedDtor();
}

void AdvanceStreamViewTimeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void AdvanceStreamViewTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvanceStreamViewTimeRequest& AdvanceStreamViewTimeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvanceStreamViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void AdvanceStreamViewTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_deprecated_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_deprecated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AdvanceStreamViewTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id_deprecated = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id_deprecated(&has_bits);
          stream_id_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 stream_id = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_stream_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvanceStreamViewTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id_deprecated = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id_deprecated(), target);
  }

  // repeated uint64 stream_id = 4 [packed = true];
  {
    int byte_size = _stream_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_stream_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  return target;
}

size_t AdvanceStreamViewTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 stream_id = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->stream_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stream_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id_deprecated = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id_deprecated());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvanceStreamViewTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvanceStreamViewTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvanceStreamViewTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
    MergeFrom(*source);
  }
}

void AdvanceStreamViewTimeRequest::MergeFrom(const AdvanceStreamViewTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_id_.MergeFrom(from.stream_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_deprecated_ = from.stream_id_deprecated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdvanceStreamViewTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceStreamViewTimeRequest::CopyFrom(const AdvanceStreamViewTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceStreamViewTimeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void AdvanceStreamViewTimeRequest::InternalSwap(AdvanceStreamViewTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_id_.InternalSwap(&other->stream_id_);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_deprecated_, other->stream_id_deprecated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvanceStreamViewTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvanceStreamMentionViewTimeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_AdvanceStreamMentionViewTimeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class AdvanceStreamMentionViewTimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AdvanceStreamMentionViewTimeRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const AdvanceStreamMentionViewTimeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
AdvanceStreamMentionViewTimeRequest::_Internal::agent_id(const AdvanceStreamMentionViewTimeRequest* msg) {
  return *msg->agent_id_;
}
void AdvanceStreamMentionViewTimeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AdvanceStreamMentionViewTimeRequest::AdvanceStreamMentionViewTimeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
}
AdvanceStreamMentionViewTimeRequest::AdvanceStreamMentionViewTimeRequest(const AdvanceStreamMentionViewTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
}

void AdvanceStreamMentionViewTimeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

AdvanceStreamMentionViewTimeRequest::~AdvanceStreamMentionViewTimeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  SharedDtor();
}

void AdvanceStreamMentionViewTimeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void AdvanceStreamMentionViewTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvanceStreamMentionViewTimeRequest& AdvanceStreamMentionViewTimeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvanceStreamMentionViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void AdvanceStreamMentionViewTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AdvanceStreamMentionViewTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvanceStreamMentionViewTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  return target;
}

size_t AdvanceStreamMentionViewTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvanceStreamMentionViewTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvanceStreamMentionViewTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvanceStreamMentionViewTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
    MergeFrom(*source);
  }
}

void AdvanceStreamMentionViewTimeRequest::MergeFrom(const AdvanceStreamMentionViewTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdvanceStreamMentionViewTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceStreamMentionViewTimeRequest::CopyFrom(const AdvanceStreamMentionViewTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceStreamMentionViewTimeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void AdvanceStreamMentionViewTimeRequest::InternalSwap(AdvanceStreamMentionViewTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvanceStreamMentionViewTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvanceActivityViewTimeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_AdvanceActivityViewTimeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class AdvanceActivityViewTimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AdvanceActivityViewTimeRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const AdvanceActivityViewTimeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
AdvanceActivityViewTimeRequest::_Internal::agent_id(const AdvanceActivityViewTimeRequest* msg) {
  return *msg->agent_id_;
}
void AdvanceActivityViewTimeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AdvanceActivityViewTimeRequest::AdvanceActivityViewTimeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
}
AdvanceActivityViewTimeRequest::AdvanceActivityViewTimeRequest(const AdvanceActivityViewTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
}

void AdvanceActivityViewTimeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvanceActivityViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

AdvanceActivityViewTimeRequest::~AdvanceActivityViewTimeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  SharedDtor();
}

void AdvanceActivityViewTimeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void AdvanceActivityViewTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvanceActivityViewTimeRequest& AdvanceActivityViewTimeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvanceActivityViewTimeRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void AdvanceActivityViewTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AdvanceActivityViewTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvanceActivityViewTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  return target;
}

size_t AdvanceActivityViewTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvanceActivityViewTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvanceActivityViewTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvanceActivityViewTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
    MergeFrom(*source);
  }
}

void AdvanceActivityViewTimeRequest::MergeFrom(const AdvanceActivityViewTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdvanceActivityViewTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceActivityViewTimeRequest::CopyFrom(const AdvanceActivityViewTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceActivityViewTimeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void AdvanceActivityViewTimeRequest::InternalSwap(AdvanceActivityViewTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvanceActivityViewTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamHistoryRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetStreamHistoryRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_GetStreamHistoryRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::GetEventOptions*>(
      ::bgs::protocol::GetEventOptions::internal_default_instance());
}
class GetStreamHistoryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamHistoryRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetStreamHistoryRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::GetEventOptions& options(const GetStreamHistoryRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetStreamHistoryRequest::_Internal::agent_id(const GetStreamHistoryRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::GetEventOptions&
GetStreamHistoryRequest::_Internal::options(const GetStreamHistoryRequest* msg) {
  return *msg->options_;
}
void GetStreamHistoryRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetStreamHistoryRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetStreamHistoryRequest::GetStreamHistoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamHistoryRequest)
}
GetStreamHistoryRequest::GetStreamHistoryRequest(const GetStreamHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::GetEventOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamHistoryRequest)
}

void GetStreamHistoryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamHistoryRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

GetStreamHistoryRequest::~GetStreamHistoryRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamHistoryRequest)
  SharedDtor();
}

void GetStreamHistoryRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void GetStreamHistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamHistoryRequest& GetStreamHistoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamHistoryRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamHistoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.GetEventOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamHistoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.GetEventOptions options = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamHistoryRequest)
  return target;
}

size_t GetStreamHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamHistoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.GetEventOptions options = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamHistoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamHistoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamHistoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamHistoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamHistoryRequest)
    MergeFrom(*source);
  }
}

void GetStreamHistoryRequest::MergeFrom(const GetStreamHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::GetEventOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetStreamHistoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamHistoryRequest::CopyFrom(const GetStreamHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamHistoryRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetStreamHistoryRequest::InternalSwap(GetStreamHistoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamHistoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamHistoryResponse::InitAsDefaultInstance() {
}
class GetStreamHistoryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamHistoryResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GetStreamHistoryResponse::clear_message() {
  message_.Clear();
}
GetStreamHistoryResponse::GetStreamHistoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamHistoryResponse)
}
GetStreamHistoryResponse::GetStreamHistoryResponse(const GetStreamHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      message_(from.message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamHistoryResponse)
}

void GetStreamHistoryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamHistoryResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetStreamHistoryResponse::~GetStreamHistoryResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamHistoryResponse)
  SharedDtor();
}

void GetStreamHistoryResponse::SharedDtor() {
}

void GetStreamHistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamHistoryResponse& GetStreamHistoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamHistoryResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.Clear();
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamHistoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 continuation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamHistoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_message(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamHistoryResponse)
  return target;
}

size_t GetStreamHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamHistoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  total_size += 1UL * this->_internal_message_size();
  for (const auto& msg : this->message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 continuation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamHistoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamHistoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamHistoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamHistoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamHistoryResponse)
    MergeFrom(*source);
  }
}

void GetStreamHistoryResponse::MergeFrom(const GetStreamHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_.MergeFrom(from.message_);
  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetStreamHistoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamHistoryResponse::CopyFrom(const GetStreamHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamHistoryResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(message_)) return false;
  return true;
}

void GetStreamHistoryResponse::InternalSwap(GetStreamHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.InternalSwap(&other->message_);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamHistoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamMessageRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetStreamMessageRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_GetStreamMessageRequest_default_instance_._instance.get_mutable()->message_id_ = const_cast< ::bgs::protocol::MessageId*>(
      ::bgs::protocol::MessageId::internal_default_instance());
}
class GetStreamMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamMessageRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetStreamMessageRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::MessageId& message_id(const GetStreamMessageRequest* msg);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetStreamMessageRequest::_Internal::agent_id(const GetStreamMessageRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::MessageId&
GetStreamMessageRequest::_Internal::message_id(const GetStreamMessageRequest* msg) {
  return *msg->message_id_;
}
void GetStreamMessageRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetStreamMessageRequest::clear_message_id() {
  if (message_id_ != nullptr) message_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetStreamMessageRequest::GetStreamMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamMessageRequest)
}
GetStreamMessageRequest::GetStreamMessageRequest(const GetStreamMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_message_id()) {
    message_id_ = new ::bgs::protocol::MessageId(*from.message_id_);
  } else {
    message_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamMessageRequest)
}

void GetStreamMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

GetStreamMessageRequest::~GetStreamMessageRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamMessageRequest)
  SharedDtor();
}

void GetStreamMessageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete message_id_;
}

void GetStreamMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamMessageRequest& GetStreamMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamMessageRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_id_ != nullptr);
      message_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.MessageId message_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.MessageId message_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::message_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamMessageRequest)
  return target;
}

size_t GetStreamMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.MessageId message_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamMessageRequest)
    MergeFrom(*source);
  }
}

void GetStreamMessageRequest::MergeFrom(const GetStreamMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message_id()->::bgs::protocol::MessageId::MergeFrom(from._internal_message_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetStreamMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamMessageRequest::CopyFrom(const GetStreamMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamMessageRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetStreamMessageRequest::InternalSwap(GetStreamMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(message_id_, other->message_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamMessageResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetStreamMessageResponse_default_instance_._instance.get_mutable()->message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(
      ::bgs::protocol::club::v1::StreamMessage::internal_default_instance());
}
class GetStreamMessageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamMessageResponse>()._has_bits_);
  static const ::bgs::protocol::club::v1::StreamMessage& message(const GetStreamMessageResponse* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::club::v1::StreamMessage&
GetStreamMessageResponse::_Internal::message(const GetStreamMessageResponse* msg) {
  return *msg->message_;
}
void GetStreamMessageResponse::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetStreamMessageResponse::GetStreamMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamMessageResponse)
}
GetStreamMessageResponse::GetStreamMessageResponse(const GetStreamMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::bgs::protocol::club::v1::StreamMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamMessageResponse)
}

void GetStreamMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  message_ = nullptr;
}

GetStreamMessageResponse::~GetStreamMessageResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamMessageResponse)
  SharedDtor();
}

void GetStreamMessageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_;
}

void GetStreamMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamMessageResponse& GetStreamMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamMessageResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_ != nullptr);
    message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.StreamMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamMessageResponse)
  return target;
}

size_t GetStreamMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamMessageResponse)
    MergeFrom(*source);
  }
}

void GetStreamMessageResponse::MergeFrom(const GetStreamMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_mutable_message()->::bgs::protocol::club::v1::StreamMessage::MergeFrom(from._internal_message());
  }
}

void GetStreamMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamMessageResponse::CopyFrom(const GetStreamMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamMessageResponse::IsInitialized() const {
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void GetStreamMessageResponse::InternalSwap(GetStreamMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetClubActivityRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetClubActivityRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_GetClubActivityRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::GetEventOptions*>(
      ::bgs::protocol::GetEventOptions::internal_default_instance());
}
class GetClubActivityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetClubActivityRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetClubActivityRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::GetEventOptions& options(const GetClubActivityRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetClubActivityRequest::_Internal::agent_id(const GetClubActivityRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::GetEventOptions&
GetClubActivityRequest::_Internal::options(const GetClubActivityRequest* msg) {
  return *msg->options_;
}
void GetClubActivityRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GetClubActivityRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetClubActivityRequest::GetClubActivityRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetClubActivityRequest)
}
GetClubActivityRequest::GetClubActivityRequest(const GetClubActivityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::GetEventOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  club_id_ = from.club_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetClubActivityRequest)
}

void GetClubActivityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetClubActivityRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&club_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(club_id_));
}

GetClubActivityRequest::~GetClubActivityRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetClubActivityRequest)
  SharedDtor();
}

void GetClubActivityRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void GetClubActivityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClubActivityRequest& GetClubActivityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetClubActivityRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetClubActivityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetClubActivityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetClubActivityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.GetEventOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetClubActivityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetClubActivityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional .bgs.protocol.GetEventOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetClubActivityRequest)
  return target;
}

size_t GetClubActivityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetClubActivityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.GetEventOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClubActivityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetClubActivityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClubActivityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetClubActivityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetClubActivityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetClubActivityRequest)
    MergeFrom(*source);
  }
}

void GetClubActivityRequest::MergeFrom(const GetClubActivityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetClubActivityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::GetEventOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetClubActivityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetClubActivityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClubActivityRequest::CopyFrom(const GetClubActivityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetClubActivityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClubActivityRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetClubActivityRequest::InternalSwap(GetClubActivityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(club_id_, other->club_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClubActivityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetClubActivityResponse::InitAsDefaultInstance() {
}
class GetClubActivityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetClubActivityResponse>()._has_bits_);
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetClubActivityResponse::GetClubActivityResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetClubActivityResponse)
}
GetClubActivityResponse::GetClubActivityResponse(const GetClubActivityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetClubActivityResponse)
}

void GetClubActivityResponse::SharedCtor() {
  continuation_ = PROTOBUF_ULONGLONG(0);
}

GetClubActivityResponse::~GetClubActivityResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetClubActivityResponse)
  SharedDtor();
}

void GetClubActivityResponse::SharedDtor() {
}

void GetClubActivityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClubActivityResponse& GetClubActivityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetClubActivityResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetClubActivityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetClubActivityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetClubActivityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 continuation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_continuation(&has_bits);
          continuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetClubActivityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetClubActivityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 continuation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetClubActivityResponse)
  return target;
}

size_t GetClubActivityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetClubActivityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 continuation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_continuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClubActivityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetClubActivityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClubActivityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetClubActivityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetClubActivityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetClubActivityResponse)
    MergeFrom(*source);
  }
}

void GetClubActivityResponse::MergeFrom(const GetClubActivityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetClubActivityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_continuation()) {
    _internal_set_continuation(from._internal_continuation());
  }
}

void GetClubActivityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetClubActivityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClubActivityResponse::CopyFrom(const GetClubActivityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetClubActivityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClubActivityResponse::IsInitialized() const {
  return true;
}

void GetClubActivityResponse::InternalSwap(GetClubActivityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClubActivityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamVoiceTokenRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetStreamVoiceTokenRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class GetStreamVoiceTokenRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamVoiceTokenRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const GetStreamVoiceTokenRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
GetStreamVoiceTokenRequest::_Internal::agent_id(const GetStreamVoiceTokenRequest* msg) {
  return *msg->agent_id_;
}
void GetStreamVoiceTokenRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetStreamVoiceTokenRequest::GetStreamVoiceTokenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
}
GetStreamVoiceTokenRequest::GetStreamVoiceTokenRequest(const GetStreamVoiceTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
}

void GetStreamVoiceTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamVoiceTokenRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

GetStreamVoiceTokenRequest::~GetStreamVoiceTokenRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  SharedDtor();
}

void GetStreamVoiceTokenRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetStreamVoiceTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamVoiceTokenRequest& GetStreamVoiceTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamVoiceTokenRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamVoiceTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamVoiceTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamVoiceTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  return target;
}

size_t GetStreamVoiceTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamVoiceTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamVoiceTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamVoiceTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
    MergeFrom(*source);
  }
}

void GetStreamVoiceTokenRequest::MergeFrom(const GetStreamVoiceTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetStreamVoiceTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamVoiceTokenRequest::CopyFrom(const GetStreamVoiceTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamVoiceTokenRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetStreamVoiceTokenRequest::InternalSwap(GetStreamVoiceTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamVoiceTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamVoiceTokenResponse::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_GetStreamVoiceTokenResponse_default_instance_._instance.get_mutable()->credentials_ = const_cast< ::bgs::protocol::VoiceCredentials*>(
      ::bgs::protocol::VoiceCredentials::internal_default_instance());
}
class GetStreamVoiceTokenResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamVoiceTokenResponse>()._has_bits_);
  static void set_has_channel_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::VoiceCredentials& credentials(const GetStreamVoiceTokenResponse* msg);
  static void set_has_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::VoiceCredentials&
GetStreamVoiceTokenResponse::_Internal::credentials(const GetStreamVoiceTokenResponse* msg) {
  return *msg->credentials_;
}
void GetStreamVoiceTokenResponse::clear_credentials() {
  if (credentials_ != nullptr) credentials_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetStreamVoiceTokenResponse::GetStreamVoiceTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
}
GetStreamVoiceTokenResponse::GetStreamVoiceTokenResponse(const GetStreamVoiceTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_uri()) {
    channel_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_uri_);
  }
  if (from._internal_has_credentials()) {
    credentials_ = new ::bgs::protocol::VoiceCredentials(*from.credentials_);
  } else {
    credentials_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
}

void GetStreamVoiceTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamVoiceTokenResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  channel_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  credentials_ = nullptr;
}

GetStreamVoiceTokenResponse::~GetStreamVoiceTokenResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  SharedDtor();
}

void GetStreamVoiceTokenResponse::SharedDtor() {
  channel_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete credentials_;
}

void GetStreamVoiceTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamVoiceTokenResponse& GetStreamVoiceTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamVoiceTokenResponse_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GetStreamVoiceTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_uri_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(credentials_ != nullptr);
      credentials_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetStreamVoiceTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string channel_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.VoiceCredentials credentials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_credentials(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamVoiceTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_uri().data(), static_cast<int>(this->_internal_channel_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_uri(), target);
  }

  // optional .bgs.protocol.VoiceCredentials credentials = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::credentials(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  return target;
}

size_t GetStreamVoiceTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string channel_uri = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_uri());
    }

    // optional .bgs.protocol.VoiceCredentials credentials = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *credentials_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamVoiceTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamVoiceTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamVoiceTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
    MergeFrom(*source);
  }
}

void GetStreamVoiceTokenResponse::MergeFrom(const GetStreamVoiceTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      channel_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_credentials()->::bgs::protocol::VoiceCredentials::MergeFrom(from._internal_credentials());
    }
  }
}

void GetStreamVoiceTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamVoiceTokenResponse::CopyFrom(const GetStreamVoiceTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamVoiceTokenResponse::IsInitialized() const {
  return true;
}

void GetStreamVoiceTokenResponse::InternalSwap(GetStreamVoiceTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_uri_.Swap(&other->channel_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(credentials_, other->credentials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamVoiceTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickFromStreamVoiceRequest::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_KickFromStreamVoiceRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_KickFromStreamVoiceRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class KickFromStreamVoiceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KickFromStreamVoiceRequest>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& agent_id(const KickFromStreamVoiceRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::MemberId& target_id(const KickFromStreamVoiceRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
KickFromStreamVoiceRequest::_Internal::agent_id(const KickFromStreamVoiceRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::club::v1::MemberId&
KickFromStreamVoiceRequest::_Internal::target_id(const KickFromStreamVoiceRequest* msg) {
  return *msg->target_id_;
}
void KickFromStreamVoiceRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void KickFromStreamVoiceRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
KickFromStreamVoiceRequest::KickFromStreamVoiceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
}
KickFromStreamVoiceRequest::KickFromStreamVoiceRequest(const KickFromStreamVoiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::club::v1::MemberId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::club::v1::MemberId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
}

void KickFromStreamVoiceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickFromStreamVoiceRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(stream_id_));
}

KickFromStreamVoiceRequest::~KickFromStreamVoiceRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  SharedDtor();
}

void KickFromStreamVoiceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void KickFromStreamVoiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickFromStreamVoiceRequest& KickFromStreamVoiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickFromStreamVoiceRequest_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.base);
  return *internal_default_instance();
}


void KickFromStreamVoiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* KickFromStreamVoiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 club_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberId target_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickFromStreamVoiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 club_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberId target_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  return target;
}

size_t KickFromStreamVoiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.club.v1.MemberId target_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

    // optional uint64 club_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickFromStreamVoiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickFromStreamVoiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickFromStreamVoiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
    MergeFrom(*source);
  }
}

void KickFromStreamVoiceRequest::MergeFrom(const KickFromStreamVoiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000004u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickFromStreamVoiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickFromStreamVoiceRequest::CopyFrom(const KickFromStreamVoiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickFromStreamVoiceRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void KickFromStreamVoiceRequest::InternalSwap(KickFromStreamVoiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickFromStreamVoiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UnsubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UnsubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UnsubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::DestroyRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::DestroyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::DestroyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetDescriptionRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetDescriptionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetDescriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetDescriptionResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetDescriptionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetDescriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetClubTypeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetClubTypeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetClubTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetClubTypeResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetClubTypeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetClubTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UpdateClubStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UpdateClubStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UpdateClubStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UpdateClubSettingsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UpdateClubSettingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UpdateClubSettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::JoinRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::JoinRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::JoinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::LeaveRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::LeaveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::LeaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::KickRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::KickRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::KickRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetMemberRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetMemberRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetMemberRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetMemberResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetMemberResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetMemberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetMembersRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetMembersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetMembersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetMembersResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetMembersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UpdateMemberStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UpdateMemberStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UpdateMemberStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UpdateSubscriberStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UpdateSubscriberStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UpdateSubscriberStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AssignRoleRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AssignRoleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AssignRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UnassignRoleRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UnassignRoleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UnassignRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SendInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SendInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SendInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AcceptInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AcceptInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AcceptInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::DeclineInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::DeclineInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::DeclineInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::RevokeInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::RevokeInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::RevokeInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetInvitationResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetInvitationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetInvitationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetInvitationsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetInvitationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetInvitationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetInvitationsResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetInvitationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetInvitationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SendSuggestionRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SendSuggestionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SendSuggestionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AcceptSuggestionRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AcceptSuggestionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AcceptSuggestionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::DeclineSuggestionRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::DeclineSuggestionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::DeclineSuggestionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetSuggestionRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetSuggestionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetSuggestionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetSuggestionResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetSuggestionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetSuggestionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetSuggestionsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetSuggestionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetSuggestionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetSuggestionsResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetSuggestionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetSuggestionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateTicketRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateTicketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateTicketResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::DestroyTicketRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::DestroyTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::DestroyTicketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::RedeemTicketRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::RedeemTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::RedeemTicketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetTicketRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetTicketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetTicketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetTicketResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetTicketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetTicketsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetTicketsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetTicketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetTicketsResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetTicketsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetTicketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AddBanRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AddBanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AddBanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::RemoveBanRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::RemoveBanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::RemoveBanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetBanRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetBanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetBanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetBanResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetBanResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetBanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetBansRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetBansRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetBansRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetBansResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetBansResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetBansResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SubscribeStreamRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SubscribeStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SubscribeStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UnsubscribeStreamRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UnsubscribeStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UnsubscribeStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateStreamRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateStreamResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateStreamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::DestroyStreamRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::DestroyStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::DestroyStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamsResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::UpdateStreamStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::UpdateStreamStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::UpdateStreamStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SetStreamFocusRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SetStreamFocusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SetStreamFocusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateMessageRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateMessageResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::DestroyMessageRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::DestroyMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::DestroyMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::DestroyMessageResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::DestroyMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::DestroyMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::EditMessageRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::EditMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::EditMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::EditMessageResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::EditMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::EditMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SetMessagePinnedRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SetMessagePinnedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SetMessagePinnedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::SetTypingIndicatorRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::SetTypingIndicatorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::SetTypingIndicatorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamHistoryRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamHistoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamHistoryResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamHistoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamMessageRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamMessageResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetClubActivityRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetClubActivityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetClubActivityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetClubActivityResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetClubActivityResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetClubActivityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamVoiceTokenRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamVoiceTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamVoiceTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::KickFromStreamVoiceRequest* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::KickFromStreamVoiceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::KickFromStreamVoiceRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
