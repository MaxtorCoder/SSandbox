// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[82]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class AcceptInvitationRequest;
class AcceptInvitationRequestDefaultTypeInternal;
extern AcceptInvitationRequestDefaultTypeInternal _AcceptInvitationRequest_default_instance_;
class AcceptSuggestionRequest;
class AcceptSuggestionRequestDefaultTypeInternal;
extern AcceptSuggestionRequestDefaultTypeInternal _AcceptSuggestionRequest_default_instance_;
class AddBanRequest;
class AddBanRequestDefaultTypeInternal;
extern AddBanRequestDefaultTypeInternal _AddBanRequest_default_instance_;
class AdvanceActivityViewTimeRequest;
class AdvanceActivityViewTimeRequestDefaultTypeInternal;
extern AdvanceActivityViewTimeRequestDefaultTypeInternal _AdvanceActivityViewTimeRequest_default_instance_;
class AdvanceStreamMentionViewTimeRequest;
class AdvanceStreamMentionViewTimeRequestDefaultTypeInternal;
extern AdvanceStreamMentionViewTimeRequestDefaultTypeInternal _AdvanceStreamMentionViewTimeRequest_default_instance_;
class AdvanceStreamViewTimeRequest;
class AdvanceStreamViewTimeRequestDefaultTypeInternal;
extern AdvanceStreamViewTimeRequestDefaultTypeInternal _AdvanceStreamViewTimeRequest_default_instance_;
class AssignRoleRequest;
class AssignRoleRequestDefaultTypeInternal;
extern AssignRoleRequestDefaultTypeInternal _AssignRoleRequest_default_instance_;
class CreateMessageRequest;
class CreateMessageRequestDefaultTypeInternal;
extern CreateMessageRequestDefaultTypeInternal _CreateMessageRequest_default_instance_;
class CreateMessageResponse;
class CreateMessageResponseDefaultTypeInternal;
extern CreateMessageResponseDefaultTypeInternal _CreateMessageResponse_default_instance_;
class CreateRequest;
class CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
class CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class CreateStreamRequest;
class CreateStreamRequestDefaultTypeInternal;
extern CreateStreamRequestDefaultTypeInternal _CreateStreamRequest_default_instance_;
class CreateStreamResponse;
class CreateStreamResponseDefaultTypeInternal;
extern CreateStreamResponseDefaultTypeInternal _CreateStreamResponse_default_instance_;
class CreateTicketRequest;
class CreateTicketRequestDefaultTypeInternal;
extern CreateTicketRequestDefaultTypeInternal _CreateTicketRequest_default_instance_;
class CreateTicketResponse;
class CreateTicketResponseDefaultTypeInternal;
extern CreateTicketResponseDefaultTypeInternal _CreateTicketResponse_default_instance_;
class DeclineInvitationRequest;
class DeclineInvitationRequestDefaultTypeInternal;
extern DeclineInvitationRequestDefaultTypeInternal _DeclineInvitationRequest_default_instance_;
class DeclineSuggestionRequest;
class DeclineSuggestionRequestDefaultTypeInternal;
extern DeclineSuggestionRequestDefaultTypeInternal _DeclineSuggestionRequest_default_instance_;
class DestroyMessageRequest;
class DestroyMessageRequestDefaultTypeInternal;
extern DestroyMessageRequestDefaultTypeInternal _DestroyMessageRequest_default_instance_;
class DestroyMessageResponse;
class DestroyMessageResponseDefaultTypeInternal;
extern DestroyMessageResponseDefaultTypeInternal _DestroyMessageResponse_default_instance_;
class DestroyRequest;
class DestroyRequestDefaultTypeInternal;
extern DestroyRequestDefaultTypeInternal _DestroyRequest_default_instance_;
class DestroyStreamRequest;
class DestroyStreamRequestDefaultTypeInternal;
extern DestroyStreamRequestDefaultTypeInternal _DestroyStreamRequest_default_instance_;
class DestroyTicketRequest;
class DestroyTicketRequestDefaultTypeInternal;
extern DestroyTicketRequestDefaultTypeInternal _DestroyTicketRequest_default_instance_;
class EditMessageRequest;
class EditMessageRequestDefaultTypeInternal;
extern EditMessageRequestDefaultTypeInternal _EditMessageRequest_default_instance_;
class EditMessageResponse;
class EditMessageResponseDefaultTypeInternal;
extern EditMessageResponseDefaultTypeInternal _EditMessageResponse_default_instance_;
class GetBanRequest;
class GetBanRequestDefaultTypeInternal;
extern GetBanRequestDefaultTypeInternal _GetBanRequest_default_instance_;
class GetBanResponse;
class GetBanResponseDefaultTypeInternal;
extern GetBanResponseDefaultTypeInternal _GetBanResponse_default_instance_;
class GetBansRequest;
class GetBansRequestDefaultTypeInternal;
extern GetBansRequestDefaultTypeInternal _GetBansRequest_default_instance_;
class GetBansResponse;
class GetBansResponseDefaultTypeInternal;
extern GetBansResponseDefaultTypeInternal _GetBansResponse_default_instance_;
class GetClubActivityRequest;
class GetClubActivityRequestDefaultTypeInternal;
extern GetClubActivityRequestDefaultTypeInternal _GetClubActivityRequest_default_instance_;
class GetClubActivityResponse;
class GetClubActivityResponseDefaultTypeInternal;
extern GetClubActivityResponseDefaultTypeInternal _GetClubActivityResponse_default_instance_;
class GetClubTypeRequest;
class GetClubTypeRequestDefaultTypeInternal;
extern GetClubTypeRequestDefaultTypeInternal _GetClubTypeRequest_default_instance_;
class GetClubTypeResponse;
class GetClubTypeResponseDefaultTypeInternal;
extern GetClubTypeResponseDefaultTypeInternal _GetClubTypeResponse_default_instance_;
class GetDescriptionRequest;
class GetDescriptionRequestDefaultTypeInternal;
extern GetDescriptionRequestDefaultTypeInternal _GetDescriptionRequest_default_instance_;
class GetDescriptionResponse;
class GetDescriptionResponseDefaultTypeInternal;
extern GetDescriptionResponseDefaultTypeInternal _GetDescriptionResponse_default_instance_;
class GetInvitationRequest;
class GetInvitationRequestDefaultTypeInternal;
extern GetInvitationRequestDefaultTypeInternal _GetInvitationRequest_default_instance_;
class GetInvitationResponse;
class GetInvitationResponseDefaultTypeInternal;
extern GetInvitationResponseDefaultTypeInternal _GetInvitationResponse_default_instance_;
class GetInvitationsRequest;
class GetInvitationsRequestDefaultTypeInternal;
extern GetInvitationsRequestDefaultTypeInternal _GetInvitationsRequest_default_instance_;
class GetInvitationsResponse;
class GetInvitationsResponseDefaultTypeInternal;
extern GetInvitationsResponseDefaultTypeInternal _GetInvitationsResponse_default_instance_;
class GetMemberRequest;
class GetMemberRequestDefaultTypeInternal;
extern GetMemberRequestDefaultTypeInternal _GetMemberRequest_default_instance_;
class GetMemberResponse;
class GetMemberResponseDefaultTypeInternal;
extern GetMemberResponseDefaultTypeInternal _GetMemberResponse_default_instance_;
class GetMembersRequest;
class GetMembersRequestDefaultTypeInternal;
extern GetMembersRequestDefaultTypeInternal _GetMembersRequest_default_instance_;
class GetMembersResponse;
class GetMembersResponseDefaultTypeInternal;
extern GetMembersResponseDefaultTypeInternal _GetMembersResponse_default_instance_;
class GetStreamHistoryRequest;
class GetStreamHistoryRequestDefaultTypeInternal;
extern GetStreamHistoryRequestDefaultTypeInternal _GetStreamHistoryRequest_default_instance_;
class GetStreamHistoryResponse;
class GetStreamHistoryResponseDefaultTypeInternal;
extern GetStreamHistoryResponseDefaultTypeInternal _GetStreamHistoryResponse_default_instance_;
class GetStreamMessageRequest;
class GetStreamMessageRequestDefaultTypeInternal;
extern GetStreamMessageRequestDefaultTypeInternal _GetStreamMessageRequest_default_instance_;
class GetStreamMessageResponse;
class GetStreamMessageResponseDefaultTypeInternal;
extern GetStreamMessageResponseDefaultTypeInternal _GetStreamMessageResponse_default_instance_;
class GetStreamRequest;
class GetStreamRequestDefaultTypeInternal;
extern GetStreamRequestDefaultTypeInternal _GetStreamRequest_default_instance_;
class GetStreamResponse;
class GetStreamResponseDefaultTypeInternal;
extern GetStreamResponseDefaultTypeInternal _GetStreamResponse_default_instance_;
class GetStreamVoiceTokenRequest;
class GetStreamVoiceTokenRequestDefaultTypeInternal;
extern GetStreamVoiceTokenRequestDefaultTypeInternal _GetStreamVoiceTokenRequest_default_instance_;
class GetStreamVoiceTokenResponse;
class GetStreamVoiceTokenResponseDefaultTypeInternal;
extern GetStreamVoiceTokenResponseDefaultTypeInternal _GetStreamVoiceTokenResponse_default_instance_;
class GetStreamsRequest;
class GetStreamsRequestDefaultTypeInternal;
extern GetStreamsRequestDefaultTypeInternal _GetStreamsRequest_default_instance_;
class GetStreamsResponse;
class GetStreamsResponseDefaultTypeInternal;
extern GetStreamsResponseDefaultTypeInternal _GetStreamsResponse_default_instance_;
class GetSuggestionRequest;
class GetSuggestionRequestDefaultTypeInternal;
extern GetSuggestionRequestDefaultTypeInternal _GetSuggestionRequest_default_instance_;
class GetSuggestionResponse;
class GetSuggestionResponseDefaultTypeInternal;
extern GetSuggestionResponseDefaultTypeInternal _GetSuggestionResponse_default_instance_;
class GetSuggestionsRequest;
class GetSuggestionsRequestDefaultTypeInternal;
extern GetSuggestionsRequestDefaultTypeInternal _GetSuggestionsRequest_default_instance_;
class GetSuggestionsResponse;
class GetSuggestionsResponseDefaultTypeInternal;
extern GetSuggestionsResponseDefaultTypeInternal _GetSuggestionsResponse_default_instance_;
class GetTicketRequest;
class GetTicketRequestDefaultTypeInternal;
extern GetTicketRequestDefaultTypeInternal _GetTicketRequest_default_instance_;
class GetTicketResponse;
class GetTicketResponseDefaultTypeInternal;
extern GetTicketResponseDefaultTypeInternal _GetTicketResponse_default_instance_;
class GetTicketsRequest;
class GetTicketsRequestDefaultTypeInternal;
extern GetTicketsRequestDefaultTypeInternal _GetTicketsRequest_default_instance_;
class GetTicketsResponse;
class GetTicketsResponseDefaultTypeInternal;
extern GetTicketsResponseDefaultTypeInternal _GetTicketsResponse_default_instance_;
class JoinRequest;
class JoinRequestDefaultTypeInternal;
extern JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
class KickFromStreamVoiceRequest;
class KickFromStreamVoiceRequestDefaultTypeInternal;
extern KickFromStreamVoiceRequestDefaultTypeInternal _KickFromStreamVoiceRequest_default_instance_;
class KickRequest;
class KickRequestDefaultTypeInternal;
extern KickRequestDefaultTypeInternal _KickRequest_default_instance_;
class LeaveRequest;
class LeaveRequestDefaultTypeInternal;
extern LeaveRequestDefaultTypeInternal _LeaveRequest_default_instance_;
class RedeemTicketRequest;
class RedeemTicketRequestDefaultTypeInternal;
extern RedeemTicketRequestDefaultTypeInternal _RedeemTicketRequest_default_instance_;
class RemoveBanRequest;
class RemoveBanRequestDefaultTypeInternal;
extern RemoveBanRequestDefaultTypeInternal _RemoveBanRequest_default_instance_;
class RevokeInvitationRequest;
class RevokeInvitationRequestDefaultTypeInternal;
extern RevokeInvitationRequestDefaultTypeInternal _RevokeInvitationRequest_default_instance_;
class SendInvitationRequest;
class SendInvitationRequestDefaultTypeInternal;
extern SendInvitationRequestDefaultTypeInternal _SendInvitationRequest_default_instance_;
class SendSuggestionRequest;
class SendSuggestionRequestDefaultTypeInternal;
extern SendSuggestionRequestDefaultTypeInternal _SendSuggestionRequest_default_instance_;
class SetMessagePinnedRequest;
class SetMessagePinnedRequestDefaultTypeInternal;
extern SetMessagePinnedRequestDefaultTypeInternal _SetMessagePinnedRequest_default_instance_;
class SetStreamFocusRequest;
class SetStreamFocusRequestDefaultTypeInternal;
extern SetStreamFocusRequestDefaultTypeInternal _SetStreamFocusRequest_default_instance_;
class SetTypingIndicatorRequest;
class SetTypingIndicatorRequestDefaultTypeInternal;
extern SetTypingIndicatorRequestDefaultTypeInternal _SetTypingIndicatorRequest_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class SubscribeStreamRequest;
class SubscribeStreamRequestDefaultTypeInternal;
extern SubscribeStreamRequestDefaultTypeInternal _SubscribeStreamRequest_default_instance_;
class UnassignRoleRequest;
class UnassignRoleRequestDefaultTypeInternal;
extern UnassignRoleRequestDefaultTypeInternal _UnassignRoleRequest_default_instance_;
class UnsubscribeRequest;
class UnsubscribeRequestDefaultTypeInternal;
extern UnsubscribeRequestDefaultTypeInternal _UnsubscribeRequest_default_instance_;
class UnsubscribeStreamRequest;
class UnsubscribeStreamRequestDefaultTypeInternal;
extern UnsubscribeStreamRequestDefaultTypeInternal _UnsubscribeStreamRequest_default_instance_;
class UpdateClubSettingsRequest;
class UpdateClubSettingsRequestDefaultTypeInternal;
extern UpdateClubSettingsRequestDefaultTypeInternal _UpdateClubSettingsRequest_default_instance_;
class UpdateClubStateRequest;
class UpdateClubStateRequestDefaultTypeInternal;
extern UpdateClubStateRequestDefaultTypeInternal _UpdateClubStateRequest_default_instance_;
class UpdateMemberStateRequest;
class UpdateMemberStateRequestDefaultTypeInternal;
extern UpdateMemberStateRequestDefaultTypeInternal _UpdateMemberStateRequest_default_instance_;
class UpdateStreamStateRequest;
class UpdateStreamStateRequestDefaultTypeInternal;
extern UpdateStreamStateRequestDefaultTypeInternal _UpdateStreamStateRequest_default_instance_;
class UpdateSubscriberStateRequest;
class UpdateSubscriberStateRequestDefaultTypeInternal;
extern UpdateSubscriberStateRequestDefaultTypeInternal _UpdateSubscriberStateRequest_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::AcceptInvitationRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AcceptInvitationRequest>(Arena*);
template<> ::bgs::protocol::club::v1::AcceptSuggestionRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AcceptSuggestionRequest>(Arena*);
template<> ::bgs::protocol::club::v1::AddBanRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AddBanRequest>(Arena*);
template<> ::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AdvanceActivityViewTimeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AdvanceStreamMentionViewTimeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::AssignRoleRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::AssignRoleRequest>(Arena*);
template<> ::bgs::protocol::club::v1::CreateMessageRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateMessageRequest>(Arena*);
template<> ::bgs::protocol::club::v1::CreateMessageResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateMessageResponse>(Arena*);
template<> ::bgs::protocol::club::v1::CreateRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateRequest>(Arena*);
template<> ::bgs::protocol::club::v1::CreateResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateResponse>(Arena*);
template<> ::bgs::protocol::club::v1::CreateStreamRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateStreamRequest>(Arena*);
template<> ::bgs::protocol::club::v1::CreateStreamResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateStreamResponse>(Arena*);
template<> ::bgs::protocol::club::v1::CreateTicketRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateTicketRequest>(Arena*);
template<> ::bgs::protocol::club::v1::CreateTicketResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateTicketResponse>(Arena*);
template<> ::bgs::protocol::club::v1::DeclineInvitationRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::DeclineInvitationRequest>(Arena*);
template<> ::bgs::protocol::club::v1::DeclineSuggestionRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::DeclineSuggestionRequest>(Arena*);
template<> ::bgs::protocol::club::v1::DestroyMessageRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::DestroyMessageRequest>(Arena*);
template<> ::bgs::protocol::club::v1::DestroyMessageResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::DestroyMessageResponse>(Arena*);
template<> ::bgs::protocol::club::v1::DestroyRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::DestroyRequest>(Arena*);
template<> ::bgs::protocol::club::v1::DestroyStreamRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::DestroyStreamRequest>(Arena*);
template<> ::bgs::protocol::club::v1::DestroyTicketRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::DestroyTicketRequest>(Arena*);
template<> ::bgs::protocol::club::v1::EditMessageRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::EditMessageRequest>(Arena*);
template<> ::bgs::protocol::club::v1::EditMessageResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::EditMessageResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetBanRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetBanRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetBanResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetBanResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetBansRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetBansRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetBansResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetBansResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetClubActivityRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetClubActivityRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetClubActivityResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetClubActivityResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetClubTypeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetClubTypeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetClubTypeResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetClubTypeResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetDescriptionRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetDescriptionRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetDescriptionResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetDescriptionResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetInvitationRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetInvitationRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetInvitationResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetInvitationResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetInvitationsRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetInvitationsRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetInvitationsResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetInvitationsResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetMemberRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetMemberRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetMemberResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetMemberResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetMembersRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetMembersRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetMembersResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetMembersResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamHistoryRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamHistoryRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamHistoryResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamHistoryResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamMessageRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamMessageRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamMessageResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamMessageResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamVoiceTokenRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamVoiceTokenRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamVoiceTokenResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamsRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamsRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetStreamsResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetStreamsResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetSuggestionRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetSuggestionRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetSuggestionResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetSuggestionResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetSuggestionsRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetSuggestionsRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetSuggestionsResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetSuggestionsResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetTicketRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetTicketRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetTicketResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetTicketResponse>(Arena*);
template<> ::bgs::protocol::club::v1::GetTicketsRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetTicketsRequest>(Arena*);
template<> ::bgs::protocol::club::v1::GetTicketsResponse* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::GetTicketsResponse>(Arena*);
template<> ::bgs::protocol::club::v1::JoinRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::JoinRequest>(Arena*);
template<> ::bgs::protocol::club::v1::KickFromStreamVoiceRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::KickFromStreamVoiceRequest>(Arena*);
template<> ::bgs::protocol::club::v1::KickRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::KickRequest>(Arena*);
template<> ::bgs::protocol::club::v1::LeaveRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::LeaveRequest>(Arena*);
template<> ::bgs::protocol::club::v1::RedeemTicketRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::RedeemTicketRequest>(Arena*);
template<> ::bgs::protocol::club::v1::RemoveBanRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::RemoveBanRequest>(Arena*);
template<> ::bgs::protocol::club::v1::RevokeInvitationRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::RevokeInvitationRequest>(Arena*);
template<> ::bgs::protocol::club::v1::SendInvitationRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SendInvitationRequest>(Arena*);
template<> ::bgs::protocol::club::v1::SendSuggestionRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SendSuggestionRequest>(Arena*);
template<> ::bgs::protocol::club::v1::SetMessagePinnedRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SetMessagePinnedRequest>(Arena*);
template<> ::bgs::protocol::club::v1::SetStreamFocusRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SetStreamFocusRequest>(Arena*);
template<> ::bgs::protocol::club::v1::SetTypingIndicatorRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SetTypingIndicatorRequest>(Arena*);
template<> ::bgs::protocol::club::v1::SubscribeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SubscribeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::SubscribeStreamRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::SubscribeStreamRequest>(Arena*);
template<> ::bgs::protocol::club::v1::UnassignRoleRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UnassignRoleRequest>(Arena*);
template<> ::bgs::protocol::club::v1::UnsubscribeRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UnsubscribeRequest>(Arena*);
template<> ::bgs::protocol::club::v1::UnsubscribeStreamRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UnsubscribeStreamRequest>(Arena*);
template<> ::bgs::protocol::club::v1::UpdateClubSettingsRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UpdateClubSettingsRequest>(Arena*);
template<> ::bgs::protocol::club::v1::UpdateClubStateRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UpdateClubStateRequest>(Arena*);
template<> ::bgs::protocol::club::v1::UpdateMemberStateRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UpdateMemberStateRequest>(Arena*);
template<> ::bgs::protocol::club::v1::UpdateStreamStateRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UpdateStreamStateRequest>(Arena*);
template<> ::bgs::protocol::club::v1::UpdateSubscriberStateRequest* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::UpdateSubscriberStateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class SubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SubscribeRequest) */ {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return CreateMaybeMessage<SubscribeRequest>(nullptr);
  }

  SubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SubscribeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UnsubscribeRequest) */ {
 public:
  UnsubscribeRequest();
  virtual ~UnsubscribeRequest();

  UnsubscribeRequest(const UnsubscribeRequest& from);
  UnsubscribeRequest(UnsubscribeRequest&& from) noexcept
    : UnsubscribeRequest() {
    *this = ::std::move(from);
  }

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeRequest& operator=(UnsubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeRequest*>(
               &_UnsubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnsubscribeRequest& a, UnsubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeRequest* New() const final {
    return CreateMaybeMessage<UnsubscribeRequest>(nullptr);
  }

  UnsubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeRequest& from);
  void MergeFrom(const UnsubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UnsubscribeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UnsubscribeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateRequest) */ {
 public:
  CreateRequest();
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const final {
    return CreateMaybeMessage<CreateRequest>(nullptr);
  }

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubCreateOptions options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::ClubCreateOptions& options() const;
  ::bgs::protocol::club::v1::ClubCreateOptions* release_options();
  ::bgs::protocol::club::v1::ClubCreateOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::ClubCreateOptions* options);
  private:
  const ::bgs::protocol::club::v1::ClubCreateOptions& _internal_options() const;
  ::bgs::protocol::club::v1::ClubCreateOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubCreateOptions* options_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateResponse) */ {
 public:
  CreateResponse();
  virtual ~CreateResponse();

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResponse* New() const final {
    return CreateMaybeMessage<CreateResponse>(nullptr);
  }

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateResponse& from);
  void MergeFrom(const CreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClubIdFieldNumber = 1,
  };
  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class DestroyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.DestroyRequest) */ {
 public:
  DestroyRequest();
  virtual ~DestroyRequest();

  DestroyRequest(const DestroyRequest& from);
  DestroyRequest(DestroyRequest&& from) noexcept
    : DestroyRequest() {
    *this = ::std::move(from);
  }

  inline DestroyRequest& operator=(const DestroyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyRequest& operator=(DestroyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyRequest*>(
               &_DestroyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DestroyRequest& a, DestroyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroyRequest* New() const final {
    return CreateMaybeMessage<DestroyRequest>(nullptr);
  }

  DestroyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroyRequest& from);
  void MergeFrom(const DestroyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.DestroyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.DestroyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetDescriptionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetDescriptionRequest) */ {
 public:
  GetDescriptionRequest();
  virtual ~GetDescriptionRequest();

  GetDescriptionRequest(const GetDescriptionRequest& from);
  GetDescriptionRequest(GetDescriptionRequest&& from) noexcept
    : GetDescriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetDescriptionRequest& operator=(const GetDescriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDescriptionRequest& operator=(GetDescriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDescriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDescriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetDescriptionRequest*>(
               &_GetDescriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetDescriptionRequest& a, GetDescriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDescriptionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDescriptionRequest* New() const final {
    return CreateMaybeMessage<GetDescriptionRequest>(nullptr);
  }

  GetDescriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDescriptionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDescriptionRequest& from);
  void MergeFrom(const GetDescriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDescriptionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetDescriptionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetDescriptionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetDescriptionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetDescriptionResponse) */ {
 public:
  GetDescriptionResponse();
  virtual ~GetDescriptionResponse();

  GetDescriptionResponse(const GetDescriptionResponse& from);
  GetDescriptionResponse(GetDescriptionResponse&& from) noexcept
    : GetDescriptionResponse() {
    *this = ::std::move(from);
  }

  inline GetDescriptionResponse& operator=(const GetDescriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDescriptionResponse& operator=(GetDescriptionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDescriptionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDescriptionResponse* internal_default_instance() {
    return reinterpret_cast<const GetDescriptionResponse*>(
               &_GetDescriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDescriptionResponse& a, GetDescriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDescriptionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDescriptionResponse* New() const final {
    return CreateMaybeMessage<GetDescriptionResponse>(nullptr);
  }

  GetDescriptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDescriptionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDescriptionResponse& from);
  void MergeFrom(const GetDescriptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDescriptionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetDescriptionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClubFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubDescription club = 1;
  bool has_club() const;
  private:
  bool _internal_has_club() const;
  public:
  void clear_club();
  const ::bgs::protocol::club::v1::ClubDescription& club() const;
  ::bgs::protocol::club::v1::ClubDescription* release_club();
  ::bgs::protocol::club::v1::ClubDescription* mutable_club();
  void set_allocated_club(::bgs::protocol::club::v1::ClubDescription* club);
  private:
  const ::bgs::protocol::club::v1::ClubDescription& _internal_club() const;
  ::bgs::protocol::club::v1::ClubDescription* _internal_mutable_club();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetDescriptionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubDescription* club_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetClubTypeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetClubTypeRequest) */ {
 public:
  GetClubTypeRequest();
  virtual ~GetClubTypeRequest();

  GetClubTypeRequest(const GetClubTypeRequest& from);
  GetClubTypeRequest(GetClubTypeRequest&& from) noexcept
    : GetClubTypeRequest() {
    *this = ::std::move(from);
  }

  inline GetClubTypeRequest& operator=(const GetClubTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClubTypeRequest& operator=(GetClubTypeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetClubTypeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClubTypeRequest* internal_default_instance() {
    return reinterpret_cast<const GetClubTypeRequest*>(
               &_GetClubTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetClubTypeRequest& a, GetClubTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClubTypeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetClubTypeRequest* New() const final {
    return CreateMaybeMessage<GetClubTypeRequest>(nullptr);
  }

  GetClubTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetClubTypeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetClubTypeRequest& from);
  void MergeFrom(const GetClubTypeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClubTypeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetClubTypeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  ::bgs::protocol::club::v1::UniqueClubType* release_type();
  ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);
  private:
  const ::bgs::protocol::club::v1::UniqueClubType& _internal_type() const;
  ::bgs::protocol::club::v1::UniqueClubType* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetClubTypeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetClubTypeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetClubTypeResponse) */ {
 public:
  GetClubTypeResponse();
  virtual ~GetClubTypeResponse();

  GetClubTypeResponse(const GetClubTypeResponse& from);
  GetClubTypeResponse(GetClubTypeResponse&& from) noexcept
    : GetClubTypeResponse() {
    *this = ::std::move(from);
  }

  inline GetClubTypeResponse& operator=(const GetClubTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClubTypeResponse& operator=(GetClubTypeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetClubTypeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClubTypeResponse* internal_default_instance() {
    return reinterpret_cast<const GetClubTypeResponse*>(
               &_GetClubTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetClubTypeResponse& a, GetClubTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClubTypeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetClubTypeResponse* New() const final {
    return CreateMaybeMessage<GetClubTypeResponse>(nullptr);
  }

  GetClubTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetClubTypeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetClubTypeResponse& from);
  void MergeFrom(const GetClubTypeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClubTypeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetClubTypeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRoleSetFieldNumber = 2,
    kRangeSetFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  ::bgs::protocol::club::v1::UniqueClubType* release_type();
  ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);
  private:
  const ::bgs::protocol::club::v1::UniqueClubType& _internal_type() const;
  ::bgs::protocol::club::v1::UniqueClubType* _internal_mutable_type();
  public:

  // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 2;
  bool has_role_set() const;
  private:
  bool _internal_has_role_set() const;
  public:
  void clear_role_set();
  const ::bgs::protocol::club::v1::ClubRoleSet& role_set() const;
  ::bgs::protocol::club::v1::ClubRoleSet* release_role_set();
  ::bgs::protocol::club::v1::ClubRoleSet* mutable_role_set();
  void set_allocated_role_set(::bgs::protocol::club::v1::ClubRoleSet* role_set);
  private:
  const ::bgs::protocol::club::v1::ClubRoleSet& _internal_role_set() const;
  ::bgs::protocol::club::v1::ClubRoleSet* _internal_mutable_role_set();
  public:

  // optional .bgs.protocol.club.v1.ClubTypeRangeSet range_set = 3;
  bool has_range_set() const;
  private:
  bool _internal_has_range_set() const;
  public:
  void clear_range_set();
  const ::bgs::protocol::club::v1::ClubTypeRangeSet& range_set() const;
  ::bgs::protocol::club::v1::ClubTypeRangeSet* release_range_set();
  ::bgs::protocol::club::v1::ClubTypeRangeSet* mutable_range_set();
  void set_allocated_range_set(::bgs::protocol::club::v1::ClubTypeRangeSet* range_set);
  private:
  const ::bgs::protocol::club::v1::ClubTypeRangeSet& _internal_range_set() const;
  ::bgs::protocol::club::v1::ClubTypeRangeSet* _internal_mutable_range_set();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetClubTypeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  ::bgs::protocol::club::v1::ClubRoleSet* role_set_;
  ::bgs::protocol::club::v1::ClubTypeRangeSet* range_set_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateClubStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UpdateClubStateRequest) */ {
 public:
  UpdateClubStateRequest();
  virtual ~UpdateClubStateRequest();

  UpdateClubStateRequest(const UpdateClubStateRequest& from);
  UpdateClubStateRequest(UpdateClubStateRequest&& from) noexcept
    : UpdateClubStateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateClubStateRequest& operator=(const UpdateClubStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateClubStateRequest& operator=(UpdateClubStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateClubStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateClubStateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateClubStateRequest*>(
               &_UpdateClubStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateClubStateRequest& a, UpdateClubStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateClubStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateClubStateRequest* New() const final {
    return CreateMaybeMessage<UpdateClubStateRequest>(nullptr);
  }

  UpdateClubStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateClubStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateClubStateRequest& from);
  void MergeFrom(const UpdateClubStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateClubStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UpdateClubStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubStateOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::ClubStateOptions& options() const;
  ::bgs::protocol::club::v1::ClubStateOptions* release_options();
  ::bgs::protocol::club::v1::ClubStateOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::ClubStateOptions* options);
  private:
  const ::bgs::protocol::club::v1::ClubStateOptions& _internal_options() const;
  ::bgs::protocol::club::v1::ClubStateOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UpdateClubStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubStateOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateClubSettingsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UpdateClubSettingsRequest) */ {
 public:
  UpdateClubSettingsRequest();
  virtual ~UpdateClubSettingsRequest();

  UpdateClubSettingsRequest(const UpdateClubSettingsRequest& from);
  UpdateClubSettingsRequest(UpdateClubSettingsRequest&& from) noexcept
    : UpdateClubSettingsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateClubSettingsRequest& operator=(const UpdateClubSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateClubSettingsRequest& operator=(UpdateClubSettingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateClubSettingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateClubSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateClubSettingsRequest*>(
               &_UpdateClubSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateClubSettingsRequest& a, UpdateClubSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateClubSettingsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateClubSettingsRequest* New() const final {
    return CreateMaybeMessage<UpdateClubSettingsRequest>(nullptr);
  }

  UpdateClubSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateClubSettingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateClubSettingsRequest& from);
  void MergeFrom(const UpdateClubSettingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateClubSettingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UpdateClubSettingsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.ClubSettingsOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::ClubSettingsOptions& options() const;
  ::bgs::protocol::club::v1::ClubSettingsOptions* release_options();
  ::bgs::protocol::club::v1::ClubSettingsOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::ClubSettingsOptions* options);
  private:
  const ::bgs::protocol::club::v1::ClubSettingsOptions& _internal_options() const;
  ::bgs::protocol::club::v1::ClubSettingsOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UpdateClubSettingsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::ClubSettingsOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class JoinRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.JoinRequest) */ {
 public:
  JoinRequest();
  virtual ~JoinRequest();

  JoinRequest(const JoinRequest& from);
  JoinRequest(JoinRequest&& from) noexcept
    : JoinRequest() {
    *this = ::std::move(from);
  }

  inline JoinRequest& operator=(const JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRequest& operator=(JoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRequest*>(
               &_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(JoinRequest& a, JoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinRequest* New() const final {
    return CreateMaybeMessage<JoinRequest>(nullptr);
  }

  JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRequest& from);
  void MergeFrom(const JoinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.JoinRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.CreateMemberOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::CreateMemberOptions& options() const;
  ::bgs::protocol::club::v1::CreateMemberOptions* release_options();
  ::bgs::protocol::club::v1::CreateMemberOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::CreateMemberOptions* options);
  private:
  const ::bgs::protocol::club::v1::CreateMemberOptions& _internal_options() const;
  ::bgs::protocol::club::v1::CreateMemberOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.JoinRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::CreateMemberOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class LeaveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.LeaveRequest) */ {
 public:
  LeaveRequest();
  virtual ~LeaveRequest();

  LeaveRequest(const LeaveRequest& from);
  LeaveRequest(LeaveRequest&& from) noexcept
    : LeaveRequest() {
    *this = ::std::move(from);
  }

  inline LeaveRequest& operator=(const LeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveRequest& operator=(LeaveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveRequest*>(
               &_LeaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LeaveRequest& a, LeaveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveRequest* New() const final {
    return CreateMaybeMessage<LeaveRequest>(nullptr);
  }

  LeaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveRequest& from);
  void MergeFrom(const LeaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.LeaveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.LeaveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class KickRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.KickRequest) */ {
 public:
  KickRequest();
  virtual ~KickRequest();

  KickRequest(const KickRequest& from);
  KickRequest(KickRequest&& from) noexcept
    : KickRequest() {
    *this = ::std::move(from);
  }

  inline KickRequest& operator=(const KickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickRequest& operator=(KickRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickRequest* internal_default_instance() {
    return reinterpret_cast<const KickRequest*>(
               &_KickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(KickRequest& a, KickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KickRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickRequest* New() const final {
    return CreateMaybeMessage<KickRequest>(nullptr);
  }

  KickRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickRequest& from);
  void MergeFrom(const KickRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.KickRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kTargetIdFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId target_id = 3;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::club::v1::MemberId& target_id() const;
  ::bgs::protocol::club::v1::MemberId* release_target_id();
  ::bgs::protocol::club::v1::MemberId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_target_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_target_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.KickRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::MemberId* target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetMemberRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetMemberRequest) */ {
 public:
  GetMemberRequest();
  virtual ~GetMemberRequest();

  GetMemberRequest(const GetMemberRequest& from);
  GetMemberRequest(GetMemberRequest&& from) noexcept
    : GetMemberRequest() {
    *this = ::std::move(from);
  }

  inline GetMemberRequest& operator=(const GetMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMemberRequest& operator=(GetMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMemberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemberRequest* internal_default_instance() {
    return reinterpret_cast<const GetMemberRequest*>(
               &_GetMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetMemberRequest& a, GetMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMemberRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMemberRequest* New() const final {
    return CreateMaybeMessage<GetMemberRequest>(nullptr);
  }

  GetMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMemberRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMemberRequest& from);
  void MergeFrom(const GetMemberRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMemberRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetMemberRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMemberIdFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId member_id = 3;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetMemberRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetMemberResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetMemberResponse) */ {
 public:
  GetMemberResponse();
  virtual ~GetMemberResponse();

  GetMemberResponse(const GetMemberResponse& from);
  GetMemberResponse(GetMemberResponse&& from) noexcept
    : GetMemberResponse() {
    *this = ::std::move(from);
  }

  inline GetMemberResponse& operator=(const GetMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMemberResponse& operator=(GetMemberResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMemberResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemberResponse* internal_default_instance() {
    return reinterpret_cast<const GetMemberResponse*>(
               &_GetMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetMemberResponse& a, GetMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMemberResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMemberResponse* New() const final {
    return CreateMaybeMessage<GetMemberResponse>(nullptr);
  }

  GetMemberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMemberResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMemberResponse& from);
  void MergeFrom(const GetMemberResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMemberResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetMemberResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.Member member = 1;
  bool has_member() const;
  private:
  bool _internal_has_member() const;
  public:
  void clear_member();
  const ::bgs::protocol::club::v1::Member& member() const;
  ::bgs::protocol::club::v1::Member* release_member();
  ::bgs::protocol::club::v1::Member* mutable_member();
  void set_allocated_member(::bgs::protocol::club::v1::Member* member);
  private:
  const ::bgs::protocol::club::v1::Member& _internal_member() const;
  ::bgs::protocol::club::v1::Member* _internal_mutable_member();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetMemberResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::Member* member_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetMembersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetMembersRequest) */ {
 public:
  GetMembersRequest();
  virtual ~GetMembersRequest();

  GetMembersRequest(const GetMembersRequest& from);
  GetMembersRequest(GetMembersRequest&& from) noexcept
    : GetMembersRequest() {
    *this = ::std::move(from);
  }

  inline GetMembersRequest& operator=(const GetMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMembersRequest& operator=(GetMembersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMembersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMembersRequest* internal_default_instance() {
    return reinterpret_cast<const GetMembersRequest*>(
               &_GetMembersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetMembersRequest& a, GetMembersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMembersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMembersRequest* New() const final {
    return CreateMaybeMessage<GetMembersRequest>(nullptr);
  }

  GetMembersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMembersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMembersRequest& from);
  void MergeFrom(const GetMembersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMembersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetMembersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kContinuationFieldNumber = 4,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 continuation = 4;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetMembersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetMembersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetMembersResponse) */ {
 public:
  GetMembersResponse();
  virtual ~GetMembersResponse();

  GetMembersResponse(const GetMembersResponse& from);
  GetMembersResponse(GetMembersResponse&& from) noexcept
    : GetMembersResponse() {
    *this = ::std::move(from);
  }

  inline GetMembersResponse& operator=(const GetMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMembersResponse& operator=(GetMembersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMembersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMembersResponse* internal_default_instance() {
    return reinterpret_cast<const GetMembersResponse*>(
               &_GetMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetMembersResponse& a, GetMembersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMembersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMembersResponse* New() const final {
    return CreateMaybeMessage<GetMembersResponse>(nullptr);
  }

  GetMembersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMembersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMembersResponse& from);
  void MergeFrom(const GetMembersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMembersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetMembersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 1,
    kContinuationFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.Member member = 1;
  int member_size() const;
  private:
  int _internal_member_size() const;
  public:
  void clear_member();
  ::bgs::protocol::club::v1::Member* mutable_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member >*
      mutable_member();
  private:
  const ::bgs::protocol::club::v1::Member& _internal_member(int index) const;
  ::bgs::protocol::club::v1::Member* _internal_add_member();
  public:
  const ::bgs::protocol::club::v1::Member& member(int index) const;
  ::bgs::protocol::club::v1::Member* add_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member >&
      member() const;

  // optional uint64 continuation = 2;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetMembersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member > member_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateMemberStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UpdateMemberStateRequest) */ {
 public:
  UpdateMemberStateRequest();
  virtual ~UpdateMemberStateRequest();

  UpdateMemberStateRequest(const UpdateMemberStateRequest& from);
  UpdateMemberStateRequest(UpdateMemberStateRequest&& from) noexcept
    : UpdateMemberStateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMemberStateRequest& operator=(const UpdateMemberStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMemberStateRequest& operator=(UpdateMemberStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMemberStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMemberStateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMemberStateRequest*>(
               &_UpdateMemberStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateMemberStateRequest& a, UpdateMemberStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMemberStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMemberStateRequest* New() const final {
    return CreateMaybeMessage<UpdateMemberStateRequest>(nullptr);
  }

  UpdateMemberStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMemberStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMemberStateRequest& from);
  void MergeFrom(const UpdateMemberStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMemberStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UpdateMemberStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMemberIdFieldNumber = 3,
    kOptionsFieldNumber = 5,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId member_id = 3;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional .bgs.protocol.club.v1.MemberStateOptions options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::MemberStateOptions& options() const;
  ::bgs::protocol::club::v1::MemberStateOptions* release_options();
  ::bgs::protocol::club::v1::MemberStateOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::MemberStateOptions* options);
  private:
  const ::bgs::protocol::club::v1::MemberStateOptions& _internal_options() const;
  ::bgs::protocol::club::v1::MemberStateOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UpdateMemberStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  ::bgs::protocol::club::v1::MemberStateOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateSubscriberStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UpdateSubscriberStateRequest) */ {
 public:
  UpdateSubscriberStateRequest();
  virtual ~UpdateSubscriberStateRequest();

  UpdateSubscriberStateRequest(const UpdateSubscriberStateRequest& from);
  UpdateSubscriberStateRequest(UpdateSubscriberStateRequest&& from) noexcept
    : UpdateSubscriberStateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSubscriberStateRequest& operator=(const UpdateSubscriberStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSubscriberStateRequest& operator=(UpdateSubscriberStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSubscriberStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSubscriberStateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSubscriberStateRequest*>(
               &_UpdateSubscriberStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateSubscriberStateRequest& a, UpdateSubscriberStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSubscriberStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSubscriberStateRequest* New() const final {
    return CreateMaybeMessage<UpdateSubscriberStateRequest>(nullptr);
  }

  UpdateSubscriberStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSubscriberStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSubscriberStateRequest& from);
  void MergeFrom(const UpdateSubscriberStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSubscriberStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UpdateSubscriberStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.SubscriberStateOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::SubscriberStateOptions& options() const;
  ::bgs::protocol::club::v1::SubscriberStateOptions* release_options();
  ::bgs::protocol::club::v1::SubscriberStateOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::SubscriberStateOptions* options);
  private:
  const ::bgs::protocol::club::v1::SubscriberStateOptions& _internal_options() const;
  ::bgs::protocol::club::v1::SubscriberStateOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UpdateSubscriberStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::SubscriberStateOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class AssignRoleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AssignRoleRequest) */ {
 public:
  AssignRoleRequest();
  virtual ~AssignRoleRequest();

  AssignRoleRequest(const AssignRoleRequest& from);
  AssignRoleRequest(AssignRoleRequest&& from) noexcept
    : AssignRoleRequest() {
    *this = ::std::move(from);
  }

  inline AssignRoleRequest& operator=(const AssignRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignRoleRequest& operator=(AssignRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssignRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignRoleRequest* internal_default_instance() {
    return reinterpret_cast<const AssignRoleRequest*>(
               &_AssignRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AssignRoleRequest& a, AssignRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignRoleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignRoleRequest* New() const final {
    return CreateMaybeMessage<AssignRoleRequest>(nullptr);
  }

  AssignRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssignRoleRequest& from);
  void MergeFrom(const AssignRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AssignRoleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.RoleOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::RoleOptions& options() const;
  ::bgs::protocol::club::v1::RoleOptions* release_options();
  ::bgs::protocol::club::v1::RoleOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::RoleOptions* options);
  private:
  const ::bgs::protocol::club::v1::RoleOptions& _internal_options() const;
  ::bgs::protocol::club::v1::RoleOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AssignRoleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::RoleOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class UnassignRoleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UnassignRoleRequest) */ {
 public:
  UnassignRoleRequest();
  virtual ~UnassignRoleRequest();

  UnassignRoleRequest(const UnassignRoleRequest& from);
  UnassignRoleRequest(UnassignRoleRequest&& from) noexcept
    : UnassignRoleRequest() {
    *this = ::std::move(from);
  }

  inline UnassignRoleRequest& operator=(const UnassignRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnassignRoleRequest& operator=(UnassignRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnassignRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnassignRoleRequest* internal_default_instance() {
    return reinterpret_cast<const UnassignRoleRequest*>(
               &_UnassignRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UnassignRoleRequest& a, UnassignRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnassignRoleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnassignRoleRequest* New() const final {
    return CreateMaybeMessage<UnassignRoleRequest>(nullptr);
  }

  UnassignRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnassignRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnassignRoleRequest& from);
  void MergeFrom(const UnassignRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnassignRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UnassignRoleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.RoleOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::RoleOptions& options() const;
  ::bgs::protocol::club::v1::RoleOptions* release_options();
  ::bgs::protocol::club::v1::RoleOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::RoleOptions* options);
  private:
  const ::bgs::protocol::club::v1::RoleOptions& _internal_options() const;
  ::bgs::protocol::club::v1::RoleOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UnassignRoleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::RoleOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class SendInvitationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SendInvitationRequest) */ {
 public:
  SendInvitationRequest();
  virtual ~SendInvitationRequest();

  SendInvitationRequest(const SendInvitationRequest& from);
  SendInvitationRequest(SendInvitationRequest&& from) noexcept
    : SendInvitationRequest() {
    *this = ::std::move(from);
  }

  inline SendInvitationRequest& operator=(const SendInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendInvitationRequest& operator=(SendInvitationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendInvitationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const SendInvitationRequest*>(
               &_SendInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SendInvitationRequest& a, SendInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendInvitationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendInvitationRequest* New() const final {
    return CreateMaybeMessage<SendInvitationRequest>(nullptr);
  }

  SendInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendInvitationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendInvitationRequest& from);
  void MergeFrom(const SendInvitationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SendInvitationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.SendInvitationOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::SendInvitationOptions& options() const;
  ::bgs::protocol::club::v1::SendInvitationOptions* release_options();
  ::bgs::protocol::club::v1::SendInvitationOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::SendInvitationOptions* options);
  private:
  const ::bgs::protocol::club::v1::SendInvitationOptions& _internal_options() const;
  ::bgs::protocol::club::v1::SendInvitationOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SendInvitationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::SendInvitationOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class AcceptInvitationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AcceptInvitationRequest) */ {
 public:
  AcceptInvitationRequest();
  virtual ~AcceptInvitationRequest();

  AcceptInvitationRequest(const AcceptInvitationRequest& from);
  AcceptInvitationRequest(AcceptInvitationRequest&& from) noexcept
    : AcceptInvitationRequest() {
    *this = ::std::move(from);
  }

  inline AcceptInvitationRequest& operator=(const AcceptInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptInvitationRequest& operator=(AcceptInvitationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptInvitationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptInvitationRequest*>(
               &_AcceptInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AcceptInvitationRequest& a, AcceptInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptInvitationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptInvitationRequest* New() const final {
    return CreateMaybeMessage<AcceptInvitationRequest>(nullptr);
  }

  AcceptInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptInvitationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptInvitationRequest& from);
  void MergeFrom(const AcceptInvitationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AcceptInvitationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kInvitationIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 invitation_id = 3;
  bool has_invitation_id() const;
  private:
  bool _internal_has_invitation_id() const;
  public:
  void clear_invitation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id() const;
  void set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invitation_id() const;
  void _internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AcceptInvitationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class DeclineInvitationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.DeclineInvitationRequest) */ {
 public:
  DeclineInvitationRequest();
  virtual ~DeclineInvitationRequest();

  DeclineInvitationRequest(const DeclineInvitationRequest& from);
  DeclineInvitationRequest(DeclineInvitationRequest&& from) noexcept
    : DeclineInvitationRequest() {
    *this = ::std::move(from);
  }

  inline DeclineInvitationRequest& operator=(const DeclineInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeclineInvitationRequest& operator=(DeclineInvitationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeclineInvitationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeclineInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const DeclineInvitationRequest*>(
               &_DeclineInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DeclineInvitationRequest& a, DeclineInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeclineInvitationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeclineInvitationRequest* New() const final {
    return CreateMaybeMessage<DeclineInvitationRequest>(nullptr);
  }

  DeclineInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeclineInvitationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeclineInvitationRequest& from);
  void MergeFrom(const DeclineInvitationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeclineInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.DeclineInvitationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kInvitationIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 invitation_id = 3;
  bool has_invitation_id() const;
  private:
  bool _internal_has_invitation_id() const;
  public:
  void clear_invitation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id() const;
  void set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invitation_id() const;
  void _internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.DeclineInvitationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class RevokeInvitationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.RevokeInvitationRequest) */ {
 public:
  RevokeInvitationRequest();
  virtual ~RevokeInvitationRequest();

  RevokeInvitationRequest(const RevokeInvitationRequest& from);
  RevokeInvitationRequest(RevokeInvitationRequest&& from) noexcept
    : RevokeInvitationRequest() {
    *this = ::std::move(from);
  }

  inline RevokeInvitationRequest& operator=(const RevokeInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeInvitationRequest& operator=(RevokeInvitationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RevokeInvitationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevokeInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const RevokeInvitationRequest*>(
               &_RevokeInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RevokeInvitationRequest& a, RevokeInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeInvitationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RevokeInvitationRequest* New() const final {
    return CreateMaybeMessage<RevokeInvitationRequest>(nullptr);
  }

  RevokeInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RevokeInvitationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RevokeInvitationRequest& from);
  void MergeFrom(const RevokeInvitationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.RevokeInvitationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kInvitationIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 invitation_id = 3;
  bool has_invitation_id() const;
  private:
  bool _internal_has_invitation_id() const;
  public:
  void clear_invitation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id() const;
  void set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invitation_id() const;
  void _internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.RevokeInvitationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetInvitationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetInvitationRequest) */ {
 public:
  GetInvitationRequest();
  virtual ~GetInvitationRequest();

  GetInvitationRequest(const GetInvitationRequest& from);
  GetInvitationRequest(GetInvitationRequest&& from) noexcept
    : GetInvitationRequest() {
    *this = ::std::move(from);
  }

  inline GetInvitationRequest& operator=(const GetInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvitationRequest& operator=(GetInvitationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInvitationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const GetInvitationRequest*>(
               &_GetInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetInvitationRequest& a, GetInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvitationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvitationRequest* New() const final {
    return CreateMaybeMessage<GetInvitationRequest>(nullptr);
  }

  GetInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvitationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInvitationRequest& from);
  void MergeFrom(const GetInvitationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetInvitationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kInvitationIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 invitation_id = 3;
  bool has_invitation_id() const;
  private:
  bool _internal_has_invitation_id() const;
  public:
  void clear_invitation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id() const;
  void set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invitation_id() const;
  void _internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetInvitationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invitation_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetInvitationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetInvitationResponse) */ {
 public:
  GetInvitationResponse();
  virtual ~GetInvitationResponse();

  GetInvitationResponse(const GetInvitationResponse& from);
  GetInvitationResponse(GetInvitationResponse&& from) noexcept
    : GetInvitationResponse() {
    *this = ::std::move(from);
  }

  inline GetInvitationResponse& operator=(const GetInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvitationResponse& operator=(GetInvitationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInvitationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInvitationResponse* internal_default_instance() {
    return reinterpret_cast<const GetInvitationResponse*>(
               &_GetInvitationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetInvitationResponse& a, GetInvitationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvitationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvitationResponse* New() const final {
    return CreateMaybeMessage<GetInvitationResponse>(nullptr);
  }

  GetInvitationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvitationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInvitationResponse& from);
  void MergeFrom(const GetInvitationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvitationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetInvitationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubInvitation invitation = 1;
  bool has_invitation() const;
  private:
  bool _internal_has_invitation() const;
  public:
  void clear_invitation();
  const ::bgs::protocol::club::v1::ClubInvitation& invitation() const;
  ::bgs::protocol::club::v1::ClubInvitation* release_invitation();
  ::bgs::protocol::club::v1::ClubInvitation* mutable_invitation();
  void set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitation* invitation);
  private:
  const ::bgs::protocol::club::v1::ClubInvitation& _internal_invitation() const;
  ::bgs::protocol::club::v1::ClubInvitation* _internal_mutable_invitation();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetInvitationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubInvitation* invitation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetInvitationsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetInvitationsRequest) */ {
 public:
  GetInvitationsRequest();
  virtual ~GetInvitationsRequest();

  GetInvitationsRequest(const GetInvitationsRequest& from);
  GetInvitationsRequest(GetInvitationsRequest&& from) noexcept
    : GetInvitationsRequest() {
    *this = ::std::move(from);
  }

  inline GetInvitationsRequest& operator=(const GetInvitationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvitationsRequest& operator=(GetInvitationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInvitationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInvitationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetInvitationsRequest*>(
               &_GetInvitationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetInvitationsRequest& a, GetInvitationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvitationsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvitationsRequest* New() const final {
    return CreateMaybeMessage<GetInvitationsRequest>(nullptr);
  }

  GetInvitationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvitationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInvitationsRequest& from);
  void MergeFrom(const GetInvitationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvitationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetInvitationsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kContinuationFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 continuation = 3;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetInvitationsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetInvitationsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetInvitationsResponse) */ {
 public:
  GetInvitationsResponse();
  virtual ~GetInvitationsResponse();

  GetInvitationsResponse(const GetInvitationsResponse& from);
  GetInvitationsResponse(GetInvitationsResponse&& from) noexcept
    : GetInvitationsResponse() {
    *this = ::std::move(from);
  }

  inline GetInvitationsResponse& operator=(const GetInvitationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvitationsResponse& operator=(GetInvitationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInvitationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInvitationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetInvitationsResponse*>(
               &_GetInvitationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetInvitationsResponse& a, GetInvitationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvitationsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvitationsResponse* New() const final {
    return CreateMaybeMessage<GetInvitationsResponse>(nullptr);
  }

  GetInvitationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvitationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInvitationsResponse& from);
  void MergeFrom(const GetInvitationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvitationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetInvitationsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationFieldNumber = 1,
    kContinuationFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 1;
  int invitation_size() const;
  private:
  int _internal_invitation_size() const;
  public:
  void clear_invitation();
  ::bgs::protocol::club::v1::ClubInvitation* mutable_invitation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation >*
      mutable_invitation();
  private:
  const ::bgs::protocol::club::v1::ClubInvitation& _internal_invitation(int index) const;
  ::bgs::protocol::club::v1::ClubInvitation* _internal_add_invitation();
  public:
  const ::bgs::protocol::club::v1::ClubInvitation& invitation(int index) const;
  ::bgs::protocol::club::v1::ClubInvitation* add_invitation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation >&
      invitation() const;

  // optional uint64 continuation = 2;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetInvitationsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation > invitation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class SendSuggestionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SendSuggestionRequest) */ {
 public:
  SendSuggestionRequest();
  virtual ~SendSuggestionRequest();

  SendSuggestionRequest(const SendSuggestionRequest& from);
  SendSuggestionRequest(SendSuggestionRequest&& from) noexcept
    : SendSuggestionRequest() {
    *this = ::std::move(from);
  }

  inline SendSuggestionRequest& operator=(const SendSuggestionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendSuggestionRequest& operator=(SendSuggestionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendSuggestionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendSuggestionRequest* internal_default_instance() {
    return reinterpret_cast<const SendSuggestionRequest*>(
               &_SendSuggestionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SendSuggestionRequest& a, SendSuggestionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendSuggestionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendSuggestionRequest* New() const final {
    return CreateMaybeMessage<SendSuggestionRequest>(nullptr);
  }

  SendSuggestionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendSuggestionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendSuggestionRequest& from);
  void MergeFrom(const SendSuggestionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendSuggestionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SendSuggestionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.SendSuggestionOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::SendSuggestionOptions& options() const;
  ::bgs::protocol::club::v1::SendSuggestionOptions* release_options();
  ::bgs::protocol::club::v1::SendSuggestionOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::SendSuggestionOptions* options);
  private:
  const ::bgs::protocol::club::v1::SendSuggestionOptions& _internal_options() const;
  ::bgs::protocol::club::v1::SendSuggestionOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SendSuggestionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::SendSuggestionOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class AcceptSuggestionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AcceptSuggestionRequest) */ {
 public:
  AcceptSuggestionRequest();
  virtual ~AcceptSuggestionRequest();

  AcceptSuggestionRequest(const AcceptSuggestionRequest& from);
  AcceptSuggestionRequest(AcceptSuggestionRequest&& from) noexcept
    : AcceptSuggestionRequest() {
    *this = ::std::move(from);
  }

  inline AcceptSuggestionRequest& operator=(const AcceptSuggestionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptSuggestionRequest& operator=(AcceptSuggestionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptSuggestionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptSuggestionRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptSuggestionRequest*>(
               &_AcceptSuggestionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(AcceptSuggestionRequest& a, AcceptSuggestionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptSuggestionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptSuggestionRequest* New() const final {
    return CreateMaybeMessage<AcceptSuggestionRequest>(nullptr);
  }

  AcceptSuggestionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptSuggestionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptSuggestionRequest& from);
  void MergeFrom(const AcceptSuggestionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptSuggestionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AcceptSuggestionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kSuggestionIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 suggestion_id = 3;
  bool has_suggestion_id() const;
  private:
  bool _internal_has_suggestion_id() const;
  public:
  void clear_suggestion_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 suggestion_id() const;
  void set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_suggestion_id() const;
  void _internal_set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AcceptSuggestionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 suggestion_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class DeclineSuggestionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.DeclineSuggestionRequest) */ {
 public:
  DeclineSuggestionRequest();
  virtual ~DeclineSuggestionRequest();

  DeclineSuggestionRequest(const DeclineSuggestionRequest& from);
  DeclineSuggestionRequest(DeclineSuggestionRequest&& from) noexcept
    : DeclineSuggestionRequest() {
    *this = ::std::move(from);
  }

  inline DeclineSuggestionRequest& operator=(const DeclineSuggestionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeclineSuggestionRequest& operator=(DeclineSuggestionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeclineSuggestionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeclineSuggestionRequest* internal_default_instance() {
    return reinterpret_cast<const DeclineSuggestionRequest*>(
               &_DeclineSuggestionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeclineSuggestionRequest& a, DeclineSuggestionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeclineSuggestionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeclineSuggestionRequest* New() const final {
    return CreateMaybeMessage<DeclineSuggestionRequest>(nullptr);
  }

  DeclineSuggestionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeclineSuggestionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeclineSuggestionRequest& from);
  void MergeFrom(const DeclineSuggestionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeclineSuggestionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.DeclineSuggestionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kSuggestionIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 suggestion_id = 3;
  bool has_suggestion_id() const;
  private:
  bool _internal_has_suggestion_id() const;
  public:
  void clear_suggestion_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 suggestion_id() const;
  void set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_suggestion_id() const;
  void _internal_set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.DeclineSuggestionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 suggestion_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetSuggestionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetSuggestionRequest) */ {
 public:
  GetSuggestionRequest();
  virtual ~GetSuggestionRequest();

  GetSuggestionRequest(const GetSuggestionRequest& from);
  GetSuggestionRequest(GetSuggestionRequest&& from) noexcept
    : GetSuggestionRequest() {
    *this = ::std::move(from);
  }

  inline GetSuggestionRequest& operator=(const GetSuggestionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSuggestionRequest& operator=(GetSuggestionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSuggestionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSuggestionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSuggestionRequest*>(
               &_GetSuggestionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetSuggestionRequest& a, GetSuggestionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSuggestionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSuggestionRequest* New() const final {
    return CreateMaybeMessage<GetSuggestionRequest>(nullptr);
  }

  GetSuggestionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSuggestionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSuggestionRequest& from);
  void MergeFrom(const GetSuggestionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSuggestionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetSuggestionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kSuggestionIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 suggestion_id = 3;
  bool has_suggestion_id() const;
  private:
  bool _internal_has_suggestion_id() const;
  public:
  void clear_suggestion_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 suggestion_id() const;
  void set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_suggestion_id() const;
  void _internal_set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetSuggestionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 suggestion_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetSuggestionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetSuggestionResponse) */ {
 public:
  GetSuggestionResponse();
  virtual ~GetSuggestionResponse();

  GetSuggestionResponse(const GetSuggestionResponse& from);
  GetSuggestionResponse(GetSuggestionResponse&& from) noexcept
    : GetSuggestionResponse() {
    *this = ::std::move(from);
  }

  inline GetSuggestionResponse& operator=(const GetSuggestionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSuggestionResponse& operator=(GetSuggestionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSuggestionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSuggestionResponse* internal_default_instance() {
    return reinterpret_cast<const GetSuggestionResponse*>(
               &_GetSuggestionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetSuggestionResponse& a, GetSuggestionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSuggestionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSuggestionResponse* New() const final {
    return CreateMaybeMessage<GetSuggestionResponse>(nullptr);
  }

  GetSuggestionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSuggestionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSuggestionResponse& from);
  void MergeFrom(const GetSuggestionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSuggestionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetSuggestionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuggestionFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
  bool has_suggestion() const;
  private:
  bool _internal_has_suggestion() const;
  public:
  void clear_suggestion();
  const ::bgs::protocol::club::v1::ClubSuggestion& suggestion() const;
  ::bgs::protocol::club::v1::ClubSuggestion* release_suggestion();
  ::bgs::protocol::club::v1::ClubSuggestion* mutable_suggestion();
  void set_allocated_suggestion(::bgs::protocol::club::v1::ClubSuggestion* suggestion);
  private:
  const ::bgs::protocol::club::v1::ClubSuggestion& _internal_suggestion() const;
  ::bgs::protocol::club::v1::ClubSuggestion* _internal_mutable_suggestion();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetSuggestionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubSuggestion* suggestion_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetSuggestionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetSuggestionsRequest) */ {
 public:
  GetSuggestionsRequest();
  virtual ~GetSuggestionsRequest();

  GetSuggestionsRequest(const GetSuggestionsRequest& from);
  GetSuggestionsRequest(GetSuggestionsRequest&& from) noexcept
    : GetSuggestionsRequest() {
    *this = ::std::move(from);
  }

  inline GetSuggestionsRequest& operator=(const GetSuggestionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSuggestionsRequest& operator=(GetSuggestionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSuggestionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSuggestionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetSuggestionsRequest*>(
               &_GetSuggestionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetSuggestionsRequest& a, GetSuggestionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSuggestionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSuggestionsRequest* New() const final {
    return CreateMaybeMessage<GetSuggestionsRequest>(nullptr);
  }

  GetSuggestionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSuggestionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSuggestionsRequest& from);
  void MergeFrom(const GetSuggestionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSuggestionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetSuggestionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kContinuationFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 continuation = 3;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetSuggestionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetSuggestionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetSuggestionsResponse) */ {
 public:
  GetSuggestionsResponse();
  virtual ~GetSuggestionsResponse();

  GetSuggestionsResponse(const GetSuggestionsResponse& from);
  GetSuggestionsResponse(GetSuggestionsResponse&& from) noexcept
    : GetSuggestionsResponse() {
    *this = ::std::move(from);
  }

  inline GetSuggestionsResponse& operator=(const GetSuggestionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSuggestionsResponse& operator=(GetSuggestionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSuggestionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSuggestionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetSuggestionsResponse*>(
               &_GetSuggestionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetSuggestionsResponse& a, GetSuggestionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSuggestionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSuggestionsResponse* New() const final {
    return CreateMaybeMessage<GetSuggestionsResponse>(nullptr);
  }

  GetSuggestionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSuggestionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSuggestionsResponse& from);
  void MergeFrom(const GetSuggestionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSuggestionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetSuggestionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuggestionFieldNumber = 1,
    kContinuationFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
  int suggestion_size() const;
  private:
  int _internal_suggestion_size() const;
  public:
  void clear_suggestion();
  ::bgs::protocol::club::v1::ClubSuggestion* mutable_suggestion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubSuggestion >*
      mutable_suggestion();
  private:
  const ::bgs::protocol::club::v1::ClubSuggestion& _internal_suggestion(int index) const;
  ::bgs::protocol::club::v1::ClubSuggestion* _internal_add_suggestion();
  public:
  const ::bgs::protocol::club::v1::ClubSuggestion& suggestion(int index) const;
  ::bgs::protocol::club::v1::ClubSuggestion* add_suggestion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubSuggestion >&
      suggestion() const;

  // optional uint64 continuation = 2;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetSuggestionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubSuggestion > suggestion_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateTicketRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateTicketRequest) */ {
 public:
  CreateTicketRequest();
  virtual ~CreateTicketRequest();

  CreateTicketRequest(const CreateTicketRequest& from);
  CreateTicketRequest(CreateTicketRequest&& from) noexcept
    : CreateTicketRequest() {
    *this = ::std::move(from);
  }

  inline CreateTicketRequest& operator=(const CreateTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTicketRequest& operator=(CreateTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTicketRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTicketRequest*>(
               &_CreateTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CreateTicketRequest& a, CreateTicketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTicketRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTicketRequest* New() const final {
    return CreateMaybeMessage<CreateTicketRequest>(nullptr);
  }

  CreateTicketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTicketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTicketRequest& from);
  void MergeFrom(const CreateTicketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTicketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateTicketRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.CreateTicketOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::CreateTicketOptions& options() const;
  ::bgs::protocol::club::v1::CreateTicketOptions* release_options();
  ::bgs::protocol::club::v1::CreateTicketOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::CreateTicketOptions* options);
  private:
  const ::bgs::protocol::club::v1::CreateTicketOptions& _internal_options() const;
  ::bgs::protocol::club::v1::CreateTicketOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateTicketRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::CreateTicketOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateTicketResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateTicketResponse) */ {
 public:
  CreateTicketResponse();
  virtual ~CreateTicketResponse();

  CreateTicketResponse(const CreateTicketResponse& from);
  CreateTicketResponse(CreateTicketResponse&& from) noexcept
    : CreateTicketResponse() {
    *this = ::std::move(from);
  }

  inline CreateTicketResponse& operator=(const CreateTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTicketResponse& operator=(CreateTicketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTicketResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTicketResponse*>(
               &_CreateTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CreateTicketResponse& a, CreateTicketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTicketResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTicketResponse* New() const final {
    return CreateMaybeMessage<CreateTicketResponse>(nullptr);
  }

  CreateTicketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTicketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTicketResponse& from);
  void MergeFrom(const CreateTicketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTicketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateTicketResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::bgs::protocol::club::v1::ClubTicket& ticket() const;
  ::bgs::protocol::club::v1::ClubTicket* release_ticket();
  ::bgs::protocol::club::v1::ClubTicket* mutable_ticket();
  void set_allocated_ticket(::bgs::protocol::club::v1::ClubTicket* ticket);
  private:
  const ::bgs::protocol::club::v1::ClubTicket& _internal_ticket() const;
  ::bgs::protocol::club::v1::ClubTicket* _internal_mutable_ticket();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateTicketResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubTicket* ticket_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class DestroyTicketRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.DestroyTicketRequest) */ {
 public:
  DestroyTicketRequest();
  virtual ~DestroyTicketRequest();

  DestroyTicketRequest(const DestroyTicketRequest& from);
  DestroyTicketRequest(DestroyTicketRequest&& from) noexcept
    : DestroyTicketRequest() {
    *this = ::std::move(from);
  }

  inline DestroyTicketRequest& operator=(const DestroyTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyTicketRequest& operator=(DestroyTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroyTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyTicketRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyTicketRequest*>(
               &_DestroyTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DestroyTicketRequest& a, DestroyTicketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyTicketRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroyTicketRequest* New() const final {
    return CreateMaybeMessage<DestroyTicketRequest>(nullptr);
  }

  DestroyTicketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroyTicketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroyTicketRequest& from);
  void MergeFrom(const DestroyTicketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyTicketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.DestroyTicketRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketIdFieldNumber = 3,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // optional string ticket_id = 3;
  bool has_ticket_id() const;
  private:
  bool _internal_has_ticket_id() const;
  public:
  void clear_ticket_id();
  const std::string& ticket_id() const;
  void set_ticket_id(const std::string& value);
  void set_ticket_id(std::string&& value);
  void set_ticket_id(const char* value);
  void set_ticket_id(const char* value, size_t size);
  std::string* mutable_ticket_id();
  std::string* release_ticket_id();
  void set_allocated_ticket_id(std::string* ticket_id);
  private:
  const std::string& _internal_ticket_id() const;
  void _internal_set_ticket_id(const std::string& value);
  std::string* _internal_mutable_ticket_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.DestroyTicketRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_id_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class RedeemTicketRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.RedeemTicketRequest) */ {
 public:
  RedeemTicketRequest();
  virtual ~RedeemTicketRequest();

  RedeemTicketRequest(const RedeemTicketRequest& from);
  RedeemTicketRequest(RedeemTicketRequest&& from) noexcept
    : RedeemTicketRequest() {
    *this = ::std::move(from);
  }

  inline RedeemTicketRequest& operator=(const RedeemTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedeemTicketRequest& operator=(RedeemTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedeemTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedeemTicketRequest* internal_default_instance() {
    return reinterpret_cast<const RedeemTicketRequest*>(
               &_RedeemTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RedeemTicketRequest& a, RedeemTicketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RedeemTicketRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedeemTicketRequest* New() const final {
    return CreateMaybeMessage<RedeemTicketRequest>(nullptr);
  }

  RedeemTicketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedeemTicketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedeemTicketRequest& from);
  void MergeFrom(const RedeemTicketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedeemTicketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.RedeemTicketRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketIdFieldNumber = 3,
    kAgentIdFieldNumber = 1,
  };
  // optional string ticket_id = 3;
  bool has_ticket_id() const;
  private:
  bool _internal_has_ticket_id() const;
  public:
  void clear_ticket_id();
  const std::string& ticket_id() const;
  void set_ticket_id(const std::string& value);
  void set_ticket_id(std::string&& value);
  void set_ticket_id(const char* value);
  void set_ticket_id(const char* value, size_t size);
  std::string* mutable_ticket_id();
  std::string* release_ticket_id();
  void set_allocated_ticket_id(std::string* ticket_id);
  private:
  const std::string& _internal_ticket_id() const;
  void _internal_set_ticket_id(const std::string& value);
  std::string* _internal_mutable_ticket_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.RedeemTicketRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_id_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetTicketRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetTicketRequest) */ {
 public:
  GetTicketRequest();
  virtual ~GetTicketRequest();

  GetTicketRequest(const GetTicketRequest& from);
  GetTicketRequest(GetTicketRequest&& from) noexcept
    : GetTicketRequest() {
    *this = ::std::move(from);
  }

  inline GetTicketRequest& operator=(const GetTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTicketRequest& operator=(GetTicketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTicketRequest* internal_default_instance() {
    return reinterpret_cast<const GetTicketRequest*>(
               &_GetTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetTicketRequest& a, GetTicketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTicketRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTicketRequest* New() const final {
    return CreateMaybeMessage<GetTicketRequest>(nullptr);
  }

  GetTicketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTicketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTicketRequest& from);
  void MergeFrom(const GetTicketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTicketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetTicketRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketIdFieldNumber = 3,
    kAgentIdFieldNumber = 1,
  };
  // optional string ticket_id = 3;
  bool has_ticket_id() const;
  private:
  bool _internal_has_ticket_id() const;
  public:
  void clear_ticket_id();
  const std::string& ticket_id() const;
  void set_ticket_id(const std::string& value);
  void set_ticket_id(std::string&& value);
  void set_ticket_id(const char* value);
  void set_ticket_id(const char* value, size_t size);
  std::string* mutable_ticket_id();
  std::string* release_ticket_id();
  void set_allocated_ticket_id(std::string* ticket_id);
  private:
  const std::string& _internal_ticket_id() const;
  void _internal_set_ticket_id(const std::string& value);
  std::string* _internal_mutable_ticket_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetTicketRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_id_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetTicketResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetTicketResponse) */ {
 public:
  GetTicketResponse();
  virtual ~GetTicketResponse();

  GetTicketResponse(const GetTicketResponse& from);
  GetTicketResponse(GetTicketResponse&& from) noexcept
    : GetTicketResponse() {
    *this = ::std::move(from);
  }

  inline GetTicketResponse& operator=(const GetTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTicketResponse& operator=(GetTicketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTicketResponse* internal_default_instance() {
    return reinterpret_cast<const GetTicketResponse*>(
               &_GetTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetTicketResponse& a, GetTicketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTicketResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTicketResponse* New() const final {
    return CreateMaybeMessage<GetTicketResponse>(nullptr);
  }

  GetTicketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTicketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTicketResponse& from);
  void MergeFrom(const GetTicketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTicketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetTicketResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::bgs::protocol::club::v1::ClubTicket& ticket() const;
  ::bgs::protocol::club::v1::ClubTicket* release_ticket();
  ::bgs::protocol::club::v1::ClubTicket* mutable_ticket();
  void set_allocated_ticket(::bgs::protocol::club::v1::ClubTicket* ticket);
  private:
  const ::bgs::protocol::club::v1::ClubTicket& _internal_ticket() const;
  ::bgs::protocol::club::v1::ClubTicket* _internal_mutable_ticket();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetTicketResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubTicket* ticket_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetTicketsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetTicketsRequest) */ {
 public:
  GetTicketsRequest();
  virtual ~GetTicketsRequest();

  GetTicketsRequest(const GetTicketsRequest& from);
  GetTicketsRequest(GetTicketsRequest&& from) noexcept
    : GetTicketsRequest() {
    *this = ::std::move(from);
  }

  inline GetTicketsRequest& operator=(const GetTicketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTicketsRequest& operator=(GetTicketsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTicketsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTicketsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTicketsRequest*>(
               &_GetTicketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetTicketsRequest& a, GetTicketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTicketsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTicketsRequest* New() const final {
    return CreateMaybeMessage<GetTicketsRequest>(nullptr);
  }

  GetTicketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTicketsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTicketsRequest& from);
  void MergeFrom(const GetTicketsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTicketsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetTicketsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kContinuationFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 continuation = 3;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetTicketsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetTicketsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetTicketsResponse) */ {
 public:
  GetTicketsResponse();
  virtual ~GetTicketsResponse();

  GetTicketsResponse(const GetTicketsResponse& from);
  GetTicketsResponse(GetTicketsResponse&& from) noexcept
    : GetTicketsResponse() {
    *this = ::std::move(from);
  }

  inline GetTicketsResponse& operator=(const GetTicketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTicketsResponse& operator=(GetTicketsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTicketsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTicketsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTicketsResponse*>(
               &_GetTicketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetTicketsResponse& a, GetTicketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTicketsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTicketsResponse* New() const final {
    return CreateMaybeMessage<GetTicketsResponse>(nullptr);
  }

  GetTicketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTicketsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTicketsResponse& from);
  void MergeFrom(const GetTicketsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTicketsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetTicketsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kContinuationFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.ClubTicket ticket = 1;
  int ticket_size() const;
  private:
  int _internal_ticket_size() const;
  public:
  void clear_ticket();
  ::bgs::protocol::club::v1::ClubTicket* mutable_ticket(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubTicket >*
      mutable_ticket();
  private:
  const ::bgs::protocol::club::v1::ClubTicket& _internal_ticket(int index) const;
  ::bgs::protocol::club::v1::ClubTicket* _internal_add_ticket();
  public:
  const ::bgs::protocol::club::v1::ClubTicket& ticket(int index) const;
  ::bgs::protocol::club::v1::ClubTicket* add_ticket();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubTicket >&
      ticket() const;

  // optional uint64 continuation = 2;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetTicketsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubTicket > ticket_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class AddBanRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AddBanRequest) */ {
 public:
  AddBanRequest();
  virtual ~AddBanRequest();

  AddBanRequest(const AddBanRequest& from);
  AddBanRequest(AddBanRequest&& from) noexcept
    : AddBanRequest() {
    *this = ::std::move(from);
  }

  inline AddBanRequest& operator=(const AddBanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBanRequest& operator=(AddBanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddBanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddBanRequest* internal_default_instance() {
    return reinterpret_cast<const AddBanRequest*>(
               &_AddBanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(AddBanRequest& a, AddBanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBanRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddBanRequest* New() const final {
    return CreateMaybeMessage<AddBanRequest>(nullptr);
  }

  AddBanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddBanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddBanRequest& from);
  void MergeFrom(const AddBanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AddBanRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.AddBanOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::AddBanOptions& options() const;
  ::bgs::protocol::club::v1::AddBanOptions* release_options();
  ::bgs::protocol::club::v1::AddBanOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::AddBanOptions* options);
  private:
  const ::bgs::protocol::club::v1::AddBanOptions& _internal_options() const;
  ::bgs::protocol::club::v1::AddBanOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AddBanRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::AddBanOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class RemoveBanRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.RemoveBanRequest) */ {
 public:
  RemoveBanRequest();
  virtual ~RemoveBanRequest();

  RemoveBanRequest(const RemoveBanRequest& from);
  RemoveBanRequest(RemoveBanRequest&& from) noexcept
    : RemoveBanRequest() {
    *this = ::std::move(from);
  }

  inline RemoveBanRequest& operator=(const RemoveBanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveBanRequest& operator=(RemoveBanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveBanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveBanRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveBanRequest*>(
               &_RemoveBanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(RemoveBanRequest& a, RemoveBanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveBanRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveBanRequest* New() const final {
    return CreateMaybeMessage<RemoveBanRequest>(nullptr);
  }

  RemoveBanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveBanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveBanRequest& from);
  void MergeFrom(const RemoveBanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveBanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.RemoveBanRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kTargetIdFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId target_id = 3;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::club::v1::MemberId& target_id() const;
  ::bgs::protocol::club::v1::MemberId* release_target_id();
  ::bgs::protocol::club::v1::MemberId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_target_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_target_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.RemoveBanRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::MemberId* target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetBanRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetBanRequest) */ {
 public:
  GetBanRequest();
  virtual ~GetBanRequest();

  GetBanRequest(const GetBanRequest& from);
  GetBanRequest(GetBanRequest&& from) noexcept
    : GetBanRequest() {
    *this = ::std::move(from);
  }

  inline GetBanRequest& operator=(const GetBanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBanRequest& operator=(GetBanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBanRequest* internal_default_instance() {
    return reinterpret_cast<const GetBanRequest*>(
               &_GetBanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetBanRequest& a, GetBanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBanRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBanRequest* New() const final {
    return CreateMaybeMessage<GetBanRequest>(nullptr);
  }

  GetBanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBanRequest& from);
  void MergeFrom(const GetBanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetBanRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kTargetIdFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId target_id = 3;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::club::v1::MemberId& target_id() const;
  ::bgs::protocol::club::v1::MemberId* release_target_id();
  ::bgs::protocol::club::v1::MemberId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_target_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_target_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetBanRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::MemberId* target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetBanResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetBanResponse) */ {
 public:
  GetBanResponse();
  virtual ~GetBanResponse();

  GetBanResponse(const GetBanResponse& from);
  GetBanResponse(GetBanResponse&& from) noexcept
    : GetBanResponse() {
    *this = ::std::move(from);
  }

  inline GetBanResponse& operator=(const GetBanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBanResponse& operator=(GetBanResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBanResponse* internal_default_instance() {
    return reinterpret_cast<const GetBanResponse*>(
               &_GetBanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetBanResponse& a, GetBanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBanResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBanResponse* New() const final {
    return CreateMaybeMessage<GetBanResponse>(nullptr);
  }

  GetBanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBanResponse& from);
  void MergeFrom(const GetBanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetBanResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBanFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.ClubBan ban = 1;
  bool has_ban() const;
  private:
  bool _internal_has_ban() const;
  public:
  void clear_ban();
  const ::bgs::protocol::club::v1::ClubBan& ban() const;
  ::bgs::protocol::club::v1::ClubBan* release_ban();
  ::bgs::protocol::club::v1::ClubBan* mutable_ban();
  void set_allocated_ban(::bgs::protocol::club::v1::ClubBan* ban);
  private:
  const ::bgs::protocol::club::v1::ClubBan& _internal_ban() const;
  ::bgs::protocol::club::v1::ClubBan* _internal_mutable_ban();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetBanResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::ClubBan* ban_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetBansRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetBansRequest) */ {
 public:
  GetBansRequest();
  virtual ~GetBansRequest();

  GetBansRequest(const GetBansRequest& from);
  GetBansRequest(GetBansRequest&& from) noexcept
    : GetBansRequest() {
    *this = ::std::move(from);
  }

  inline GetBansRequest& operator=(const GetBansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBansRequest& operator=(GetBansRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBansRequest* internal_default_instance() {
    return reinterpret_cast<const GetBansRequest*>(
               &_GetBansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetBansRequest& a, GetBansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBansRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBansRequest* New() const final {
    return CreateMaybeMessage<GetBansRequest>(nullptr);
  }

  GetBansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBansRequest& from);
  void MergeFrom(const GetBansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetBansRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kContinuationFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 continuation = 3;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetBansRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetBansResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetBansResponse) */ {
 public:
  GetBansResponse();
  virtual ~GetBansResponse();

  GetBansResponse(const GetBansResponse& from);
  GetBansResponse(GetBansResponse&& from) noexcept
    : GetBansResponse() {
    *this = ::std::move(from);
  }

  inline GetBansResponse& operator=(const GetBansResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBansResponse& operator=(GetBansResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBansResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBansResponse* internal_default_instance() {
    return reinterpret_cast<const GetBansResponse*>(
               &_GetBansResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetBansResponse& a, GetBansResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBansResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBansResponse* New() const final {
    return CreateMaybeMessage<GetBansResponse>(nullptr);
  }

  GetBansResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBansResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBansResponse& from);
  void MergeFrom(const GetBansResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBansResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetBansResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBanFieldNumber = 1,
    kContinuationFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.ClubBan ban = 1;
  int ban_size() const;
  private:
  int _internal_ban_size() const;
  public:
  void clear_ban();
  ::bgs::protocol::club::v1::ClubBan* mutable_ban(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubBan >*
      mutable_ban();
  private:
  const ::bgs::protocol::club::v1::ClubBan& _internal_ban(int index) const;
  ::bgs::protocol::club::v1::ClubBan* _internal_add_ban();
  public:
  const ::bgs::protocol::club::v1::ClubBan& ban(int index) const;
  ::bgs::protocol::club::v1::ClubBan* add_ban();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubBan >&
      ban() const;

  // optional uint64 continuation = 2;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetBansResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubBan > ban_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SubscribeStreamRequest) */ {
 public:
  SubscribeStreamRequest();
  virtual ~SubscribeStreamRequest();

  SubscribeStreamRequest(const SubscribeStreamRequest& from);
  SubscribeStreamRequest(SubscribeStreamRequest&& from) noexcept
    : SubscribeStreamRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStreamRequest& operator=(const SubscribeStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStreamRequest& operator=(SubscribeStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeStreamRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStreamRequest*>(
               &_SubscribeStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SubscribeStreamRequest& a, SubscribeStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeStreamRequest* New() const final {
    return CreateMaybeMessage<SubscribeStreamRequest>(nullptr);
  }

  SubscribeStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeStreamRequest& from);
  void MergeFrom(const SubscribeStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SubscribeStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 3,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // repeated uint64 stream_id = 3;
  int stream_id_size() const;
  private:
  int _internal_stream_id_size() const;
  public:
  void clear_stream_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_stream_id() const;
  void _internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_stream_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id(int index) const;
  void set_stream_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      stream_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_stream_id();

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SubscribeStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > stream_id_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UnsubscribeStreamRequest) */ {
 public:
  UnsubscribeStreamRequest();
  virtual ~UnsubscribeStreamRequest();

  UnsubscribeStreamRequest(const UnsubscribeStreamRequest& from);
  UnsubscribeStreamRequest(UnsubscribeStreamRequest&& from) noexcept
    : UnsubscribeStreamRequest() {
    *this = ::std::move(from);
  }

  inline UnsubscribeStreamRequest& operator=(const UnsubscribeStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeStreamRequest& operator=(UnsubscribeStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeStreamRequest* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeStreamRequest*>(
               &_UnsubscribeStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(UnsubscribeStreamRequest& a, UnsubscribeStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeStreamRequest* New() const final {
    return CreateMaybeMessage<UnsubscribeStreamRequest>(nullptr);
  }

  UnsubscribeStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeStreamRequest& from);
  void MergeFrom(const UnsubscribeStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UnsubscribeStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 3,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // repeated uint64 stream_id = 3;
  int stream_id_size() const;
  private:
  int _internal_stream_id_size() const;
  public:
  void clear_stream_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_stream_id() const;
  void _internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_stream_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id(int index) const;
  void set_stream_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      stream_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_stream_id();

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UnsubscribeStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > stream_id_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateStreamRequest) */ {
 public:
  CreateStreamRequest();
  virtual ~CreateStreamRequest();

  CreateStreamRequest(const CreateStreamRequest& from);
  CreateStreamRequest(CreateStreamRequest&& from) noexcept
    : CreateStreamRequest() {
    *this = ::std::move(from);
  }

  inline CreateStreamRequest& operator=(const CreateStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateStreamRequest& operator=(CreateStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateStreamRequest* internal_default_instance() {
    return reinterpret_cast<const CreateStreamRequest*>(
               &_CreateStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CreateStreamRequest& a, CreateStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateStreamRequest* New() const final {
    return CreateMaybeMessage<CreateStreamRequest>(nullptr);
  }

  CreateStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateStreamRequest& from);
  void MergeFrom(const CreateStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.CreateStreamOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::CreateStreamOptions& options() const;
  ::bgs::protocol::club::v1::CreateStreamOptions* release_options();
  ::bgs::protocol::club::v1::CreateStreamOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::CreateStreamOptions* options);
  private:
  const ::bgs::protocol::club::v1::CreateStreamOptions& _internal_options() const;
  ::bgs::protocol::club::v1::CreateStreamOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::CreateStreamOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateStreamResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateStreamResponse) */ {
 public:
  CreateStreamResponse();
  virtual ~CreateStreamResponse();

  CreateStreamResponse(const CreateStreamResponse& from);
  CreateStreamResponse(CreateStreamResponse&& from) noexcept
    : CreateStreamResponse() {
    *this = ::std::move(from);
  }

  inline CreateStreamResponse& operator=(const CreateStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateStreamResponse& operator=(CreateStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateStreamResponse* internal_default_instance() {
    return reinterpret_cast<const CreateStreamResponse*>(
               &_CreateStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CreateStreamResponse& a, CreateStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateStreamResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateStreamResponse* New() const final {
    return CreateMaybeMessage<CreateStreamResponse>(nullptr);
  }

  CreateStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateStreamResponse& from);
  void MergeFrom(const CreateStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateStreamResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClubIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
  };
  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 2;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateStreamResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class DestroyStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.DestroyStreamRequest) */ {
 public:
  DestroyStreamRequest();
  virtual ~DestroyStreamRequest();

  DestroyStreamRequest(const DestroyStreamRequest& from);
  DestroyStreamRequest(DestroyStreamRequest&& from) noexcept
    : DestroyStreamRequest() {
    *this = ::std::move(from);
  }

  inline DestroyStreamRequest& operator=(const DestroyStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyStreamRequest& operator=(DestroyStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroyStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyStreamRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyStreamRequest*>(
               &_DestroyStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DestroyStreamRequest& a, DestroyStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroyStreamRequest* New() const final {
    return CreateMaybeMessage<DestroyStreamRequest>(nullptr);
  }

  DestroyStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroyStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroyStreamRequest& from);
  void MergeFrom(const DestroyStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.DestroyStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.DestroyStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamRequest) */ {
 public:
  GetStreamRequest();
  virtual ~GetStreamRequest();

  GetStreamRequest(const GetStreamRequest& from);
  GetStreamRequest(GetStreamRequest&& from) noexcept
    : GetStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamRequest& operator=(const GetStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamRequest& operator=(GetStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamRequest*>(
               &_GetStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetStreamRequest& a, GetStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamRequest* New() const final {
    return CreateMaybeMessage<GetStreamRequest>(nullptr);
  }

  GetStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamRequest& from);
  void MergeFrom(const GetStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamResponse) */ {
 public:
  GetStreamResponse();
  virtual ~GetStreamResponse();

  GetStreamResponse(const GetStreamResponse& from);
  GetStreamResponse(GetStreamResponse&& from) noexcept
    : GetStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamResponse& operator=(const GetStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamResponse& operator=(GetStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamResponse*>(
               &_GetStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetStreamResponse& a, GetStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamResponse* New() const final {
    return CreateMaybeMessage<GetStreamResponse>(nullptr);
  }

  GetStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamResponse& from);
  void MergeFrom(const GetStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.Stream stream = 1;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::bgs::protocol::club::v1::Stream& stream() const;
  ::bgs::protocol::club::v1::Stream* release_stream();
  ::bgs::protocol::club::v1::Stream* mutable_stream();
  void set_allocated_stream(::bgs::protocol::club::v1::Stream* stream);
  private:
  const ::bgs::protocol::club::v1::Stream& _internal_stream() const;
  ::bgs::protocol::club::v1::Stream* _internal_mutable_stream();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::Stream* stream_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamsRequest) */ {
 public:
  GetStreamsRequest();
  virtual ~GetStreamsRequest();

  GetStreamsRequest(const GetStreamsRequest& from);
  GetStreamsRequest(GetStreamsRequest&& from) noexcept
    : GetStreamsRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamsRequest& operator=(const GetStreamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamsRequest& operator=(GetStreamsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamsRequest*>(
               &_GetStreamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetStreamsRequest& a, GetStreamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamsRequest* New() const final {
    return CreateMaybeMessage<GetStreamsRequest>(nullptr);
  }

  GetStreamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamsRequest& from);
  void MergeFrom(const GetStreamsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kContinuationFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 continuation = 3;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamsResponse) */ {
 public:
  GetStreamsResponse();
  virtual ~GetStreamsResponse();

  GetStreamsResponse(const GetStreamsResponse& from);
  GetStreamsResponse(GetStreamsResponse&& from) noexcept
    : GetStreamsResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamsResponse& operator=(const GetStreamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamsResponse& operator=(GetStreamsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamsResponse*>(
               &_GetStreamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetStreamsResponse& a, GetStreamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamsResponse* New() const final {
    return CreateMaybeMessage<GetStreamsResponse>(nullptr);
  }

  GetStreamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamsResponse& from);
  void MergeFrom(const GetStreamsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kViewFieldNumber = 2,
    kContinuationFieldNumber = 3,
  };
  // repeated .bgs.protocol.club.v1.Stream stream = 1;
  int stream_size() const;
  private:
  int _internal_stream_size() const;
  public:
  void clear_stream();
  ::bgs::protocol::club::v1::Stream* mutable_stream(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Stream >*
      mutable_stream();
  private:
  const ::bgs::protocol::club::v1::Stream& _internal_stream(int index) const;
  ::bgs::protocol::club::v1::Stream* _internal_add_stream();
  public:
  const ::bgs::protocol::club::v1::Stream& stream(int index) const;
  ::bgs::protocol::club::v1::Stream* add_stream();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Stream >&
      stream() const;

  // repeated .bgs.protocol.club.v1.StreamView view = 2;
  int view_size() const;
  private:
  int _internal_view_size() const;
  public:
  void clear_view();
  ::bgs::protocol::club::v1::StreamView* mutable_view(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamView >*
      mutable_view();
  private:
  const ::bgs::protocol::club::v1::StreamView& _internal_view(int index) const;
  ::bgs::protocol::club::v1::StreamView* _internal_add_view();
  public:
  const ::bgs::protocol::club::v1::StreamView& view(int index) const;
  ::bgs::protocol::club::v1::StreamView* add_view();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamView >&
      view() const;

  // optional uint64 continuation = 3;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Stream > stream_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamView > view_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateStreamStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.UpdateStreamStateRequest) */ {
 public:
  UpdateStreamStateRequest();
  virtual ~UpdateStreamStateRequest();

  UpdateStreamStateRequest(const UpdateStreamStateRequest& from);
  UpdateStreamStateRequest(UpdateStreamStateRequest&& from) noexcept
    : UpdateStreamStateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStreamStateRequest& operator=(const UpdateStreamStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStreamStateRequest& operator=(UpdateStreamStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateStreamStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateStreamStateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStreamStateRequest*>(
               &_UpdateStreamStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(UpdateStreamStateRequest& a, UpdateStreamStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStreamStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateStreamStateRequest* New() const final {
    return CreateMaybeMessage<UpdateStreamStateRequest>(nullptr);
  }

  UpdateStreamStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStreamStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateStreamStateRequest& from);
  void MergeFrom(const UpdateStreamStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStreamStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.UpdateStreamStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 5,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.StreamStateOptions options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::StreamStateOptions& options() const;
  ::bgs::protocol::club::v1::StreamStateOptions* release_options();
  ::bgs::protocol::club::v1::StreamStateOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::StreamStateOptions* options);
  private:
  const ::bgs::protocol::club::v1::StreamStateOptions& _internal_options() const;
  ::bgs::protocol::club::v1::StreamStateOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UpdateStreamStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::StreamStateOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class SetStreamFocusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SetStreamFocusRequest) */ {
 public:
  SetStreamFocusRequest();
  virtual ~SetStreamFocusRequest();

  SetStreamFocusRequest(const SetStreamFocusRequest& from);
  SetStreamFocusRequest(SetStreamFocusRequest&& from) noexcept
    : SetStreamFocusRequest() {
    *this = ::std::move(from);
  }

  inline SetStreamFocusRequest& operator=(const SetStreamFocusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStreamFocusRequest& operator=(SetStreamFocusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetStreamFocusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetStreamFocusRequest* internal_default_instance() {
    return reinterpret_cast<const SetStreamFocusRequest*>(
               &_SetStreamFocusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SetStreamFocusRequest& a, SetStreamFocusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStreamFocusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetStreamFocusRequest* New() const final {
    return CreateMaybeMessage<SetStreamFocusRequest>(nullptr);
  }

  SetStreamFocusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetStreamFocusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetStreamFocusRequest& from);
  void MergeFrom(const SetStreamFocusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetStreamFocusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SetStreamFocusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
    kFocusFieldNumber = 4,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool focus = 4;
  bool has_focus() const;
  private:
  bool _internal_has_focus() const;
  public:
  void clear_focus();
  bool focus() const;
  void set_focus(bool value);
  private:
  bool _internal_focus() const;
  void _internal_set_focus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SetStreamFocusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  bool focus_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateMessageRequest) */ {
 public:
  CreateMessageRequest();
  virtual ~CreateMessageRequest();

  CreateMessageRequest(const CreateMessageRequest& from);
  CreateMessageRequest(CreateMessageRequest&& from) noexcept
    : CreateMessageRequest() {
    *this = ::std::move(from);
  }

  inline CreateMessageRequest& operator=(const CreateMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMessageRequest& operator=(CreateMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMessageRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMessageRequest*>(
               &_CreateMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CreateMessageRequest& a, CreateMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMessageRequest* New() const final {
    return CreateMaybeMessage<CreateMessageRequest>(nullptr);
  }

  CreateMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMessageRequest& from);
  void MergeFrom(const CreateMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 4,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.CreateMessageOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::CreateMessageOptions& options() const;
  ::bgs::protocol::club::v1::CreateMessageOptions* release_options();
  ::bgs::protocol::club::v1::CreateMessageOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::CreateMessageOptions* options);
  private:
  const ::bgs::protocol::club::v1::CreateMessageOptions& _internal_options() const;
  ::bgs::protocol::club::v1::CreateMessageOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::CreateMessageOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateMessageResponse) */ {
 public:
  CreateMessageResponse();
  virtual ~CreateMessageResponse();

  CreateMessageResponse(const CreateMessageResponse& from);
  CreateMessageResponse(CreateMessageResponse&& from) noexcept
    : CreateMessageResponse() {
    *this = ::std::move(from);
  }

  inline CreateMessageResponse& operator=(const CreateMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMessageResponse& operator=(CreateMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMessageResponse* internal_default_instance() {
    return reinterpret_cast<const CreateMessageResponse*>(
               &_CreateMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CreateMessageResponse& a, CreateMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMessageResponse* New() const final {
    return CreateMaybeMessage<CreateMessageResponse>(nullptr);
  }

  CreateMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMessageResponse& from);
  void MergeFrom(const CreateMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::bgs::protocol::club::v1::StreamMessage& message() const;
  ::bgs::protocol::club::v1::StreamMessage* release_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message();
  void set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message);
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message() const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::StreamMessage* message_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class DestroyMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.DestroyMessageRequest) */ {
 public:
  DestroyMessageRequest();
  virtual ~DestroyMessageRequest();

  DestroyMessageRequest(const DestroyMessageRequest& from);
  DestroyMessageRequest(DestroyMessageRequest&& from) noexcept
    : DestroyMessageRequest() {
    *this = ::std::move(from);
  }

  inline DestroyMessageRequest& operator=(const DestroyMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyMessageRequest& operator=(DestroyMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroyMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyMessageRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyMessageRequest*>(
               &_DestroyMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(DestroyMessageRequest& a, DestroyMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroyMessageRequest* New() const final {
    return CreateMaybeMessage<DestroyMessageRequest>(nullptr);
  }

  DestroyMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroyMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroyMessageRequest& from);
  void MergeFrom(const DestroyMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.DestroyMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMessageIdFieldNumber = 4,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.MessageId message_id = 4;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const ::bgs::protocol::MessageId& message_id() const;
  ::bgs::protocol::MessageId* release_message_id();
  ::bgs::protocol::MessageId* mutable_message_id();
  void set_allocated_message_id(::bgs::protocol::MessageId* message_id);
  private:
  const ::bgs::protocol::MessageId& _internal_message_id() const;
  ::bgs::protocol::MessageId* _internal_mutable_message_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.DestroyMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::MessageId* message_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class DestroyMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.DestroyMessageResponse) */ {
 public:
  DestroyMessageResponse();
  virtual ~DestroyMessageResponse();

  DestroyMessageResponse(const DestroyMessageResponse& from);
  DestroyMessageResponse(DestroyMessageResponse&& from) noexcept
    : DestroyMessageResponse() {
    *this = ::std::move(from);
  }

  inline DestroyMessageResponse& operator=(const DestroyMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyMessageResponse& operator=(DestroyMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroyMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyMessageResponse* internal_default_instance() {
    return reinterpret_cast<const DestroyMessageResponse*>(
               &_DestroyMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(DestroyMessageResponse& a, DestroyMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroyMessageResponse* New() const final {
    return CreateMaybeMessage<DestroyMessageResponse>(nullptr);
  }

  DestroyMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroyMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroyMessageResponse& from);
  void MergeFrom(const DestroyMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.DestroyMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::bgs::protocol::club::v1::StreamMessage& message() const;
  ::bgs::protocol::club::v1::StreamMessage* release_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message();
  void set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message);
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message() const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.DestroyMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::StreamMessage* message_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class EditMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.EditMessageRequest) */ {
 public:
  EditMessageRequest();
  virtual ~EditMessageRequest();

  EditMessageRequest(const EditMessageRequest& from);
  EditMessageRequest(EditMessageRequest&& from) noexcept
    : EditMessageRequest() {
    *this = ::std::move(from);
  }

  inline EditMessageRequest& operator=(const EditMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditMessageRequest& operator=(EditMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EditMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditMessageRequest* internal_default_instance() {
    return reinterpret_cast<const EditMessageRequest*>(
               &_EditMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(EditMessageRequest& a, EditMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EditMessageRequest* New() const final {
    return CreateMaybeMessage<EditMessageRequest>(nullptr);
  }

  EditMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EditMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EditMessageRequest& from);
  void MergeFrom(const EditMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.EditMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMessageIdFieldNumber = 4,
    kOptionsFieldNumber = 5,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.MessageId message_id = 4;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const ::bgs::protocol::MessageId& message_id() const;
  ::bgs::protocol::MessageId* release_message_id();
  ::bgs::protocol::MessageId* mutable_message_id();
  void set_allocated_message_id(::bgs::protocol::MessageId* message_id);
  private:
  const ::bgs::protocol::MessageId& _internal_message_id() const;
  ::bgs::protocol::MessageId* _internal_mutable_message_id();
  public:

  // optional .bgs.protocol.club.v1.CreateMessageOptions options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::club::v1::CreateMessageOptions& options() const;
  ::bgs::protocol::club::v1::CreateMessageOptions* release_options();
  ::bgs::protocol::club::v1::CreateMessageOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::club::v1::CreateMessageOptions* options);
  private:
  const ::bgs::protocol::club::v1::CreateMessageOptions& _internal_options() const;
  ::bgs::protocol::club::v1::CreateMessageOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.EditMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::MessageId* message_id_;
  ::bgs::protocol::club::v1::CreateMessageOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class EditMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.EditMessageResponse) */ {
 public:
  EditMessageResponse();
  virtual ~EditMessageResponse();

  EditMessageResponse(const EditMessageResponse& from);
  EditMessageResponse(EditMessageResponse&& from) noexcept
    : EditMessageResponse() {
    *this = ::std::move(from);
  }

  inline EditMessageResponse& operator=(const EditMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditMessageResponse& operator=(EditMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EditMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditMessageResponse* internal_default_instance() {
    return reinterpret_cast<const EditMessageResponse*>(
               &_EditMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(EditMessageResponse& a, EditMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EditMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EditMessageResponse* New() const final {
    return CreateMaybeMessage<EditMessageResponse>(nullptr);
  }

  EditMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EditMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EditMessageResponse& from);
  void MergeFrom(const EditMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.EditMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::bgs::protocol::club::v1::StreamMessage& message() const;
  ::bgs::protocol::club::v1::StreamMessage* release_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message();
  void set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message);
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message() const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.EditMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::StreamMessage* message_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class SetMessagePinnedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SetMessagePinnedRequest) */ {
 public:
  SetMessagePinnedRequest();
  virtual ~SetMessagePinnedRequest();

  SetMessagePinnedRequest(const SetMessagePinnedRequest& from);
  SetMessagePinnedRequest(SetMessagePinnedRequest&& from) noexcept
    : SetMessagePinnedRequest() {
    *this = ::std::move(from);
  }

  inline SetMessagePinnedRequest& operator=(const SetMessagePinnedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMessagePinnedRequest& operator=(SetMessagePinnedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMessagePinnedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMessagePinnedRequest* internal_default_instance() {
    return reinterpret_cast<const SetMessagePinnedRequest*>(
               &_SetMessagePinnedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SetMessagePinnedRequest& a, SetMessagePinnedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMessagePinnedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMessagePinnedRequest* New() const final {
    return CreateMaybeMessage<SetMessagePinnedRequest>(nullptr);
  }

  SetMessagePinnedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMessagePinnedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMessagePinnedRequest& from);
  void MergeFrom(const SetMessagePinnedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMessagePinnedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SetMessagePinnedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SetMessagePinnedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class SetTypingIndicatorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.SetTypingIndicatorRequest) */ {
 public:
  SetTypingIndicatorRequest();
  virtual ~SetTypingIndicatorRequest();

  SetTypingIndicatorRequest(const SetTypingIndicatorRequest& from);
  SetTypingIndicatorRequest(SetTypingIndicatorRequest&& from) noexcept
    : SetTypingIndicatorRequest() {
    *this = ::std::move(from);
  }

  inline SetTypingIndicatorRequest& operator=(const SetTypingIndicatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTypingIndicatorRequest& operator=(SetTypingIndicatorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTypingIndicatorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTypingIndicatorRequest* internal_default_instance() {
    return reinterpret_cast<const SetTypingIndicatorRequest*>(
               &_SetTypingIndicatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SetTypingIndicatorRequest& a, SetTypingIndicatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTypingIndicatorRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTypingIndicatorRequest* New() const final {
    return CreateMaybeMessage<SetTypingIndicatorRequest>(nullptr);
  }

  SetTypingIndicatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTypingIndicatorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTypingIndicatorRequest& from);
  void MergeFrom(const SetTypingIndicatorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTypingIndicatorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.SetTypingIndicatorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
    kIndicatorFieldNumber = 4,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.TypingIndicator indicator = 4 [default = TYPING_START];
  bool has_indicator() const;
  private:
  bool _internal_has_indicator() const;
  public:
  void clear_indicator();
  ::bgs::protocol::TypingIndicator indicator() const;
  void set_indicator(::bgs::protocol::TypingIndicator value);
  private:
  ::bgs::protocol::TypingIndicator _internal_indicator() const;
  void _internal_set_indicator(::bgs::protocol::TypingIndicator value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SetTypingIndicatorRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  int indicator_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class AdvanceStreamViewTimeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest) */ {
 public:
  AdvanceStreamViewTimeRequest();
  virtual ~AdvanceStreamViewTimeRequest();

  AdvanceStreamViewTimeRequest(const AdvanceStreamViewTimeRequest& from);
  AdvanceStreamViewTimeRequest(AdvanceStreamViewTimeRequest&& from) noexcept
    : AdvanceStreamViewTimeRequest() {
    *this = ::std::move(from);
  }

  inline AdvanceStreamViewTimeRequest& operator=(const AdvanceStreamViewTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvanceStreamViewTimeRequest& operator=(AdvanceStreamViewTimeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdvanceStreamViewTimeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvanceStreamViewTimeRequest* internal_default_instance() {
    return reinterpret_cast<const AdvanceStreamViewTimeRequest*>(
               &_AdvanceStreamViewTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AdvanceStreamViewTimeRequest& a, AdvanceStreamViewTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvanceStreamViewTimeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvanceStreamViewTimeRequest* New() const final {
    return CreateMaybeMessage<AdvanceStreamViewTimeRequest>(nullptr);
  }

  AdvanceStreamViewTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvanceStreamViewTimeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdvanceStreamViewTimeRequest& from);
  void MergeFrom(const AdvanceStreamViewTimeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvanceStreamViewTimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AdvanceStreamViewTimeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 4,
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kStreamIdDeprecatedFieldNumber = 3,
  };
  // repeated uint64 stream_id = 4 [packed = true];
  int stream_id_size() const;
  private:
  int _internal_stream_id_size() const;
  public:
  void clear_stream_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_stream_id() const;
  void _internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_stream_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id(int index) const;
  void set_stream_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      stream_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_stream_id();

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id_deprecated = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_stream_id_deprecated() const;
  private:
  bool _internal_has_stream_id_deprecated() const;
  public:
  PROTOBUF_DEPRECATED void clear_stream_id_deprecated();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_deprecated() const;
  PROTOBUF_DEPRECATED void set_stream_id_deprecated(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id_deprecated() const;
  void _internal_set_stream_id_deprecated(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > stream_id_;
  mutable std::atomic<int> _stream_id_cached_byte_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_deprecated_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class AdvanceStreamMentionViewTimeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest) */ {
 public:
  AdvanceStreamMentionViewTimeRequest();
  virtual ~AdvanceStreamMentionViewTimeRequest();

  AdvanceStreamMentionViewTimeRequest(const AdvanceStreamMentionViewTimeRequest& from);
  AdvanceStreamMentionViewTimeRequest(AdvanceStreamMentionViewTimeRequest&& from) noexcept
    : AdvanceStreamMentionViewTimeRequest() {
    *this = ::std::move(from);
  }

  inline AdvanceStreamMentionViewTimeRequest& operator=(const AdvanceStreamMentionViewTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvanceStreamMentionViewTimeRequest& operator=(AdvanceStreamMentionViewTimeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdvanceStreamMentionViewTimeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvanceStreamMentionViewTimeRequest* internal_default_instance() {
    return reinterpret_cast<const AdvanceStreamMentionViewTimeRequest*>(
               &_AdvanceStreamMentionViewTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(AdvanceStreamMentionViewTimeRequest& a, AdvanceStreamMentionViewTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvanceStreamMentionViewTimeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvanceStreamMentionViewTimeRequest* New() const final {
    return CreateMaybeMessage<AdvanceStreamMentionViewTimeRequest>(nullptr);
  }

  AdvanceStreamMentionViewTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvanceStreamMentionViewTimeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdvanceStreamMentionViewTimeRequest& from);
  void MergeFrom(const AdvanceStreamMentionViewTimeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvanceStreamMentionViewTimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class AdvanceActivityViewTimeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest) */ {
 public:
  AdvanceActivityViewTimeRequest();
  virtual ~AdvanceActivityViewTimeRequest();

  AdvanceActivityViewTimeRequest(const AdvanceActivityViewTimeRequest& from);
  AdvanceActivityViewTimeRequest(AdvanceActivityViewTimeRequest&& from) noexcept
    : AdvanceActivityViewTimeRequest() {
    *this = ::std::move(from);
  }

  inline AdvanceActivityViewTimeRequest& operator=(const AdvanceActivityViewTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvanceActivityViewTimeRequest& operator=(AdvanceActivityViewTimeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdvanceActivityViewTimeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvanceActivityViewTimeRequest* internal_default_instance() {
    return reinterpret_cast<const AdvanceActivityViewTimeRequest*>(
               &_AdvanceActivityViewTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(AdvanceActivityViewTimeRequest& a, AdvanceActivityViewTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvanceActivityViewTimeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvanceActivityViewTimeRequest* New() const final {
    return CreateMaybeMessage<AdvanceActivityViewTimeRequest>(nullptr);
  }

  AdvanceActivityViewTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvanceActivityViewTimeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdvanceActivityViewTimeRequest& from);
  void MergeFrom(const AdvanceActivityViewTimeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvanceActivityViewTimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.AdvanceActivityViewTimeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamHistoryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamHistoryRequest) */ {
 public:
  GetStreamHistoryRequest();
  virtual ~GetStreamHistoryRequest();

  GetStreamHistoryRequest(const GetStreamHistoryRequest& from);
  GetStreamHistoryRequest(GetStreamHistoryRequest&& from) noexcept
    : GetStreamHistoryRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamHistoryRequest& operator=(const GetStreamHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamHistoryRequest& operator=(GetStreamHistoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamHistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamHistoryRequest*>(
               &_GetStreamHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetStreamHistoryRequest& a, GetStreamHistoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamHistoryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamHistoryRequest* New() const final {
    return CreateMaybeMessage<GetStreamHistoryRequest>(nullptr);
  }

  GetStreamHistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamHistoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamHistoryRequest& from);
  void MergeFrom(const GetStreamHistoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamHistoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamHistoryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 4,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.GetEventOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::GetEventOptions& options() const;
  ::bgs::protocol::GetEventOptions* release_options();
  ::bgs::protocol::GetEventOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::GetEventOptions* options);
  private:
  const ::bgs::protocol::GetEventOptions& _internal_options() const;
  ::bgs::protocol::GetEventOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamHistoryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::GetEventOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamHistoryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamHistoryResponse) */ {
 public:
  GetStreamHistoryResponse();
  virtual ~GetStreamHistoryResponse();

  GetStreamHistoryResponse(const GetStreamHistoryResponse& from);
  GetStreamHistoryResponse(GetStreamHistoryResponse&& from) noexcept
    : GetStreamHistoryResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamHistoryResponse& operator=(const GetStreamHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamHistoryResponse& operator=(GetStreamHistoryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamHistoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamHistoryResponse*>(
               &_GetStreamHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetStreamHistoryResponse& a, GetStreamHistoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamHistoryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamHistoryResponse* New() const final {
    return CreateMaybeMessage<GetStreamHistoryResponse>(nullptr);
  }

  GetStreamHistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamHistoryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamHistoryResponse& from);
  void MergeFrom(const GetStreamHistoryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamHistoryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamHistoryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kContinuationFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage >*
      mutable_message();
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message(int index) const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_add_message();
  public:
  const ::bgs::protocol::club::v1::StreamMessage& message(int index) const;
  ::bgs::protocol::club::v1::StreamMessage* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage >&
      message() const;

  // optional uint64 continuation = 2;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamHistoryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage > message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamMessageRequest) */ {
 public:
  GetStreamMessageRequest();
  virtual ~GetStreamMessageRequest();

  GetStreamMessageRequest(const GetStreamMessageRequest& from);
  GetStreamMessageRequest(GetStreamMessageRequest&& from) noexcept
    : GetStreamMessageRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamMessageRequest& operator=(const GetStreamMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamMessageRequest& operator=(GetStreamMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamMessageRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamMessageRequest*>(
               &_GetStreamMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetStreamMessageRequest& a, GetStreamMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamMessageRequest* New() const final {
    return CreateMaybeMessage<GetStreamMessageRequest>(nullptr);
  }

  GetStreamMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamMessageRequest& from);
  void MergeFrom(const GetStreamMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kMessageIdFieldNumber = 4,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.MessageId message_id = 4;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const ::bgs::protocol::MessageId& message_id() const;
  ::bgs::protocol::MessageId* release_message_id();
  ::bgs::protocol::MessageId* mutable_message_id();
  void set_allocated_message_id(::bgs::protocol::MessageId* message_id);
  private:
  const ::bgs::protocol::MessageId& _internal_message_id() const;
  ::bgs::protocol::MessageId* _internal_mutable_message_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::MessageId* message_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamMessageResponse) */ {
 public:
  GetStreamMessageResponse();
  virtual ~GetStreamMessageResponse();

  GetStreamMessageResponse(const GetStreamMessageResponse& from);
  GetStreamMessageResponse(GetStreamMessageResponse&& from) noexcept
    : GetStreamMessageResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamMessageResponse& operator=(const GetStreamMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamMessageResponse& operator=(GetStreamMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamMessageResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamMessageResponse*>(
               &_GetStreamMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetStreamMessageResponse& a, GetStreamMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamMessageResponse* New() const final {
    return CreateMaybeMessage<GetStreamMessageResponse>(nullptr);
  }

  GetStreamMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamMessageResponse& from);
  void MergeFrom(const GetStreamMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional .bgs.protocol.club.v1.StreamMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::bgs::protocol::club::v1::StreamMessage& message() const;
  ::bgs::protocol::club::v1::StreamMessage* release_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message();
  void set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message);
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message() const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::StreamMessage* message_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetClubActivityRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetClubActivityRequest) */ {
 public:
  GetClubActivityRequest();
  virtual ~GetClubActivityRequest();

  GetClubActivityRequest(const GetClubActivityRequest& from);
  GetClubActivityRequest(GetClubActivityRequest&& from) noexcept
    : GetClubActivityRequest() {
    *this = ::std::move(from);
  }

  inline GetClubActivityRequest& operator=(const GetClubActivityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClubActivityRequest& operator=(GetClubActivityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetClubActivityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClubActivityRequest* internal_default_instance() {
    return reinterpret_cast<const GetClubActivityRequest*>(
               &_GetClubActivityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GetClubActivityRequest& a, GetClubActivityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClubActivityRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetClubActivityRequest* New() const final {
    return CreateMaybeMessage<GetClubActivityRequest>(nullptr);
  }

  GetClubActivityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetClubActivityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetClubActivityRequest& from);
  void MergeFrom(const GetClubActivityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClubActivityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetClubActivityRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
    kClubIdFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.GetEventOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bgs::protocol::GetEventOptions& options() const;
  ::bgs::protocol::GetEventOptions* release_options();
  ::bgs::protocol::GetEventOptions* mutable_options();
  void set_allocated_options(::bgs::protocol::GetEventOptions* options);
  private:
  const ::bgs::protocol::GetEventOptions& _internal_options() const;
  ::bgs::protocol::GetEventOptions* _internal_mutable_options();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetClubActivityRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::GetEventOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetClubActivityResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetClubActivityResponse) */ {
 public:
  GetClubActivityResponse();
  virtual ~GetClubActivityResponse();

  GetClubActivityResponse(const GetClubActivityResponse& from);
  GetClubActivityResponse(GetClubActivityResponse&& from) noexcept
    : GetClubActivityResponse() {
    *this = ::std::move(from);
  }

  inline GetClubActivityResponse& operator=(const GetClubActivityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClubActivityResponse& operator=(GetClubActivityResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetClubActivityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClubActivityResponse* internal_default_instance() {
    return reinterpret_cast<const GetClubActivityResponse*>(
               &_GetClubActivityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GetClubActivityResponse& a, GetClubActivityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClubActivityResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetClubActivityResponse* New() const final {
    return CreateMaybeMessage<GetClubActivityResponse>(nullptr);
  }

  GetClubActivityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetClubActivityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetClubActivityResponse& from);
  void MergeFrom(const GetClubActivityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClubActivityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetClubActivityResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContinuationFieldNumber = 2,
  };
  // optional uint64 continuation = 2;
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation() const;
  void set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_continuation() const;
  void _internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetClubActivityResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 continuation_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamVoiceTokenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamVoiceTokenRequest) */ {
 public:
  GetStreamVoiceTokenRequest();
  virtual ~GetStreamVoiceTokenRequest();

  GetStreamVoiceTokenRequest(const GetStreamVoiceTokenRequest& from);
  GetStreamVoiceTokenRequest(GetStreamVoiceTokenRequest&& from) noexcept
    : GetStreamVoiceTokenRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamVoiceTokenRequest& operator=(const GetStreamVoiceTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamVoiceTokenRequest& operator=(GetStreamVoiceTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamVoiceTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamVoiceTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamVoiceTokenRequest*>(
               &_GetStreamVoiceTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetStreamVoiceTokenRequest& a, GetStreamVoiceTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamVoiceTokenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamVoiceTokenRequest* New() const final {
    return CreateMaybeMessage<GetStreamVoiceTokenRequest>(nullptr);
  }

  GetStreamVoiceTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamVoiceTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamVoiceTokenRequest& from);
  void MergeFrom(const GetStreamVoiceTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamVoiceTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamVoiceTokenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamVoiceTokenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class GetStreamVoiceTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.GetStreamVoiceTokenResponse) */ {
 public:
  GetStreamVoiceTokenResponse();
  virtual ~GetStreamVoiceTokenResponse();

  GetStreamVoiceTokenResponse(const GetStreamVoiceTokenResponse& from);
  GetStreamVoiceTokenResponse(GetStreamVoiceTokenResponse&& from) noexcept
    : GetStreamVoiceTokenResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamVoiceTokenResponse& operator=(const GetStreamVoiceTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamVoiceTokenResponse& operator=(GetStreamVoiceTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamVoiceTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamVoiceTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamVoiceTokenResponse*>(
               &_GetStreamVoiceTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetStreamVoiceTokenResponse& a, GetStreamVoiceTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamVoiceTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamVoiceTokenResponse* New() const final {
    return CreateMaybeMessage<GetStreamVoiceTokenResponse>(nullptr);
  }

  GetStreamVoiceTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamVoiceTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamVoiceTokenResponse& from);
  void MergeFrom(const GetStreamVoiceTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamVoiceTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.GetStreamVoiceTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelUriFieldNumber = 1,
    kCredentialsFieldNumber = 2,
  };
  // optional string channel_uri = 1;
  bool has_channel_uri() const;
  private:
  bool _internal_has_channel_uri() const;
  public:
  void clear_channel_uri();
  const std::string& channel_uri() const;
  void set_channel_uri(const std::string& value);
  void set_channel_uri(std::string&& value);
  void set_channel_uri(const char* value);
  void set_channel_uri(const char* value, size_t size);
  std::string* mutable_channel_uri();
  std::string* release_channel_uri();
  void set_allocated_channel_uri(std::string* channel_uri);
  private:
  const std::string& _internal_channel_uri() const;
  void _internal_set_channel_uri(const std::string& value);
  std::string* _internal_mutable_channel_uri();
  public:

  // optional .bgs.protocol.VoiceCredentials credentials = 2;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  const ::bgs::protocol::VoiceCredentials& credentials() const;
  ::bgs::protocol::VoiceCredentials* release_credentials();
  ::bgs::protocol::VoiceCredentials* mutable_credentials();
  void set_allocated_credentials(::bgs::protocol::VoiceCredentials* credentials);
  private:
  const ::bgs::protocol::VoiceCredentials& _internal_credentials() const;
  ::bgs::protocol::VoiceCredentials* _internal_mutable_credentials();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.GetStreamVoiceTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_uri_;
  ::bgs::protocol::VoiceCredentials* credentials_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// -------------------------------------------------------------------

class KickFromStreamVoiceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.KickFromStreamVoiceRequest) */ {
 public:
  KickFromStreamVoiceRequest();
  virtual ~KickFromStreamVoiceRequest();

  KickFromStreamVoiceRequest(const KickFromStreamVoiceRequest& from);
  KickFromStreamVoiceRequest(KickFromStreamVoiceRequest&& from) noexcept
    : KickFromStreamVoiceRequest() {
    *this = ::std::move(from);
  }

  inline KickFromStreamVoiceRequest& operator=(const KickFromStreamVoiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickFromStreamVoiceRequest& operator=(KickFromStreamVoiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickFromStreamVoiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickFromStreamVoiceRequest* internal_default_instance() {
    return reinterpret_cast<const KickFromStreamVoiceRequest*>(
               &_KickFromStreamVoiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(KickFromStreamVoiceRequest& a, KickFromStreamVoiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KickFromStreamVoiceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickFromStreamVoiceRequest* New() const final {
    return CreateMaybeMessage<KickFromStreamVoiceRequest>(nullptr);
  }

  KickFromStreamVoiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickFromStreamVoiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickFromStreamVoiceRequest& from);
  void MergeFrom(const KickFromStreamVoiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickFromStreamVoiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.KickFromStreamVoiceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kTargetIdFieldNumber = 4,
    kClubIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  bool has_agent_id() const;
  private:
  bool _internal_has_agent_id() const;
  public:
  void clear_agent_id();
  const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  ::bgs::protocol::club::v1::MemberId* release_agent_id();
  ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_agent_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_agent_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId target_id = 4;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::club::v1::MemberId& target_id() const;
  ::bgs::protocol::club::v1::MemberId* release_target_id();
  ::bgs::protocol::club::v1::MemberId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_target_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_target_id();
  public:

  // optional uint64 club_id = 2;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.KickFromStreamVoiceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::bgs::protocol::club::v1::MemberId* target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SubscribeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SubscribeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SubscribeRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscribeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscribeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SubscribeRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscribeRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool SubscribeRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubscribeRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void SubscribeRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeRequest.club_id)
  return _internal_club_id();
}
inline void SubscribeRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void SubscribeRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SubscribeRequest.club_id)
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UnsubscribeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UnsubscribeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UnsubscribeRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UnsubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnsubscribeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UnsubscribeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UnsubscribeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UnsubscribeRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UnsubscribeRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool UnsubscribeRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnsubscribeRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void UnsubscribeRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnsubscribeRequest.club_id)
  return _internal_club_id();
}
inline void UnsubscribeRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void UnsubscribeRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UnsubscribeRequest.club_id)
}

// -------------------------------------------------------------------

// CreateRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool CreateRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool CreateRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& CreateRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& CreateRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* CreateRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* CreateRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* CreateRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void CreateRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateRequest.agent_id)
}

// optional .bgs.protocol.club.v1.ClubCreateOptions options = 2;
inline bool CreateRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool CreateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::ClubCreateOptions& CreateRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::ClubCreateOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubCreateOptions*>(
      &::bgs::protocol::club::v1::_ClubCreateOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubCreateOptions& CreateRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::ClubCreateOptions* CreateRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubCreateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubCreateOptions* CreateRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubCreateOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::ClubCreateOptions* CreateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateRequest.options)
  return _internal_mutable_options();
}
inline void CreateRequest::set_allocated_options(::bgs::protocol::club::v1::ClubCreateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateRequest.options)
}

// -------------------------------------------------------------------

// CreateResponse

// optional uint64 club_id = 1;
inline bool CreateResponse::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateResponse::has_club_id() const {
  return _internal_has_club_id();
}
inline void CreateResponse::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateResponse::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateResponse::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateResponse.club_id)
  return _internal_club_id();
}
inline void CreateResponse::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  club_id_ = value;
}
inline void CreateResponse::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateResponse.club_id)
}

// -------------------------------------------------------------------

// DestroyRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool DestroyRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool DestroyRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& DestroyRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& DestroyRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* DestroyRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DestroyRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* DestroyRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* DestroyRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DestroyRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void DestroyRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DestroyRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool DestroyRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DestroyRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void DestroyRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyRequest.club_id)
  return _internal_club_id();
}
inline void DestroyRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void DestroyRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DestroyRequest.club_id)
}

// -------------------------------------------------------------------

// GetDescriptionRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetDescriptionRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetDescriptionRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetDescriptionRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetDescriptionRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetDescriptionRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetDescriptionRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetDescriptionRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetDescriptionRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetDescriptionRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetDescriptionRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetDescriptionRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetDescriptionRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetDescriptionRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetDescriptionRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetDescriptionRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetDescriptionRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetDescriptionRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetDescriptionRequest.club_id)
  return _internal_club_id();
}
inline void GetDescriptionRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetDescriptionRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetDescriptionRequest.club_id)
}

// -------------------------------------------------------------------

// GetDescriptionResponse

// optional .bgs.protocol.club.v1.ClubDescription club = 1;
inline bool GetDescriptionResponse::_internal_has_club() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || club_ != nullptr);
  return value;
}
inline bool GetDescriptionResponse::has_club() const {
  return _internal_has_club();
}
inline const ::bgs::protocol::club::v1::ClubDescription& GetDescriptionResponse::_internal_club() const {
  const ::bgs::protocol::club::v1::ClubDescription* p = club_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubDescription*>(
      &::bgs::protocol::club::v1::_ClubDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubDescription& GetDescriptionResponse::club() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetDescriptionResponse.club)
  return _internal_club();
}
inline ::bgs::protocol::club::v1::ClubDescription* GetDescriptionResponse::release_club() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetDescriptionResponse.club)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubDescription* temp = club_;
  club_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubDescription* GetDescriptionResponse::_internal_mutable_club() {
  _has_bits_[0] |= 0x00000001u;
  if (club_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubDescription>(GetArenaNoVirtual());
    club_ = p;
  }
  return club_;
}
inline ::bgs::protocol::club::v1::ClubDescription* GetDescriptionResponse::mutable_club() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetDescriptionResponse.club)
  return _internal_mutable_club();
}
inline void GetDescriptionResponse::set_allocated_club(::bgs::protocol::club::v1::ClubDescription* club) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(club_);
  }
  if (club) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      club = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, club, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  club_ = club;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetDescriptionResponse.club)
}

// -------------------------------------------------------------------

// GetClubTypeRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetClubTypeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetClubTypeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetClubTypeRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetClubTypeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubTypeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetClubTypeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetClubTypeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetClubTypeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetClubTypeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetClubTypeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetClubTypeRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetClubTypeRequest.agent_id)
}

// optional .bgs.protocol.club.v1.UniqueClubType type = 2;
inline bool GetClubTypeRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool GetClubTypeRequest::has_type() const {
  return _internal_has_type();
}
inline const ::bgs::protocol::club::v1::UniqueClubType& GetClubTypeRequest::_internal_type() const {
  const ::bgs::protocol::club::v1::UniqueClubType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::UniqueClubType*>(
      &::bgs::protocol::club::v1::_UniqueClubType_default_instance_);
}
inline const ::bgs::protocol::club::v1::UniqueClubType& GetClubTypeRequest::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubTypeRequest.type)
  return _internal_type();
}
inline ::bgs::protocol::club::v1::UniqueClubType* GetClubTypeRequest::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetClubTypeRequest.type)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::UniqueClubType* GetClubTypeRequest::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::UniqueClubType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* GetClubTypeRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetClubTypeRequest.type)
  return _internal_mutable_type();
}
inline void GetClubTypeRequest::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetClubTypeRequest.type)
}

// -------------------------------------------------------------------

// GetClubTypeResponse

// optional .bgs.protocol.club.v1.UniqueClubType type = 1;
inline bool GetClubTypeResponse::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool GetClubTypeResponse::has_type() const {
  return _internal_has_type();
}
inline const ::bgs::protocol::club::v1::UniqueClubType& GetClubTypeResponse::_internal_type() const {
  const ::bgs::protocol::club::v1::UniqueClubType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::UniqueClubType*>(
      &::bgs::protocol::club::v1::_UniqueClubType_default_instance_);
}
inline const ::bgs::protocol::club::v1::UniqueClubType& GetClubTypeResponse::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubTypeResponse.type)
  return _internal_type();
}
inline ::bgs::protocol::club::v1::UniqueClubType* GetClubTypeResponse::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetClubTypeResponse.type)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::UniqueClubType* GetClubTypeResponse::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::UniqueClubType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* GetClubTypeResponse::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetClubTypeResponse.type)
  return _internal_mutable_type();
}
inline void GetClubTypeResponse::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetClubTypeResponse.type)
}

// optional .bgs.protocol.club.v1.ClubRoleSet role_set = 2;
inline bool GetClubTypeResponse::_internal_has_role_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || role_set_ != nullptr);
  return value;
}
inline bool GetClubTypeResponse::has_role_set() const {
  return _internal_has_role_set();
}
inline const ::bgs::protocol::club::v1::ClubRoleSet& GetClubTypeResponse::_internal_role_set() const {
  const ::bgs::protocol::club::v1::ClubRoleSet* p = role_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubRoleSet*>(
      &::bgs::protocol::club::v1::_ClubRoleSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubRoleSet& GetClubTypeResponse::role_set() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubTypeResponse.role_set)
  return _internal_role_set();
}
inline ::bgs::protocol::club::v1::ClubRoleSet* GetClubTypeResponse::release_role_set() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetClubTypeResponse.role_set)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubRoleSet* temp = role_set_;
  role_set_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubRoleSet* GetClubTypeResponse::_internal_mutable_role_set() {
  _has_bits_[0] |= 0x00000002u;
  if (role_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubRoleSet>(GetArenaNoVirtual());
    role_set_ = p;
  }
  return role_set_;
}
inline ::bgs::protocol::club::v1::ClubRoleSet* GetClubTypeResponse::mutable_role_set() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetClubTypeResponse.role_set)
  return _internal_mutable_role_set();
}
inline void GetClubTypeResponse::set_allocated_role_set(::bgs::protocol::club::v1::ClubRoleSet* role_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_set_);
  }
  if (role_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      role_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  role_set_ = role_set;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetClubTypeResponse.role_set)
}

// optional .bgs.protocol.club.v1.ClubTypeRangeSet range_set = 3;
inline bool GetClubTypeResponse::_internal_has_range_set() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || range_set_ != nullptr);
  return value;
}
inline bool GetClubTypeResponse::has_range_set() const {
  return _internal_has_range_set();
}
inline const ::bgs::protocol::club::v1::ClubTypeRangeSet& GetClubTypeResponse::_internal_range_set() const {
  const ::bgs::protocol::club::v1::ClubTypeRangeSet* p = range_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubTypeRangeSet*>(
      &::bgs::protocol::club::v1::_ClubTypeRangeSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubTypeRangeSet& GetClubTypeResponse::range_set() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubTypeResponse.range_set)
  return _internal_range_set();
}
inline ::bgs::protocol::club::v1::ClubTypeRangeSet* GetClubTypeResponse::release_range_set() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetClubTypeResponse.range_set)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::ClubTypeRangeSet* temp = range_set_;
  range_set_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubTypeRangeSet* GetClubTypeResponse::_internal_mutable_range_set() {
  _has_bits_[0] |= 0x00000004u;
  if (range_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubTypeRangeSet>(GetArenaNoVirtual());
    range_set_ = p;
  }
  return range_set_;
}
inline ::bgs::protocol::club::v1::ClubTypeRangeSet* GetClubTypeResponse::mutable_range_set() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetClubTypeResponse.range_set)
  return _internal_mutable_range_set();
}
inline void GetClubTypeResponse::set_allocated_range_set(::bgs::protocol::club::v1::ClubTypeRangeSet* range_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_set_);
  }
  if (range_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      range_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_set_ = range_set;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetClubTypeResponse.range_set)
}

// -------------------------------------------------------------------

// UpdateClubStateRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UpdateClubStateRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UpdateClubStateRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateClubStateRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateClubStateRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateClubStateRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UpdateClubStateRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateClubStateRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateClubStateRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateClubStateRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateClubStateRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UpdateClubStateRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateClubStateRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool UpdateClubStateRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpdateClubStateRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void UpdateClubStateRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateClubStateRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateClubStateRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateClubStateRequest.club_id)
  return _internal_club_id();
}
inline void UpdateClubStateRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void UpdateClubStateRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UpdateClubStateRequest.club_id)
}

// optional .bgs.protocol.club.v1.ClubStateOptions options = 3;
inline bool UpdateClubStateRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool UpdateClubStateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::ClubStateOptions& UpdateClubStateRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::ClubStateOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubStateOptions*>(
      &::bgs::protocol::club::v1::_ClubStateOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubStateOptions& UpdateClubStateRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateClubStateRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::ClubStateOptions* UpdateClubStateRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateClubStateRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubStateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubStateOptions* UpdateClubStateRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubStateOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::ClubStateOptions* UpdateClubStateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateClubStateRequest.options)
  return _internal_mutable_options();
}
inline void UpdateClubStateRequest::set_allocated_options(::bgs::protocol::club::v1::ClubStateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateClubStateRequest.options)
}

// -------------------------------------------------------------------

// UpdateClubSettingsRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UpdateClubSettingsRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UpdateClubSettingsRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateClubSettingsRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateClubSettingsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateClubSettingsRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UpdateClubSettingsRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateClubSettingsRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateClubSettingsRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateClubSettingsRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateClubSettingsRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UpdateClubSettingsRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateClubSettingsRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool UpdateClubSettingsRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpdateClubSettingsRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void UpdateClubSettingsRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateClubSettingsRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateClubSettingsRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateClubSettingsRequest.club_id)
  return _internal_club_id();
}
inline void UpdateClubSettingsRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void UpdateClubSettingsRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UpdateClubSettingsRequest.club_id)
}

// optional .bgs.protocol.club.v1.ClubSettingsOptions options = 3;
inline bool UpdateClubSettingsRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool UpdateClubSettingsRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::ClubSettingsOptions& UpdateClubSettingsRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::ClubSettingsOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSettingsOptions*>(
      &::bgs::protocol::club::v1::_ClubSettingsOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSettingsOptions& UpdateClubSettingsRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateClubSettingsRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::ClubSettingsOptions* UpdateClubSettingsRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateClubSettingsRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubSettingsOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSettingsOptions* UpdateClubSettingsRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSettingsOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::ClubSettingsOptions* UpdateClubSettingsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateClubSettingsRequest.options)
  return _internal_mutable_options();
}
inline void UpdateClubSettingsRequest::set_allocated_options(::bgs::protocol::club::v1::ClubSettingsOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateClubSettingsRequest.options)
}

// -------------------------------------------------------------------

// JoinRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool JoinRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool JoinRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& JoinRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& JoinRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.JoinRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* JoinRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.JoinRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* JoinRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* JoinRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.JoinRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void JoinRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.JoinRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool JoinRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JoinRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void JoinRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JoinRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JoinRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.JoinRequest.club_id)
  return _internal_club_id();
}
inline void JoinRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void JoinRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.JoinRequest.club_id)
}

// optional .bgs.protocol.club.v1.CreateMemberOptions options = 3;
inline bool JoinRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool JoinRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::CreateMemberOptions& JoinRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::CreateMemberOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::CreateMemberOptions*>(
      &::bgs::protocol::club::v1::_CreateMemberOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::CreateMemberOptions& JoinRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.JoinRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::CreateMemberOptions* JoinRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.JoinRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::CreateMemberOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::CreateMemberOptions* JoinRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::CreateMemberOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::CreateMemberOptions* JoinRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.JoinRequest.options)
  return _internal_mutable_options();
}
inline void JoinRequest::set_allocated_options(::bgs::protocol::club::v1::CreateMemberOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.JoinRequest.options)
}

// -------------------------------------------------------------------

// LeaveRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool LeaveRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool LeaveRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& LeaveRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& LeaveRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.LeaveRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* LeaveRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.LeaveRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* LeaveRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* LeaveRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.LeaveRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void LeaveRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.LeaveRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool LeaveRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LeaveRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void LeaveRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LeaveRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LeaveRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.LeaveRequest.club_id)
  return _internal_club_id();
}
inline void LeaveRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void LeaveRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.LeaveRequest.club_id)
}

// -------------------------------------------------------------------

// KickRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool KickRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool KickRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& KickRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& KickRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.KickRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* KickRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.KickRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* KickRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* KickRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.KickRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void KickRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.KickRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool KickRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KickRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void KickRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KickRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KickRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.KickRequest.club_id)
  return _internal_club_id();
}
inline void KickRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void KickRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.KickRequest.club_id)
}

// optional .bgs.protocol.club.v1.MemberId target_id = 3;
inline bool KickRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool KickRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::club::v1::MemberId& KickRequest::_internal_target_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& KickRequest::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.KickRequest.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::club::v1::MemberId* KickRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.KickRequest.target_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* KickRequest::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::club::v1::MemberId* KickRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.KickRequest.target_id)
  return _internal_mutable_target_id();
}
inline void KickRequest::set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.KickRequest.target_id)
}

// -------------------------------------------------------------------

// GetMemberRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetMemberRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetMemberRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetMemberRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetMemberRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMemberRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetMemberRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetMemberRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetMemberRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetMemberRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetMemberRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetMemberRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetMemberRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetMemberRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetMemberRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetMemberRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMemberRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMemberRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMemberRequest.club_id)
  return _internal_club_id();
}
inline void GetMemberRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void GetMemberRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetMemberRequest.club_id)
}

// optional .bgs.protocol.club.v1.MemberId member_id = 3;
inline bool GetMemberRequest::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool GetMemberRequest::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetMemberRequest::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetMemberRequest::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMemberRequest.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetMemberRequest::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetMemberRequest.member_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetMemberRequest::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000002u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetMemberRequest::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetMemberRequest.member_id)
  return _internal_mutable_member_id();
}
inline void GetMemberRequest::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetMemberRequest.member_id)
}

// -------------------------------------------------------------------

// GetMemberResponse

// optional .bgs.protocol.club.v1.Member member = 1;
inline bool GetMemberResponse::_internal_has_member() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_ != nullptr);
  return value;
}
inline bool GetMemberResponse::has_member() const {
  return _internal_has_member();
}
inline const ::bgs::protocol::club::v1::Member& GetMemberResponse::_internal_member() const {
  const ::bgs::protocol::club::v1::Member* p = member_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::Member*>(
      &::bgs::protocol::club::v1::_Member_default_instance_);
}
inline const ::bgs::protocol::club::v1::Member& GetMemberResponse::member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMemberResponse.member)
  return _internal_member();
}
inline ::bgs::protocol::club::v1::Member* GetMemberResponse::release_member() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetMemberResponse.member)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::Member* temp = member_;
  member_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::Member* GetMemberResponse::_internal_mutable_member() {
  _has_bits_[0] |= 0x00000001u;
  if (member_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::Member>(GetArenaNoVirtual());
    member_ = p;
  }
  return member_;
}
inline ::bgs::protocol::club::v1::Member* GetMemberResponse::mutable_member() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetMemberResponse.member)
  return _internal_mutable_member();
}
inline void GetMemberResponse::set_allocated_member(::bgs::protocol::club::v1::Member* member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_);
  }
  if (member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetMemberResponse.member)
}

// -------------------------------------------------------------------

// GetMembersRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetMembersRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetMembersRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetMembersRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetMembersRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMembersRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetMembersRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetMembersRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetMembersRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetMembersRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetMembersRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetMembersRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetMembersRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetMembersRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetMembersRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetMembersRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMembersRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMembersRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMembersRequest.club_id)
  return _internal_club_id();
}
inline void GetMembersRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetMembersRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetMembersRequest.club_id)
}

// optional uint64 continuation = 4;
inline bool GetMembersRequest::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetMembersRequest::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetMembersRequest::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMembersRequest::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMembersRequest::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMembersRequest.continuation)
  return _internal_continuation();
}
inline void GetMembersRequest::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  continuation_ = value;
}
inline void GetMembersRequest::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetMembersRequest.continuation)
}

// -------------------------------------------------------------------

// GetMembersResponse

// repeated .bgs.protocol.club.v1.Member member = 1;
inline int GetMembersResponse::_internal_member_size() const {
  return member_.size();
}
inline int GetMembersResponse::member_size() const {
  return _internal_member_size();
}
inline ::bgs::protocol::club::v1::Member* GetMembersResponse::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetMembersResponse.member)
  return member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member >*
GetMembersResponse::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.GetMembersResponse.member)
  return &member_;
}
inline const ::bgs::protocol::club::v1::Member& GetMembersResponse::_internal_member(int index) const {
  return member_.Get(index);
}
inline const ::bgs::protocol::club::v1::Member& GetMembersResponse::member(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMembersResponse.member)
  return _internal_member(index);
}
inline ::bgs::protocol::club::v1::Member* GetMembersResponse::_internal_add_member() {
  return member_.Add();
}
inline ::bgs::protocol::club::v1::Member* GetMembersResponse::add_member() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.GetMembersResponse.member)
  return _internal_add_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Member >&
GetMembersResponse::member() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.GetMembersResponse.member)
  return member_;
}

// optional uint64 continuation = 2;
inline bool GetMembersResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetMembersResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetMembersResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMembersResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMembersResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetMembersResponse.continuation)
  return _internal_continuation();
}
inline void GetMembersResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetMembersResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetMembersResponse.continuation)
}

// -------------------------------------------------------------------

// UpdateMemberStateRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UpdateMemberStateRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UpdateMemberStateRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateMemberStateRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateMemberStateRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateMemberStateRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UpdateMemberStateRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateMemberStateRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateMemberStateRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateMemberStateRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateMemberStateRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UpdateMemberStateRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateMemberStateRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool UpdateMemberStateRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UpdateMemberStateRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void UpdateMemberStateRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateMemberStateRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateMemberStateRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateMemberStateRequest.club_id)
  return _internal_club_id();
}
inline void UpdateMemberStateRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  club_id_ = value;
}
inline void UpdateMemberStateRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UpdateMemberStateRequest.club_id)
}

// optional .bgs.protocol.club.v1.MemberId member_id = 3;
inline bool UpdateMemberStateRequest::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool UpdateMemberStateRequest::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateMemberStateRequest::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateMemberStateRequest::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateMemberStateRequest.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* UpdateMemberStateRequest::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateMemberStateRequest.member_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateMemberStateRequest::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000002u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateMemberStateRequest::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateMemberStateRequest.member_id)
  return _internal_mutable_member_id();
}
inline void UpdateMemberStateRequest::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateMemberStateRequest.member_id)
}

// optional .bgs.protocol.club.v1.MemberStateOptions options = 5;
inline bool UpdateMemberStateRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool UpdateMemberStateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::MemberStateOptions& UpdateMemberStateRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::MemberStateOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberStateOptions*>(
      &::bgs::protocol::club::v1::_MemberStateOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberStateOptions& UpdateMemberStateRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateMemberStateRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::MemberStateOptions* UpdateMemberStateRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateMemberStateRequest.options)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::MemberStateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberStateOptions* UpdateMemberStateRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000004u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberStateOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::MemberStateOptions* UpdateMemberStateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateMemberStateRequest.options)
  return _internal_mutable_options();
}
inline void UpdateMemberStateRequest::set_allocated_options(::bgs::protocol::club::v1::MemberStateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateMemberStateRequest.options)
}

// -------------------------------------------------------------------

// UpdateSubscriberStateRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UpdateSubscriberStateRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UpdateSubscriberStateRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateSubscriberStateRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateSubscriberStateRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateSubscriberStateRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UpdateSubscriberStateRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateSubscriberStateRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateSubscriberStateRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateSubscriberStateRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateSubscriberStateRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UpdateSubscriberStateRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateSubscriberStateRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool UpdateSubscriberStateRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpdateSubscriberStateRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void UpdateSubscriberStateRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateSubscriberStateRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateSubscriberStateRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateSubscriberStateRequest.club_id)
  return _internal_club_id();
}
inline void UpdateSubscriberStateRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void UpdateSubscriberStateRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UpdateSubscriberStateRequest.club_id)
}

// optional .bgs.protocol.club.v1.SubscriberStateOptions options = 3;
inline bool UpdateSubscriberStateRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool UpdateSubscriberStateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::SubscriberStateOptions& UpdateSubscriberStateRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::SubscriberStateOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::SubscriberStateOptions*>(
      &::bgs::protocol::club::v1::_SubscriberStateOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::SubscriberStateOptions& UpdateSubscriberStateRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateSubscriberStateRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::SubscriberStateOptions* UpdateSubscriberStateRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateSubscriberStateRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::SubscriberStateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::SubscriberStateOptions* UpdateSubscriberStateRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::SubscriberStateOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::SubscriberStateOptions* UpdateSubscriberStateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateSubscriberStateRequest.options)
  return _internal_mutable_options();
}
inline void UpdateSubscriberStateRequest::set_allocated_options(::bgs::protocol::club::v1::SubscriberStateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateSubscriberStateRequest.options)
}

// -------------------------------------------------------------------

// AssignRoleRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool AssignRoleRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AssignRoleRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& AssignRoleRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& AssignRoleRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AssignRoleRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* AssignRoleRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AssignRoleRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* AssignRoleRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* AssignRoleRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AssignRoleRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AssignRoleRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AssignRoleRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool AssignRoleRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AssignRoleRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void AssignRoleRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssignRoleRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssignRoleRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AssignRoleRequest.club_id)
  return _internal_club_id();
}
inline void AssignRoleRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void AssignRoleRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AssignRoleRequest.club_id)
}

// optional .bgs.protocol.club.v1.RoleOptions options = 3;
inline bool AssignRoleRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool AssignRoleRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::RoleOptions& AssignRoleRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::RoleOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::RoleOptions*>(
      &::bgs::protocol::club::v1::_RoleOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::RoleOptions& AssignRoleRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AssignRoleRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::RoleOptions* AssignRoleRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AssignRoleRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::RoleOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::RoleOptions* AssignRoleRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::RoleOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::RoleOptions* AssignRoleRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AssignRoleRequest.options)
  return _internal_mutable_options();
}
inline void AssignRoleRequest::set_allocated_options(::bgs::protocol::club::v1::RoleOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AssignRoleRequest.options)
}

// -------------------------------------------------------------------

// UnassignRoleRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UnassignRoleRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UnassignRoleRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UnassignRoleRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UnassignRoleRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnassignRoleRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UnassignRoleRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UnassignRoleRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UnassignRoleRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UnassignRoleRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UnassignRoleRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UnassignRoleRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UnassignRoleRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool UnassignRoleRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UnassignRoleRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void UnassignRoleRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnassignRoleRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnassignRoleRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnassignRoleRequest.club_id)
  return _internal_club_id();
}
inline void UnassignRoleRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void UnassignRoleRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UnassignRoleRequest.club_id)
}

// optional .bgs.protocol.club.v1.RoleOptions options = 3;
inline bool UnassignRoleRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool UnassignRoleRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::RoleOptions& UnassignRoleRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::RoleOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::RoleOptions*>(
      &::bgs::protocol::club::v1::_RoleOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::RoleOptions& UnassignRoleRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnassignRoleRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::RoleOptions* UnassignRoleRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UnassignRoleRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::RoleOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::RoleOptions* UnassignRoleRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::RoleOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::RoleOptions* UnassignRoleRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UnassignRoleRequest.options)
  return _internal_mutable_options();
}
inline void UnassignRoleRequest::set_allocated_options(::bgs::protocol::club::v1::RoleOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UnassignRoleRequest.options)
}

// -------------------------------------------------------------------

// SendInvitationRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SendInvitationRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SendInvitationRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SendInvitationRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SendInvitationRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendInvitationRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SendInvitationRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SendInvitationRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SendInvitationRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SendInvitationRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendInvitationRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SendInvitationRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SendInvitationRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool SendInvitationRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SendInvitationRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void SendInvitationRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendInvitationRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendInvitationRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendInvitationRequest.club_id)
  return _internal_club_id();
}
inline void SendInvitationRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void SendInvitationRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SendInvitationRequest.club_id)
}

// optional .bgs.protocol.club.v1.SendInvitationOptions options = 3;
inline bool SendInvitationRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool SendInvitationRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::SendInvitationOptions& SendInvitationRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::SendInvitationOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::SendInvitationOptions*>(
      &::bgs::protocol::club::v1::_SendInvitationOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::SendInvitationOptions& SendInvitationRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendInvitationRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::SendInvitationOptions* SendInvitationRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SendInvitationRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::SendInvitationOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::SendInvitationOptions* SendInvitationRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::SendInvitationOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::SendInvitationOptions* SendInvitationRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendInvitationRequest.options)
  return _internal_mutable_options();
}
inline void SendInvitationRequest::set_allocated_options(::bgs::protocol::club::v1::SendInvitationOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SendInvitationRequest.options)
}

// -------------------------------------------------------------------

// AcceptInvitationRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool AcceptInvitationRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AcceptInvitationRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& AcceptInvitationRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& AcceptInvitationRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AcceptInvitationRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* AcceptInvitationRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AcceptInvitationRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* AcceptInvitationRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* AcceptInvitationRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AcceptInvitationRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AcceptInvitationRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AcceptInvitationRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool AcceptInvitationRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AcceptInvitationRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void AcceptInvitationRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptInvitationRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptInvitationRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AcceptInvitationRequest.club_id)
  return _internal_club_id();
}
inline void AcceptInvitationRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void AcceptInvitationRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AcceptInvitationRequest.club_id)
}

// optional fixed64 invitation_id = 3;
inline bool AcceptInvitationRequest::_internal_has_invitation_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AcceptInvitationRequest::has_invitation_id() const {
  return _internal_has_invitation_id();
}
inline void AcceptInvitationRequest::clear_invitation_id() {
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptInvitationRequest::_internal_invitation_id() const {
  return invitation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptInvitationRequest::invitation_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AcceptInvitationRequest.invitation_id)
  return _internal_invitation_id();
}
inline void AcceptInvitationRequest::_internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  invitation_id_ = value;
}
inline void AcceptInvitationRequest::set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invitation_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AcceptInvitationRequest.invitation_id)
}

// -------------------------------------------------------------------

// DeclineInvitationRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool DeclineInvitationRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool DeclineInvitationRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& DeclineInvitationRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& DeclineInvitationRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DeclineInvitationRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* DeclineInvitationRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DeclineInvitationRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* DeclineInvitationRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* DeclineInvitationRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DeclineInvitationRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void DeclineInvitationRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DeclineInvitationRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool DeclineInvitationRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeclineInvitationRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void DeclineInvitationRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeclineInvitationRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeclineInvitationRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DeclineInvitationRequest.club_id)
  return _internal_club_id();
}
inline void DeclineInvitationRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void DeclineInvitationRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DeclineInvitationRequest.club_id)
}

// optional fixed64 invitation_id = 3;
inline bool DeclineInvitationRequest::_internal_has_invitation_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeclineInvitationRequest::has_invitation_id() const {
  return _internal_has_invitation_id();
}
inline void DeclineInvitationRequest::clear_invitation_id() {
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeclineInvitationRequest::_internal_invitation_id() const {
  return invitation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeclineInvitationRequest::invitation_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DeclineInvitationRequest.invitation_id)
  return _internal_invitation_id();
}
inline void DeclineInvitationRequest::_internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  invitation_id_ = value;
}
inline void DeclineInvitationRequest::set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invitation_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DeclineInvitationRequest.invitation_id)
}

// -------------------------------------------------------------------

// RevokeInvitationRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool RevokeInvitationRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool RevokeInvitationRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& RevokeInvitationRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& RevokeInvitationRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RevokeInvitationRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* RevokeInvitationRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.RevokeInvitationRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* RevokeInvitationRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* RevokeInvitationRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.RevokeInvitationRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void RevokeInvitationRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.RevokeInvitationRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool RevokeInvitationRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RevokeInvitationRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void RevokeInvitationRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RevokeInvitationRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RevokeInvitationRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RevokeInvitationRequest.club_id)
  return _internal_club_id();
}
inline void RevokeInvitationRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void RevokeInvitationRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.RevokeInvitationRequest.club_id)
}

// optional fixed64 invitation_id = 3;
inline bool RevokeInvitationRequest::_internal_has_invitation_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RevokeInvitationRequest::has_invitation_id() const {
  return _internal_has_invitation_id();
}
inline void RevokeInvitationRequest::clear_invitation_id() {
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RevokeInvitationRequest::_internal_invitation_id() const {
  return invitation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RevokeInvitationRequest::invitation_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RevokeInvitationRequest.invitation_id)
  return _internal_invitation_id();
}
inline void RevokeInvitationRequest::_internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  invitation_id_ = value;
}
inline void RevokeInvitationRequest::set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invitation_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.RevokeInvitationRequest.invitation_id)
}

// -------------------------------------------------------------------

// GetInvitationRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetInvitationRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetInvitationRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetInvitationRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetInvitationRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetInvitationRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetInvitationRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetInvitationRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetInvitationRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetInvitationRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetInvitationRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetInvitationRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetInvitationRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetInvitationRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetInvitationRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationRequest.club_id)
  return _internal_club_id();
}
inline void GetInvitationRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetInvitationRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetInvitationRequest.club_id)
}

// optional fixed64 invitation_id = 3;
inline bool GetInvitationRequest::_internal_has_invitation_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetInvitationRequest::has_invitation_id() const {
  return _internal_has_invitation_id();
}
inline void GetInvitationRequest::clear_invitation_id() {
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationRequest::_internal_invitation_id() const {
  return invitation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationRequest::invitation_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationRequest.invitation_id)
  return _internal_invitation_id();
}
inline void GetInvitationRequest::_internal_set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  invitation_id_ = value;
}
inline void GetInvitationRequest::set_invitation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invitation_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetInvitationRequest.invitation_id)
}

// -------------------------------------------------------------------

// GetInvitationResponse

// optional .bgs.protocol.club.v1.ClubInvitation invitation = 1;
inline bool GetInvitationResponse::_internal_has_invitation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || invitation_ != nullptr);
  return value;
}
inline bool GetInvitationResponse::has_invitation() const {
  return _internal_has_invitation();
}
inline const ::bgs::protocol::club::v1::ClubInvitation& GetInvitationResponse::_internal_invitation() const {
  const ::bgs::protocol::club::v1::ClubInvitation* p = invitation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubInvitation*>(
      &::bgs::protocol::club::v1::_ClubInvitation_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubInvitation& GetInvitationResponse::invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationResponse.invitation)
  return _internal_invitation();
}
inline ::bgs::protocol::club::v1::ClubInvitation* GetInvitationResponse::release_invitation() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetInvitationResponse.invitation)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubInvitation* temp = invitation_;
  invitation_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubInvitation* GetInvitationResponse::_internal_mutable_invitation() {
  _has_bits_[0] |= 0x00000001u;
  if (invitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubInvitation>(GetArenaNoVirtual());
    invitation_ = p;
  }
  return invitation_;
}
inline ::bgs::protocol::club::v1::ClubInvitation* GetInvitationResponse::mutable_invitation() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetInvitationResponse.invitation)
  return _internal_mutable_invitation();
}
inline void GetInvitationResponse::set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitation* invitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitation_);
  }
  if (invitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invitation_ = invitation;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetInvitationResponse.invitation)
}

// -------------------------------------------------------------------

// GetInvitationsRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetInvitationsRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetInvitationsRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetInvitationsRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetInvitationsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationsRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetInvitationsRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetInvitationsRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetInvitationsRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetInvitationsRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetInvitationsRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetInvitationsRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetInvitationsRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetInvitationsRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetInvitationsRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetInvitationsRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationsRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationsRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationsRequest.club_id)
  return _internal_club_id();
}
inline void GetInvitationsRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetInvitationsRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetInvitationsRequest.club_id)
}

// optional uint64 continuation = 3;
inline bool GetInvitationsRequest::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetInvitationsRequest::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetInvitationsRequest::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationsRequest::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationsRequest::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationsRequest.continuation)
  return _internal_continuation();
}
inline void GetInvitationsRequest::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  continuation_ = value;
}
inline void GetInvitationsRequest::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetInvitationsRequest.continuation)
}

// -------------------------------------------------------------------

// GetInvitationsResponse

// repeated .bgs.protocol.club.v1.ClubInvitation invitation = 1;
inline int GetInvitationsResponse::_internal_invitation_size() const {
  return invitation_.size();
}
inline int GetInvitationsResponse::invitation_size() const {
  return _internal_invitation_size();
}
inline ::bgs::protocol::club::v1::ClubInvitation* GetInvitationsResponse::mutable_invitation(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetInvitationsResponse.invitation)
  return invitation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation >*
GetInvitationsResponse::mutable_invitation() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.GetInvitationsResponse.invitation)
  return &invitation_;
}
inline const ::bgs::protocol::club::v1::ClubInvitation& GetInvitationsResponse::_internal_invitation(int index) const {
  return invitation_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubInvitation& GetInvitationsResponse::invitation(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationsResponse.invitation)
  return _internal_invitation(index);
}
inline ::bgs::protocol::club::v1::ClubInvitation* GetInvitationsResponse::_internal_add_invitation() {
  return invitation_.Add();
}
inline ::bgs::protocol::club::v1::ClubInvitation* GetInvitationsResponse::add_invitation() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.GetInvitationsResponse.invitation)
  return _internal_add_invitation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubInvitation >&
GetInvitationsResponse::invitation() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.GetInvitationsResponse.invitation)
  return invitation_;
}

// optional uint64 continuation = 2;
inline bool GetInvitationsResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetInvitationsResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetInvitationsResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationsResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetInvitationsResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetInvitationsResponse.continuation)
  return _internal_continuation();
}
inline void GetInvitationsResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetInvitationsResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetInvitationsResponse.continuation)
}

// -------------------------------------------------------------------

// SendSuggestionRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SendSuggestionRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SendSuggestionRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SendSuggestionRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SendSuggestionRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendSuggestionRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SendSuggestionRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SendSuggestionRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SendSuggestionRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SendSuggestionRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendSuggestionRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SendSuggestionRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SendSuggestionRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool SendSuggestionRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SendSuggestionRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void SendSuggestionRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendSuggestionRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendSuggestionRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendSuggestionRequest.club_id)
  return _internal_club_id();
}
inline void SendSuggestionRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void SendSuggestionRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SendSuggestionRequest.club_id)
}

// optional .bgs.protocol.club.v1.SendSuggestionOptions options = 3;
inline bool SendSuggestionRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool SendSuggestionRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::SendSuggestionOptions& SendSuggestionRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::SendSuggestionOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::SendSuggestionOptions*>(
      &::bgs::protocol::club::v1::_SendSuggestionOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::SendSuggestionOptions& SendSuggestionRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SendSuggestionRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::SendSuggestionOptions* SendSuggestionRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SendSuggestionRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::SendSuggestionOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::SendSuggestionOptions* SendSuggestionRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::SendSuggestionOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::SendSuggestionOptions* SendSuggestionRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SendSuggestionRequest.options)
  return _internal_mutable_options();
}
inline void SendSuggestionRequest::set_allocated_options(::bgs::protocol::club::v1::SendSuggestionOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SendSuggestionRequest.options)
}

// -------------------------------------------------------------------

// AcceptSuggestionRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool AcceptSuggestionRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AcceptSuggestionRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& AcceptSuggestionRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& AcceptSuggestionRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AcceptSuggestionRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* AcceptSuggestionRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AcceptSuggestionRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* AcceptSuggestionRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* AcceptSuggestionRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AcceptSuggestionRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AcceptSuggestionRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AcceptSuggestionRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool AcceptSuggestionRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AcceptSuggestionRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void AcceptSuggestionRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptSuggestionRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptSuggestionRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AcceptSuggestionRequest.club_id)
  return _internal_club_id();
}
inline void AcceptSuggestionRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void AcceptSuggestionRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AcceptSuggestionRequest.club_id)
}

// optional fixed64 suggestion_id = 3;
inline bool AcceptSuggestionRequest::_internal_has_suggestion_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AcceptSuggestionRequest::has_suggestion_id() const {
  return _internal_has_suggestion_id();
}
inline void AcceptSuggestionRequest::clear_suggestion_id() {
  suggestion_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptSuggestionRequest::_internal_suggestion_id() const {
  return suggestion_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AcceptSuggestionRequest::suggestion_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AcceptSuggestionRequest.suggestion_id)
  return _internal_suggestion_id();
}
inline void AcceptSuggestionRequest::_internal_set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  suggestion_id_ = value;
}
inline void AcceptSuggestionRequest::set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_suggestion_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AcceptSuggestionRequest.suggestion_id)
}

// -------------------------------------------------------------------

// DeclineSuggestionRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool DeclineSuggestionRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool DeclineSuggestionRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& DeclineSuggestionRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& DeclineSuggestionRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DeclineSuggestionRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* DeclineSuggestionRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DeclineSuggestionRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* DeclineSuggestionRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* DeclineSuggestionRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DeclineSuggestionRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void DeclineSuggestionRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DeclineSuggestionRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool DeclineSuggestionRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeclineSuggestionRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void DeclineSuggestionRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeclineSuggestionRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeclineSuggestionRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DeclineSuggestionRequest.club_id)
  return _internal_club_id();
}
inline void DeclineSuggestionRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void DeclineSuggestionRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DeclineSuggestionRequest.club_id)
}

// optional fixed64 suggestion_id = 3;
inline bool DeclineSuggestionRequest::_internal_has_suggestion_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeclineSuggestionRequest::has_suggestion_id() const {
  return _internal_has_suggestion_id();
}
inline void DeclineSuggestionRequest::clear_suggestion_id() {
  suggestion_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeclineSuggestionRequest::_internal_suggestion_id() const {
  return suggestion_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeclineSuggestionRequest::suggestion_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DeclineSuggestionRequest.suggestion_id)
  return _internal_suggestion_id();
}
inline void DeclineSuggestionRequest::_internal_set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  suggestion_id_ = value;
}
inline void DeclineSuggestionRequest::set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_suggestion_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DeclineSuggestionRequest.suggestion_id)
}

// -------------------------------------------------------------------

// GetSuggestionRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetSuggestionRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetSuggestionRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetSuggestionRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetSuggestionRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetSuggestionRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetSuggestionRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetSuggestionRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetSuggestionRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetSuggestionRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetSuggestionRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetSuggestionRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetSuggestionRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetSuggestionRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetSuggestionRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionRequest.club_id)
  return _internal_club_id();
}
inline void GetSuggestionRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetSuggestionRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetSuggestionRequest.club_id)
}

// optional fixed64 suggestion_id = 3;
inline bool GetSuggestionRequest::_internal_has_suggestion_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetSuggestionRequest::has_suggestion_id() const {
  return _internal_has_suggestion_id();
}
inline void GetSuggestionRequest::clear_suggestion_id() {
  suggestion_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionRequest::_internal_suggestion_id() const {
  return suggestion_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionRequest::suggestion_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionRequest.suggestion_id)
  return _internal_suggestion_id();
}
inline void GetSuggestionRequest::_internal_set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  suggestion_id_ = value;
}
inline void GetSuggestionRequest::set_suggestion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_suggestion_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetSuggestionRequest.suggestion_id)
}

// -------------------------------------------------------------------

// GetSuggestionResponse

// optional .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
inline bool GetSuggestionResponse::_internal_has_suggestion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || suggestion_ != nullptr);
  return value;
}
inline bool GetSuggestionResponse::has_suggestion() const {
  return _internal_has_suggestion();
}
inline const ::bgs::protocol::club::v1::ClubSuggestion& GetSuggestionResponse::_internal_suggestion() const {
  const ::bgs::protocol::club::v1::ClubSuggestion* p = suggestion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubSuggestion*>(
      &::bgs::protocol::club::v1::_ClubSuggestion_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubSuggestion& GetSuggestionResponse::suggestion() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionResponse.suggestion)
  return _internal_suggestion();
}
inline ::bgs::protocol::club::v1::ClubSuggestion* GetSuggestionResponse::release_suggestion() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetSuggestionResponse.suggestion)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubSuggestion* temp = suggestion_;
  suggestion_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubSuggestion* GetSuggestionResponse::_internal_mutable_suggestion() {
  _has_bits_[0] |= 0x00000001u;
  if (suggestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubSuggestion>(GetArenaNoVirtual());
    suggestion_ = p;
  }
  return suggestion_;
}
inline ::bgs::protocol::club::v1::ClubSuggestion* GetSuggestionResponse::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetSuggestionResponse.suggestion)
  return _internal_mutable_suggestion();
}
inline void GetSuggestionResponse::set_allocated_suggestion(::bgs::protocol::club::v1::ClubSuggestion* suggestion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggestion_);
  }
  if (suggestion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggestion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggestion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  suggestion_ = suggestion;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetSuggestionResponse.suggestion)
}

// -------------------------------------------------------------------

// GetSuggestionsRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetSuggestionsRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetSuggestionsRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetSuggestionsRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetSuggestionsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionsRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetSuggestionsRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetSuggestionsRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetSuggestionsRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetSuggestionsRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetSuggestionsRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetSuggestionsRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetSuggestionsRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetSuggestionsRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetSuggestionsRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetSuggestionsRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionsRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionsRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionsRequest.club_id)
  return _internal_club_id();
}
inline void GetSuggestionsRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetSuggestionsRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetSuggestionsRequest.club_id)
}

// optional uint64 continuation = 3;
inline bool GetSuggestionsRequest::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetSuggestionsRequest::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetSuggestionsRequest::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionsRequest::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionsRequest::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionsRequest.continuation)
  return _internal_continuation();
}
inline void GetSuggestionsRequest::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  continuation_ = value;
}
inline void GetSuggestionsRequest::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetSuggestionsRequest.continuation)
}

// -------------------------------------------------------------------

// GetSuggestionsResponse

// repeated .bgs.protocol.club.v1.ClubSuggestion suggestion = 1;
inline int GetSuggestionsResponse::_internal_suggestion_size() const {
  return suggestion_.size();
}
inline int GetSuggestionsResponse::suggestion_size() const {
  return _internal_suggestion_size();
}
inline ::bgs::protocol::club::v1::ClubSuggestion* GetSuggestionsResponse::mutable_suggestion(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetSuggestionsResponse.suggestion)
  return suggestion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubSuggestion >*
GetSuggestionsResponse::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.GetSuggestionsResponse.suggestion)
  return &suggestion_;
}
inline const ::bgs::protocol::club::v1::ClubSuggestion& GetSuggestionsResponse::_internal_suggestion(int index) const {
  return suggestion_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubSuggestion& GetSuggestionsResponse::suggestion(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionsResponse.suggestion)
  return _internal_suggestion(index);
}
inline ::bgs::protocol::club::v1::ClubSuggestion* GetSuggestionsResponse::_internal_add_suggestion() {
  return suggestion_.Add();
}
inline ::bgs::protocol::club::v1::ClubSuggestion* GetSuggestionsResponse::add_suggestion() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.GetSuggestionsResponse.suggestion)
  return _internal_add_suggestion();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubSuggestion >&
GetSuggestionsResponse::suggestion() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.GetSuggestionsResponse.suggestion)
  return suggestion_;
}

// optional uint64 continuation = 2;
inline bool GetSuggestionsResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetSuggestionsResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetSuggestionsResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionsResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetSuggestionsResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetSuggestionsResponse.continuation)
  return _internal_continuation();
}
inline void GetSuggestionsResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetSuggestionsResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetSuggestionsResponse.continuation)
}

// -------------------------------------------------------------------

// CreateTicketRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool CreateTicketRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool CreateTicketRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& CreateTicketRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& CreateTicketRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateTicketRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* CreateTicketRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateTicketRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* CreateTicketRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* CreateTicketRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateTicketRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void CreateTicketRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateTicketRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool CreateTicketRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateTicketRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void CreateTicketRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateTicketRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateTicketRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateTicketRequest.club_id)
  return _internal_club_id();
}
inline void CreateTicketRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void CreateTicketRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateTicketRequest.club_id)
}

// optional .bgs.protocol.club.v1.CreateTicketOptions options = 3;
inline bool CreateTicketRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool CreateTicketRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::CreateTicketOptions& CreateTicketRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::CreateTicketOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::CreateTicketOptions*>(
      &::bgs::protocol::club::v1::_CreateTicketOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::CreateTicketOptions& CreateTicketRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateTicketRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::CreateTicketOptions* CreateTicketRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateTicketRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::CreateTicketOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::CreateTicketOptions* CreateTicketRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::CreateTicketOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::CreateTicketOptions* CreateTicketRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateTicketRequest.options)
  return _internal_mutable_options();
}
inline void CreateTicketRequest::set_allocated_options(::bgs::protocol::club::v1::CreateTicketOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateTicketRequest.options)
}

// -------------------------------------------------------------------

// CreateTicketResponse

// optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
inline bool CreateTicketResponse::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ticket_ != nullptr);
  return value;
}
inline bool CreateTicketResponse::has_ticket() const {
  return _internal_has_ticket();
}
inline const ::bgs::protocol::club::v1::ClubTicket& CreateTicketResponse::_internal_ticket() const {
  const ::bgs::protocol::club::v1::ClubTicket* p = ticket_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubTicket*>(
      &::bgs::protocol::club::v1::_ClubTicket_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubTicket& CreateTicketResponse::ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateTicketResponse.ticket)
  return _internal_ticket();
}
inline ::bgs::protocol::club::v1::ClubTicket* CreateTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateTicketResponse.ticket)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubTicket* temp = ticket_;
  ticket_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubTicket* CreateTicketResponse::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  if (ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubTicket>(GetArenaNoVirtual());
    ticket_ = p;
  }
  return ticket_;
}
inline ::bgs::protocol::club::v1::ClubTicket* CreateTicketResponse::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateTicketResponse.ticket)
  return _internal_mutable_ticket();
}
inline void CreateTicketResponse::set_allocated_ticket(::bgs::protocol::club::v1::ClubTicket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateTicketResponse.ticket)
}

// -------------------------------------------------------------------

// DestroyTicketRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool DestroyTicketRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool DestroyTicketRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& DestroyTicketRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& DestroyTicketRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyTicketRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* DestroyTicketRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DestroyTicketRequest.agent_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* DestroyTicketRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000002u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* DestroyTicketRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DestroyTicketRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void DestroyTicketRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DestroyTicketRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool DestroyTicketRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DestroyTicketRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void DestroyTicketRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyTicketRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyTicketRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyTicketRequest.club_id)
  return _internal_club_id();
}
inline void DestroyTicketRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void DestroyTicketRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DestroyTicketRequest.club_id)
}

// optional string ticket_id = 3;
inline bool DestroyTicketRequest::_internal_has_ticket_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DestroyTicketRequest::has_ticket_id() const {
  return _internal_has_ticket_id();
}
inline void DestroyTicketRequest::clear_ticket_id() {
  ticket_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DestroyTicketRequest::ticket_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyTicketRequest.ticket_id)
  return _internal_ticket_id();
}
inline void DestroyTicketRequest::set_ticket_id(const std::string& value) {
  _internal_set_ticket_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DestroyTicketRequest.ticket_id)
}
inline std::string* DestroyTicketRequest::mutable_ticket_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DestroyTicketRequest.ticket_id)
  return _internal_mutable_ticket_id();
}
inline const std::string& DestroyTicketRequest::_internal_ticket_id() const {
  return ticket_id_.GetNoArena();
}
inline void DestroyTicketRequest::_internal_set_ticket_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DestroyTicketRequest::set_ticket_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.DestroyTicketRequest.ticket_id)
}
inline void DestroyTicketRequest::set_ticket_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.DestroyTicketRequest.ticket_id)
}
inline void DestroyTicketRequest::set_ticket_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.DestroyTicketRequest.ticket_id)
}
inline std::string* DestroyTicketRequest::_internal_mutable_ticket_id() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DestroyTicketRequest::release_ticket_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DestroyTicketRequest.ticket_id)
  if (!_internal_has_ticket_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyTicketRequest::set_allocated_ticket_id(std::string* ticket_id) {
  if (ticket_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DestroyTicketRequest.ticket_id)
}

// -------------------------------------------------------------------

// RedeemTicketRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool RedeemTicketRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool RedeemTicketRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& RedeemTicketRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& RedeemTicketRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RedeemTicketRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* RedeemTicketRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.RedeemTicketRequest.agent_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* RedeemTicketRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000002u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* RedeemTicketRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.RedeemTicketRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void RedeemTicketRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.RedeemTicketRequest.agent_id)
}

// optional string ticket_id = 3;
inline bool RedeemTicketRequest::_internal_has_ticket_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RedeemTicketRequest::has_ticket_id() const {
  return _internal_has_ticket_id();
}
inline void RedeemTicketRequest::clear_ticket_id() {
  ticket_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RedeemTicketRequest::ticket_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RedeemTicketRequest.ticket_id)
  return _internal_ticket_id();
}
inline void RedeemTicketRequest::set_ticket_id(const std::string& value) {
  _internal_set_ticket_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.RedeemTicketRequest.ticket_id)
}
inline std::string* RedeemTicketRequest::mutable_ticket_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.RedeemTicketRequest.ticket_id)
  return _internal_mutable_ticket_id();
}
inline const std::string& RedeemTicketRequest::_internal_ticket_id() const {
  return ticket_id_.GetNoArena();
}
inline void RedeemTicketRequest::_internal_set_ticket_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedeemTicketRequest::set_ticket_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.RedeemTicketRequest.ticket_id)
}
inline void RedeemTicketRequest::set_ticket_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.RedeemTicketRequest.ticket_id)
}
inline void RedeemTicketRequest::set_ticket_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.RedeemTicketRequest.ticket_id)
}
inline std::string* RedeemTicketRequest::_internal_mutable_ticket_id() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedeemTicketRequest::release_ticket_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.RedeemTicketRequest.ticket_id)
  if (!_internal_has_ticket_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedeemTicketRequest::set_allocated_ticket_id(std::string* ticket_id) {
  if (ticket_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.RedeemTicketRequest.ticket_id)
}

// -------------------------------------------------------------------

// GetTicketRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetTicketRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetTicketRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetTicketRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetTicketRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetTicketRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetTicketRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetTicketRequest.agent_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetTicketRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000002u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetTicketRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetTicketRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetTicketRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetTicketRequest.agent_id)
}

// optional string ticket_id = 3;
inline bool GetTicketRequest::_internal_has_ticket_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetTicketRequest::has_ticket_id() const {
  return _internal_has_ticket_id();
}
inline void GetTicketRequest::clear_ticket_id() {
  ticket_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetTicketRequest::ticket_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetTicketRequest.ticket_id)
  return _internal_ticket_id();
}
inline void GetTicketRequest::set_ticket_id(const std::string& value) {
  _internal_set_ticket_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetTicketRequest.ticket_id)
}
inline std::string* GetTicketRequest::mutable_ticket_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetTicketRequest.ticket_id)
  return _internal_mutable_ticket_id();
}
inline const std::string& GetTicketRequest::_internal_ticket_id() const {
  return ticket_id_.GetNoArena();
}
inline void GetTicketRequest::_internal_set_ticket_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTicketRequest::set_ticket_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.GetTicketRequest.ticket_id)
}
inline void GetTicketRequest::set_ticket_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.GetTicketRequest.ticket_id)
}
inline void GetTicketRequest::set_ticket_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.GetTicketRequest.ticket_id)
}
inline std::string* GetTicketRequest::_internal_mutable_ticket_id() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTicketRequest::release_ticket_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetTicketRequest.ticket_id)
  if (!_internal_has_ticket_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTicketRequest::set_allocated_ticket_id(std::string* ticket_id) {
  if (ticket_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetTicketRequest.ticket_id)
}

// -------------------------------------------------------------------

// GetTicketResponse

// optional .bgs.protocol.club.v1.ClubTicket ticket = 1;
inline bool GetTicketResponse::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ticket_ != nullptr);
  return value;
}
inline bool GetTicketResponse::has_ticket() const {
  return _internal_has_ticket();
}
inline const ::bgs::protocol::club::v1::ClubTicket& GetTicketResponse::_internal_ticket() const {
  const ::bgs::protocol::club::v1::ClubTicket* p = ticket_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubTicket*>(
      &::bgs::protocol::club::v1::_ClubTicket_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubTicket& GetTicketResponse::ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetTicketResponse.ticket)
  return _internal_ticket();
}
inline ::bgs::protocol::club::v1::ClubTicket* GetTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetTicketResponse.ticket)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubTicket* temp = ticket_;
  ticket_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubTicket* GetTicketResponse::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  if (ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubTicket>(GetArenaNoVirtual());
    ticket_ = p;
  }
  return ticket_;
}
inline ::bgs::protocol::club::v1::ClubTicket* GetTicketResponse::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetTicketResponse.ticket)
  return _internal_mutable_ticket();
}
inline void GetTicketResponse::set_allocated_ticket(::bgs::protocol::club::v1::ClubTicket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetTicketResponse.ticket)
}

// -------------------------------------------------------------------

// GetTicketsRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetTicketsRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetTicketsRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetTicketsRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetTicketsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetTicketsRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetTicketsRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetTicketsRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetTicketsRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetTicketsRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetTicketsRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetTicketsRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetTicketsRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetTicketsRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetTicketsRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetTicketsRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTicketsRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTicketsRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetTicketsRequest.club_id)
  return _internal_club_id();
}
inline void GetTicketsRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetTicketsRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetTicketsRequest.club_id)
}

// optional uint64 continuation = 3;
inline bool GetTicketsRequest::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetTicketsRequest::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetTicketsRequest::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTicketsRequest::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTicketsRequest::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetTicketsRequest.continuation)
  return _internal_continuation();
}
inline void GetTicketsRequest::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  continuation_ = value;
}
inline void GetTicketsRequest::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetTicketsRequest.continuation)
}

// -------------------------------------------------------------------

// GetTicketsResponse

// repeated .bgs.protocol.club.v1.ClubTicket ticket = 1;
inline int GetTicketsResponse::_internal_ticket_size() const {
  return ticket_.size();
}
inline int GetTicketsResponse::ticket_size() const {
  return _internal_ticket_size();
}
inline ::bgs::protocol::club::v1::ClubTicket* GetTicketsResponse::mutable_ticket(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetTicketsResponse.ticket)
  return ticket_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubTicket >*
GetTicketsResponse::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.GetTicketsResponse.ticket)
  return &ticket_;
}
inline const ::bgs::protocol::club::v1::ClubTicket& GetTicketsResponse::_internal_ticket(int index) const {
  return ticket_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubTicket& GetTicketsResponse::ticket(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetTicketsResponse.ticket)
  return _internal_ticket(index);
}
inline ::bgs::protocol::club::v1::ClubTicket* GetTicketsResponse::_internal_add_ticket() {
  return ticket_.Add();
}
inline ::bgs::protocol::club::v1::ClubTicket* GetTicketsResponse::add_ticket() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.GetTicketsResponse.ticket)
  return _internal_add_ticket();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubTicket >&
GetTicketsResponse::ticket() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.GetTicketsResponse.ticket)
  return ticket_;
}

// optional uint64 continuation = 2;
inline bool GetTicketsResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetTicketsResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetTicketsResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTicketsResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTicketsResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetTicketsResponse.continuation)
  return _internal_continuation();
}
inline void GetTicketsResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetTicketsResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetTicketsResponse.continuation)
}

// -------------------------------------------------------------------

// AddBanRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool AddBanRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AddBanRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& AddBanRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& AddBanRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AddBanRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* AddBanRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AddBanRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* AddBanRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* AddBanRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AddBanRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AddBanRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AddBanRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool AddBanRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddBanRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void AddBanRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddBanRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddBanRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AddBanRequest.club_id)
  return _internal_club_id();
}
inline void AddBanRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void AddBanRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AddBanRequest.club_id)
}

// optional .bgs.protocol.club.v1.AddBanOptions options = 3;
inline bool AddBanRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool AddBanRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::AddBanOptions& AddBanRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::AddBanOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::AddBanOptions*>(
      &::bgs::protocol::club::v1::_AddBanOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::AddBanOptions& AddBanRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AddBanRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::AddBanOptions* AddBanRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AddBanRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::AddBanOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::AddBanOptions* AddBanRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::AddBanOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::AddBanOptions* AddBanRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AddBanRequest.options)
  return _internal_mutable_options();
}
inline void AddBanRequest::set_allocated_options(::bgs::protocol::club::v1::AddBanOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AddBanRequest.options)
}

// -------------------------------------------------------------------

// RemoveBanRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool RemoveBanRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool RemoveBanRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& RemoveBanRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& RemoveBanRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RemoveBanRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* RemoveBanRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.RemoveBanRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* RemoveBanRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* RemoveBanRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.RemoveBanRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void RemoveBanRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.RemoveBanRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool RemoveBanRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RemoveBanRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void RemoveBanRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveBanRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveBanRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RemoveBanRequest.club_id)
  return _internal_club_id();
}
inline void RemoveBanRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void RemoveBanRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.RemoveBanRequest.club_id)
}

// optional .bgs.protocol.club.v1.MemberId target_id = 3;
inline bool RemoveBanRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool RemoveBanRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::club::v1::MemberId& RemoveBanRequest::_internal_target_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& RemoveBanRequest::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.RemoveBanRequest.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::club::v1::MemberId* RemoveBanRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.RemoveBanRequest.target_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* RemoveBanRequest::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::club::v1::MemberId* RemoveBanRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.RemoveBanRequest.target_id)
  return _internal_mutable_target_id();
}
inline void RemoveBanRequest::set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.RemoveBanRequest.target_id)
}

// -------------------------------------------------------------------

// GetBanRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetBanRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetBanRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetBanRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetBanRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBanRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetBanRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetBanRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetBanRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetBanRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetBanRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetBanRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetBanRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetBanRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetBanRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetBanRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBanRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBanRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBanRequest.club_id)
  return _internal_club_id();
}
inline void GetBanRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void GetBanRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetBanRequest.club_id)
}

// optional .bgs.protocol.club.v1.MemberId target_id = 3;
inline bool GetBanRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool GetBanRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetBanRequest::_internal_target_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetBanRequest::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBanRequest.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetBanRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetBanRequest.target_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetBanRequest::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetBanRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetBanRequest.target_id)
  return _internal_mutable_target_id();
}
inline void GetBanRequest::set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetBanRequest.target_id)
}

// -------------------------------------------------------------------

// GetBanResponse

// optional .bgs.protocol.club.v1.ClubBan ban = 1;
inline bool GetBanResponse::_internal_has_ban() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ban_ != nullptr);
  return value;
}
inline bool GetBanResponse::has_ban() const {
  return _internal_has_ban();
}
inline const ::bgs::protocol::club::v1::ClubBan& GetBanResponse::_internal_ban() const {
  const ::bgs::protocol::club::v1::ClubBan* p = ban_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubBan*>(
      &::bgs::protocol::club::v1::_ClubBan_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubBan& GetBanResponse::ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBanResponse.ban)
  return _internal_ban();
}
inline ::bgs::protocol::club::v1::ClubBan* GetBanResponse::release_ban() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetBanResponse.ban)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::ClubBan* temp = ban_;
  ban_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubBan* GetBanResponse::_internal_mutable_ban() {
  _has_bits_[0] |= 0x00000001u;
  if (ban_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubBan>(GetArenaNoVirtual());
    ban_ = p;
  }
  return ban_;
}
inline ::bgs::protocol::club::v1::ClubBan* GetBanResponse::mutable_ban() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetBanResponse.ban)
  return _internal_mutable_ban();
}
inline void GetBanResponse::set_allocated_ban(::bgs::protocol::club::v1::ClubBan* ban) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ban_);
  }
  if (ban) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ban = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ban, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ban_ = ban;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetBanResponse.ban)
}

// -------------------------------------------------------------------

// GetBansRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetBansRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetBansRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetBansRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetBansRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBansRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetBansRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetBansRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetBansRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetBansRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetBansRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetBansRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetBansRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetBansRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetBansRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetBansRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBansRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBansRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBansRequest.club_id)
  return _internal_club_id();
}
inline void GetBansRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetBansRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetBansRequest.club_id)
}

// optional uint64 continuation = 3;
inline bool GetBansRequest::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetBansRequest::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetBansRequest::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBansRequest::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBansRequest::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBansRequest.continuation)
  return _internal_continuation();
}
inline void GetBansRequest::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  continuation_ = value;
}
inline void GetBansRequest::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetBansRequest.continuation)
}

// -------------------------------------------------------------------

// GetBansResponse

// repeated .bgs.protocol.club.v1.ClubBan ban = 1;
inline int GetBansResponse::_internal_ban_size() const {
  return ban_.size();
}
inline int GetBansResponse::ban_size() const {
  return _internal_ban_size();
}
inline ::bgs::protocol::club::v1::ClubBan* GetBansResponse::mutable_ban(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetBansResponse.ban)
  return ban_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubBan >*
GetBansResponse::mutable_ban() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.GetBansResponse.ban)
  return &ban_;
}
inline const ::bgs::protocol::club::v1::ClubBan& GetBansResponse::_internal_ban(int index) const {
  return ban_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubBan& GetBansResponse::ban(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBansResponse.ban)
  return _internal_ban(index);
}
inline ::bgs::protocol::club::v1::ClubBan* GetBansResponse::_internal_add_ban() {
  return ban_.Add();
}
inline ::bgs::protocol::club::v1::ClubBan* GetBansResponse::add_ban() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.GetBansResponse.ban)
  return _internal_add_ban();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubBan >&
GetBansResponse::ban() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.GetBansResponse.ban)
  return ban_;
}

// optional uint64 continuation = 2;
inline bool GetBansResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBansResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetBansResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBansResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBansResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetBansResponse.continuation)
  return _internal_continuation();
}
inline void GetBansResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetBansResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetBansResponse.continuation)
}

// -------------------------------------------------------------------

// SubscribeStreamRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SubscribeStreamRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SubscribeStreamRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SubscribeStreamRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SubscribeStreamRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeStreamRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeStreamRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SubscribeStreamRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeStreamRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeStreamRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SubscribeStreamRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SubscribeStreamRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SubscribeStreamRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool SubscribeStreamRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubscribeStreamRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void SubscribeStreamRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeStreamRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeStreamRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeStreamRequest.club_id)
  return _internal_club_id();
}
inline void SubscribeStreamRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void SubscribeStreamRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SubscribeStreamRequest.club_id)
}

// repeated uint64 stream_id = 3;
inline int SubscribeStreamRequest::_internal_stream_id_size() const {
  return stream_id_.size();
}
inline int SubscribeStreamRequest::stream_id_size() const {
  return _internal_stream_id_size();
}
inline void SubscribeStreamRequest::clear_stream_id() {
  stream_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeStreamRequest::_internal_stream_id(int index) const {
  return stream_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeStreamRequest::stream_id(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SubscribeStreamRequest.stream_id)
  return _internal_stream_id(index);
}
inline void SubscribeStreamRequest::set_stream_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  stream_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SubscribeStreamRequest.stream_id)
}
inline void SubscribeStreamRequest::_internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  stream_id_.Add(value);
}
inline void SubscribeStreamRequest::add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_stream_id(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.SubscribeStreamRequest.stream_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SubscribeStreamRequest::_internal_stream_id() const {
  return stream_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SubscribeStreamRequest::stream_id() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.SubscribeStreamRequest.stream_id)
  return _internal_stream_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SubscribeStreamRequest::_internal_mutable_stream_id() {
  return &stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SubscribeStreamRequest::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.SubscribeStreamRequest.stream_id)
  return _internal_mutable_stream_id();
}

// -------------------------------------------------------------------

// UnsubscribeStreamRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UnsubscribeStreamRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UnsubscribeStreamRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UnsubscribeStreamRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UnsubscribeStreamRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnsubscribeStreamRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeStreamRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UnsubscribeStreamRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeStreamRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeStreamRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UnsubscribeStreamRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UnsubscribeStreamRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UnsubscribeStreamRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool UnsubscribeStreamRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnsubscribeStreamRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void UnsubscribeStreamRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeStreamRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeStreamRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnsubscribeStreamRequest.club_id)
  return _internal_club_id();
}
inline void UnsubscribeStreamRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void UnsubscribeStreamRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UnsubscribeStreamRequest.club_id)
}

// repeated uint64 stream_id = 3;
inline int UnsubscribeStreamRequest::_internal_stream_id_size() const {
  return stream_id_.size();
}
inline int UnsubscribeStreamRequest::stream_id_size() const {
  return _internal_stream_id_size();
}
inline void UnsubscribeStreamRequest::clear_stream_id() {
  stream_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeStreamRequest::_internal_stream_id(int index) const {
  return stream_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnsubscribeStreamRequest::stream_id(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UnsubscribeStreamRequest.stream_id)
  return _internal_stream_id(index);
}
inline void UnsubscribeStreamRequest::set_stream_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  stream_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UnsubscribeStreamRequest.stream_id)
}
inline void UnsubscribeStreamRequest::_internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  stream_id_.Add(value);
}
inline void UnsubscribeStreamRequest::add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_stream_id(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.UnsubscribeStreamRequest.stream_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UnsubscribeStreamRequest::_internal_stream_id() const {
  return stream_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UnsubscribeStreamRequest::stream_id() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.UnsubscribeStreamRequest.stream_id)
  return _internal_stream_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UnsubscribeStreamRequest::_internal_mutable_stream_id() {
  return &stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UnsubscribeStreamRequest::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.UnsubscribeStreamRequest.stream_id)
  return _internal_mutable_stream_id();
}

// -------------------------------------------------------------------

// CreateStreamRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool CreateStreamRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool CreateStreamRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& CreateStreamRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& CreateStreamRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* CreateStreamRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateStreamRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* CreateStreamRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* CreateStreamRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateStreamRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void CreateStreamRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateStreamRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool CreateStreamRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateStreamRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void CreateStreamRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateStreamRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateStreamRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamRequest.club_id)
  return _internal_club_id();
}
inline void CreateStreamRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void CreateStreamRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateStreamRequest.club_id)
}

// optional .bgs.protocol.club.v1.CreateStreamOptions options = 3;
inline bool CreateStreamRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool CreateStreamRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::CreateStreamOptions& CreateStreamRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::CreateStreamOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::CreateStreamOptions*>(
      &::bgs::protocol::club::v1::_CreateStreamOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::CreateStreamOptions& CreateStreamRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::CreateStreamOptions* CreateStreamRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateStreamRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::CreateStreamOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::CreateStreamOptions* CreateStreamRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::CreateStreamOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::CreateStreamOptions* CreateStreamRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateStreamRequest.options)
  return _internal_mutable_options();
}
inline void CreateStreamRequest::set_allocated_options(::bgs::protocol::club::v1::CreateStreamOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateStreamRequest.options)
}

// -------------------------------------------------------------------

// CreateStreamResponse

// optional uint64 club_id = 1;
inline bool CreateStreamResponse::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateStreamResponse::has_club_id() const {
  return _internal_has_club_id();
}
inline void CreateStreamResponse::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateStreamResponse::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateStreamResponse::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamResponse.club_id)
  return _internal_club_id();
}
inline void CreateStreamResponse::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  club_id_ = value;
}
inline void CreateStreamResponse::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateStreamResponse.club_id)
}

// optional uint64 stream_id = 2;
inline bool CreateStreamResponse::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateStreamResponse::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void CreateStreamResponse::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateStreamResponse::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateStreamResponse::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamResponse.stream_id)
  return _internal_stream_id();
}
inline void CreateStreamResponse::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  stream_id_ = value;
}
inline void CreateStreamResponse::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateStreamResponse.stream_id)
}

// -------------------------------------------------------------------

// DestroyStreamRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool DestroyStreamRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool DestroyStreamRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& DestroyStreamRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& DestroyStreamRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyStreamRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* DestroyStreamRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DestroyStreamRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* DestroyStreamRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* DestroyStreamRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DestroyStreamRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void DestroyStreamRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DestroyStreamRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool DestroyStreamRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DestroyStreamRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void DestroyStreamRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyStreamRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyStreamRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyStreamRequest.club_id)
  return _internal_club_id();
}
inline void DestroyStreamRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void DestroyStreamRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DestroyStreamRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool DestroyStreamRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DestroyStreamRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void DestroyStreamRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyStreamRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyStreamRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyStreamRequest.stream_id)
  return _internal_stream_id();
}
inline void DestroyStreamRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void DestroyStreamRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DestroyStreamRequest.stream_id)
}

// -------------------------------------------------------------------

// GetStreamRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetStreamRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetStreamRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetStreamRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetStreamRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetStreamRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetStreamRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamRequest.club_id)
  return _internal_club_id();
}
inline void GetStreamRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetStreamRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool GetStreamRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetStreamRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void GetStreamRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamRequest.stream_id)
  return _internal_stream_id();
}
inline void GetStreamRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void GetStreamRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamRequest.stream_id)
}

// -------------------------------------------------------------------

// GetStreamResponse

// optional .bgs.protocol.club.v1.Stream stream = 1;
inline bool GetStreamResponse::_internal_has_stream() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stream_ != nullptr);
  return value;
}
inline bool GetStreamResponse::has_stream() const {
  return _internal_has_stream();
}
inline const ::bgs::protocol::club::v1::Stream& GetStreamResponse::_internal_stream() const {
  const ::bgs::protocol::club::v1::Stream* p = stream_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::Stream*>(
      &::bgs::protocol::club::v1::_Stream_default_instance_);
}
inline const ::bgs::protocol::club::v1::Stream& GetStreamResponse::stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamResponse.stream)
  return _internal_stream();
}
inline ::bgs::protocol::club::v1::Stream* GetStreamResponse::release_stream() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamResponse.stream)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::Stream* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::Stream* GetStreamResponse::_internal_mutable_stream() {
  _has_bits_[0] |= 0x00000001u;
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::Stream>(GetArenaNoVirtual());
    stream_ = p;
  }
  return stream_;
}
inline ::bgs::protocol::club::v1::Stream* GetStreamResponse::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamResponse.stream)
  return _internal_mutable_stream();
}
inline void GetStreamResponse::set_allocated_stream(::bgs::protocol::club::v1::Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamResponse.stream)
}

// -------------------------------------------------------------------

// GetStreamsRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetStreamsRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetStreamsRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamsRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamsRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamsRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamsRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamsRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamsRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamsRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetStreamsRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamsRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetStreamsRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetStreamsRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetStreamsRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamsRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamsRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamsRequest.club_id)
  return _internal_club_id();
}
inline void GetStreamsRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetStreamsRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamsRequest.club_id)
}

// optional uint64 continuation = 3;
inline bool GetStreamsRequest::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetStreamsRequest::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetStreamsRequest::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamsRequest::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamsRequest::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamsRequest.continuation)
  return _internal_continuation();
}
inline void GetStreamsRequest::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  continuation_ = value;
}
inline void GetStreamsRequest::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamsRequest.continuation)
}

// -------------------------------------------------------------------

// GetStreamsResponse

// repeated .bgs.protocol.club.v1.Stream stream = 1;
inline int GetStreamsResponse::_internal_stream_size() const {
  return stream_.size();
}
inline int GetStreamsResponse::stream_size() const {
  return _internal_stream_size();
}
inline ::bgs::protocol::club::v1::Stream* GetStreamsResponse::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamsResponse.stream)
  return stream_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Stream >*
GetStreamsResponse::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.GetStreamsResponse.stream)
  return &stream_;
}
inline const ::bgs::protocol::club::v1::Stream& GetStreamsResponse::_internal_stream(int index) const {
  return stream_.Get(index);
}
inline const ::bgs::protocol::club::v1::Stream& GetStreamsResponse::stream(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamsResponse.stream)
  return _internal_stream(index);
}
inline ::bgs::protocol::club::v1::Stream* GetStreamsResponse::_internal_add_stream() {
  return stream_.Add();
}
inline ::bgs::protocol::club::v1::Stream* GetStreamsResponse::add_stream() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.GetStreamsResponse.stream)
  return _internal_add_stream();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::Stream >&
GetStreamsResponse::stream() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.GetStreamsResponse.stream)
  return stream_;
}

// repeated .bgs.protocol.club.v1.StreamView view = 2;
inline int GetStreamsResponse::_internal_view_size() const {
  return view_.size();
}
inline int GetStreamsResponse::view_size() const {
  return _internal_view_size();
}
inline ::bgs::protocol::club::v1::StreamView* GetStreamsResponse::mutable_view(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamsResponse.view)
  return view_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamView >*
GetStreamsResponse::mutable_view() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.GetStreamsResponse.view)
  return &view_;
}
inline const ::bgs::protocol::club::v1::StreamView& GetStreamsResponse::_internal_view(int index) const {
  return view_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamView& GetStreamsResponse::view(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamsResponse.view)
  return _internal_view(index);
}
inline ::bgs::protocol::club::v1::StreamView* GetStreamsResponse::_internal_add_view() {
  return view_.Add();
}
inline ::bgs::protocol::club::v1::StreamView* GetStreamsResponse::add_view() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.GetStreamsResponse.view)
  return _internal_add_view();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamView >&
GetStreamsResponse::view() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.GetStreamsResponse.view)
  return view_;
}

// optional uint64 continuation = 3;
inline bool GetStreamsResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetStreamsResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetStreamsResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamsResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamsResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamsResponse.continuation)
  return _internal_continuation();
}
inline void GetStreamsResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetStreamsResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamsResponse.continuation)
}

// -------------------------------------------------------------------

// UpdateStreamStateRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UpdateStreamStateRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool UpdateStreamStateRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateStreamStateRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& UpdateStreamStateRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateStreamStateRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* UpdateStreamStateRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateStreamStateRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateStreamStateRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UpdateStreamStateRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateStreamStateRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void UpdateStreamStateRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateStreamStateRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool UpdateStreamStateRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpdateStreamStateRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void UpdateStreamStateRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateStreamStateRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateStreamStateRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateStreamStateRequest.club_id)
  return _internal_club_id();
}
inline void UpdateStreamStateRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void UpdateStreamStateRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UpdateStreamStateRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool UpdateStreamStateRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UpdateStreamStateRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void UpdateStreamStateRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateStreamStateRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateStreamStateRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateStreamStateRequest.stream_id)
  return _internal_stream_id();
}
inline void UpdateStreamStateRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void UpdateStreamStateRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UpdateStreamStateRequest.stream_id)
}

// optional .bgs.protocol.club.v1.StreamStateOptions options = 5;
inline bool UpdateStreamStateRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool UpdateStreamStateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::StreamStateOptions& UpdateStreamStateRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::StreamStateOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamStateOptions*>(
      &::bgs::protocol::club::v1::_StreamStateOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamStateOptions& UpdateStreamStateRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UpdateStreamStateRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::StreamStateOptions* UpdateStreamStateRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.UpdateStreamStateRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::StreamStateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamStateOptions* UpdateStreamStateRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamStateOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::StreamStateOptions* UpdateStreamStateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UpdateStreamStateRequest.options)
  return _internal_mutable_options();
}
inline void UpdateStreamStateRequest::set_allocated_options(::bgs::protocol::club::v1::StreamStateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UpdateStreamStateRequest.options)
}

// -------------------------------------------------------------------

// SetStreamFocusRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SetStreamFocusRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SetStreamFocusRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SetStreamFocusRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SetStreamFocusRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetStreamFocusRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SetStreamFocusRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SetStreamFocusRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SetStreamFocusRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SetStreamFocusRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SetStreamFocusRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SetStreamFocusRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SetStreamFocusRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool SetStreamFocusRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetStreamFocusRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void SetStreamFocusRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetStreamFocusRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetStreamFocusRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetStreamFocusRequest.club_id)
  return _internal_club_id();
}
inline void SetStreamFocusRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void SetStreamFocusRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetStreamFocusRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool SetStreamFocusRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetStreamFocusRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void SetStreamFocusRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetStreamFocusRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetStreamFocusRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetStreamFocusRequest.stream_id)
  return _internal_stream_id();
}
inline void SetStreamFocusRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void SetStreamFocusRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetStreamFocusRequest.stream_id)
}

// optional bool focus = 4;
inline bool SetStreamFocusRequest::_internal_has_focus() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SetStreamFocusRequest::has_focus() const {
  return _internal_has_focus();
}
inline void SetStreamFocusRequest::clear_focus() {
  focus_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SetStreamFocusRequest::_internal_focus() const {
  return focus_;
}
inline bool SetStreamFocusRequest::focus() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetStreamFocusRequest.focus)
  return _internal_focus();
}
inline void SetStreamFocusRequest::_internal_set_focus(bool value) {
  _has_bits_[0] |= 0x00000008u;
  focus_ = value;
}
inline void SetStreamFocusRequest::set_focus(bool value) {
  _internal_set_focus(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetStreamFocusRequest.focus)
}

// -------------------------------------------------------------------

// CreateMessageRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool CreateMessageRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool CreateMessageRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& CreateMessageRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& CreateMessageRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMessageRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* CreateMessageRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateMessageRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* CreateMessageRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* CreateMessageRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateMessageRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void CreateMessageRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateMessageRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool CreateMessageRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateMessageRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void CreateMessageRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateMessageRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateMessageRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMessageRequest.club_id)
  return _internal_club_id();
}
inline void CreateMessageRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void CreateMessageRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateMessageRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool CreateMessageRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreateMessageRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void CreateMessageRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateMessageRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateMessageRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMessageRequest.stream_id)
  return _internal_stream_id();
}
inline void CreateMessageRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void CreateMessageRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateMessageRequest.stream_id)
}

// optional .bgs.protocol.club.v1.CreateMessageOptions options = 4;
inline bool CreateMessageRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool CreateMessageRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::CreateMessageOptions& CreateMessageRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::CreateMessageOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::CreateMessageOptions*>(
      &::bgs::protocol::club::v1::_CreateMessageOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::CreateMessageOptions& CreateMessageRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMessageRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::CreateMessageOptions* CreateMessageRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateMessageRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::CreateMessageOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::CreateMessageOptions* CreateMessageRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::CreateMessageOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::CreateMessageOptions* CreateMessageRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateMessageRequest.options)
  return _internal_mutable_options();
}
inline void CreateMessageRequest::set_allocated_options(::bgs::protocol::club::v1::CreateMessageOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateMessageRequest.options)
}

// -------------------------------------------------------------------

// CreateMessageResponse

// optional .bgs.protocol.club.v1.StreamMessage message = 1;
inline bool CreateMessageResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool CreateMessageResponse::has_message() const {
  return _internal_has_message();
}
inline const ::bgs::protocol::club::v1::StreamMessage& CreateMessageResponse::_internal_message() const {
  const ::bgs::protocol::club::v1::StreamMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamMessage*>(
      &::bgs::protocol::club::v1::_StreamMessage_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamMessage& CreateMessageResponse::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMessageResponse.message)
  return _internal_message();
}
inline ::bgs::protocol::club::v1::StreamMessage* CreateMessageResponse::release_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateMessageResponse.message)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::StreamMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamMessage* CreateMessageResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::bgs::protocol::club::v1::StreamMessage* CreateMessageResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateMessageResponse.message)
  return _internal_mutable_message();
}
inline void CreateMessageResponse::set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateMessageResponse.message)
}

// -------------------------------------------------------------------

// DestroyMessageRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool DestroyMessageRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool DestroyMessageRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& DestroyMessageRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& DestroyMessageRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyMessageRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* DestroyMessageRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DestroyMessageRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* DestroyMessageRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* DestroyMessageRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DestroyMessageRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void DestroyMessageRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DestroyMessageRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool DestroyMessageRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DestroyMessageRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void DestroyMessageRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyMessageRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyMessageRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyMessageRequest.club_id)
  return _internal_club_id();
}
inline void DestroyMessageRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void DestroyMessageRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DestroyMessageRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool DestroyMessageRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DestroyMessageRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void DestroyMessageRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyMessageRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestroyMessageRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyMessageRequest.stream_id)
  return _internal_stream_id();
}
inline void DestroyMessageRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void DestroyMessageRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.DestroyMessageRequest.stream_id)
}

// optional .bgs.protocol.MessageId message_id = 4;
inline bool DestroyMessageRequest::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || message_id_ != nullptr);
  return value;
}
inline bool DestroyMessageRequest::has_message_id() const {
  return _internal_has_message_id();
}
inline const ::bgs::protocol::MessageId& DestroyMessageRequest::_internal_message_id() const {
  const ::bgs::protocol::MessageId* p = message_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::MessageId*>(
      &::bgs::protocol::_MessageId_default_instance_);
}
inline const ::bgs::protocol::MessageId& DestroyMessageRequest::message_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyMessageRequest.message_id)
  return _internal_message_id();
}
inline ::bgs::protocol::MessageId* DestroyMessageRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DestroyMessageRequest.message_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::MessageId* temp = message_id_;
  message_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::MessageId* DestroyMessageRequest::_internal_mutable_message_id() {
  _has_bits_[0] |= 0x00000002u;
  if (message_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::MessageId>(GetArenaNoVirtual());
    message_id_ = p;
  }
  return message_id_;
}
inline ::bgs::protocol::MessageId* DestroyMessageRequest::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DestroyMessageRequest.message_id)
  return _internal_mutable_message_id();
}
inline void DestroyMessageRequest::set_allocated_message_id(::bgs::protocol::MessageId* message_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_id_);
  }
  if (message_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_id_ = message_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DestroyMessageRequest.message_id)
}

// -------------------------------------------------------------------

// DestroyMessageResponse

// optional .bgs.protocol.club.v1.StreamMessage message = 1;
inline bool DestroyMessageResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool DestroyMessageResponse::has_message() const {
  return _internal_has_message();
}
inline const ::bgs::protocol::club::v1::StreamMessage& DestroyMessageResponse::_internal_message() const {
  const ::bgs::protocol::club::v1::StreamMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamMessage*>(
      &::bgs::protocol::club::v1::_StreamMessage_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamMessage& DestroyMessageResponse::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.DestroyMessageResponse.message)
  return _internal_message();
}
inline ::bgs::protocol::club::v1::StreamMessage* DestroyMessageResponse::release_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.DestroyMessageResponse.message)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::StreamMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamMessage* DestroyMessageResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::bgs::protocol::club::v1::StreamMessage* DestroyMessageResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.DestroyMessageResponse.message)
  return _internal_mutable_message();
}
inline void DestroyMessageResponse::set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.DestroyMessageResponse.message)
}

// -------------------------------------------------------------------

// EditMessageRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool EditMessageRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool EditMessageRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& EditMessageRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& EditMessageRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.EditMessageRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* EditMessageRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.EditMessageRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* EditMessageRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* EditMessageRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.EditMessageRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void EditMessageRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.EditMessageRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool EditMessageRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EditMessageRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void EditMessageRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EditMessageRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EditMessageRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.EditMessageRequest.club_id)
  return _internal_club_id();
}
inline void EditMessageRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  club_id_ = value;
}
inline void EditMessageRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.EditMessageRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool EditMessageRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EditMessageRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void EditMessageRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EditMessageRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EditMessageRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.EditMessageRequest.stream_id)
  return _internal_stream_id();
}
inline void EditMessageRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  stream_id_ = value;
}
inline void EditMessageRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.EditMessageRequest.stream_id)
}

// optional .bgs.protocol.MessageId message_id = 4;
inline bool EditMessageRequest::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || message_id_ != nullptr);
  return value;
}
inline bool EditMessageRequest::has_message_id() const {
  return _internal_has_message_id();
}
inline const ::bgs::protocol::MessageId& EditMessageRequest::_internal_message_id() const {
  const ::bgs::protocol::MessageId* p = message_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::MessageId*>(
      &::bgs::protocol::_MessageId_default_instance_);
}
inline const ::bgs::protocol::MessageId& EditMessageRequest::message_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.EditMessageRequest.message_id)
  return _internal_message_id();
}
inline ::bgs::protocol::MessageId* EditMessageRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.EditMessageRequest.message_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::MessageId* temp = message_id_;
  message_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::MessageId* EditMessageRequest::_internal_mutable_message_id() {
  _has_bits_[0] |= 0x00000002u;
  if (message_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::MessageId>(GetArenaNoVirtual());
    message_id_ = p;
  }
  return message_id_;
}
inline ::bgs::protocol::MessageId* EditMessageRequest::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.EditMessageRequest.message_id)
  return _internal_mutable_message_id();
}
inline void EditMessageRequest::set_allocated_message_id(::bgs::protocol::MessageId* message_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_id_);
  }
  if (message_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_id_ = message_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.EditMessageRequest.message_id)
}

// optional .bgs.protocol.club.v1.CreateMessageOptions options = 5;
inline bool EditMessageRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool EditMessageRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::club::v1::CreateMessageOptions& EditMessageRequest::_internal_options() const {
  const ::bgs::protocol::club::v1::CreateMessageOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::CreateMessageOptions*>(
      &::bgs::protocol::club::v1::_CreateMessageOptions_default_instance_);
}
inline const ::bgs::protocol::club::v1::CreateMessageOptions& EditMessageRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.EditMessageRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::club::v1::CreateMessageOptions* EditMessageRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.EditMessageRequest.options)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::CreateMessageOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::CreateMessageOptions* EditMessageRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000004u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::CreateMessageOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::club::v1::CreateMessageOptions* EditMessageRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.EditMessageRequest.options)
  return _internal_mutable_options();
}
inline void EditMessageRequest::set_allocated_options(::bgs::protocol::club::v1::CreateMessageOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.EditMessageRequest.options)
}

// -------------------------------------------------------------------

// EditMessageResponse

// optional .bgs.protocol.club.v1.StreamMessage message = 1;
inline bool EditMessageResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool EditMessageResponse::has_message() const {
  return _internal_has_message();
}
inline const ::bgs::protocol::club::v1::StreamMessage& EditMessageResponse::_internal_message() const {
  const ::bgs::protocol::club::v1::StreamMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamMessage*>(
      &::bgs::protocol::club::v1::_StreamMessage_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamMessage& EditMessageResponse::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.EditMessageResponse.message)
  return _internal_message();
}
inline ::bgs::protocol::club::v1::StreamMessage* EditMessageResponse::release_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.EditMessageResponse.message)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::StreamMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamMessage* EditMessageResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::bgs::protocol::club::v1::StreamMessage* EditMessageResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.EditMessageResponse.message)
  return _internal_mutable_message();
}
inline void EditMessageResponse::set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.EditMessageResponse.message)
}

// -------------------------------------------------------------------

// SetMessagePinnedRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SetMessagePinnedRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SetMessagePinnedRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SetMessagePinnedRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SetMessagePinnedRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetMessagePinnedRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SetMessagePinnedRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SetMessagePinnedRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SetMessagePinnedRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SetMessagePinnedRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SetMessagePinnedRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SetMessagePinnedRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SetMessagePinnedRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool SetMessagePinnedRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetMessagePinnedRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void SetMessagePinnedRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetMessagePinnedRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetMessagePinnedRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetMessagePinnedRequest.club_id)
  return _internal_club_id();
}
inline void SetMessagePinnedRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void SetMessagePinnedRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetMessagePinnedRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool SetMessagePinnedRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetMessagePinnedRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void SetMessagePinnedRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetMessagePinnedRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetMessagePinnedRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetMessagePinnedRequest.stream_id)
  return _internal_stream_id();
}
inline void SetMessagePinnedRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void SetMessagePinnedRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetMessagePinnedRequest.stream_id)
}

// -------------------------------------------------------------------

// SetTypingIndicatorRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SetTypingIndicatorRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool SetTypingIndicatorRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SetTypingIndicatorRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& SetTypingIndicatorRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetTypingIndicatorRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* SetTypingIndicatorRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.SetTypingIndicatorRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* SetTypingIndicatorRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SetTypingIndicatorRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SetTypingIndicatorRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void SetTypingIndicatorRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SetTypingIndicatorRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool SetTypingIndicatorRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetTypingIndicatorRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void SetTypingIndicatorRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTypingIndicatorRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTypingIndicatorRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetTypingIndicatorRequest.club_id)
  return _internal_club_id();
}
inline void SetTypingIndicatorRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void SetTypingIndicatorRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetTypingIndicatorRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool SetTypingIndicatorRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetTypingIndicatorRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void SetTypingIndicatorRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTypingIndicatorRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTypingIndicatorRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetTypingIndicatorRequest.stream_id)
  return _internal_stream_id();
}
inline void SetTypingIndicatorRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void SetTypingIndicatorRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetTypingIndicatorRequest.stream_id)
}

// optional .bgs.protocol.TypingIndicator indicator = 4 [default = TYPING_START];
inline bool SetTypingIndicatorRequest::_internal_has_indicator() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SetTypingIndicatorRequest::has_indicator() const {
  return _internal_has_indicator();
}
inline void SetTypingIndicatorRequest::clear_indicator() {
  indicator_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::TypingIndicator SetTypingIndicatorRequest::_internal_indicator() const {
  return static_cast< ::bgs::protocol::TypingIndicator >(indicator_);
}
inline ::bgs::protocol::TypingIndicator SetTypingIndicatorRequest::indicator() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetTypingIndicatorRequest.indicator)
  return _internal_indicator();
}
inline void SetTypingIndicatorRequest::_internal_set_indicator(::bgs::protocol::TypingIndicator value) {
  assert(::bgs::protocol::TypingIndicator_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  indicator_ = value;
}
inline void SetTypingIndicatorRequest::set_indicator(::bgs::protocol::TypingIndicator value) {
  _internal_set_indicator(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetTypingIndicatorRequest.indicator)
}

// -------------------------------------------------------------------

// AdvanceStreamViewTimeRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool AdvanceStreamViewTimeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AdvanceStreamViewTimeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& AdvanceStreamViewTimeRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& AdvanceStreamViewTimeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceStreamViewTimeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceStreamViewTimeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceStreamViewTimeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AdvanceStreamViewTimeRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool AdvanceStreamViewTimeRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdvanceStreamViewTimeRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void AdvanceStreamViewTimeRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamViewTimeRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamViewTimeRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.club_id)
  return _internal_club_id();
}
inline void AdvanceStreamViewTimeRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void AdvanceStreamViewTimeRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.club_id)
}

// optional uint64 stream_id_deprecated = 3 [deprecated = true];
inline bool AdvanceStreamViewTimeRequest::_internal_has_stream_id_deprecated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdvanceStreamViewTimeRequest::has_stream_id_deprecated() const {
  return _internal_has_stream_id_deprecated();
}
inline void AdvanceStreamViewTimeRequest::clear_stream_id_deprecated() {
  stream_id_deprecated_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamViewTimeRequest::_internal_stream_id_deprecated() const {
  return stream_id_deprecated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamViewTimeRequest::stream_id_deprecated() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.stream_id_deprecated)
  return _internal_stream_id_deprecated();
}
inline void AdvanceStreamViewTimeRequest::_internal_set_stream_id_deprecated(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_deprecated_ = value;
}
inline void AdvanceStreamViewTimeRequest::set_stream_id_deprecated(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id_deprecated(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.stream_id_deprecated)
}

// repeated uint64 stream_id = 4 [packed = true];
inline int AdvanceStreamViewTimeRequest::_internal_stream_id_size() const {
  return stream_id_.size();
}
inline int AdvanceStreamViewTimeRequest::stream_id_size() const {
  return _internal_stream_id_size();
}
inline void AdvanceStreamViewTimeRequest::clear_stream_id() {
  stream_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamViewTimeRequest::_internal_stream_id(int index) const {
  return stream_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamViewTimeRequest::stream_id(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.stream_id)
  return _internal_stream_id(index);
}
inline void AdvanceStreamViewTimeRequest::set_stream_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  stream_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.stream_id)
}
inline void AdvanceStreamViewTimeRequest::_internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  stream_id_.Add(value);
}
inline void AdvanceStreamViewTimeRequest::add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_stream_id(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.stream_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
AdvanceStreamViewTimeRequest::_internal_stream_id() const {
  return stream_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
AdvanceStreamViewTimeRequest::stream_id() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.stream_id)
  return _internal_stream_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
AdvanceStreamViewTimeRequest::_internal_mutable_stream_id() {
  return &stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
AdvanceStreamViewTimeRequest::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.AdvanceStreamViewTimeRequest.stream_id)
  return _internal_mutable_stream_id();
}

// -------------------------------------------------------------------

// AdvanceStreamMentionViewTimeRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool AdvanceStreamMentionViewTimeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AdvanceStreamMentionViewTimeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& AdvanceStreamMentionViewTimeRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& AdvanceStreamMentionViewTimeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceStreamMentionViewTimeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceStreamMentionViewTimeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceStreamMentionViewTimeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AdvanceStreamMentionViewTimeRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool AdvanceStreamMentionViewTimeRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdvanceStreamMentionViewTimeRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void AdvanceStreamMentionViewTimeRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamMentionViewTimeRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamMentionViewTimeRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest.club_id)
  return _internal_club_id();
}
inline void AdvanceStreamMentionViewTimeRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void AdvanceStreamMentionViewTimeRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool AdvanceStreamMentionViewTimeRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdvanceStreamMentionViewTimeRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void AdvanceStreamMentionViewTimeRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamMentionViewTimeRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceStreamMentionViewTimeRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest.stream_id)
  return _internal_stream_id();
}
inline void AdvanceStreamMentionViewTimeRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void AdvanceStreamMentionViewTimeRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AdvanceStreamMentionViewTimeRequest.stream_id)
}

// -------------------------------------------------------------------

// AdvanceActivityViewTimeRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool AdvanceActivityViewTimeRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool AdvanceActivityViewTimeRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& AdvanceActivityViewTimeRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& AdvanceActivityViewTimeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceActivityViewTimeRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceActivityViewTimeRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* AdvanceActivityViewTimeRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void AdvanceActivityViewTimeRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool AdvanceActivityViewTimeRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdvanceActivityViewTimeRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void AdvanceActivityViewTimeRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceActivityViewTimeRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdvanceActivityViewTimeRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest.club_id)
  return _internal_club_id();
}
inline void AdvanceActivityViewTimeRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void AdvanceActivityViewTimeRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AdvanceActivityViewTimeRequest.club_id)
}

// -------------------------------------------------------------------

// GetStreamHistoryRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetStreamHistoryRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetStreamHistoryRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamHistoryRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamHistoryRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamHistoryRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamHistoryRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamHistoryRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamHistoryRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamHistoryRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamHistoryRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetStreamHistoryRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamHistoryRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetStreamHistoryRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetStreamHistoryRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetStreamHistoryRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamHistoryRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamHistoryRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamHistoryRequest.club_id)
  return _internal_club_id();
}
inline void GetStreamHistoryRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void GetStreamHistoryRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamHistoryRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool GetStreamHistoryRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetStreamHistoryRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void GetStreamHistoryRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamHistoryRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamHistoryRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamHistoryRequest.stream_id)
  return _internal_stream_id();
}
inline void GetStreamHistoryRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void GetStreamHistoryRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamHistoryRequest.stream_id)
}

// optional .bgs.protocol.GetEventOptions options = 4;
inline bool GetStreamHistoryRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool GetStreamHistoryRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::GetEventOptions& GetStreamHistoryRequest::_internal_options() const {
  const ::bgs::protocol::GetEventOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::GetEventOptions*>(
      &::bgs::protocol::_GetEventOptions_default_instance_);
}
inline const ::bgs::protocol::GetEventOptions& GetStreamHistoryRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamHistoryRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::GetEventOptions* GetStreamHistoryRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamHistoryRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::GetEventOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::GetEventOptions* GetStreamHistoryRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::GetEventOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::GetEventOptions* GetStreamHistoryRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamHistoryRequest.options)
  return _internal_mutable_options();
}
inline void GetStreamHistoryRequest::set_allocated_options(::bgs::protocol::GetEventOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamHistoryRequest.options)
}

// -------------------------------------------------------------------

// GetStreamHistoryResponse

// repeated .bgs.protocol.club.v1.StreamMessage message = 1;
inline int GetStreamHistoryResponse::_internal_message_size() const {
  return message_.size();
}
inline int GetStreamHistoryResponse::message_size() const {
  return _internal_message_size();
}
inline ::bgs::protocol::club::v1::StreamMessage* GetStreamHistoryResponse::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamHistoryResponse.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage >*
GetStreamHistoryResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.GetStreamHistoryResponse.message)
  return &message_;
}
inline const ::bgs::protocol::club::v1::StreamMessage& GetStreamHistoryResponse::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamMessage& GetStreamHistoryResponse::message(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamHistoryResponse.message)
  return _internal_message(index);
}
inline ::bgs::protocol::club::v1::StreamMessage* GetStreamHistoryResponse::_internal_add_message() {
  return message_.Add();
}
inline ::bgs::protocol::club::v1::StreamMessage* GetStreamHistoryResponse::add_message() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.GetStreamHistoryResponse.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage >&
GetStreamHistoryResponse::message() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.GetStreamHistoryResponse.message)
  return message_;
}

// optional uint64 continuation = 2;
inline bool GetStreamHistoryResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetStreamHistoryResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetStreamHistoryResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamHistoryResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamHistoryResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamHistoryResponse.continuation)
  return _internal_continuation();
}
inline void GetStreamHistoryResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetStreamHistoryResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamHistoryResponse.continuation)
}

// -------------------------------------------------------------------

// GetStreamMessageRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetStreamMessageRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetStreamMessageRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamMessageRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamMessageRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamMessageRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamMessageRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamMessageRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamMessageRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamMessageRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamMessageRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetStreamMessageRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamMessageRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetStreamMessageRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetStreamMessageRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetStreamMessageRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamMessageRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamMessageRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamMessageRequest.club_id)
  return _internal_club_id();
}
inline void GetStreamMessageRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void GetStreamMessageRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamMessageRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool GetStreamMessageRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetStreamMessageRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void GetStreamMessageRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamMessageRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamMessageRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamMessageRequest.stream_id)
  return _internal_stream_id();
}
inline void GetStreamMessageRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void GetStreamMessageRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamMessageRequest.stream_id)
}

// optional .bgs.protocol.MessageId message_id = 4;
inline bool GetStreamMessageRequest::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || message_id_ != nullptr);
  return value;
}
inline bool GetStreamMessageRequest::has_message_id() const {
  return _internal_has_message_id();
}
inline const ::bgs::protocol::MessageId& GetStreamMessageRequest::_internal_message_id() const {
  const ::bgs::protocol::MessageId* p = message_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::MessageId*>(
      &::bgs::protocol::_MessageId_default_instance_);
}
inline const ::bgs::protocol::MessageId& GetStreamMessageRequest::message_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamMessageRequest.message_id)
  return _internal_message_id();
}
inline ::bgs::protocol::MessageId* GetStreamMessageRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamMessageRequest.message_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::MessageId* temp = message_id_;
  message_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::MessageId* GetStreamMessageRequest::_internal_mutable_message_id() {
  _has_bits_[0] |= 0x00000002u;
  if (message_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::MessageId>(GetArenaNoVirtual());
    message_id_ = p;
  }
  return message_id_;
}
inline ::bgs::protocol::MessageId* GetStreamMessageRequest::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamMessageRequest.message_id)
  return _internal_mutable_message_id();
}
inline void GetStreamMessageRequest::set_allocated_message_id(::bgs::protocol::MessageId* message_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_id_);
  }
  if (message_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_id_ = message_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamMessageRequest.message_id)
}

// -------------------------------------------------------------------

// GetStreamMessageResponse

// optional .bgs.protocol.club.v1.StreamMessage message = 1;
inline bool GetStreamMessageResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool GetStreamMessageResponse::has_message() const {
  return _internal_has_message();
}
inline const ::bgs::protocol::club::v1::StreamMessage& GetStreamMessageResponse::_internal_message() const {
  const ::bgs::protocol::club::v1::StreamMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamMessage*>(
      &::bgs::protocol::club::v1::_StreamMessage_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamMessage& GetStreamMessageResponse::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamMessageResponse.message)
  return _internal_message();
}
inline ::bgs::protocol::club::v1::StreamMessage* GetStreamMessageResponse::release_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamMessageResponse.message)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::StreamMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamMessage* GetStreamMessageResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::bgs::protocol::club::v1::StreamMessage* GetStreamMessageResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamMessageResponse.message)
  return _internal_mutable_message();
}
inline void GetStreamMessageResponse::set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamMessageResponse.message)
}

// -------------------------------------------------------------------

// GetClubActivityRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetClubActivityRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetClubActivityRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetClubActivityRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetClubActivityRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubActivityRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetClubActivityRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetClubActivityRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetClubActivityRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetClubActivityRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetClubActivityRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetClubActivityRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetClubActivityRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetClubActivityRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetClubActivityRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetClubActivityRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetClubActivityRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetClubActivityRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubActivityRequest.club_id)
  return _internal_club_id();
}
inline void GetClubActivityRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void GetClubActivityRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetClubActivityRequest.club_id)
}

// optional .bgs.protocol.GetEventOptions options = 3;
inline bool GetClubActivityRequest::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool GetClubActivityRequest::has_options() const {
  return _internal_has_options();
}
inline const ::bgs::protocol::GetEventOptions& GetClubActivityRequest::_internal_options() const {
  const ::bgs::protocol::GetEventOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::GetEventOptions*>(
      &::bgs::protocol::_GetEventOptions_default_instance_);
}
inline const ::bgs::protocol::GetEventOptions& GetClubActivityRequest::options() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubActivityRequest.options)
  return _internal_options();
}
inline ::bgs::protocol::GetEventOptions* GetClubActivityRequest::release_options() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetClubActivityRequest.options)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::GetEventOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bgs::protocol::GetEventOptions* GetClubActivityRequest::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000002u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::GetEventOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::bgs::protocol::GetEventOptions* GetClubActivityRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetClubActivityRequest.options)
  return _internal_mutable_options();
}
inline void GetClubActivityRequest::set_allocated_options(::bgs::protocol::GetEventOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetClubActivityRequest.options)
}

// -------------------------------------------------------------------

// GetClubActivityResponse

// optional uint64 continuation = 2;
inline bool GetClubActivityResponse::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetClubActivityResponse::has_continuation() const {
  return _internal_has_continuation();
}
inline void GetClubActivityResponse::clear_continuation() {
  continuation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetClubActivityResponse::_internal_continuation() const {
  return continuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetClubActivityResponse::continuation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetClubActivityResponse.continuation)
  return _internal_continuation();
}
inline void GetClubActivityResponse::_internal_set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  continuation_ = value;
}
inline void GetClubActivityResponse::set_continuation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetClubActivityResponse.continuation)
}

// -------------------------------------------------------------------

// GetStreamVoiceTokenRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool GetStreamVoiceTokenRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool GetStreamVoiceTokenRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamVoiceTokenRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& GetStreamVoiceTokenRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamVoiceTokenRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamVoiceTokenRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamVoiceTokenRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamVoiceTokenRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* GetStreamVoiceTokenRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamVoiceTokenRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void GetStreamVoiceTokenRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamVoiceTokenRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool GetStreamVoiceTokenRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetStreamVoiceTokenRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void GetStreamVoiceTokenRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamVoiceTokenRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamVoiceTokenRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamVoiceTokenRequest.club_id)
  return _internal_club_id();
}
inline void GetStreamVoiceTokenRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void GetStreamVoiceTokenRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamVoiceTokenRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool GetStreamVoiceTokenRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetStreamVoiceTokenRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void GetStreamVoiceTokenRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamVoiceTokenRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetStreamVoiceTokenRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamVoiceTokenRequest.stream_id)
  return _internal_stream_id();
}
inline void GetStreamVoiceTokenRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void GetStreamVoiceTokenRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamVoiceTokenRequest.stream_id)
}

// -------------------------------------------------------------------

// GetStreamVoiceTokenResponse

// optional string channel_uri = 1;
inline bool GetStreamVoiceTokenResponse::_internal_has_channel_uri() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetStreamVoiceTokenResponse::has_channel_uri() const {
  return _internal_has_channel_uri();
}
inline void GetStreamVoiceTokenResponse::clear_channel_uri() {
  channel_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetStreamVoiceTokenResponse::channel_uri() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri)
  return _internal_channel_uri();
}
inline void GetStreamVoiceTokenResponse::set_channel_uri(const std::string& value) {
  _internal_set_channel_uri(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri)
}
inline std::string* GetStreamVoiceTokenResponse::mutable_channel_uri() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri)
  return _internal_mutable_channel_uri();
}
inline const std::string& GetStreamVoiceTokenResponse::_internal_channel_uri() const {
  return channel_uri_.GetNoArena();
}
inline void GetStreamVoiceTokenResponse::_internal_set_channel_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetStreamVoiceTokenResponse::set_channel_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri)
}
inline void GetStreamVoiceTokenResponse::set_channel_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri)
}
inline void GetStreamVoiceTokenResponse::set_channel_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri)
}
inline std::string* GetStreamVoiceTokenResponse::_internal_mutable_channel_uri() {
  _has_bits_[0] |= 0x00000001u;
  return channel_uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStreamVoiceTokenResponse::release_channel_uri() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri)
  if (!_internal_has_channel_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStreamVoiceTokenResponse::set_allocated_channel_uri(std::string* channel_uri) {
  if (channel_uri != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_uri);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.channel_uri)
}

// optional .bgs.protocol.VoiceCredentials credentials = 2;
inline bool GetStreamVoiceTokenResponse::_internal_has_credentials() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || credentials_ != nullptr);
  return value;
}
inline bool GetStreamVoiceTokenResponse::has_credentials() const {
  return _internal_has_credentials();
}
inline const ::bgs::protocol::VoiceCredentials& GetStreamVoiceTokenResponse::_internal_credentials() const {
  const ::bgs::protocol::VoiceCredentials* p = credentials_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::VoiceCredentials*>(
      &::bgs::protocol::_VoiceCredentials_default_instance_);
}
inline const ::bgs::protocol::VoiceCredentials& GetStreamVoiceTokenResponse::credentials() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.credentials)
  return _internal_credentials();
}
inline ::bgs::protocol::VoiceCredentials* GetStreamVoiceTokenResponse::release_credentials() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.credentials)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::VoiceCredentials* temp = credentials_;
  credentials_ = nullptr;
  return temp;
}
inline ::bgs::protocol::VoiceCredentials* GetStreamVoiceTokenResponse::_internal_mutable_credentials() {
  _has_bits_[0] |= 0x00000002u;
  if (credentials_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::VoiceCredentials>(GetArenaNoVirtual());
    credentials_ = p;
  }
  return credentials_;
}
inline ::bgs::protocol::VoiceCredentials* GetStreamVoiceTokenResponse::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.credentials)
  return _internal_mutable_credentials();
}
inline void GetStreamVoiceTokenResponse::set_allocated_credentials(::bgs::protocol::VoiceCredentials* credentials) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credentials_);
  }
  if (credentials) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credentials = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credentials, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  credentials_ = credentials;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.GetStreamVoiceTokenResponse.credentials)
}

// -------------------------------------------------------------------

// KickFromStreamVoiceRequest

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool KickFromStreamVoiceRequest::_internal_has_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || agent_id_ != nullptr);
  return value;
}
inline bool KickFromStreamVoiceRequest::has_agent_id() const {
  return _internal_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& KickFromStreamVoiceRequest::_internal_agent_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = agent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& KickFromStreamVoiceRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.KickFromStreamVoiceRequest.agent_id)
  return _internal_agent_id();
}
inline ::bgs::protocol::club::v1::MemberId* KickFromStreamVoiceRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.KickFromStreamVoiceRequest.agent_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* KickFromStreamVoiceRequest::_internal_mutable_agent_id() {
  _has_bits_[0] |= 0x00000001u;
  if (agent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    agent_id_ = p;
  }
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* KickFromStreamVoiceRequest::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.KickFromStreamVoiceRequest.agent_id)
  return _internal_mutable_agent_id();
}
inline void KickFromStreamVoiceRequest::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_id_);
  }
  if (agent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agent_id_ = agent_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.KickFromStreamVoiceRequest.agent_id)
}

// optional uint64 club_id = 2;
inline bool KickFromStreamVoiceRequest::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KickFromStreamVoiceRequest::has_club_id() const {
  return _internal_has_club_id();
}
inline void KickFromStreamVoiceRequest::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KickFromStreamVoiceRequest::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KickFromStreamVoiceRequest::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.KickFromStreamVoiceRequest.club_id)
  return _internal_club_id();
}
inline void KickFromStreamVoiceRequest::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  club_id_ = value;
}
inline void KickFromStreamVoiceRequest::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.KickFromStreamVoiceRequest.club_id)
}

// optional uint64 stream_id = 3;
inline bool KickFromStreamVoiceRequest::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KickFromStreamVoiceRequest::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void KickFromStreamVoiceRequest::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KickFromStreamVoiceRequest::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KickFromStreamVoiceRequest::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.KickFromStreamVoiceRequest.stream_id)
  return _internal_stream_id();
}
inline void KickFromStreamVoiceRequest::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void KickFromStreamVoiceRequest::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.KickFromStreamVoiceRequest.stream_id)
}

// optional .bgs.protocol.club.v1.MemberId target_id = 4;
inline bool KickFromStreamVoiceRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool KickFromStreamVoiceRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::club::v1::MemberId& KickFromStreamVoiceRequest::_internal_target_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& KickFromStreamVoiceRequest::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.KickFromStreamVoiceRequest.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::club::v1::MemberId* KickFromStreamVoiceRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.KickFromStreamVoiceRequest.target_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* KickFromStreamVoiceRequest::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::club::v1::MemberId* KickFromStreamVoiceRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.KickFromStreamVoiceRequest.target_id)
  return _internal_mutable_target_id();
}
inline void KickFromStreamVoiceRequest::set_allocated_target_id(::bgs::protocol::club::v1::MemberId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.KickFromStreamVoiceRequest.target_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frequest_2eproto
