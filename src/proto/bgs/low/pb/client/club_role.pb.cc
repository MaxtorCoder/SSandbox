// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_role.proto

#include "bgs/low/pb/client/club_role.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleState_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClubPrivilegeSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubRole_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubPrivilegeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubPrivilegeSet> _instance;
} _ClubPrivilegeSet_default_instance_;
class ClubRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubRole> _instance;
} _ClubRole_default_instance_;
class ClubRoleSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubRoleSet> _instance;
} _ClubRoleSet_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ClubPrivilegeSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubPrivilegeSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubPrivilegeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubPrivilegeSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClubPrivilegeSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClubPrivilegeSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto}, {}};

static void InitDefaultsscc_info_ClubRole_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubRole_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClubRole_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClubRole_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto}, {
      &scc_info_RoleState_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto.base,
      &scc_info_ClubPrivilegeSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base,}};

static void InitDefaultsscc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubRoleSet_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubRoleSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubRoleSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto}, {
      &scc_info_ClubRole_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_destroy_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_description_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_avatar_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_broadcast_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_privacy_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_kick_member_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_own_member_attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_other_member_attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_own_voice_state_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_own_presence_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_own_whisper_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_own_member_note_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_other_member_note_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_use_voice_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_voice_mute_member_for_all_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_get_invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_send_invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_send_guest_invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_revoke_own_invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_revoke_other_invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_get_suggestion_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_suggest_member_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_approve_member_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_get_ticket_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_create_ticket_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_destroy_ticket_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_get_ban_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_add_ban_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_remove_ban_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_create_stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_destroy_stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_stream_position_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_stream_attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_stream_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_stream_subject_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_stream_access_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_set_stream_voice_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_create_message_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_destroy_own_message_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_destroy_other_message_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_edit_own_message_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_pin_message_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_mention_all_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_mention_here_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_mention_member_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubPrivilegeSet, can_mention_role_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRole, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRole, state_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRole, privilege_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRole, always_grant_stream_access_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRole, allow_in_club_slot_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRoleSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRoleSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRoleSet, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRoleSet, default_role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRoleSet, assignment_respects_relegation_chain_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubRoleSet, subtype_),
  ~0u,
  ~0u,
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 53, sizeof(::bgs::protocol::club::v1::ClubPrivilegeSet)},
  { 101, 111, sizeof(::bgs::protocol::club::v1::ClubRole)},
  { 116, 125, sizeof(::bgs::protocol::club::v1::ClubRoleSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubPrivilegeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubRoleSet_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!bgs/low/pb/client/club_role.proto\022\024bgs"
  ".protocol.club.v1\032\"bgs/low/pb/client/rol"
  "e_types.proto\"\257\013\n\020ClubPrivilegeSet\022\023\n\013ca"
  "n_destroy\030\001 \001(\010\022\031\n\021can_set_attribute\030\n \001"
  "(\010\022\024\n\014can_set_name\030\013 \001(\010\022\033\n\023can_set_desc"
  "ription\030\014 \001(\010\022\026\n\016can_set_avatar\030\r \001(\010\022\031\n"
  "\021can_set_broadcast\030\016 \001(\010\022\035\n\025can_set_priv"
  "acy_level\030\017 \001(\010\022\027\n\017can_kick_member\030\036 \001(\010"
  "\022$\n\034can_set_own_member_attribute\030\037 \001(\010\022&"
  "\n\036can_set_other_member_attribute\030  \001(\010\022\037"
  "\n\027can_set_own_voice_state\030! \001(\010\022\"\n\032can_s"
  "et_own_presence_level\030\" \001(\010\022!\n\031can_set_o"
  "wn_whisper_level\030# \001(\010\022\037\n\027can_set_own_me"
  "mber_note\030$ \001(\010\022!\n\031can_set_other_member_"
  "note\030% \001(\010\022\025\n\rcan_use_voice\0302 \001(\010\022%\n\035can"
  "_voice_mute_member_for_all\0303 \001(\010\022\032\n\022can_"
  "get_invitation\030F \001(\010\022\033\n\023can_send_invitat"
  "ion\030G \001(\010\022!\n\031can_send_guest_invitation\030H"
  " \001(\010\022!\n\031can_revoke_own_invitation\030I \001(\010\022"
  "#\n\033can_revoke_other_invitation\030J \001(\010\022\032\n\022"
  "can_get_suggestion\030Z \001(\010\022\032\n\022can_suggest_"
  "member\030[ \001(\010\022\032\n\022can_approve_member\030\\ \001(\010"
  "\022\026\n\016can_get_ticket\030n \001(\010\022\031\n\021can_create_t"
  "icket\030o \001(\010\022\032\n\022can_destroy_ticket\030p \001(\010\022"
  "\024\n\013can_get_ban\030\202\001 \001(\010\022\024\n\013can_add_ban\030\203\001 "
  "\001(\010\022\027\n\016can_remove_ban\030\204\001 \001(\010\022\032\n\021can_crea"
  "te_stream\030\214\001 \001(\010\022\033\n\022can_destroy_stream\030\215"
  "\001 \001(\010\022 \n\027can_set_stream_position\030\216\001 \001(\010\022"
  "!\n\030can_set_stream_attribute\030\217\001 \001(\010\022\034\n\023ca"
  "n_set_stream_name\030\220\001 \001(\010\022\037\n\026can_set_stre"
  "am_subject\030\221\001 \001(\010\022\036\n\025can_set_stream_acce"
  "ss\030\222\001 \001(\010\022#\n\032can_set_stream_voice_level\030"
  "\223\001 \001(\010\022\033\n\022can_create_message\030\264\001 \001(\010\022 \n\027c"
  "an_destroy_own_message\030\265\001 \001(\010\022\"\n\031can_des"
  "troy_other_message\030\266\001 \001(\010\022\035\n\024can_edit_ow"
  "n_message\030\267\001 \001(\010\022\030\n\017can_pin_message\030\270\001 \001"
  "(\010\022\030\n\017can_mention_all\030\271\001 \001(\010\022\031\n\020can_ment"
  "ion_here\030\272\001 \001(\010\022\033\n\022can_mention_member\030\273\001"
  " \001(\010\022\031\n\020can_mention_role\030\274\001 \001(\010\"\271\001\n\010Club"
  "Role\022\n\n\002id\030\001 \001(\r\022&\n\005state\030\002 \001(\0132\027.bgs.pr"
  "otocol.RoleState\0229\n\tprivilege\030\003 \001(\0132&.bg"
  "s.protocol.club.v1.ClubPrivilegeSet\022\"\n\032a"
  "lways_grant_stream_access\030\004 \001(\010\022\032\n\022allow"
  "_in_club_slot\030\005 \001(\010\"\224\001\n\013ClubRoleSet\022,\n\004r"
  "ole\030\001 \003(\0132\036.bgs.protocol.club.v1.ClubRol"
  "e\022\030\n\014default_role\030\005 \003(\rB\002\020\001\022,\n$assignmen"
  "t_respects_relegation_chain\030\006 \001(\010\022\017\n\007sub"
  "type\030\007 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto_deps[1] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto_sccs[3] = {
  &scc_info_ClubPrivilegeSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base,
  &scc_info_ClubRole_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base,
  &scc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto, "bgs/low/pb/client/club_role.proto", 1890,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto, 3, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void ClubPrivilegeSet::InitAsDefaultInstance() {
}
class ClubPrivilegeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubPrivilegeSet>()._has_bits_);
  static void set_has_can_destroy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_set_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_set_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_set_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_set_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_set_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_set_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_kick_member(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_set_own_member_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_set_other_member_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_set_own_voice_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_can_set_own_presence_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_set_own_whisper_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_can_set_own_member_note(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_can_set_other_member_note(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_can_use_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_can_voice_mute_member_for_all(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_can_get_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_can_send_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_can_send_guest_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_can_revoke_own_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_can_revoke_other_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_can_get_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_can_suggest_member(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_can_approve_member(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_can_get_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_can_create_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_can_destroy_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_can_get_ban(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_can_add_ban(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_can_remove_ban(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_can_create_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_can_destroy_stream(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_can_set_stream_position(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_can_set_stream_attribute(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_can_set_stream_name(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_can_set_stream_subject(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_can_set_stream_access(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_can_set_stream_voice_level(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_can_create_message(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_can_destroy_own_message(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_can_destroy_other_message(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_can_edit_own_message(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_can_pin_message(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_can_mention_all(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_can_mention_here(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_can_mention_member(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_can_mention_role(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
};

ClubPrivilegeSet::ClubPrivilegeSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubPrivilegeSet)
}
ClubPrivilegeSet::ClubPrivilegeSet(const ClubPrivilegeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_destroy_, &from.can_destroy_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_mention_role_) -
    reinterpret_cast<char*>(&can_destroy_)) + sizeof(can_mention_role_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubPrivilegeSet)
}

void ClubPrivilegeSet::SharedCtor() {
  ::memset(&can_destroy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_mention_role_) -
      reinterpret_cast<char*>(&can_destroy_)) + sizeof(can_mention_role_));
}

ClubPrivilegeSet::~ClubPrivilegeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubPrivilegeSet)
  SharedDtor();
}

void ClubPrivilegeSet::SharedDtor() {
}

void ClubPrivilegeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubPrivilegeSet& ClubPrivilegeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubPrivilegeSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base);
  return *internal_default_instance();
}


void ClubPrivilegeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_destroy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_kick_member_) -
        reinterpret_cast<char*>(&can_destroy_)) + sizeof(can_kick_member_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&can_set_own_member_attribute_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_use_voice_) -
        reinterpret_cast<char*>(&can_set_own_member_attribute_)) + sizeof(can_use_voice_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&can_voice_mute_member_for_all_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_suggest_member_) -
        reinterpret_cast<char*>(&can_voice_mute_member_for_all_)) + sizeof(can_suggest_member_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&can_approve_member_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_create_stream_) -
        reinterpret_cast<char*>(&can_approve_member_)) + sizeof(can_create_stream_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_destroy_stream_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_create_message_) -
        reinterpret_cast<char*>(&can_destroy_stream_)) + sizeof(can_create_message_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&can_destroy_own_message_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_mention_role_) -
        reinterpret_cast<char*>(&can_destroy_own_message_)) + sizeof(can_mention_role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubPrivilegeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool can_destroy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_destroy(&_has_bits_);
          can_destroy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_attribute = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_can_set_attribute(&_has_bits_);
          can_set_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_can_set_name(&_has_bits_);
          can_set_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_description = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_can_set_description(&_has_bits_);
          can_set_description_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_avatar = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_can_set_avatar(&_has_bits_);
          can_set_avatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_broadcast = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_can_set_broadcast(&_has_bits_);
          can_set_broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_privacy_level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_can_set_privacy_level(&_has_bits_);
          can_set_privacy_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_kick_member = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_can_kick_member(&_has_bits_);
          can_kick_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_own_member_attribute = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_can_set_own_member_attribute(&_has_bits_);
          can_set_own_member_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_other_member_attribute = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_can_set_other_member_attribute(&_has_bits_);
          can_set_other_member_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_own_voice_state = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_set_own_voice_state(&_has_bits_);
          can_set_own_voice_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_own_presence_level = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_set_own_presence_level(&_has_bits_);
          can_set_own_presence_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_own_whisper_level = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_set_own_whisper_level(&_has_bits_);
          can_set_own_whisper_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_own_member_note = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_set_own_member_note(&_has_bits_);
          can_set_own_member_note_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_other_member_note = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_set_other_member_note(&_has_bits_);
          can_set_other_member_note_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_use_voice = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_can_use_voice(&_has_bits_);
          can_use_voice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_voice_mute_member_for_all = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_can_voice_mute_member_for_all(&_has_bits_);
          can_voice_mute_member_for_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_get_invitation = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_get_invitation(&_has_bits_);
          can_get_invitation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_send_invitation = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_send_invitation(&_has_bits_);
          can_send_invitation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_send_guest_invitation = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_can_send_guest_invitation(&_has_bits_);
          can_send_guest_invitation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_revoke_own_invitation = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_can_revoke_own_invitation(&_has_bits_);
          can_revoke_own_invitation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_revoke_other_invitation = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_can_revoke_other_invitation(&_has_bits_);
          can_revoke_other_invitation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_get_suggestion = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_can_get_suggestion(&_has_bits_);
          can_get_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_suggest_member = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_can_suggest_member(&_has_bits_);
          can_suggest_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_approve_member = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_can_approve_member(&_has_bits_);
          can_approve_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_get_ticket = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_can_get_ticket(&_has_bits_);
          can_get_ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_create_ticket = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_can_create_ticket(&_has_bits_);
          can_create_ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_destroy_ticket = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_can_destroy_ticket(&_has_bits_);
          can_destroy_ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_get_ban = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_get_ban(&_has_bits_);
          can_get_ban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_add_ban = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_add_ban(&_has_bits_);
          can_add_ban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_remove_ban = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_remove_ban(&_has_bits_);
          can_remove_ban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_create_stream = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_can_create_stream(&_has_bits_);
          can_create_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_destroy_stream = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_can_destroy_stream(&_has_bits_);
          can_destroy_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_stream_position = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_can_set_stream_position(&_has_bits_);
          can_set_stream_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_stream_attribute = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_can_set_stream_attribute(&_has_bits_);
          can_set_stream_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_stream_name = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_can_set_stream_name(&_has_bits_);
          can_set_stream_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_stream_subject = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_can_set_stream_subject(&_has_bits_);
          can_set_stream_subject_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_stream_access = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_can_set_stream_access(&_has_bits_);
          can_set_stream_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_set_stream_voice_level = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_can_set_stream_voice_level(&_has_bits_);
          can_set_stream_voice_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_create_message = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_can_create_message(&_has_bits_);
          can_create_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_destroy_own_message = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_can_destroy_own_message(&_has_bits_);
          can_destroy_own_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_destroy_other_message = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_can_destroy_other_message(&_has_bits_);
          can_destroy_other_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_edit_own_message = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_can_edit_own_message(&_has_bits_);
          can_edit_own_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_pin_message = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_can_pin_message(&_has_bits_);
          can_pin_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_mention_all = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_can_mention_all(&_has_bits_);
          can_mention_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_mention_here = 186;
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_can_mention_here(&_has_bits_);
          can_mention_here_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_mention_member = 187;
      case 187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_can_mention_member(&_has_bits_);
          can_mention_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_mention_role = 188;
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_can_mention_role(&_has_bits_);
          can_mention_role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubPrivilegeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_destroy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_destroy(), target);
  }

  // optional bool can_set_attribute = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_can_set_attribute(), target);
  }

  // optional bool can_set_name = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_can_set_name(), target);
  }

  // optional bool can_set_description = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_can_set_description(), target);
  }

  // optional bool can_set_avatar = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_can_set_avatar(), target);
  }

  // optional bool can_set_broadcast = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_can_set_broadcast(), target);
  }

  // optional bool can_set_privacy_level = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_can_set_privacy_level(), target);
  }

  // optional bool can_kick_member = 30;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_can_kick_member(), target);
  }

  // optional bool can_set_own_member_attribute = 31;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_can_set_own_member_attribute(), target);
  }

  // optional bool can_set_other_member_attribute = 32;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_can_set_other_member_attribute(), target);
  }

  // optional bool can_set_own_voice_state = 33;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_can_set_own_voice_state(), target);
  }

  // optional bool can_set_own_presence_level = 34;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_can_set_own_presence_level(), target);
  }

  // optional bool can_set_own_whisper_level = 35;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_can_set_own_whisper_level(), target);
  }

  // optional bool can_set_own_member_note = 36;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_can_set_own_member_note(), target);
  }

  // optional bool can_set_other_member_note = 37;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_can_set_other_member_note(), target);
  }

  // optional bool can_use_voice = 50;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_can_use_voice(), target);
  }

  // optional bool can_voice_mute_member_for_all = 51;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_can_voice_mute_member_for_all(), target);
  }

  // optional bool can_get_invitation = 70;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(70, this->_internal_can_get_invitation(), target);
  }

  // optional bool can_send_invitation = 71;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(71, this->_internal_can_send_invitation(), target);
  }

  // optional bool can_send_guest_invitation = 72;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(72, this->_internal_can_send_guest_invitation(), target);
  }

  // optional bool can_revoke_own_invitation = 73;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(73, this->_internal_can_revoke_own_invitation(), target);
  }

  // optional bool can_revoke_other_invitation = 74;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(74, this->_internal_can_revoke_other_invitation(), target);
  }

  // optional bool can_get_suggestion = 90;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(90, this->_internal_can_get_suggestion(), target);
  }

  // optional bool can_suggest_member = 91;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(91, this->_internal_can_suggest_member(), target);
  }

  // optional bool can_approve_member = 92;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(92, this->_internal_can_approve_member(), target);
  }

  // optional bool can_get_ticket = 110;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(110, this->_internal_can_get_ticket(), target);
  }

  // optional bool can_create_ticket = 111;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(111, this->_internal_can_create_ticket(), target);
  }

  // optional bool can_destroy_ticket = 112;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(112, this->_internal_can_destroy_ticket(), target);
  }

  // optional bool can_get_ban = 130;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(130, this->_internal_can_get_ban(), target);
  }

  // optional bool can_add_ban = 131;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(131, this->_internal_can_add_ban(), target);
  }

  // optional bool can_remove_ban = 132;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(132, this->_internal_can_remove_ban(), target);
  }

  // optional bool can_create_stream = 140;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(140, this->_internal_can_create_stream(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool can_destroy_stream = 141;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(141, this->_internal_can_destroy_stream(), target);
  }

  // optional bool can_set_stream_position = 142;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(142, this->_internal_can_set_stream_position(), target);
  }

  // optional bool can_set_stream_attribute = 143;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(143, this->_internal_can_set_stream_attribute(), target);
  }

  // optional bool can_set_stream_name = 144;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(144, this->_internal_can_set_stream_name(), target);
  }

  // optional bool can_set_stream_subject = 145;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(145, this->_internal_can_set_stream_subject(), target);
  }

  // optional bool can_set_stream_access = 146;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(146, this->_internal_can_set_stream_access(), target);
  }

  // optional bool can_set_stream_voice_level = 147;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(147, this->_internal_can_set_stream_voice_level(), target);
  }

  // optional bool can_create_message = 180;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(180, this->_internal_can_create_message(), target);
  }

  // optional bool can_destroy_own_message = 181;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(181, this->_internal_can_destroy_own_message(), target);
  }

  // optional bool can_destroy_other_message = 182;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(182, this->_internal_can_destroy_other_message(), target);
  }

  // optional bool can_edit_own_message = 183;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(183, this->_internal_can_edit_own_message(), target);
  }

  // optional bool can_pin_message = 184;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(184, this->_internal_can_pin_message(), target);
  }

  // optional bool can_mention_all = 185;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(185, this->_internal_can_mention_all(), target);
  }

  // optional bool can_mention_here = 186;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(186, this->_internal_can_mention_here(), target);
  }

  // optional bool can_mention_member = 187;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(187, this->_internal_can_mention_member(), target);
  }

  // optional bool can_mention_role = 188;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(188, this->_internal_can_mention_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubPrivilegeSet)
  return target;
}

size_t ClubPrivilegeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool can_destroy = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool can_set_attribute = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool can_set_name = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool can_set_description = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool can_set_avatar = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool can_set_broadcast = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool can_set_privacy_level = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool can_kick_member = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool can_set_own_member_attribute = 31;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_other_member_attribute = 32;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_own_voice_state = 33;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_own_presence_level = 34;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_own_whisper_level = 35;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_own_member_note = 36;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_other_member_note = 37;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool can_use_voice = 50;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool can_voice_mute_member_for_all = 51;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool can_get_invitation = 70;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool can_send_invitation = 71;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool can_send_guest_invitation = 72;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool can_revoke_own_invitation = 73;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool can_revoke_other_invitation = 74;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool can_get_suggestion = 90;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool can_suggest_member = 91;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool can_approve_member = 92;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool can_get_ticket = 110;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool can_create_ticket = 111;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool can_destroy_ticket = 112;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool can_get_ban = 130;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool can_add_ban = 131;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool can_remove_ban = 132;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool can_create_stream = 140;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool can_destroy_stream = 141;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_position = 142;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_attribute = 143;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_name = 144;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_subject = 145;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_access = 146;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_voice_level = 147;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool can_create_message = 180;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool can_destroy_own_message = 181;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool can_destroy_other_message = 182;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool can_edit_own_message = 183;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool can_pin_message = 184;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool can_mention_all = 185;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool can_mention_here = 186;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool can_mention_member = 187;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool can_mention_role = 188;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubPrivilegeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubPrivilegeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubPrivilegeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubPrivilegeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubPrivilegeSet)
    MergeFrom(*source);
  }
}

void ClubPrivilegeSet::MergeFrom(const ClubPrivilegeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_destroy_ = from.can_destroy_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_set_attribute_ = from.can_set_attribute_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_set_name_ = from.can_set_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_set_description_ = from.can_set_description_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_set_avatar_ = from.can_set_avatar_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_set_broadcast_ = from.can_set_broadcast_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_set_privacy_level_ = from.can_set_privacy_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_kick_member_ = from.can_kick_member_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      can_set_own_member_attribute_ = from.can_set_own_member_attribute_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_set_other_member_attribute_ = from.can_set_other_member_attribute_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_set_own_voice_state_ = from.can_set_own_voice_state_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_set_own_presence_level_ = from.can_set_own_presence_level_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_set_own_whisper_level_ = from.can_set_own_whisper_level_;
    }
    if (cached_has_bits & 0x00002000u) {
      can_set_own_member_note_ = from.can_set_own_member_note_;
    }
    if (cached_has_bits & 0x00004000u) {
      can_set_other_member_note_ = from.can_set_other_member_note_;
    }
    if (cached_has_bits & 0x00008000u) {
      can_use_voice_ = from.can_use_voice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      can_voice_mute_member_for_all_ = from.can_voice_mute_member_for_all_;
    }
    if (cached_has_bits & 0x00020000u) {
      can_get_invitation_ = from.can_get_invitation_;
    }
    if (cached_has_bits & 0x00040000u) {
      can_send_invitation_ = from.can_send_invitation_;
    }
    if (cached_has_bits & 0x00080000u) {
      can_send_guest_invitation_ = from.can_send_guest_invitation_;
    }
    if (cached_has_bits & 0x00100000u) {
      can_revoke_own_invitation_ = from.can_revoke_own_invitation_;
    }
    if (cached_has_bits & 0x00200000u) {
      can_revoke_other_invitation_ = from.can_revoke_other_invitation_;
    }
    if (cached_has_bits & 0x00400000u) {
      can_get_suggestion_ = from.can_get_suggestion_;
    }
    if (cached_has_bits & 0x00800000u) {
      can_suggest_member_ = from.can_suggest_member_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      can_approve_member_ = from.can_approve_member_;
    }
    if (cached_has_bits & 0x02000000u) {
      can_get_ticket_ = from.can_get_ticket_;
    }
    if (cached_has_bits & 0x04000000u) {
      can_create_ticket_ = from.can_create_ticket_;
    }
    if (cached_has_bits & 0x08000000u) {
      can_destroy_ticket_ = from.can_destroy_ticket_;
    }
    if (cached_has_bits & 0x10000000u) {
      can_get_ban_ = from.can_get_ban_;
    }
    if (cached_has_bits & 0x20000000u) {
      can_add_ban_ = from.can_add_ban_;
    }
    if (cached_has_bits & 0x40000000u) {
      can_remove_ban_ = from.can_remove_ban_;
    }
    if (cached_has_bits & 0x80000000u) {
      can_create_stream_ = from.can_create_stream_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_destroy_stream_ = from.can_destroy_stream_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_set_stream_position_ = from.can_set_stream_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_set_stream_attribute_ = from.can_set_stream_attribute_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_set_stream_name_ = from.can_set_stream_name_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_set_stream_subject_ = from.can_set_stream_subject_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_set_stream_access_ = from.can_set_stream_access_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_set_stream_voice_level_ = from.can_set_stream_voice_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_create_message_ = from.can_create_message_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      can_destroy_own_message_ = from.can_destroy_own_message_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_destroy_other_message_ = from.can_destroy_other_message_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_edit_own_message_ = from.can_edit_own_message_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_pin_message_ = from.can_pin_message_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_mention_all_ = from.can_mention_all_;
    }
    if (cached_has_bits & 0x00002000u) {
      can_mention_here_ = from.can_mention_here_;
    }
    if (cached_has_bits & 0x00004000u) {
      can_mention_member_ = from.can_mention_member_;
    }
    if (cached_has_bits & 0x00008000u) {
      can_mention_role_ = from.can_mention_role_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ClubPrivilegeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubPrivilegeSet::CopyFrom(const ClubPrivilegeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubPrivilegeSet::IsInitialized() const {
  return true;
}

void ClubPrivilegeSet::InternalSwap(ClubPrivilegeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(can_destroy_, other->can_destroy_);
  swap(can_set_attribute_, other->can_set_attribute_);
  swap(can_set_name_, other->can_set_name_);
  swap(can_set_description_, other->can_set_description_);
  swap(can_set_avatar_, other->can_set_avatar_);
  swap(can_set_broadcast_, other->can_set_broadcast_);
  swap(can_set_privacy_level_, other->can_set_privacy_level_);
  swap(can_kick_member_, other->can_kick_member_);
  swap(can_set_own_member_attribute_, other->can_set_own_member_attribute_);
  swap(can_set_other_member_attribute_, other->can_set_other_member_attribute_);
  swap(can_set_own_voice_state_, other->can_set_own_voice_state_);
  swap(can_set_own_presence_level_, other->can_set_own_presence_level_);
  swap(can_set_own_whisper_level_, other->can_set_own_whisper_level_);
  swap(can_set_own_member_note_, other->can_set_own_member_note_);
  swap(can_set_other_member_note_, other->can_set_other_member_note_);
  swap(can_use_voice_, other->can_use_voice_);
  swap(can_voice_mute_member_for_all_, other->can_voice_mute_member_for_all_);
  swap(can_get_invitation_, other->can_get_invitation_);
  swap(can_send_invitation_, other->can_send_invitation_);
  swap(can_send_guest_invitation_, other->can_send_guest_invitation_);
  swap(can_revoke_own_invitation_, other->can_revoke_own_invitation_);
  swap(can_revoke_other_invitation_, other->can_revoke_other_invitation_);
  swap(can_get_suggestion_, other->can_get_suggestion_);
  swap(can_suggest_member_, other->can_suggest_member_);
  swap(can_approve_member_, other->can_approve_member_);
  swap(can_get_ticket_, other->can_get_ticket_);
  swap(can_create_ticket_, other->can_create_ticket_);
  swap(can_destroy_ticket_, other->can_destroy_ticket_);
  swap(can_get_ban_, other->can_get_ban_);
  swap(can_add_ban_, other->can_add_ban_);
  swap(can_remove_ban_, other->can_remove_ban_);
  swap(can_create_stream_, other->can_create_stream_);
  swap(can_destroy_stream_, other->can_destroy_stream_);
  swap(can_set_stream_position_, other->can_set_stream_position_);
  swap(can_set_stream_attribute_, other->can_set_stream_attribute_);
  swap(can_set_stream_name_, other->can_set_stream_name_);
  swap(can_set_stream_subject_, other->can_set_stream_subject_);
  swap(can_set_stream_access_, other->can_set_stream_access_);
  swap(can_set_stream_voice_level_, other->can_set_stream_voice_level_);
  swap(can_create_message_, other->can_create_message_);
  swap(can_destroy_own_message_, other->can_destroy_own_message_);
  swap(can_destroy_other_message_, other->can_destroy_other_message_);
  swap(can_edit_own_message_, other->can_edit_own_message_);
  swap(can_pin_message_, other->can_pin_message_);
  swap(can_mention_all_, other->can_mention_all_);
  swap(can_mention_here_, other->can_mention_here_);
  swap(can_mention_member_, other->can_mention_member_);
  swap(can_mention_role_, other->can_mention_role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubPrivilegeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubRole::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ClubRole_default_instance_._instance.get_mutable()->state_ = const_cast< ::bgs::protocol::RoleState*>(
      ::bgs::protocol::RoleState::internal_default_instance());
  ::bgs::protocol::club::v1::_ClubRole_default_instance_._instance.get_mutable()->privilege_ = const_cast< ::bgs::protocol::club::v1::ClubPrivilegeSet*>(
      ::bgs::protocol::club::v1::ClubPrivilegeSet::internal_default_instance());
}
class ClubRole::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubRole>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::RoleState& state(const ClubRole* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::ClubPrivilegeSet& privilege(const ClubRole* msg);
  static void set_has_privilege(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_always_grant_stream_access(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_allow_in_club_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::RoleState&
ClubRole::_Internal::state(const ClubRole* msg) {
  return *msg->state_;
}
const ::bgs::protocol::club::v1::ClubPrivilegeSet&
ClubRole::_Internal::privilege(const ClubRole* msg) {
  return *msg->privilege_;
}
void ClubRole::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClubRole::ClubRole()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubRole)
}
ClubRole::ClubRole(const ClubRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::bgs::protocol::RoleState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_privilege()) {
    privilege_ = new ::bgs::protocol::club::v1::ClubPrivilegeSet(*from.privilege_);
  } else {
    privilege_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_in_club_slot_) -
    reinterpret_cast<char*>(&id_)) + sizeof(allow_in_club_slot_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubRole)
}

void ClubRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubRole_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_in_club_slot_) -
      reinterpret_cast<char*>(&state_)) + sizeof(allow_in_club_slot_));
}

ClubRole::~ClubRole() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubRole)
  SharedDtor();
}

void ClubRole::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete privilege_;
}

void ClubRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubRole& ClubRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubRole_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base);
  return *internal_default_instance();
}


void ClubRole::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(privilege_ != nullptr);
      privilege_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_in_club_slot_) -
        reinterpret_cast<char*>(&id_)) + sizeof(allow_in_club_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.RoleState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_privilege(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_grant_stream_access = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_always_grant_stream_access(&has_bits);
          always_grant_stream_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_in_club_slot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_allow_in_club_slot(&has_bits);
          allow_in_club_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .bgs.protocol.RoleState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::privilege(this), target, stream);
  }

  // optional bool always_grant_stream_access = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_always_grant_stream_access(), target);
  }

  // optional bool allow_in_club_slot = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_in_club_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubRole)
  return target;
}

size_t ClubRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .bgs.protocol.RoleState state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *privilege_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional bool always_grant_stream_access = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool allow_in_club_slot = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubRole)
    MergeFrom(*source);
  }
}

void ClubRole::MergeFrom(const ClubRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_state()->::bgs::protocol::RoleState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_privilege()->::bgs::protocol::club::v1::ClubPrivilegeSet::MergeFrom(from._internal_privilege());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      always_grant_stream_access_ = from.always_grant_stream_access_;
    }
    if (cached_has_bits & 0x00000010u) {
      allow_in_club_slot_ = from.allow_in_club_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubRole::CopyFrom(const ClubRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubRole::IsInitialized() const {
  return true;
}

void ClubRole::InternalSwap(ClubRole* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
  swap(privilege_, other->privilege_);
  swap(id_, other->id_);
  swap(always_grant_stream_access_, other->always_grant_stream_access_);
  swap(allow_in_club_slot_, other->allow_in_club_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubRoleSet::InitAsDefaultInstance() {
}
class ClubRoleSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubRoleSet>()._has_bits_);
  static void set_has_assignment_respects_relegation_chain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClubRoleSet::ClubRoleSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubRoleSet)
}
ClubRoleSet::ClubRoleSet(const ClubRoleSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_),
      default_role_(from.default_role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subtype()) {
    subtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtype_);
  }
  assignment_respects_relegation_chain_ = from.assignment_respects_relegation_chain_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubRoleSet)
}

void ClubRoleSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base);
  subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assignment_respects_relegation_chain_ = false;
}

ClubRoleSet::~ClubRoleSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubRoleSet)
  SharedDtor();
}

void ClubRoleSet::SharedDtor() {
  subtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClubRoleSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubRoleSet& ClubRoleSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubRoleSet_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.base);
  return *internal_default_instance();
}


void ClubRoleSet::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubRoleSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  default_role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    subtype_.ClearNonDefaultToEmptyNoArena();
  }
  assignment_respects_relegation_chain_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubRoleSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.ClubRole role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 default_role = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_default_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_default_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool assignment_respects_relegation_chain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_assignment_respects_relegation_chain(&has_bits);
          assignment_respects_relegation_chain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subtype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_subtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ClubRoleSet.subtype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubRoleSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubRoleSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubRole role = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_role(i), target, stream);
  }

  // repeated uint32 default_role = 5 [packed = true];
  {
    int byte_size = _default_role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_default_role(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional bool assignment_respects_relegation_chain = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_assignment_respects_relegation_chain(), target);
  }

  // optional string subtype = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subtype().data(), static_cast<int>(this->_internal_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ClubRoleSet.subtype");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_subtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubRoleSet)
  return target;
}

size_t ClubRoleSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubRoleSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ClubRole role = 1;
  total_size += 1UL * this->_internal_role_size();
  for (const auto& msg : this->role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 default_role = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->default_role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _default_role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string subtype = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subtype());
    }

    // optional bool assignment_respects_relegation_chain = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubRoleSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubRoleSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubRoleSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubRoleSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubRoleSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubRoleSet)
    MergeFrom(*source);
  }
}

void ClubRoleSet::MergeFrom(const ClubRoleSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubRoleSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  default_role_.MergeFrom(from.default_role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtype_);
    }
    if (cached_has_bits & 0x00000002u) {
      assignment_respects_relegation_chain_ = from.assignment_respects_relegation_chain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClubRoleSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubRoleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubRoleSet::CopyFrom(const ClubRoleSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubRoleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubRoleSet::IsInitialized() const {
  return true;
}

void ClubRoleSet::InternalSwap(ClubRoleSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  default_role_.InternalSwap(&other->default_role_);
  subtype_.Swap(&other->subtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(assignment_respects_relegation_chain_, other->assignment_respects_relegation_chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubRoleSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubPrivilegeSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubPrivilegeSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubPrivilegeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubRole* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubRole >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubRole >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubRoleSet* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubRoleSet >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubRoleSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
