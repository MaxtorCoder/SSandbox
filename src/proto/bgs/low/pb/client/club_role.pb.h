// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_role.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/role_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubPrivilegeSet;
class ClubPrivilegeSetDefaultTypeInternal;
extern ClubPrivilegeSetDefaultTypeInternal _ClubPrivilegeSet_default_instance_;
class ClubRole;
class ClubRoleDefaultTypeInternal;
extern ClubRoleDefaultTypeInternal _ClubRole_default_instance_;
class ClubRoleSet;
class ClubRoleSetDefaultTypeInternal;
extern ClubRoleSetDefaultTypeInternal _ClubRoleSet_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::ClubPrivilegeSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubPrivilegeSet>(Arena*);
template<> ::bgs::protocol::club::v1::ClubRole* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubRole>(Arena*);
template<> ::bgs::protocol::club::v1::ClubRoleSet* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubRoleSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class ClubPrivilegeSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubPrivilegeSet) */ {
 public:
  ClubPrivilegeSet();
  virtual ~ClubPrivilegeSet();

  ClubPrivilegeSet(const ClubPrivilegeSet& from);
  ClubPrivilegeSet(ClubPrivilegeSet&& from) noexcept
    : ClubPrivilegeSet() {
    *this = ::std::move(from);
  }

  inline ClubPrivilegeSet& operator=(const ClubPrivilegeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubPrivilegeSet& operator=(ClubPrivilegeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubPrivilegeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubPrivilegeSet* internal_default_instance() {
    return reinterpret_cast<const ClubPrivilegeSet*>(
               &_ClubPrivilegeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClubPrivilegeSet& a, ClubPrivilegeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubPrivilegeSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubPrivilegeSet* New() const final {
    return CreateMaybeMessage<ClubPrivilegeSet>(nullptr);
  }

  ClubPrivilegeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubPrivilegeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubPrivilegeSet& from);
  void MergeFrom(const ClubPrivilegeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubPrivilegeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubPrivilegeSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanDestroyFieldNumber = 1,
    kCanSetAttributeFieldNumber = 10,
    kCanSetNameFieldNumber = 11,
    kCanSetDescriptionFieldNumber = 12,
    kCanSetAvatarFieldNumber = 13,
    kCanSetBroadcastFieldNumber = 14,
    kCanSetPrivacyLevelFieldNumber = 15,
    kCanKickMemberFieldNumber = 30,
    kCanSetOwnMemberAttributeFieldNumber = 31,
    kCanSetOtherMemberAttributeFieldNumber = 32,
    kCanSetOwnVoiceStateFieldNumber = 33,
    kCanSetOwnPresenceLevelFieldNumber = 34,
    kCanSetOwnWhisperLevelFieldNumber = 35,
    kCanSetOwnMemberNoteFieldNumber = 36,
    kCanSetOtherMemberNoteFieldNumber = 37,
    kCanUseVoiceFieldNumber = 50,
    kCanVoiceMuteMemberForAllFieldNumber = 51,
    kCanGetInvitationFieldNumber = 70,
    kCanSendInvitationFieldNumber = 71,
    kCanSendGuestInvitationFieldNumber = 72,
    kCanRevokeOwnInvitationFieldNumber = 73,
    kCanRevokeOtherInvitationFieldNumber = 74,
    kCanGetSuggestionFieldNumber = 90,
    kCanSuggestMemberFieldNumber = 91,
    kCanApproveMemberFieldNumber = 92,
    kCanGetTicketFieldNumber = 110,
    kCanCreateTicketFieldNumber = 111,
    kCanDestroyTicketFieldNumber = 112,
    kCanGetBanFieldNumber = 130,
    kCanAddBanFieldNumber = 131,
    kCanRemoveBanFieldNumber = 132,
    kCanCreateStreamFieldNumber = 140,
    kCanDestroyStreamFieldNumber = 141,
    kCanSetStreamPositionFieldNumber = 142,
    kCanSetStreamAttributeFieldNumber = 143,
    kCanSetStreamNameFieldNumber = 144,
    kCanSetStreamSubjectFieldNumber = 145,
    kCanSetStreamAccessFieldNumber = 146,
    kCanSetStreamVoiceLevelFieldNumber = 147,
    kCanCreateMessageFieldNumber = 180,
    kCanDestroyOwnMessageFieldNumber = 181,
    kCanDestroyOtherMessageFieldNumber = 182,
    kCanEditOwnMessageFieldNumber = 183,
    kCanPinMessageFieldNumber = 184,
    kCanMentionAllFieldNumber = 185,
    kCanMentionHereFieldNumber = 186,
    kCanMentionMemberFieldNumber = 187,
    kCanMentionRoleFieldNumber = 188,
  };
  // optional bool can_destroy = 1;
  bool has_can_destroy() const;
  private:
  bool _internal_has_can_destroy() const;
  public:
  void clear_can_destroy();
  bool can_destroy() const;
  void set_can_destroy(bool value);
  private:
  bool _internal_can_destroy() const;
  void _internal_set_can_destroy(bool value);
  public:

  // optional bool can_set_attribute = 10;
  bool has_can_set_attribute() const;
  private:
  bool _internal_has_can_set_attribute() const;
  public:
  void clear_can_set_attribute();
  bool can_set_attribute() const;
  void set_can_set_attribute(bool value);
  private:
  bool _internal_can_set_attribute() const;
  void _internal_set_can_set_attribute(bool value);
  public:

  // optional bool can_set_name = 11;
  bool has_can_set_name() const;
  private:
  bool _internal_has_can_set_name() const;
  public:
  void clear_can_set_name();
  bool can_set_name() const;
  void set_can_set_name(bool value);
  private:
  bool _internal_can_set_name() const;
  void _internal_set_can_set_name(bool value);
  public:

  // optional bool can_set_description = 12;
  bool has_can_set_description() const;
  private:
  bool _internal_has_can_set_description() const;
  public:
  void clear_can_set_description();
  bool can_set_description() const;
  void set_can_set_description(bool value);
  private:
  bool _internal_can_set_description() const;
  void _internal_set_can_set_description(bool value);
  public:

  // optional bool can_set_avatar = 13;
  bool has_can_set_avatar() const;
  private:
  bool _internal_has_can_set_avatar() const;
  public:
  void clear_can_set_avatar();
  bool can_set_avatar() const;
  void set_can_set_avatar(bool value);
  private:
  bool _internal_can_set_avatar() const;
  void _internal_set_can_set_avatar(bool value);
  public:

  // optional bool can_set_broadcast = 14;
  bool has_can_set_broadcast() const;
  private:
  bool _internal_has_can_set_broadcast() const;
  public:
  void clear_can_set_broadcast();
  bool can_set_broadcast() const;
  void set_can_set_broadcast(bool value);
  private:
  bool _internal_can_set_broadcast() const;
  void _internal_set_can_set_broadcast(bool value);
  public:

  // optional bool can_set_privacy_level = 15;
  bool has_can_set_privacy_level() const;
  private:
  bool _internal_has_can_set_privacy_level() const;
  public:
  void clear_can_set_privacy_level();
  bool can_set_privacy_level() const;
  void set_can_set_privacy_level(bool value);
  private:
  bool _internal_can_set_privacy_level() const;
  void _internal_set_can_set_privacy_level(bool value);
  public:

  // optional bool can_kick_member = 30;
  bool has_can_kick_member() const;
  private:
  bool _internal_has_can_kick_member() const;
  public:
  void clear_can_kick_member();
  bool can_kick_member() const;
  void set_can_kick_member(bool value);
  private:
  bool _internal_can_kick_member() const;
  void _internal_set_can_kick_member(bool value);
  public:

  // optional bool can_set_own_member_attribute = 31;
  bool has_can_set_own_member_attribute() const;
  private:
  bool _internal_has_can_set_own_member_attribute() const;
  public:
  void clear_can_set_own_member_attribute();
  bool can_set_own_member_attribute() const;
  void set_can_set_own_member_attribute(bool value);
  private:
  bool _internal_can_set_own_member_attribute() const;
  void _internal_set_can_set_own_member_attribute(bool value);
  public:

  // optional bool can_set_other_member_attribute = 32;
  bool has_can_set_other_member_attribute() const;
  private:
  bool _internal_has_can_set_other_member_attribute() const;
  public:
  void clear_can_set_other_member_attribute();
  bool can_set_other_member_attribute() const;
  void set_can_set_other_member_attribute(bool value);
  private:
  bool _internal_can_set_other_member_attribute() const;
  void _internal_set_can_set_other_member_attribute(bool value);
  public:

  // optional bool can_set_own_voice_state = 33;
  bool has_can_set_own_voice_state() const;
  private:
  bool _internal_has_can_set_own_voice_state() const;
  public:
  void clear_can_set_own_voice_state();
  bool can_set_own_voice_state() const;
  void set_can_set_own_voice_state(bool value);
  private:
  bool _internal_can_set_own_voice_state() const;
  void _internal_set_can_set_own_voice_state(bool value);
  public:

  // optional bool can_set_own_presence_level = 34;
  bool has_can_set_own_presence_level() const;
  private:
  bool _internal_has_can_set_own_presence_level() const;
  public:
  void clear_can_set_own_presence_level();
  bool can_set_own_presence_level() const;
  void set_can_set_own_presence_level(bool value);
  private:
  bool _internal_can_set_own_presence_level() const;
  void _internal_set_can_set_own_presence_level(bool value);
  public:

  // optional bool can_set_own_whisper_level = 35;
  bool has_can_set_own_whisper_level() const;
  private:
  bool _internal_has_can_set_own_whisper_level() const;
  public:
  void clear_can_set_own_whisper_level();
  bool can_set_own_whisper_level() const;
  void set_can_set_own_whisper_level(bool value);
  private:
  bool _internal_can_set_own_whisper_level() const;
  void _internal_set_can_set_own_whisper_level(bool value);
  public:

  // optional bool can_set_own_member_note = 36;
  bool has_can_set_own_member_note() const;
  private:
  bool _internal_has_can_set_own_member_note() const;
  public:
  void clear_can_set_own_member_note();
  bool can_set_own_member_note() const;
  void set_can_set_own_member_note(bool value);
  private:
  bool _internal_can_set_own_member_note() const;
  void _internal_set_can_set_own_member_note(bool value);
  public:

  // optional bool can_set_other_member_note = 37;
  bool has_can_set_other_member_note() const;
  private:
  bool _internal_has_can_set_other_member_note() const;
  public:
  void clear_can_set_other_member_note();
  bool can_set_other_member_note() const;
  void set_can_set_other_member_note(bool value);
  private:
  bool _internal_can_set_other_member_note() const;
  void _internal_set_can_set_other_member_note(bool value);
  public:

  // optional bool can_use_voice = 50;
  bool has_can_use_voice() const;
  private:
  bool _internal_has_can_use_voice() const;
  public:
  void clear_can_use_voice();
  bool can_use_voice() const;
  void set_can_use_voice(bool value);
  private:
  bool _internal_can_use_voice() const;
  void _internal_set_can_use_voice(bool value);
  public:

  // optional bool can_voice_mute_member_for_all = 51;
  bool has_can_voice_mute_member_for_all() const;
  private:
  bool _internal_has_can_voice_mute_member_for_all() const;
  public:
  void clear_can_voice_mute_member_for_all();
  bool can_voice_mute_member_for_all() const;
  void set_can_voice_mute_member_for_all(bool value);
  private:
  bool _internal_can_voice_mute_member_for_all() const;
  void _internal_set_can_voice_mute_member_for_all(bool value);
  public:

  // optional bool can_get_invitation = 70;
  bool has_can_get_invitation() const;
  private:
  bool _internal_has_can_get_invitation() const;
  public:
  void clear_can_get_invitation();
  bool can_get_invitation() const;
  void set_can_get_invitation(bool value);
  private:
  bool _internal_can_get_invitation() const;
  void _internal_set_can_get_invitation(bool value);
  public:

  // optional bool can_send_invitation = 71;
  bool has_can_send_invitation() const;
  private:
  bool _internal_has_can_send_invitation() const;
  public:
  void clear_can_send_invitation();
  bool can_send_invitation() const;
  void set_can_send_invitation(bool value);
  private:
  bool _internal_can_send_invitation() const;
  void _internal_set_can_send_invitation(bool value);
  public:

  // optional bool can_send_guest_invitation = 72;
  bool has_can_send_guest_invitation() const;
  private:
  bool _internal_has_can_send_guest_invitation() const;
  public:
  void clear_can_send_guest_invitation();
  bool can_send_guest_invitation() const;
  void set_can_send_guest_invitation(bool value);
  private:
  bool _internal_can_send_guest_invitation() const;
  void _internal_set_can_send_guest_invitation(bool value);
  public:

  // optional bool can_revoke_own_invitation = 73;
  bool has_can_revoke_own_invitation() const;
  private:
  bool _internal_has_can_revoke_own_invitation() const;
  public:
  void clear_can_revoke_own_invitation();
  bool can_revoke_own_invitation() const;
  void set_can_revoke_own_invitation(bool value);
  private:
  bool _internal_can_revoke_own_invitation() const;
  void _internal_set_can_revoke_own_invitation(bool value);
  public:

  // optional bool can_revoke_other_invitation = 74;
  bool has_can_revoke_other_invitation() const;
  private:
  bool _internal_has_can_revoke_other_invitation() const;
  public:
  void clear_can_revoke_other_invitation();
  bool can_revoke_other_invitation() const;
  void set_can_revoke_other_invitation(bool value);
  private:
  bool _internal_can_revoke_other_invitation() const;
  void _internal_set_can_revoke_other_invitation(bool value);
  public:

  // optional bool can_get_suggestion = 90;
  bool has_can_get_suggestion() const;
  private:
  bool _internal_has_can_get_suggestion() const;
  public:
  void clear_can_get_suggestion();
  bool can_get_suggestion() const;
  void set_can_get_suggestion(bool value);
  private:
  bool _internal_can_get_suggestion() const;
  void _internal_set_can_get_suggestion(bool value);
  public:

  // optional bool can_suggest_member = 91;
  bool has_can_suggest_member() const;
  private:
  bool _internal_has_can_suggest_member() const;
  public:
  void clear_can_suggest_member();
  bool can_suggest_member() const;
  void set_can_suggest_member(bool value);
  private:
  bool _internal_can_suggest_member() const;
  void _internal_set_can_suggest_member(bool value);
  public:

  // optional bool can_approve_member = 92;
  bool has_can_approve_member() const;
  private:
  bool _internal_has_can_approve_member() const;
  public:
  void clear_can_approve_member();
  bool can_approve_member() const;
  void set_can_approve_member(bool value);
  private:
  bool _internal_can_approve_member() const;
  void _internal_set_can_approve_member(bool value);
  public:

  // optional bool can_get_ticket = 110;
  bool has_can_get_ticket() const;
  private:
  bool _internal_has_can_get_ticket() const;
  public:
  void clear_can_get_ticket();
  bool can_get_ticket() const;
  void set_can_get_ticket(bool value);
  private:
  bool _internal_can_get_ticket() const;
  void _internal_set_can_get_ticket(bool value);
  public:

  // optional bool can_create_ticket = 111;
  bool has_can_create_ticket() const;
  private:
  bool _internal_has_can_create_ticket() const;
  public:
  void clear_can_create_ticket();
  bool can_create_ticket() const;
  void set_can_create_ticket(bool value);
  private:
  bool _internal_can_create_ticket() const;
  void _internal_set_can_create_ticket(bool value);
  public:

  // optional bool can_destroy_ticket = 112;
  bool has_can_destroy_ticket() const;
  private:
  bool _internal_has_can_destroy_ticket() const;
  public:
  void clear_can_destroy_ticket();
  bool can_destroy_ticket() const;
  void set_can_destroy_ticket(bool value);
  private:
  bool _internal_can_destroy_ticket() const;
  void _internal_set_can_destroy_ticket(bool value);
  public:

  // optional bool can_get_ban = 130;
  bool has_can_get_ban() const;
  private:
  bool _internal_has_can_get_ban() const;
  public:
  void clear_can_get_ban();
  bool can_get_ban() const;
  void set_can_get_ban(bool value);
  private:
  bool _internal_can_get_ban() const;
  void _internal_set_can_get_ban(bool value);
  public:

  // optional bool can_add_ban = 131;
  bool has_can_add_ban() const;
  private:
  bool _internal_has_can_add_ban() const;
  public:
  void clear_can_add_ban();
  bool can_add_ban() const;
  void set_can_add_ban(bool value);
  private:
  bool _internal_can_add_ban() const;
  void _internal_set_can_add_ban(bool value);
  public:

  // optional bool can_remove_ban = 132;
  bool has_can_remove_ban() const;
  private:
  bool _internal_has_can_remove_ban() const;
  public:
  void clear_can_remove_ban();
  bool can_remove_ban() const;
  void set_can_remove_ban(bool value);
  private:
  bool _internal_can_remove_ban() const;
  void _internal_set_can_remove_ban(bool value);
  public:

  // optional bool can_create_stream = 140;
  bool has_can_create_stream() const;
  private:
  bool _internal_has_can_create_stream() const;
  public:
  void clear_can_create_stream();
  bool can_create_stream() const;
  void set_can_create_stream(bool value);
  private:
  bool _internal_can_create_stream() const;
  void _internal_set_can_create_stream(bool value);
  public:

  // optional bool can_destroy_stream = 141;
  bool has_can_destroy_stream() const;
  private:
  bool _internal_has_can_destroy_stream() const;
  public:
  void clear_can_destroy_stream();
  bool can_destroy_stream() const;
  void set_can_destroy_stream(bool value);
  private:
  bool _internal_can_destroy_stream() const;
  void _internal_set_can_destroy_stream(bool value);
  public:

  // optional bool can_set_stream_position = 142;
  bool has_can_set_stream_position() const;
  private:
  bool _internal_has_can_set_stream_position() const;
  public:
  void clear_can_set_stream_position();
  bool can_set_stream_position() const;
  void set_can_set_stream_position(bool value);
  private:
  bool _internal_can_set_stream_position() const;
  void _internal_set_can_set_stream_position(bool value);
  public:

  // optional bool can_set_stream_attribute = 143;
  bool has_can_set_stream_attribute() const;
  private:
  bool _internal_has_can_set_stream_attribute() const;
  public:
  void clear_can_set_stream_attribute();
  bool can_set_stream_attribute() const;
  void set_can_set_stream_attribute(bool value);
  private:
  bool _internal_can_set_stream_attribute() const;
  void _internal_set_can_set_stream_attribute(bool value);
  public:

  // optional bool can_set_stream_name = 144;
  bool has_can_set_stream_name() const;
  private:
  bool _internal_has_can_set_stream_name() const;
  public:
  void clear_can_set_stream_name();
  bool can_set_stream_name() const;
  void set_can_set_stream_name(bool value);
  private:
  bool _internal_can_set_stream_name() const;
  void _internal_set_can_set_stream_name(bool value);
  public:

  // optional bool can_set_stream_subject = 145;
  bool has_can_set_stream_subject() const;
  private:
  bool _internal_has_can_set_stream_subject() const;
  public:
  void clear_can_set_stream_subject();
  bool can_set_stream_subject() const;
  void set_can_set_stream_subject(bool value);
  private:
  bool _internal_can_set_stream_subject() const;
  void _internal_set_can_set_stream_subject(bool value);
  public:

  // optional bool can_set_stream_access = 146;
  bool has_can_set_stream_access() const;
  private:
  bool _internal_has_can_set_stream_access() const;
  public:
  void clear_can_set_stream_access();
  bool can_set_stream_access() const;
  void set_can_set_stream_access(bool value);
  private:
  bool _internal_can_set_stream_access() const;
  void _internal_set_can_set_stream_access(bool value);
  public:

  // optional bool can_set_stream_voice_level = 147;
  bool has_can_set_stream_voice_level() const;
  private:
  bool _internal_has_can_set_stream_voice_level() const;
  public:
  void clear_can_set_stream_voice_level();
  bool can_set_stream_voice_level() const;
  void set_can_set_stream_voice_level(bool value);
  private:
  bool _internal_can_set_stream_voice_level() const;
  void _internal_set_can_set_stream_voice_level(bool value);
  public:

  // optional bool can_create_message = 180;
  bool has_can_create_message() const;
  private:
  bool _internal_has_can_create_message() const;
  public:
  void clear_can_create_message();
  bool can_create_message() const;
  void set_can_create_message(bool value);
  private:
  bool _internal_can_create_message() const;
  void _internal_set_can_create_message(bool value);
  public:

  // optional bool can_destroy_own_message = 181;
  bool has_can_destroy_own_message() const;
  private:
  bool _internal_has_can_destroy_own_message() const;
  public:
  void clear_can_destroy_own_message();
  bool can_destroy_own_message() const;
  void set_can_destroy_own_message(bool value);
  private:
  bool _internal_can_destroy_own_message() const;
  void _internal_set_can_destroy_own_message(bool value);
  public:

  // optional bool can_destroy_other_message = 182;
  bool has_can_destroy_other_message() const;
  private:
  bool _internal_has_can_destroy_other_message() const;
  public:
  void clear_can_destroy_other_message();
  bool can_destroy_other_message() const;
  void set_can_destroy_other_message(bool value);
  private:
  bool _internal_can_destroy_other_message() const;
  void _internal_set_can_destroy_other_message(bool value);
  public:

  // optional bool can_edit_own_message = 183;
  bool has_can_edit_own_message() const;
  private:
  bool _internal_has_can_edit_own_message() const;
  public:
  void clear_can_edit_own_message();
  bool can_edit_own_message() const;
  void set_can_edit_own_message(bool value);
  private:
  bool _internal_can_edit_own_message() const;
  void _internal_set_can_edit_own_message(bool value);
  public:

  // optional bool can_pin_message = 184;
  bool has_can_pin_message() const;
  private:
  bool _internal_has_can_pin_message() const;
  public:
  void clear_can_pin_message();
  bool can_pin_message() const;
  void set_can_pin_message(bool value);
  private:
  bool _internal_can_pin_message() const;
  void _internal_set_can_pin_message(bool value);
  public:

  // optional bool can_mention_all = 185;
  bool has_can_mention_all() const;
  private:
  bool _internal_has_can_mention_all() const;
  public:
  void clear_can_mention_all();
  bool can_mention_all() const;
  void set_can_mention_all(bool value);
  private:
  bool _internal_can_mention_all() const;
  void _internal_set_can_mention_all(bool value);
  public:

  // optional bool can_mention_here = 186;
  bool has_can_mention_here() const;
  private:
  bool _internal_has_can_mention_here() const;
  public:
  void clear_can_mention_here();
  bool can_mention_here() const;
  void set_can_mention_here(bool value);
  private:
  bool _internal_can_mention_here() const;
  void _internal_set_can_mention_here(bool value);
  public:

  // optional bool can_mention_member = 187;
  bool has_can_mention_member() const;
  private:
  bool _internal_has_can_mention_member() const;
  public:
  void clear_can_mention_member();
  bool can_mention_member() const;
  void set_can_mention_member(bool value);
  private:
  bool _internal_can_mention_member() const;
  void _internal_set_can_mention_member(bool value);
  public:

  // optional bool can_mention_role = 188;
  bool has_can_mention_role() const;
  private:
  bool _internal_has_can_mention_role() const;
  public:
  void clear_can_mention_role();
  bool can_mention_role() const;
  void set_can_mention_role(bool value);
  private:
  bool _internal_can_mention_role() const;
  void _internal_set_can_mention_role(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubPrivilegeSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool can_destroy_;
  bool can_set_attribute_;
  bool can_set_name_;
  bool can_set_description_;
  bool can_set_avatar_;
  bool can_set_broadcast_;
  bool can_set_privacy_level_;
  bool can_kick_member_;
  bool can_set_own_member_attribute_;
  bool can_set_other_member_attribute_;
  bool can_set_own_voice_state_;
  bool can_set_own_presence_level_;
  bool can_set_own_whisper_level_;
  bool can_set_own_member_note_;
  bool can_set_other_member_note_;
  bool can_use_voice_;
  bool can_voice_mute_member_for_all_;
  bool can_get_invitation_;
  bool can_send_invitation_;
  bool can_send_guest_invitation_;
  bool can_revoke_own_invitation_;
  bool can_revoke_other_invitation_;
  bool can_get_suggestion_;
  bool can_suggest_member_;
  bool can_approve_member_;
  bool can_get_ticket_;
  bool can_create_ticket_;
  bool can_destroy_ticket_;
  bool can_get_ban_;
  bool can_add_ban_;
  bool can_remove_ban_;
  bool can_create_stream_;
  bool can_destroy_stream_;
  bool can_set_stream_position_;
  bool can_set_stream_attribute_;
  bool can_set_stream_name_;
  bool can_set_stream_subject_;
  bool can_set_stream_access_;
  bool can_set_stream_voice_level_;
  bool can_create_message_;
  bool can_destroy_own_message_;
  bool can_destroy_other_message_;
  bool can_edit_own_message_;
  bool can_pin_message_;
  bool can_mention_all_;
  bool can_mention_here_;
  bool can_mention_member_;
  bool can_mention_role_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto;
};
// -------------------------------------------------------------------

class ClubRole :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubRole) */ {
 public:
  ClubRole();
  virtual ~ClubRole();

  ClubRole(const ClubRole& from);
  ClubRole(ClubRole&& from) noexcept
    : ClubRole() {
    *this = ::std::move(from);
  }

  inline ClubRole& operator=(const ClubRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubRole& operator=(ClubRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubRole* internal_default_instance() {
    return reinterpret_cast<const ClubRole*>(
               &_ClubRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClubRole& a, ClubRole& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubRole* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubRole* New() const final {
    return CreateMaybeMessage<ClubRole>(nullptr);
  }

  ClubRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubRole& from);
  void MergeFrom(const ClubRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubRole";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kPrivilegeFieldNumber = 3,
    kIdFieldNumber = 1,
    kAlwaysGrantStreamAccessFieldNumber = 4,
    kAllowInClubSlotFieldNumber = 5,
  };
  // optional .bgs.protocol.RoleState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::bgs::protocol::RoleState& state() const;
  ::bgs::protocol::RoleState* release_state();
  ::bgs::protocol::RoleState* mutable_state();
  void set_allocated_state(::bgs::protocol::RoleState* state);
  private:
  const ::bgs::protocol::RoleState& _internal_state() const;
  ::bgs::protocol::RoleState* _internal_mutable_state();
  public:

  // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
  bool has_privilege() const;
  private:
  bool _internal_has_privilege() const;
  public:
  void clear_privilege();
  const ::bgs::protocol::club::v1::ClubPrivilegeSet& privilege() const;
  ::bgs::protocol::club::v1::ClubPrivilegeSet* release_privilege();
  ::bgs::protocol::club::v1::ClubPrivilegeSet* mutable_privilege();
  void set_allocated_privilege(::bgs::protocol::club::v1::ClubPrivilegeSet* privilege);
  private:
  const ::bgs::protocol::club::v1::ClubPrivilegeSet& _internal_privilege() const;
  ::bgs::protocol::club::v1::ClubPrivilegeSet* _internal_mutable_privilege();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool always_grant_stream_access = 4;
  bool has_always_grant_stream_access() const;
  private:
  bool _internal_has_always_grant_stream_access() const;
  public:
  void clear_always_grant_stream_access();
  bool always_grant_stream_access() const;
  void set_always_grant_stream_access(bool value);
  private:
  bool _internal_always_grant_stream_access() const;
  void _internal_set_always_grant_stream_access(bool value);
  public:

  // optional bool allow_in_club_slot = 5;
  bool has_allow_in_club_slot() const;
  private:
  bool _internal_has_allow_in_club_slot() const;
  public:
  void clear_allow_in_club_slot();
  bool allow_in_club_slot() const;
  void set_allow_in_club_slot(bool value);
  private:
  bool _internal_allow_in_club_slot() const;
  void _internal_set_allow_in_club_slot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubRole)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::RoleState* state_;
  ::bgs::protocol::club::v1::ClubPrivilegeSet* privilege_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool always_grant_stream_access_;
  bool allow_in_club_slot_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto;
};
// -------------------------------------------------------------------

class ClubRoleSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubRoleSet) */ {
 public:
  ClubRoleSet();
  virtual ~ClubRoleSet();

  ClubRoleSet(const ClubRoleSet& from);
  ClubRoleSet(ClubRoleSet&& from) noexcept
    : ClubRoleSet() {
    *this = ::std::move(from);
  }

  inline ClubRoleSet& operator=(const ClubRoleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubRoleSet& operator=(ClubRoleSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubRoleSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubRoleSet* internal_default_instance() {
    return reinterpret_cast<const ClubRoleSet*>(
               &_ClubRoleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClubRoleSet& a, ClubRoleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubRoleSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubRoleSet* New() const final {
    return CreateMaybeMessage<ClubRoleSet>(nullptr);
  }

  ClubRoleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubRoleSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubRoleSet& from);
  void MergeFrom(const ClubRoleSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubRoleSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubRoleSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kDefaultRoleFieldNumber = 5,
    kSubtypeFieldNumber = 7,
    kAssignmentRespectsRelegationChainFieldNumber = 6,
  };
  // repeated .bgs.protocol.club.v1.ClubRole role = 1;
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  ::bgs::protocol::club::v1::ClubRole* mutable_role(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole >*
      mutable_role();
  private:
  const ::bgs::protocol::club::v1::ClubRole& _internal_role(int index) const;
  ::bgs::protocol::club::v1::ClubRole* _internal_add_role();
  public:
  const ::bgs::protocol::club::v1::ClubRole& role(int index) const;
  ::bgs::protocol::club::v1::ClubRole* add_role();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole >&
      role() const;

  // repeated uint32 default_role = 5 [packed = true];
  int default_role_size() const;
  private:
  int _internal_default_role_size() const;
  public:
  void clear_default_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_default_role() const;
  void _internal_add_default_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_default_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 default_role(int index) const;
  void set_default_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_default_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      default_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_default_role();

  // optional string subtype = 7;
  bool has_subtype() const;
  private:
  bool _internal_has_subtype() const;
  public:
  void clear_subtype();
  const std::string& subtype() const;
  void set_subtype(const std::string& value);
  void set_subtype(std::string&& value);
  void set_subtype(const char* value);
  void set_subtype(const char* value, size_t size);
  std::string* mutable_subtype();
  std::string* release_subtype();
  void set_allocated_subtype(std::string* subtype);
  private:
  const std::string& _internal_subtype() const;
  void _internal_set_subtype(const std::string& value);
  std::string* _internal_mutable_subtype();
  public:

  // optional bool assignment_respects_relegation_chain = 6;
  bool has_assignment_respects_relegation_chain() const;
  private:
  bool _internal_has_assignment_respects_relegation_chain() const;
  public:
  void clear_assignment_respects_relegation_chain();
  bool assignment_respects_relegation_chain() const;
  void set_assignment_respects_relegation_chain(bool value);
  private:
  bool _internal_assignment_respects_relegation_chain() const;
  void _internal_set_assignment_respects_relegation_chain(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubRoleSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole > role_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > default_role_;
  mutable std::atomic<int> _default_role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtype_;
  bool assignment_respects_relegation_chain_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClubPrivilegeSet

// optional bool can_destroy = 1;
inline bool ClubPrivilegeSet::_internal_has_can_destroy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_destroy() const {
  return _internal_has_can_destroy();
}
inline void ClubPrivilegeSet::clear_can_destroy() {
  can_destroy_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ClubPrivilegeSet::_internal_can_destroy() const {
  return can_destroy_;
}
inline bool ClubPrivilegeSet::can_destroy() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy)
  return _internal_can_destroy();
}
inline void ClubPrivilegeSet::_internal_set_can_destroy(bool value) {
  _has_bits_[0] |= 0x00000001u;
  can_destroy_ = value;
}
inline void ClubPrivilegeSet::set_can_destroy(bool value) {
  _internal_set_can_destroy(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy)
}

// optional bool can_set_attribute = 10;
inline bool ClubPrivilegeSet::_internal_has_can_set_attribute() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_attribute() const {
  return _internal_has_can_set_attribute();
}
inline void ClubPrivilegeSet::clear_can_set_attribute() {
  can_set_attribute_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ClubPrivilegeSet::_internal_can_set_attribute() const {
  return can_set_attribute_;
}
inline bool ClubPrivilegeSet::can_set_attribute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_attribute)
  return _internal_can_set_attribute();
}
inline void ClubPrivilegeSet::_internal_set_can_set_attribute(bool value) {
  _has_bits_[0] |= 0x00000002u;
  can_set_attribute_ = value;
}
inline void ClubPrivilegeSet::set_can_set_attribute(bool value) {
  _internal_set_can_set_attribute(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_attribute)
}

// optional bool can_set_name = 11;
inline bool ClubPrivilegeSet::_internal_has_can_set_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_name() const {
  return _internal_has_can_set_name();
}
inline void ClubPrivilegeSet::clear_can_set_name() {
  can_set_name_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ClubPrivilegeSet::_internal_can_set_name() const {
  return can_set_name_;
}
inline bool ClubPrivilegeSet::can_set_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_name)
  return _internal_can_set_name();
}
inline void ClubPrivilegeSet::_internal_set_can_set_name(bool value) {
  _has_bits_[0] |= 0x00000004u;
  can_set_name_ = value;
}
inline void ClubPrivilegeSet::set_can_set_name(bool value) {
  _internal_set_can_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_name)
}

// optional bool can_set_description = 12;
inline bool ClubPrivilegeSet::_internal_has_can_set_description() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_description() const {
  return _internal_has_can_set_description();
}
inline void ClubPrivilegeSet::clear_can_set_description() {
  can_set_description_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ClubPrivilegeSet::_internal_can_set_description() const {
  return can_set_description_;
}
inline bool ClubPrivilegeSet::can_set_description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_description)
  return _internal_can_set_description();
}
inline void ClubPrivilegeSet::_internal_set_can_set_description(bool value) {
  _has_bits_[0] |= 0x00000008u;
  can_set_description_ = value;
}
inline void ClubPrivilegeSet::set_can_set_description(bool value) {
  _internal_set_can_set_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_description)
}

// optional bool can_set_avatar = 13;
inline bool ClubPrivilegeSet::_internal_has_can_set_avatar() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_avatar() const {
  return _internal_has_can_set_avatar();
}
inline void ClubPrivilegeSet::clear_can_set_avatar() {
  can_set_avatar_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ClubPrivilegeSet::_internal_can_set_avatar() const {
  return can_set_avatar_;
}
inline bool ClubPrivilegeSet::can_set_avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_avatar)
  return _internal_can_set_avatar();
}
inline void ClubPrivilegeSet::_internal_set_can_set_avatar(bool value) {
  _has_bits_[0] |= 0x00000010u;
  can_set_avatar_ = value;
}
inline void ClubPrivilegeSet::set_can_set_avatar(bool value) {
  _internal_set_can_set_avatar(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_avatar)
}

// optional bool can_set_broadcast = 14;
inline bool ClubPrivilegeSet::_internal_has_can_set_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_broadcast() const {
  return _internal_has_can_set_broadcast();
}
inline void ClubPrivilegeSet::clear_can_set_broadcast() {
  can_set_broadcast_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ClubPrivilegeSet::_internal_can_set_broadcast() const {
  return can_set_broadcast_;
}
inline bool ClubPrivilegeSet::can_set_broadcast() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_broadcast)
  return _internal_can_set_broadcast();
}
inline void ClubPrivilegeSet::_internal_set_can_set_broadcast(bool value) {
  _has_bits_[0] |= 0x00000020u;
  can_set_broadcast_ = value;
}
inline void ClubPrivilegeSet::set_can_set_broadcast(bool value) {
  _internal_set_can_set_broadcast(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_broadcast)
}

// optional bool can_set_privacy_level = 15;
inline bool ClubPrivilegeSet::_internal_has_can_set_privacy_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_privacy_level() const {
  return _internal_has_can_set_privacy_level();
}
inline void ClubPrivilegeSet::clear_can_set_privacy_level() {
  can_set_privacy_level_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ClubPrivilegeSet::_internal_can_set_privacy_level() const {
  return can_set_privacy_level_;
}
inline bool ClubPrivilegeSet::can_set_privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_privacy_level)
  return _internal_can_set_privacy_level();
}
inline void ClubPrivilegeSet::_internal_set_can_set_privacy_level(bool value) {
  _has_bits_[0] |= 0x00000040u;
  can_set_privacy_level_ = value;
}
inline void ClubPrivilegeSet::set_can_set_privacy_level(bool value) {
  _internal_set_can_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_privacy_level)
}

// optional bool can_kick_member = 30;
inline bool ClubPrivilegeSet::_internal_has_can_kick_member() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_kick_member() const {
  return _internal_has_can_kick_member();
}
inline void ClubPrivilegeSet::clear_can_kick_member() {
  can_kick_member_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ClubPrivilegeSet::_internal_can_kick_member() const {
  return can_kick_member_;
}
inline bool ClubPrivilegeSet::can_kick_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_kick_member)
  return _internal_can_kick_member();
}
inline void ClubPrivilegeSet::_internal_set_can_kick_member(bool value) {
  _has_bits_[0] |= 0x00000080u;
  can_kick_member_ = value;
}
inline void ClubPrivilegeSet::set_can_kick_member(bool value) {
  _internal_set_can_kick_member(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_kick_member)
}

// optional bool can_set_own_member_attribute = 31;
inline bool ClubPrivilegeSet::_internal_has_can_set_own_member_attribute() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_own_member_attribute() const {
  return _internal_has_can_set_own_member_attribute();
}
inline void ClubPrivilegeSet::clear_can_set_own_member_attribute() {
  can_set_own_member_attribute_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ClubPrivilegeSet::_internal_can_set_own_member_attribute() const {
  return can_set_own_member_attribute_;
}
inline bool ClubPrivilegeSet::can_set_own_member_attribute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_member_attribute)
  return _internal_can_set_own_member_attribute();
}
inline void ClubPrivilegeSet::_internal_set_can_set_own_member_attribute(bool value) {
  _has_bits_[0] |= 0x00000100u;
  can_set_own_member_attribute_ = value;
}
inline void ClubPrivilegeSet::set_can_set_own_member_attribute(bool value) {
  _internal_set_can_set_own_member_attribute(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_member_attribute)
}

// optional bool can_set_other_member_attribute = 32;
inline bool ClubPrivilegeSet::_internal_has_can_set_other_member_attribute() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_other_member_attribute() const {
  return _internal_has_can_set_other_member_attribute();
}
inline void ClubPrivilegeSet::clear_can_set_other_member_attribute() {
  can_set_other_member_attribute_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ClubPrivilegeSet::_internal_can_set_other_member_attribute() const {
  return can_set_other_member_attribute_;
}
inline bool ClubPrivilegeSet::can_set_other_member_attribute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_other_member_attribute)
  return _internal_can_set_other_member_attribute();
}
inline void ClubPrivilegeSet::_internal_set_can_set_other_member_attribute(bool value) {
  _has_bits_[0] |= 0x00000200u;
  can_set_other_member_attribute_ = value;
}
inline void ClubPrivilegeSet::set_can_set_other_member_attribute(bool value) {
  _internal_set_can_set_other_member_attribute(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_other_member_attribute)
}

// optional bool can_set_own_voice_state = 33;
inline bool ClubPrivilegeSet::_internal_has_can_set_own_voice_state() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_own_voice_state() const {
  return _internal_has_can_set_own_voice_state();
}
inline void ClubPrivilegeSet::clear_can_set_own_voice_state() {
  can_set_own_voice_state_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ClubPrivilegeSet::_internal_can_set_own_voice_state() const {
  return can_set_own_voice_state_;
}
inline bool ClubPrivilegeSet::can_set_own_voice_state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_voice_state)
  return _internal_can_set_own_voice_state();
}
inline void ClubPrivilegeSet::_internal_set_can_set_own_voice_state(bool value) {
  _has_bits_[0] |= 0x00000400u;
  can_set_own_voice_state_ = value;
}
inline void ClubPrivilegeSet::set_can_set_own_voice_state(bool value) {
  _internal_set_can_set_own_voice_state(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_voice_state)
}

// optional bool can_set_own_presence_level = 34;
inline bool ClubPrivilegeSet::_internal_has_can_set_own_presence_level() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_own_presence_level() const {
  return _internal_has_can_set_own_presence_level();
}
inline void ClubPrivilegeSet::clear_can_set_own_presence_level() {
  can_set_own_presence_level_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ClubPrivilegeSet::_internal_can_set_own_presence_level() const {
  return can_set_own_presence_level_;
}
inline bool ClubPrivilegeSet::can_set_own_presence_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_presence_level)
  return _internal_can_set_own_presence_level();
}
inline void ClubPrivilegeSet::_internal_set_can_set_own_presence_level(bool value) {
  _has_bits_[0] |= 0x00000800u;
  can_set_own_presence_level_ = value;
}
inline void ClubPrivilegeSet::set_can_set_own_presence_level(bool value) {
  _internal_set_can_set_own_presence_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_presence_level)
}

// optional bool can_set_own_whisper_level = 35;
inline bool ClubPrivilegeSet::_internal_has_can_set_own_whisper_level() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_own_whisper_level() const {
  return _internal_has_can_set_own_whisper_level();
}
inline void ClubPrivilegeSet::clear_can_set_own_whisper_level() {
  can_set_own_whisper_level_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ClubPrivilegeSet::_internal_can_set_own_whisper_level() const {
  return can_set_own_whisper_level_;
}
inline bool ClubPrivilegeSet::can_set_own_whisper_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_whisper_level)
  return _internal_can_set_own_whisper_level();
}
inline void ClubPrivilegeSet::_internal_set_can_set_own_whisper_level(bool value) {
  _has_bits_[0] |= 0x00001000u;
  can_set_own_whisper_level_ = value;
}
inline void ClubPrivilegeSet::set_can_set_own_whisper_level(bool value) {
  _internal_set_can_set_own_whisper_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_whisper_level)
}

// optional bool can_set_own_member_note = 36;
inline bool ClubPrivilegeSet::_internal_has_can_set_own_member_note() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_own_member_note() const {
  return _internal_has_can_set_own_member_note();
}
inline void ClubPrivilegeSet::clear_can_set_own_member_note() {
  can_set_own_member_note_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ClubPrivilegeSet::_internal_can_set_own_member_note() const {
  return can_set_own_member_note_;
}
inline bool ClubPrivilegeSet::can_set_own_member_note() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_member_note)
  return _internal_can_set_own_member_note();
}
inline void ClubPrivilegeSet::_internal_set_can_set_own_member_note(bool value) {
  _has_bits_[0] |= 0x00002000u;
  can_set_own_member_note_ = value;
}
inline void ClubPrivilegeSet::set_can_set_own_member_note(bool value) {
  _internal_set_can_set_own_member_note(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_member_note)
}

// optional bool can_set_other_member_note = 37;
inline bool ClubPrivilegeSet::_internal_has_can_set_other_member_note() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_other_member_note() const {
  return _internal_has_can_set_other_member_note();
}
inline void ClubPrivilegeSet::clear_can_set_other_member_note() {
  can_set_other_member_note_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ClubPrivilegeSet::_internal_can_set_other_member_note() const {
  return can_set_other_member_note_;
}
inline bool ClubPrivilegeSet::can_set_other_member_note() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_other_member_note)
  return _internal_can_set_other_member_note();
}
inline void ClubPrivilegeSet::_internal_set_can_set_other_member_note(bool value) {
  _has_bits_[0] |= 0x00004000u;
  can_set_other_member_note_ = value;
}
inline void ClubPrivilegeSet::set_can_set_other_member_note(bool value) {
  _internal_set_can_set_other_member_note(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_other_member_note)
}

// optional bool can_use_voice = 50;
inline bool ClubPrivilegeSet::_internal_has_can_use_voice() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_use_voice() const {
  return _internal_has_can_use_voice();
}
inline void ClubPrivilegeSet::clear_can_use_voice() {
  can_use_voice_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ClubPrivilegeSet::_internal_can_use_voice() const {
  return can_use_voice_;
}
inline bool ClubPrivilegeSet::can_use_voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_use_voice)
  return _internal_can_use_voice();
}
inline void ClubPrivilegeSet::_internal_set_can_use_voice(bool value) {
  _has_bits_[0] |= 0x00008000u;
  can_use_voice_ = value;
}
inline void ClubPrivilegeSet::set_can_use_voice(bool value) {
  _internal_set_can_use_voice(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_use_voice)
}

// optional bool can_voice_mute_member_for_all = 51;
inline bool ClubPrivilegeSet::_internal_has_can_voice_mute_member_for_all() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_voice_mute_member_for_all() const {
  return _internal_has_can_voice_mute_member_for_all();
}
inline void ClubPrivilegeSet::clear_can_voice_mute_member_for_all() {
  can_voice_mute_member_for_all_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ClubPrivilegeSet::_internal_can_voice_mute_member_for_all() const {
  return can_voice_mute_member_for_all_;
}
inline bool ClubPrivilegeSet::can_voice_mute_member_for_all() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_voice_mute_member_for_all)
  return _internal_can_voice_mute_member_for_all();
}
inline void ClubPrivilegeSet::_internal_set_can_voice_mute_member_for_all(bool value) {
  _has_bits_[0] |= 0x00010000u;
  can_voice_mute_member_for_all_ = value;
}
inline void ClubPrivilegeSet::set_can_voice_mute_member_for_all(bool value) {
  _internal_set_can_voice_mute_member_for_all(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_voice_mute_member_for_all)
}

// optional bool can_get_invitation = 70;
inline bool ClubPrivilegeSet::_internal_has_can_get_invitation() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_get_invitation() const {
  return _internal_has_can_get_invitation();
}
inline void ClubPrivilegeSet::clear_can_get_invitation() {
  can_get_invitation_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ClubPrivilegeSet::_internal_can_get_invitation() const {
  return can_get_invitation_;
}
inline bool ClubPrivilegeSet::can_get_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_invitation)
  return _internal_can_get_invitation();
}
inline void ClubPrivilegeSet::_internal_set_can_get_invitation(bool value) {
  _has_bits_[0] |= 0x00020000u;
  can_get_invitation_ = value;
}
inline void ClubPrivilegeSet::set_can_get_invitation(bool value) {
  _internal_set_can_get_invitation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_invitation)
}

// optional bool can_send_invitation = 71;
inline bool ClubPrivilegeSet::_internal_has_can_send_invitation() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_send_invitation() const {
  return _internal_has_can_send_invitation();
}
inline void ClubPrivilegeSet::clear_can_send_invitation() {
  can_send_invitation_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ClubPrivilegeSet::_internal_can_send_invitation() const {
  return can_send_invitation_;
}
inline bool ClubPrivilegeSet::can_send_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_send_invitation)
  return _internal_can_send_invitation();
}
inline void ClubPrivilegeSet::_internal_set_can_send_invitation(bool value) {
  _has_bits_[0] |= 0x00040000u;
  can_send_invitation_ = value;
}
inline void ClubPrivilegeSet::set_can_send_invitation(bool value) {
  _internal_set_can_send_invitation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_send_invitation)
}

// optional bool can_send_guest_invitation = 72;
inline bool ClubPrivilegeSet::_internal_has_can_send_guest_invitation() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_send_guest_invitation() const {
  return _internal_has_can_send_guest_invitation();
}
inline void ClubPrivilegeSet::clear_can_send_guest_invitation() {
  can_send_guest_invitation_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ClubPrivilegeSet::_internal_can_send_guest_invitation() const {
  return can_send_guest_invitation_;
}
inline bool ClubPrivilegeSet::can_send_guest_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_send_guest_invitation)
  return _internal_can_send_guest_invitation();
}
inline void ClubPrivilegeSet::_internal_set_can_send_guest_invitation(bool value) {
  _has_bits_[0] |= 0x00080000u;
  can_send_guest_invitation_ = value;
}
inline void ClubPrivilegeSet::set_can_send_guest_invitation(bool value) {
  _internal_set_can_send_guest_invitation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_send_guest_invitation)
}

// optional bool can_revoke_own_invitation = 73;
inline bool ClubPrivilegeSet::_internal_has_can_revoke_own_invitation() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_revoke_own_invitation() const {
  return _internal_has_can_revoke_own_invitation();
}
inline void ClubPrivilegeSet::clear_can_revoke_own_invitation() {
  can_revoke_own_invitation_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ClubPrivilegeSet::_internal_can_revoke_own_invitation() const {
  return can_revoke_own_invitation_;
}
inline bool ClubPrivilegeSet::can_revoke_own_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_revoke_own_invitation)
  return _internal_can_revoke_own_invitation();
}
inline void ClubPrivilegeSet::_internal_set_can_revoke_own_invitation(bool value) {
  _has_bits_[0] |= 0x00100000u;
  can_revoke_own_invitation_ = value;
}
inline void ClubPrivilegeSet::set_can_revoke_own_invitation(bool value) {
  _internal_set_can_revoke_own_invitation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_revoke_own_invitation)
}

// optional bool can_revoke_other_invitation = 74;
inline bool ClubPrivilegeSet::_internal_has_can_revoke_other_invitation() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_revoke_other_invitation() const {
  return _internal_has_can_revoke_other_invitation();
}
inline void ClubPrivilegeSet::clear_can_revoke_other_invitation() {
  can_revoke_other_invitation_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ClubPrivilegeSet::_internal_can_revoke_other_invitation() const {
  return can_revoke_other_invitation_;
}
inline bool ClubPrivilegeSet::can_revoke_other_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_revoke_other_invitation)
  return _internal_can_revoke_other_invitation();
}
inline void ClubPrivilegeSet::_internal_set_can_revoke_other_invitation(bool value) {
  _has_bits_[0] |= 0x00200000u;
  can_revoke_other_invitation_ = value;
}
inline void ClubPrivilegeSet::set_can_revoke_other_invitation(bool value) {
  _internal_set_can_revoke_other_invitation(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_revoke_other_invitation)
}

// optional bool can_get_suggestion = 90;
inline bool ClubPrivilegeSet::_internal_has_can_get_suggestion() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_get_suggestion() const {
  return _internal_has_can_get_suggestion();
}
inline void ClubPrivilegeSet::clear_can_get_suggestion() {
  can_get_suggestion_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ClubPrivilegeSet::_internal_can_get_suggestion() const {
  return can_get_suggestion_;
}
inline bool ClubPrivilegeSet::can_get_suggestion() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_suggestion)
  return _internal_can_get_suggestion();
}
inline void ClubPrivilegeSet::_internal_set_can_get_suggestion(bool value) {
  _has_bits_[0] |= 0x00400000u;
  can_get_suggestion_ = value;
}
inline void ClubPrivilegeSet::set_can_get_suggestion(bool value) {
  _internal_set_can_get_suggestion(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_suggestion)
}

// optional bool can_suggest_member = 91;
inline bool ClubPrivilegeSet::_internal_has_can_suggest_member() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_suggest_member() const {
  return _internal_has_can_suggest_member();
}
inline void ClubPrivilegeSet::clear_can_suggest_member() {
  can_suggest_member_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool ClubPrivilegeSet::_internal_can_suggest_member() const {
  return can_suggest_member_;
}
inline bool ClubPrivilegeSet::can_suggest_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_suggest_member)
  return _internal_can_suggest_member();
}
inline void ClubPrivilegeSet::_internal_set_can_suggest_member(bool value) {
  _has_bits_[0] |= 0x00800000u;
  can_suggest_member_ = value;
}
inline void ClubPrivilegeSet::set_can_suggest_member(bool value) {
  _internal_set_can_suggest_member(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_suggest_member)
}

// optional bool can_approve_member = 92;
inline bool ClubPrivilegeSet::_internal_has_can_approve_member() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_approve_member() const {
  return _internal_has_can_approve_member();
}
inline void ClubPrivilegeSet::clear_can_approve_member() {
  can_approve_member_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool ClubPrivilegeSet::_internal_can_approve_member() const {
  return can_approve_member_;
}
inline bool ClubPrivilegeSet::can_approve_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_approve_member)
  return _internal_can_approve_member();
}
inline void ClubPrivilegeSet::_internal_set_can_approve_member(bool value) {
  _has_bits_[0] |= 0x01000000u;
  can_approve_member_ = value;
}
inline void ClubPrivilegeSet::set_can_approve_member(bool value) {
  _internal_set_can_approve_member(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_approve_member)
}

// optional bool can_get_ticket = 110;
inline bool ClubPrivilegeSet::_internal_has_can_get_ticket() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_get_ticket() const {
  return _internal_has_can_get_ticket();
}
inline void ClubPrivilegeSet::clear_can_get_ticket() {
  can_get_ticket_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool ClubPrivilegeSet::_internal_can_get_ticket() const {
  return can_get_ticket_;
}
inline bool ClubPrivilegeSet::can_get_ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_ticket)
  return _internal_can_get_ticket();
}
inline void ClubPrivilegeSet::_internal_set_can_get_ticket(bool value) {
  _has_bits_[0] |= 0x02000000u;
  can_get_ticket_ = value;
}
inline void ClubPrivilegeSet::set_can_get_ticket(bool value) {
  _internal_set_can_get_ticket(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_ticket)
}

// optional bool can_create_ticket = 111;
inline bool ClubPrivilegeSet::_internal_has_can_create_ticket() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_create_ticket() const {
  return _internal_has_can_create_ticket();
}
inline void ClubPrivilegeSet::clear_can_create_ticket() {
  can_create_ticket_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool ClubPrivilegeSet::_internal_can_create_ticket() const {
  return can_create_ticket_;
}
inline bool ClubPrivilegeSet::can_create_ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_ticket)
  return _internal_can_create_ticket();
}
inline void ClubPrivilegeSet::_internal_set_can_create_ticket(bool value) {
  _has_bits_[0] |= 0x04000000u;
  can_create_ticket_ = value;
}
inline void ClubPrivilegeSet::set_can_create_ticket(bool value) {
  _internal_set_can_create_ticket(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_ticket)
}

// optional bool can_destroy_ticket = 112;
inline bool ClubPrivilegeSet::_internal_has_can_destroy_ticket() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_destroy_ticket() const {
  return _internal_has_can_destroy_ticket();
}
inline void ClubPrivilegeSet::clear_can_destroy_ticket() {
  can_destroy_ticket_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ClubPrivilegeSet::_internal_can_destroy_ticket() const {
  return can_destroy_ticket_;
}
inline bool ClubPrivilegeSet::can_destroy_ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_ticket)
  return _internal_can_destroy_ticket();
}
inline void ClubPrivilegeSet::_internal_set_can_destroy_ticket(bool value) {
  _has_bits_[0] |= 0x08000000u;
  can_destroy_ticket_ = value;
}
inline void ClubPrivilegeSet::set_can_destroy_ticket(bool value) {
  _internal_set_can_destroy_ticket(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_ticket)
}

// optional bool can_get_ban = 130;
inline bool ClubPrivilegeSet::_internal_has_can_get_ban() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_get_ban() const {
  return _internal_has_can_get_ban();
}
inline void ClubPrivilegeSet::clear_can_get_ban() {
  can_get_ban_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ClubPrivilegeSet::_internal_can_get_ban() const {
  return can_get_ban_;
}
inline bool ClubPrivilegeSet::can_get_ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_ban)
  return _internal_can_get_ban();
}
inline void ClubPrivilegeSet::_internal_set_can_get_ban(bool value) {
  _has_bits_[0] |= 0x10000000u;
  can_get_ban_ = value;
}
inline void ClubPrivilegeSet::set_can_get_ban(bool value) {
  _internal_set_can_get_ban(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_ban)
}

// optional bool can_add_ban = 131;
inline bool ClubPrivilegeSet::_internal_has_can_add_ban() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_add_ban() const {
  return _internal_has_can_add_ban();
}
inline void ClubPrivilegeSet::clear_can_add_ban() {
  can_add_ban_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ClubPrivilegeSet::_internal_can_add_ban() const {
  return can_add_ban_;
}
inline bool ClubPrivilegeSet::can_add_ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_add_ban)
  return _internal_can_add_ban();
}
inline void ClubPrivilegeSet::_internal_set_can_add_ban(bool value) {
  _has_bits_[0] |= 0x20000000u;
  can_add_ban_ = value;
}
inline void ClubPrivilegeSet::set_can_add_ban(bool value) {
  _internal_set_can_add_ban(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_add_ban)
}

// optional bool can_remove_ban = 132;
inline bool ClubPrivilegeSet::_internal_has_can_remove_ban() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_remove_ban() const {
  return _internal_has_can_remove_ban();
}
inline void ClubPrivilegeSet::clear_can_remove_ban() {
  can_remove_ban_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ClubPrivilegeSet::_internal_can_remove_ban() const {
  return can_remove_ban_;
}
inline bool ClubPrivilegeSet::can_remove_ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_remove_ban)
  return _internal_can_remove_ban();
}
inline void ClubPrivilegeSet::_internal_set_can_remove_ban(bool value) {
  _has_bits_[0] |= 0x40000000u;
  can_remove_ban_ = value;
}
inline void ClubPrivilegeSet::set_can_remove_ban(bool value) {
  _internal_set_can_remove_ban(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_remove_ban)
}

// optional bool can_create_stream = 140;
inline bool ClubPrivilegeSet::_internal_has_can_create_stream() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_create_stream() const {
  return _internal_has_can_create_stream();
}
inline void ClubPrivilegeSet::clear_can_create_stream() {
  can_create_stream_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool ClubPrivilegeSet::_internal_can_create_stream() const {
  return can_create_stream_;
}
inline bool ClubPrivilegeSet::can_create_stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_stream)
  return _internal_can_create_stream();
}
inline void ClubPrivilegeSet::_internal_set_can_create_stream(bool value) {
  _has_bits_[0] |= 0x80000000u;
  can_create_stream_ = value;
}
inline void ClubPrivilegeSet::set_can_create_stream(bool value) {
  _internal_set_can_create_stream(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_stream)
}

// optional bool can_destroy_stream = 141;
inline bool ClubPrivilegeSet::_internal_has_can_destroy_stream() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_destroy_stream() const {
  return _internal_has_can_destroy_stream();
}
inline void ClubPrivilegeSet::clear_can_destroy_stream() {
  can_destroy_stream_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool ClubPrivilegeSet::_internal_can_destroy_stream() const {
  return can_destroy_stream_;
}
inline bool ClubPrivilegeSet::can_destroy_stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_stream)
  return _internal_can_destroy_stream();
}
inline void ClubPrivilegeSet::_internal_set_can_destroy_stream(bool value) {
  _has_bits_[1] |= 0x00000001u;
  can_destroy_stream_ = value;
}
inline void ClubPrivilegeSet::set_can_destroy_stream(bool value) {
  _internal_set_can_destroy_stream(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_stream)
}

// optional bool can_set_stream_position = 142;
inline bool ClubPrivilegeSet::_internal_has_can_set_stream_position() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_stream_position() const {
  return _internal_has_can_set_stream_position();
}
inline void ClubPrivilegeSet::clear_can_set_stream_position() {
  can_set_stream_position_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ClubPrivilegeSet::_internal_can_set_stream_position() const {
  return can_set_stream_position_;
}
inline bool ClubPrivilegeSet::can_set_stream_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_position)
  return _internal_can_set_stream_position();
}
inline void ClubPrivilegeSet::_internal_set_can_set_stream_position(bool value) {
  _has_bits_[1] |= 0x00000002u;
  can_set_stream_position_ = value;
}
inline void ClubPrivilegeSet::set_can_set_stream_position(bool value) {
  _internal_set_can_set_stream_position(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_position)
}

// optional bool can_set_stream_attribute = 143;
inline bool ClubPrivilegeSet::_internal_has_can_set_stream_attribute() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_stream_attribute() const {
  return _internal_has_can_set_stream_attribute();
}
inline void ClubPrivilegeSet::clear_can_set_stream_attribute() {
  can_set_stream_attribute_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ClubPrivilegeSet::_internal_can_set_stream_attribute() const {
  return can_set_stream_attribute_;
}
inline bool ClubPrivilegeSet::can_set_stream_attribute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_attribute)
  return _internal_can_set_stream_attribute();
}
inline void ClubPrivilegeSet::_internal_set_can_set_stream_attribute(bool value) {
  _has_bits_[1] |= 0x00000004u;
  can_set_stream_attribute_ = value;
}
inline void ClubPrivilegeSet::set_can_set_stream_attribute(bool value) {
  _internal_set_can_set_stream_attribute(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_attribute)
}

// optional bool can_set_stream_name = 144;
inline bool ClubPrivilegeSet::_internal_has_can_set_stream_name() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_stream_name() const {
  return _internal_has_can_set_stream_name();
}
inline void ClubPrivilegeSet::clear_can_set_stream_name() {
  can_set_stream_name_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool ClubPrivilegeSet::_internal_can_set_stream_name() const {
  return can_set_stream_name_;
}
inline bool ClubPrivilegeSet::can_set_stream_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_name)
  return _internal_can_set_stream_name();
}
inline void ClubPrivilegeSet::_internal_set_can_set_stream_name(bool value) {
  _has_bits_[1] |= 0x00000008u;
  can_set_stream_name_ = value;
}
inline void ClubPrivilegeSet::set_can_set_stream_name(bool value) {
  _internal_set_can_set_stream_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_name)
}

// optional bool can_set_stream_subject = 145;
inline bool ClubPrivilegeSet::_internal_has_can_set_stream_subject() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_stream_subject() const {
  return _internal_has_can_set_stream_subject();
}
inline void ClubPrivilegeSet::clear_can_set_stream_subject() {
  can_set_stream_subject_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool ClubPrivilegeSet::_internal_can_set_stream_subject() const {
  return can_set_stream_subject_;
}
inline bool ClubPrivilegeSet::can_set_stream_subject() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_subject)
  return _internal_can_set_stream_subject();
}
inline void ClubPrivilegeSet::_internal_set_can_set_stream_subject(bool value) {
  _has_bits_[1] |= 0x00000010u;
  can_set_stream_subject_ = value;
}
inline void ClubPrivilegeSet::set_can_set_stream_subject(bool value) {
  _internal_set_can_set_stream_subject(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_subject)
}

// optional bool can_set_stream_access = 146;
inline bool ClubPrivilegeSet::_internal_has_can_set_stream_access() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_stream_access() const {
  return _internal_has_can_set_stream_access();
}
inline void ClubPrivilegeSet::clear_can_set_stream_access() {
  can_set_stream_access_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool ClubPrivilegeSet::_internal_can_set_stream_access() const {
  return can_set_stream_access_;
}
inline bool ClubPrivilegeSet::can_set_stream_access() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_access)
  return _internal_can_set_stream_access();
}
inline void ClubPrivilegeSet::_internal_set_can_set_stream_access(bool value) {
  _has_bits_[1] |= 0x00000020u;
  can_set_stream_access_ = value;
}
inline void ClubPrivilegeSet::set_can_set_stream_access(bool value) {
  _internal_set_can_set_stream_access(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_access)
}

// optional bool can_set_stream_voice_level = 147;
inline bool ClubPrivilegeSet::_internal_has_can_set_stream_voice_level() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_set_stream_voice_level() const {
  return _internal_has_can_set_stream_voice_level();
}
inline void ClubPrivilegeSet::clear_can_set_stream_voice_level() {
  can_set_stream_voice_level_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool ClubPrivilegeSet::_internal_can_set_stream_voice_level() const {
  return can_set_stream_voice_level_;
}
inline bool ClubPrivilegeSet::can_set_stream_voice_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_voice_level)
  return _internal_can_set_stream_voice_level();
}
inline void ClubPrivilegeSet::_internal_set_can_set_stream_voice_level(bool value) {
  _has_bits_[1] |= 0x00000040u;
  can_set_stream_voice_level_ = value;
}
inline void ClubPrivilegeSet::set_can_set_stream_voice_level(bool value) {
  _internal_set_can_set_stream_voice_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_voice_level)
}

// optional bool can_create_message = 180;
inline bool ClubPrivilegeSet::_internal_has_can_create_message() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_create_message() const {
  return _internal_has_can_create_message();
}
inline void ClubPrivilegeSet::clear_can_create_message() {
  can_create_message_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool ClubPrivilegeSet::_internal_can_create_message() const {
  return can_create_message_;
}
inline bool ClubPrivilegeSet::can_create_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_message)
  return _internal_can_create_message();
}
inline void ClubPrivilegeSet::_internal_set_can_create_message(bool value) {
  _has_bits_[1] |= 0x00000080u;
  can_create_message_ = value;
}
inline void ClubPrivilegeSet::set_can_create_message(bool value) {
  _internal_set_can_create_message(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_message)
}

// optional bool can_destroy_own_message = 181;
inline bool ClubPrivilegeSet::_internal_has_can_destroy_own_message() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_destroy_own_message() const {
  return _internal_has_can_destroy_own_message();
}
inline void ClubPrivilegeSet::clear_can_destroy_own_message() {
  can_destroy_own_message_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool ClubPrivilegeSet::_internal_can_destroy_own_message() const {
  return can_destroy_own_message_;
}
inline bool ClubPrivilegeSet::can_destroy_own_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_own_message)
  return _internal_can_destroy_own_message();
}
inline void ClubPrivilegeSet::_internal_set_can_destroy_own_message(bool value) {
  _has_bits_[1] |= 0x00000100u;
  can_destroy_own_message_ = value;
}
inline void ClubPrivilegeSet::set_can_destroy_own_message(bool value) {
  _internal_set_can_destroy_own_message(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_own_message)
}

// optional bool can_destroy_other_message = 182;
inline bool ClubPrivilegeSet::_internal_has_can_destroy_other_message() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_destroy_other_message() const {
  return _internal_has_can_destroy_other_message();
}
inline void ClubPrivilegeSet::clear_can_destroy_other_message() {
  can_destroy_other_message_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool ClubPrivilegeSet::_internal_can_destroy_other_message() const {
  return can_destroy_other_message_;
}
inline bool ClubPrivilegeSet::can_destroy_other_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_other_message)
  return _internal_can_destroy_other_message();
}
inline void ClubPrivilegeSet::_internal_set_can_destroy_other_message(bool value) {
  _has_bits_[1] |= 0x00000200u;
  can_destroy_other_message_ = value;
}
inline void ClubPrivilegeSet::set_can_destroy_other_message(bool value) {
  _internal_set_can_destroy_other_message(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_other_message)
}

// optional bool can_edit_own_message = 183;
inline bool ClubPrivilegeSet::_internal_has_can_edit_own_message() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_edit_own_message() const {
  return _internal_has_can_edit_own_message();
}
inline void ClubPrivilegeSet::clear_can_edit_own_message() {
  can_edit_own_message_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool ClubPrivilegeSet::_internal_can_edit_own_message() const {
  return can_edit_own_message_;
}
inline bool ClubPrivilegeSet::can_edit_own_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_edit_own_message)
  return _internal_can_edit_own_message();
}
inline void ClubPrivilegeSet::_internal_set_can_edit_own_message(bool value) {
  _has_bits_[1] |= 0x00000400u;
  can_edit_own_message_ = value;
}
inline void ClubPrivilegeSet::set_can_edit_own_message(bool value) {
  _internal_set_can_edit_own_message(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_edit_own_message)
}

// optional bool can_pin_message = 184;
inline bool ClubPrivilegeSet::_internal_has_can_pin_message() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_pin_message() const {
  return _internal_has_can_pin_message();
}
inline void ClubPrivilegeSet::clear_can_pin_message() {
  can_pin_message_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool ClubPrivilegeSet::_internal_can_pin_message() const {
  return can_pin_message_;
}
inline bool ClubPrivilegeSet::can_pin_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_pin_message)
  return _internal_can_pin_message();
}
inline void ClubPrivilegeSet::_internal_set_can_pin_message(bool value) {
  _has_bits_[1] |= 0x00000800u;
  can_pin_message_ = value;
}
inline void ClubPrivilegeSet::set_can_pin_message(bool value) {
  _internal_set_can_pin_message(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_pin_message)
}

// optional bool can_mention_all = 185;
inline bool ClubPrivilegeSet::_internal_has_can_mention_all() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_mention_all() const {
  return _internal_has_can_mention_all();
}
inline void ClubPrivilegeSet::clear_can_mention_all() {
  can_mention_all_ = false;
  _has_bits_[1] &= ~0x00001000u;
}
inline bool ClubPrivilegeSet::_internal_can_mention_all() const {
  return can_mention_all_;
}
inline bool ClubPrivilegeSet::can_mention_all() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_all)
  return _internal_can_mention_all();
}
inline void ClubPrivilegeSet::_internal_set_can_mention_all(bool value) {
  _has_bits_[1] |= 0x00001000u;
  can_mention_all_ = value;
}
inline void ClubPrivilegeSet::set_can_mention_all(bool value) {
  _internal_set_can_mention_all(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_all)
}

// optional bool can_mention_here = 186;
inline bool ClubPrivilegeSet::_internal_has_can_mention_here() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_mention_here() const {
  return _internal_has_can_mention_here();
}
inline void ClubPrivilegeSet::clear_can_mention_here() {
  can_mention_here_ = false;
  _has_bits_[1] &= ~0x00002000u;
}
inline bool ClubPrivilegeSet::_internal_can_mention_here() const {
  return can_mention_here_;
}
inline bool ClubPrivilegeSet::can_mention_here() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_here)
  return _internal_can_mention_here();
}
inline void ClubPrivilegeSet::_internal_set_can_mention_here(bool value) {
  _has_bits_[1] |= 0x00002000u;
  can_mention_here_ = value;
}
inline void ClubPrivilegeSet::set_can_mention_here(bool value) {
  _internal_set_can_mention_here(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_here)
}

// optional bool can_mention_member = 187;
inline bool ClubPrivilegeSet::_internal_has_can_mention_member() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_mention_member() const {
  return _internal_has_can_mention_member();
}
inline void ClubPrivilegeSet::clear_can_mention_member() {
  can_mention_member_ = false;
  _has_bits_[1] &= ~0x00004000u;
}
inline bool ClubPrivilegeSet::_internal_can_mention_member() const {
  return can_mention_member_;
}
inline bool ClubPrivilegeSet::can_mention_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_member)
  return _internal_can_mention_member();
}
inline void ClubPrivilegeSet::_internal_set_can_mention_member(bool value) {
  _has_bits_[1] |= 0x00004000u;
  can_mention_member_ = value;
}
inline void ClubPrivilegeSet::set_can_mention_member(bool value) {
  _internal_set_can_mention_member(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_member)
}

// optional bool can_mention_role = 188;
inline bool ClubPrivilegeSet::_internal_has_can_mention_role() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool ClubPrivilegeSet::has_can_mention_role() const {
  return _internal_has_can_mention_role();
}
inline void ClubPrivilegeSet::clear_can_mention_role() {
  can_mention_role_ = false;
  _has_bits_[1] &= ~0x00008000u;
}
inline bool ClubPrivilegeSet::_internal_can_mention_role() const {
  return can_mention_role_;
}
inline bool ClubPrivilegeSet::can_mention_role() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_role)
  return _internal_can_mention_role();
}
inline void ClubPrivilegeSet::_internal_set_can_mention_role(bool value) {
  _has_bits_[1] |= 0x00008000u;
  can_mention_role_ = value;
}
inline void ClubPrivilegeSet::set_can_mention_role(bool value) {
  _internal_set_can_mention_role(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_role)
}

// -------------------------------------------------------------------

// ClubRole

// optional uint32 id = 1;
inline bool ClubRole::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClubRole::has_id() const {
  return _internal_has_id();
}
inline void ClubRole::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubRole::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubRole::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.id)
  return _internal_id();
}
inline void ClubRole::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void ClubRole::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRole.id)
}

// optional .bgs.protocol.RoleState state = 2;
inline bool ClubRole::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || state_ != nullptr);
  return value;
}
inline bool ClubRole::has_state() const {
  return _internal_has_state();
}
inline const ::bgs::protocol::RoleState& ClubRole::_internal_state() const {
  const ::bgs::protocol::RoleState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::RoleState*>(
      &::bgs::protocol::_RoleState_default_instance_);
}
inline const ::bgs::protocol::RoleState& ClubRole::state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.state)
  return _internal_state();
}
inline ::bgs::protocol::RoleState* ClubRole::release_state() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubRole.state)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::RoleState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::bgs::protocol::RoleState* ClubRole::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::RoleState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::bgs::protocol::RoleState* ClubRole::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubRole.state)
  return _internal_mutable_state();
}
inline void ClubRole::set_allocated_state(::bgs::protocol::RoleState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubRole.state)
}

// optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
inline bool ClubRole::_internal_has_privilege() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || privilege_ != nullptr);
  return value;
}
inline bool ClubRole::has_privilege() const {
  return _internal_has_privilege();
}
inline void ClubRole::clear_privilege() {
  if (privilege_ != nullptr) privilege_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::club::v1::ClubPrivilegeSet& ClubRole::_internal_privilege() const {
  const ::bgs::protocol::club::v1::ClubPrivilegeSet* p = privilege_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::ClubPrivilegeSet*>(
      &::bgs::protocol::club::v1::_ClubPrivilegeSet_default_instance_);
}
inline const ::bgs::protocol::club::v1::ClubPrivilegeSet& ClubRole::privilege() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.privilege)
  return _internal_privilege();
}
inline ::bgs::protocol::club::v1::ClubPrivilegeSet* ClubRole::release_privilege() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubRole.privilege)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::ClubPrivilegeSet* temp = privilege_;
  privilege_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::ClubPrivilegeSet* ClubRole::_internal_mutable_privilege() {
  _has_bits_[0] |= 0x00000002u;
  if (privilege_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::ClubPrivilegeSet>(GetArenaNoVirtual());
    privilege_ = p;
  }
  return privilege_;
}
inline ::bgs::protocol::club::v1::ClubPrivilegeSet* ClubRole::mutable_privilege() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubRole.privilege)
  return _internal_mutable_privilege();
}
inline void ClubRole::set_allocated_privilege(::bgs::protocol::club::v1::ClubPrivilegeSet* privilege) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete privilege_;
  }
  if (privilege) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      privilege = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, privilege, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  privilege_ = privilege;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubRole.privilege)
}

// optional bool always_grant_stream_access = 4;
inline bool ClubRole::_internal_has_always_grant_stream_access() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClubRole::has_always_grant_stream_access() const {
  return _internal_has_always_grant_stream_access();
}
inline void ClubRole::clear_always_grant_stream_access() {
  always_grant_stream_access_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ClubRole::_internal_always_grant_stream_access() const {
  return always_grant_stream_access_;
}
inline bool ClubRole::always_grant_stream_access() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.always_grant_stream_access)
  return _internal_always_grant_stream_access();
}
inline void ClubRole::_internal_set_always_grant_stream_access(bool value) {
  _has_bits_[0] |= 0x00000008u;
  always_grant_stream_access_ = value;
}
inline void ClubRole::set_always_grant_stream_access(bool value) {
  _internal_set_always_grant_stream_access(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRole.always_grant_stream_access)
}

// optional bool allow_in_club_slot = 5;
inline bool ClubRole::_internal_has_allow_in_club_slot() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClubRole::has_allow_in_club_slot() const {
  return _internal_has_allow_in_club_slot();
}
inline void ClubRole::clear_allow_in_club_slot() {
  allow_in_club_slot_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ClubRole::_internal_allow_in_club_slot() const {
  return allow_in_club_slot_;
}
inline bool ClubRole::allow_in_club_slot() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.allow_in_club_slot)
  return _internal_allow_in_club_slot();
}
inline void ClubRole::_internal_set_allow_in_club_slot(bool value) {
  _has_bits_[0] |= 0x00000010u;
  allow_in_club_slot_ = value;
}
inline void ClubRole::set_allow_in_club_slot(bool value) {
  _internal_set_allow_in_club_slot(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRole.allow_in_club_slot)
}

// -------------------------------------------------------------------

// ClubRoleSet

// repeated .bgs.protocol.club.v1.ClubRole role = 1;
inline int ClubRoleSet::_internal_role_size() const {
  return role_.size();
}
inline int ClubRoleSet::role_size() const {
  return _internal_role_size();
}
inline void ClubRoleSet::clear_role() {
  role_.Clear();
}
inline ::bgs::protocol::club::v1::ClubRole* ClubRoleSet::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubRoleSet.role)
  return role_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole >*
ClubRoleSet::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubRoleSet.role)
  return &role_;
}
inline const ::bgs::protocol::club::v1::ClubRole& ClubRoleSet::_internal_role(int index) const {
  return role_.Get(index);
}
inline const ::bgs::protocol::club::v1::ClubRole& ClubRoleSet::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRoleSet.role)
  return _internal_role(index);
}
inline ::bgs::protocol::club::v1::ClubRole* ClubRoleSet::_internal_add_role() {
  return role_.Add();
}
inline ::bgs::protocol::club::v1::ClubRole* ClubRoleSet::add_role() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubRoleSet.role)
  return _internal_add_role();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole >&
ClubRoleSet::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubRoleSet.role)
  return role_;
}

// repeated uint32 default_role = 5 [packed = true];
inline int ClubRoleSet::_internal_default_role_size() const {
  return default_role_.size();
}
inline int ClubRoleSet::default_role_size() const {
  return _internal_default_role_size();
}
inline void ClubRoleSet::clear_default_role() {
  default_role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubRoleSet::_internal_default_role(int index) const {
  return default_role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClubRoleSet::default_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRoleSet.default_role)
  return _internal_default_role(index);
}
inline void ClubRoleSet::set_default_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  default_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRoleSet.default_role)
}
inline void ClubRoleSet::_internal_add_default_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  default_role_.Add(value);
}
inline void ClubRoleSet::add_default_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_default_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubRoleSet.default_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ClubRoleSet::_internal_default_role() const {
  return default_role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ClubRoleSet::default_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubRoleSet.default_role)
  return _internal_default_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ClubRoleSet::_internal_mutable_default_role() {
  return &default_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ClubRoleSet::mutable_default_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubRoleSet.default_role)
  return _internal_mutable_default_role();
}

// optional bool assignment_respects_relegation_chain = 6;
inline bool ClubRoleSet::_internal_has_assignment_respects_relegation_chain() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClubRoleSet::has_assignment_respects_relegation_chain() const {
  return _internal_has_assignment_respects_relegation_chain();
}
inline void ClubRoleSet::clear_assignment_respects_relegation_chain() {
  assignment_respects_relegation_chain_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ClubRoleSet::_internal_assignment_respects_relegation_chain() const {
  return assignment_respects_relegation_chain_;
}
inline bool ClubRoleSet::assignment_respects_relegation_chain() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRoleSet.assignment_respects_relegation_chain)
  return _internal_assignment_respects_relegation_chain();
}
inline void ClubRoleSet::_internal_set_assignment_respects_relegation_chain(bool value) {
  _has_bits_[0] |= 0x00000002u;
  assignment_respects_relegation_chain_ = value;
}
inline void ClubRoleSet::set_assignment_respects_relegation_chain(bool value) {
  _internal_set_assignment_respects_relegation_chain(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRoleSet.assignment_respects_relegation_chain)
}

// optional string subtype = 7;
inline bool ClubRoleSet::_internal_has_subtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClubRoleSet::has_subtype() const {
  return _internal_has_subtype();
}
inline void ClubRoleSet::clear_subtype() {
  subtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClubRoleSet::subtype() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRoleSet.subtype)
  return _internal_subtype();
}
inline void ClubRoleSet::set_subtype(const std::string& value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRoleSet.subtype)
}
inline std::string* ClubRoleSet::mutable_subtype() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubRoleSet.subtype)
  return _internal_mutable_subtype();
}
inline const std::string& ClubRoleSet::_internal_subtype() const {
  return subtype_.GetNoArena();
}
inline void ClubRoleSet::_internal_set_subtype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClubRoleSet::set_subtype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ClubRoleSet.subtype)
}
inline void ClubRoleSet::set_subtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubRoleSet.subtype)
}
inline void ClubRoleSet::set_subtype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubRoleSet.subtype)
}
inline std::string* ClubRoleSet::_internal_mutable_subtype() {
  _has_bits_[0] |= 0x00000001u;
  return subtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClubRoleSet::release_subtype() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ClubRoleSet.subtype)
  if (!_internal_has_subtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subtype_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClubRoleSet::set_allocated_subtype(std::string* subtype) {
  if (subtype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtype);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubRoleSet.subtype)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5frole_2eproto
