// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_stream.proto

#include "bgs/low/pb/client/club_stream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_EmbedInfo_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeSeriesId_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContentChain_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class StreamPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamPosition> _instance;
} _StreamPosition_default_instance_;
class StreamAccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamAccess> _instance;
} _StreamAccess_default_instance_;
class CreateStreamOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateStreamOptions> _instance;
} _CreateStreamOptions_default_instance_;
class StreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stream> _instance;
} _Stream_default_instance_;
class MentionContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MentionContent> _instance;
} _MentionContent_default_instance_;
class CreateMessageOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMessageOptions> _instance;
} _CreateMessageOptions_default_instance_;
class ClubStreamMessageContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClubStreamMessageContainer> _instance;
} _ClubStreamMessageContainer_default_instance_;
class ContentChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContentChain> _instance;
} _ContentChain_default_instance_;
class StreamMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMessage> _instance;
} _StreamMessage_default_instance_;
class StreamMentionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMention> _instance;
} _StreamMention_default_instance_;
class StreamViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamView> _instance;
} _StreamView_default_instance_;
class StreamAdvanceViewTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamAdvanceViewTime> _instance;
} _StreamAdvanceViewTime_default_instance_;
class StreamEventTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamEventTime> _instance;
} _StreamEventTime_default_instance_;
class StreamMentionViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMentionView> _instance;
} _StreamMentionView_default_instance_;
class StreamStateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStateOptions> _instance;
} _StreamStateOptions_default_instance_;
class StreamStateAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStateAssignment> _instance;
} _StreamStateAssignment_default_instance_;
class StreamTypingIndicatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamTypingIndicator> _instance;
} _StreamTypingIndicator_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ClubStreamMessageContainer_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ClubStreamMessageContainer_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ClubStreamMessageContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ClubStreamMessageContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClubStreamMessageContainer_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClubStreamMessageContainer_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_ContentChain_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_ContentChain_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::ContentChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::ContentChain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContentChain_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContentChain_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_EmbedInfo_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto.base,
      &scc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateMessageOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateMessageOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateMessageOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_CreateStreamOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::CreateStreamOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::CreateStreamOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_MentionContent_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::MentionContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::MentionContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_Stream_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::Stream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::Stream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamAccess_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamAccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamAccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {}};

static void InitDefaultsscc_info_StreamAdvanceViewTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamAdvanceViewTime_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamAdvanceViewTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamAdvanceViewTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamAdvanceViewTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamAdvanceViewTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {}};

static void InitDefaultsscc_info_StreamEventTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamEventTime_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamEventTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamEventTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamEventTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamEventTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {}};

static void InitDefaultsscc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamMention_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamMention();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamMention::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto.base,
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
      &scc_info_TimeSeriesId_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto.base,
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,
      &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamMentionView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamMentionView_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamMentionView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamMentionView::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamMentionView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamMentionView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamMessage_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_MessageId_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto.base,
      &scc_info_MemberDescription_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto.base,
      &scc_info_ContentChain_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamPosition_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {}};

static void InitDefaultsscc_info_StreamStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamStateAssignment_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamStateAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamStateAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamStateOptions_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamStateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamStateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto.base,
      &scc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,}};

static void InitDefaultsscc_info_StreamTypingIndicator_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamTypingIndicator_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamTypingIndicator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamTypingIndicator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamTypingIndicator_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamTypingIndicator_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_MemberId_bgs_2flow_2fpb_2fclient_2fclub_5fmember_5fid_2eproto.base,}};

static void InitDefaultsscc_info_StreamView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::club::v1::_StreamView_default_instance_;
    new (ptr) ::bgs::protocol::club::v1::StreamView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::club::v1::StreamView::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto}, {
      &scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamPosition, stream_id_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAccess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAccess, role_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamOptions, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamOptions, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamOptions, subject_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamOptions, access_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateStreamOptions, voice_level_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, subject_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, access_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, voice_level_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::Stream, creation_time_),
  3,
  4,
  ~0u,
  0,
  1,
  2,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MentionContent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MentionContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MentionContent, all_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MentionContent, here_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MentionContent, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::MentionContent, role_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageOptions, content_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::CreateMessageOptions, mention_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamMessageContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamMessageContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ClubStreamMessageContainer, message_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ContentChain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ContentChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ContentChain, content_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ContentChain, embed_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ContentChain, mention_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::ContentChain, edit_time_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessage, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessage, author_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessage, content_chain_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessage, destroyer_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessage, destroyed_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMessage, destroy_time_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, message_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, author_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, destroyed_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, mention_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, member_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMention, message_),
  5,
  6,
  0,
  1,
  7,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamView, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamView, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamView, marker_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTime, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamAdvanceViewTime, view_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamEventTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamEventTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamEventTime, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamEventTime, event_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMentionView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMentionView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMentionView, club_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMentionView, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamMentionView, marker_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateOptions, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateOptions, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateOptions, subject_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateOptions, access_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateOptions, voice_level_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, stream_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, subject_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, access_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, stream_subscription_removed_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamStateAssignment, voice_level_),
  3,
  ~0u,
  0,
  1,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicator, author_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicator, indicator_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::club::v1::StreamTypingIndicator, epoch_),
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::bgs::protocol::club::v1::StreamPosition)},
  { 7, 13, sizeof(::bgs::protocol::club::v1::StreamAccess)},
  { 14, 24, sizeof(::bgs::protocol::club::v1::CreateStreamOptions)},
  { 29, 42, sizeof(::bgs::protocol::club::v1::Stream)},
  { 50, 59, sizeof(::bgs::protocol::club::v1::MentionContent)},
  { 63, 70, sizeof(::bgs::protocol::club::v1::CreateMessageOptions)},
  { 72, 78, sizeof(::bgs::protocol::club::v1::ClubStreamMessageContainer)},
  { 79, 88, sizeof(::bgs::protocol::club::v1::ContentChain)},
  { 92, 103, sizeof(::bgs::protocol::club::v1::StreamMessage)},
  { 109, 122, sizeof(::bgs::protocol::club::v1::StreamMention)},
  { 130, 138, sizeof(::bgs::protocol::club::v1::StreamView)},
  { 141, 148, sizeof(::bgs::protocol::club::v1::StreamAdvanceViewTime)},
  { 150, 157, sizeof(::bgs::protocol::club::v1::StreamEventTime)},
  { 159, 167, sizeof(::bgs::protocol::club::v1::StreamMentionView)},
  { 170, 180, sizeof(::bgs::protocol::club::v1::StreamStateOptions)},
  { 185, 197, sizeof(::bgs::protocol::club::v1::StreamStateAssignment)},
  { 204, 212, sizeof(::bgs::protocol::club::v1::StreamTypingIndicator)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamAccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateStreamOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_Stream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_MentionContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_CreateMessageOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ClubStreamMessageContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_ContentChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamMention_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamAdvanceViewTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamEventTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamMentionView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamStateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamStateAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::club::v1::_StreamTypingIndicator_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#bgs/low/pb/client/club_stream.proto\022\024b"
  "gs.protocol.club.v1\032!bgs/low/pb/client/c"
  "lub_enum.proto\032#bgs/low/pb/client/club_m"
  "ember.proto\0325bgs/low/pb/client/api/clien"
  "t/v2/attribute_types.proto\032#bgs/low/pb/c"
  "lient/embed_types.proto\032(bgs/low/pb/clie"
  "nt/event_view_types.proto\032%bgs/low/pb/cl"
  "ient/message_types.proto\032!bgs/low/pb/cli"
  "ent/ets_types.proto\"\'\n\016StreamPosition\022\025\n"
  "\tstream_id\030\001 \003(\004B\002\020\001\" \n\014StreamAccess\022\020\n\004"
  "role\030\001 \003(\rB\002\020\001\"\352\001\n\023CreateStreamOptions\022-"
  "\n\tattribute\030\001 \003(\0132\032.bgs.protocol.v2.Attr"
  "ibute\022\014\n\004name\030\002 \001(\t\022\017\n\007subject\030\003 \001(\t\0222\n\006"
  "access\030\004 \001(\0132\".bgs.protocol.club.v1.Stre"
  "amAccess\022Q\n\013voice_level\030\005 \001(\0162&.bgs.prot"
  "ocol.club.v1.StreamVoiceLevel:\024VOICE_LEV"
  "EL_DISABLED\"\221\002\n\006Stream\022\017\n\007club_id\030\001 \001(\004\022"
  "\n\n\002id\030\002 \001(\004\022-\n\tattribute\030\003 \003(\0132\032.bgs.pro"
  "tocol.v2.Attribute\022\014\n\004name\030\004 \001(\t\022\017\n\007subj"
  "ect\030\005 \001(\t\0222\n\006access\030\006 \001(\0132\".bgs.protocol"
  ".club.v1.StreamAccess\022Q\n\013voice_level\030\007 \001"
  "(\0162&.bgs.protocol.club.v1.StreamVoiceLev"
  "el:\024VOICE_LEVEL_DISABLED\022\025\n\rcreation_tim"
  "e\030\010 \001(\004\"p\n\016MentionContent\022\013\n\003all\030\001 \001(\010\022\014"
  "\n\004here\030\002 \001(\010\0221\n\tmember_id\030\003 \003(\0132\036.bgs.pr"
  "otocol.club.v1.MemberId\022\020\n\004role\030\004 \003(\rB\002\020"
  "\001\"^\n\024CreateMessageOptions\022\017\n\007content\030\002 \001"
  "(\t\0225\n\007mention\030\003 \001(\0132$.bgs.protocol.club."
  "v1.MentionContent\"R\n\032ClubStreamMessageCo"
  "ntainer\0224\n\007message\030\001 \003(\0132#.bgs.protocol."
  "club.v1.StreamMessage\"\221\001\n\014ContentChain\022\017"
  "\n\007content\030\005 \001(\t\022&\n\005embed\030\006 \003(\0132\027.bgs.pro"
  "tocol.EmbedInfo\0225\n\007mention\030\007 \001(\0132$.bgs.p"
  "rotocol.club.v1.MentionContent\022\021\n\tedit_t"
  "ime\030\010 \001(\004\"\215\002\n\rStreamMessage\022#\n\002id\030\003 \001(\0132"
  "\027.bgs.protocol.MessageId\0227\n\006author\030\004 \001(\013"
  "2\'.bgs.protocol.club.v1.MemberDescriptio"
  "n\0229\n\rcontent_chain\030\006 \003(\0132\".bgs.protocol."
  "club.v1.ContentChain\022:\n\tdestroyer\030\017 \001(\0132"
  "\'.bgs.protocol.club.v1.MemberDescription"
  "\022\021\n\tdestroyed\030\020 \001(\010\022\024\n\014destroy_time\030\021 \001("
  "\004\"\305\002\n\rStreamMention\022\017\n\007club_id\030\001 \001(\004\022\021\n\t"
  "stream_id\030\002 \001(\004\022+\n\nmessage_id\030\003 \001(\0132\027.bg"
  "s.protocol.MessageId\0227\n\006author\030\004 \001(\0132\'.b"
  "gs.protocol.club.v1.MemberDescription\022\021\n"
  "\tdestroyed\030\005 \001(\010\022.\n\nmention_id\030\006 \001(\0132\032.b"
  "gs.protocol.TimeSeriesId\0221\n\tmember_id\030\007 "
  "\001(\0132\036.bgs.protocol.club.v1.MemberId\0224\n\007m"
  "essage\030\010 \001(\0132#.bgs.protocol.club.v1.Stre"
  "amMessage\"Z\n\nStreamView\022\017\n\007club_id\030\001 \001(\004"
  "\022\021\n\tstream_id\030\002 \001(\004\022(\n\006marker\030\003 \001(\0132\030.bg"
  "s.protocol.ViewMarker\"=\n\025StreamAdvanceVi"
  "ewTime\022\021\n\tstream_id\030\001 \001(\004\022\021\n\tview_time\030\002"
  " \001(\004\"8\n\017StreamEventTime\022\021\n\tstream_id\030\001 \001"
  "(\004\022\022\n\nevent_time\030\002 \001(\004\"a\n\021StreamMentionV"
  "iew\022\017\n\007club_id\030\001 \001(\004\022\021\n\tstream_id\030\002 \001(\004\022"
  "(\n\006marker\030\003 \001(\0132\030.bgs.protocol.ViewMarke"
  "r\"\351\001\n\022StreamStateOptions\022-\n\tattribute\030\001 "
  "\003(\0132\032.bgs.protocol.v2.Attribute\022\014\n\004name\030"
  "\002 \001(\t\022\017\n\007subject\030\003 \001(\t\0222\n\006access\030\004 \001(\0132\""
  ".bgs.protocol.club.v1.StreamAccess\022Q\n\013vo"
  "ice_level\030\005 \001(\0162&.bgs.protocol.club.v1.S"
  "treamVoiceLevel:\024VOICE_LEVEL_DISABLED\"\244\002"
  "\n\025StreamStateAssignment\022\021\n\tstream_id\030\001 \001"
  "(\004\022-\n\tattribute\030\002 \003(\0132\032.bgs.protocol.v2."
  "Attribute\022\014\n\004name\030\003 \001(\t\022\017\n\007subject\030\004 \001(\t"
  "\0222\n\006access\030\005 \001(\0132\".bgs.protocol.club.v1."
  "StreamAccess\022#\n\033stream_subscription_remo"
  "ved\030\006 \001(\010\022Q\n\013voice_level\030\007 \001(\0162&.bgs.pro"
  "tocol.club.v1.StreamVoiceLevel:\024VOICE_LE"
  "VEL_DISABLED\"\231\001\n\025StreamTypingIndicator\0221"
  "\n\tauthor_id\030\001 \001(\0132\036.bgs.protocol.club.v1"
  ".MemberId\022>\n\tindicator\030\002 \001(\0162\035.bgs.proto"
  "col.TypingIndicator:\014TYPING_START\022\r\n\005epo"
  "ch\030\003 \001(\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto_deps[7] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fapi_2fclient_2fv2_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fenum_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fmember_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fets_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fmessage_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto_sccs[17] = {
  &scc_info_ClubStreamMessageContainer_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_ContentChain_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamAdvanceViewTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamEventTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamMentionView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamTypingIndicator_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
  &scc_info_StreamView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto, "bgs/low/pb/client/club_stream.proto", 2968,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto_deps, 17, 7,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto, 17, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto)), true);
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

void StreamPosition::InitAsDefaultInstance() {
}
class StreamPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamPosition>()._has_bits_);
};

StreamPosition::StreamPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamPosition)
}
StreamPosition::StreamPosition(const StreamPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stream_id_(from.stream_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamPosition)
}

void StreamPosition::SharedCtor() {
}

StreamPosition::~StreamPosition() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamPosition)
  SharedDtor();
}

void StreamPosition::SharedDtor() {
}

void StreamPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamPosition& StreamPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamPosition_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 stream_id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_stream_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 stream_id = 1 [packed = true];
  {
    int byte_size = _stream_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_stream_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamPosition)
  return target;
}

size_t StreamPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 stream_id = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->stream_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stream_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamPosition)
    MergeFrom(*source);
  }
}

void StreamPosition::MergeFrom(const StreamPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_id_.MergeFrom(from.stream_id_);
}

void StreamPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamPosition::CopyFrom(const StreamPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPosition::IsInitialized() const {
  return true;
}

void StreamPosition::InternalSwap(StreamPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stream_id_.InternalSwap(&other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamAccess::InitAsDefaultInstance() {
}
class StreamAccess::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamAccess>()._has_bits_);
};

StreamAccess::StreamAccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamAccess)
}
StreamAccess::StreamAccess(const StreamAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamAccess)
}

void StreamAccess::SharedCtor() {
}

StreamAccess::~StreamAccess() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamAccess)
  SharedDtor();
}

void StreamAccess::SharedDtor() {
}

void StreamAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamAccess& StreamAccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamAccess_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamAccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 role = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamAccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 role = 1 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_role(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamAccess)
  return target;
}

size_t StreamAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamAccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamAccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamAccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamAccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamAccess)
    MergeFrom(*source);
  }
}

void StreamAccess::MergeFrom(const StreamAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
}

void StreamAccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAccess::CopyFrom(const StreamAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAccess::IsInitialized() const {
  return true;
}

void StreamAccess::InternalSwap(StreamAccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamAccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateStreamOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateStreamOptions_default_instance_._instance.get_mutable()->access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(
      ::bgs::protocol::club::v1::StreamAccess::internal_default_instance());
}
class CreateStreamOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateStreamOptions>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subject(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::StreamAccess& access(const CreateStreamOptions* msg);
  static void set_has_access(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_voice_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::club::v1::StreamAccess&
CreateStreamOptions::_Internal::access(const CreateStreamOptions* msg) {
  return *msg->access_;
}
void CreateStreamOptions::clear_attribute() {
  attribute_.Clear();
}
CreateStreamOptions::CreateStreamOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateStreamOptions)
}
CreateStreamOptions::CreateStreamOptions(const CreateStreamOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subject()) {
    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from._internal_has_access()) {
    access_ = new ::bgs::protocol::club::v1::StreamAccess(*from.access_);
  } else {
    access_ = nullptr;
  }
  voice_level_ = from.voice_level_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateStreamOptions)
}

void CreateStreamOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&access_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_level_) -
      reinterpret_cast<char*>(&access_)) + sizeof(voice_level_));
}

CreateStreamOptions::~CreateStreamOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateStreamOptions)
  SharedDtor();
}

void CreateStreamOptions::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete access_;
}

void CreateStreamOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateStreamOptions& CreateStreamOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateStreamOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void CreateStreamOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateStreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      subject_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(access_ != nullptr);
      access_->Clear();
    }
  }
  voice_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateStreamOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.v2.Attribute attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.CreateStreamOptions.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.CreateStreamOptions.subject");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamAccess access = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(val))) {
            _internal_set_voice_level(static_cast<::bgs::protocol::club::v1::StreamVoiceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateStreamOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateStreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attribute(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.CreateStreamOptions.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string subject = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.CreateStreamOptions.subject");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subject(), target);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::access(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_voice_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateStreamOptions)
  return target;
}

size_t CreateStreamOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateStreamOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string subject = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subject());
    }

    // optional .bgs.protocol.club.v1.StreamAccess access = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_);
    }

    // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_voice_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateStreamOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateStreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStreamOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateStreamOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateStreamOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateStreamOptions)
    MergeFrom(*source);
  }
}

void CreateStreamOptions::MergeFrom(const CreateStreamOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateStreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_access()->::bgs::protocol::club::v1::StreamAccess::MergeFrom(from._internal_access());
    }
    if (cached_has_bits & 0x00000008u) {
      voice_level_ = from.voice_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateStreamOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateStreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStreamOptions::CopyFrom(const CreateStreamOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateStreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStreamOptions::IsInitialized() const {
  return true;
}

void CreateStreamOptions::InternalSwap(CreateStreamOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(access_, other->access_);
  swap(voice_level_, other->voice_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStreamOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stream::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_Stream_default_instance_._instance.get_mutable()->access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(
      ::bgs::protocol::club::v1::StreamAccess::internal_default_instance());
}
class Stream::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subject(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::StreamAccess& access(const Stream* msg);
  static void set_has_access(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_voice_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::bgs::protocol::club::v1::StreamAccess&
Stream::_Internal::access(const Stream* msg) {
  return *msg->access_;
}
void Stream::clear_attribute() {
  attribute_.Clear();
}
Stream::Stream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Stream)
}
Stream::Stream(const Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subject()) {
    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from._internal_has_access()) {
    access_ = new ::bgs::protocol::club::v1::StreamAccess(*from.access_);
  } else {
    access_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&voice_level_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(voice_level_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Stream)
}

void Stream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&access_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_level_) -
      reinterpret_cast<char*>(&access_)) + sizeof(voice_level_));
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete access_;
}

void Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream& Stream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stream_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      subject_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(access_ != nullptr);
      access_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&voice_level_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(voice_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Stream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.Stream.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subject = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.Stream.subject");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamAccess access = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(val))) {
            _internal_set_voice_level(static_cast<::bgs::protocol::club::v1::StreamVoiceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.Stream.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional string subject = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.Stream.subject");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subject(), target);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::access(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_voice_level(), target);
  }

  // optional uint64 creation_time = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_creation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.Stream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string subject = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subject());
    }

    // optional .bgs.protocol.club.v1.StreamAccess access = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_);
    }

    // optional uint64 club_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint64 creation_time = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

    // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_voice_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.Stream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.Stream)
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_access()->::bgs::protocol::club::v1::StreamAccess::MergeFrom(from._internal_access());
    }
    if (cached_has_bits & 0x00000008u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      voice_level_ = from.voice_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::InternalSwap(Stream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(access_, other->access_);
  swap(club_id_, other->club_id_);
  swap(id_, other->id_);
  swap(creation_time_, other->creation_time_);
  swap(voice_level_, other->voice_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MentionContent::InitAsDefaultInstance() {
}
class MentionContent::_Internal {
 public:
  using HasBits = decltype(std::declval<MentionContent>()._has_bits_);
  static void set_has_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_here(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void MentionContent::clear_member_id() {
  member_id_.Clear();
}
MentionContent::MentionContent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MentionContent)
}
MentionContent::MentionContent(const MentionContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      member_id_(from.member_id_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&all_, &from.all_,
    static_cast<size_t>(reinterpret_cast<char*>(&here_) -
    reinterpret_cast<char*>(&all_)) + sizeof(here_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MentionContent)
}

void MentionContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  ::memset(&all_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&here_) -
      reinterpret_cast<char*>(&all_)) + sizeof(here_));
}

MentionContent::~MentionContent() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MentionContent)
  SharedDtor();
}

void MentionContent::SharedDtor() {
}

void MentionContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MentionContent& MentionContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MentionContent_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void MentionContent::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.MentionContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_.Clear();
  role_.Clear();
  ::memset(&all_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&here_) -
      reinterpret_cast<char*>(&all_)) + sizeof(here_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MentionContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_all(&has_bits);
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool here = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_here(&has_bits);
          here_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.MemberId member_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MentionContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MentionContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all(), target);
  }

  // optional bool here = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_here(), target);
  }

  // repeated .bgs.protocol.club.v1.MemberId member_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_member_id(i), target, stream);
  }

  // repeated uint32 role = 4 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_role(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MentionContent)
  return target;
}

size_t MentionContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.MentionContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.MemberId member_id = 3;
  total_size += 1UL * this->_internal_member_id_size();
  for (const auto& msg : this->member_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 role = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool all = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool here = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MentionContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.MentionContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MentionContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MentionContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.MentionContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.MentionContent)
    MergeFrom(*source);
  }
}

void MentionContent::MergeFrom(const MentionContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.MentionContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_.MergeFrom(from.member_id_);
  role_.MergeFrom(from.role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      all_ = from.all_;
    }
    if (cached_has_bits & 0x00000002u) {
      here_ = from.here_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MentionContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.MentionContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MentionContent::CopyFrom(const MentionContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.MentionContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MentionContent::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(member_id_)) return false;
  return true;
}

void MentionContent::InternalSwap(MentionContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_id_.InternalSwap(&other->member_id_);
  role_.InternalSwap(&other->role_);
  swap(all_, other->all_);
  swap(here_, other->here_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MentionContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMessageOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_CreateMessageOptions_default_instance_._instance.get_mutable()->mention_ = const_cast< ::bgs::protocol::club::v1::MentionContent*>(
      ::bgs::protocol::club::v1::MentionContent::internal_default_instance());
}
class CreateMessageOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateMessageOptions>()._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MentionContent& mention(const CreateMessageOptions* msg);
  static void set_has_mention(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MentionContent&
CreateMessageOptions::_Internal::mention(const CreateMessageOptions* msg) {
  return *msg->mention_;
}
CreateMessageOptions::CreateMessageOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateMessageOptions)
}
CreateMessageOptions::CreateMessageOptions(const CreateMessageOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_mention()) {
    mention_ = new ::bgs::protocol::club::v1::MentionContent(*from.mention_);
  } else {
    mention_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateMessageOptions)
}

void CreateMessageOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mention_ = nullptr;
}

CreateMessageOptions::~CreateMessageOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateMessageOptions)
  SharedDtor();
}

void CreateMessageOptions::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mention_;
}

void CreateMessageOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMessageOptions& CreateMessageOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMessageOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void CreateMessageOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.CreateMessageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mention_ != nullptr);
      mention_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateMessageOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.CreateMessageOptions.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MentionContent mention = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mention(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMessageOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateMessageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.CreateMessageOptions.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // optional .bgs.protocol.club.v1.MentionContent mention = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mention(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateMessageOptions)
  return target;
}

size_t CreateMessageOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.CreateMessageOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string content = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional .bgs.protocol.club.v1.MentionContent mention = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mention_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMessageOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.CreateMessageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMessageOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMessageOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.CreateMessageOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.CreateMessageOptions)
    MergeFrom(*source);
  }
}

void CreateMessageOptions::MergeFrom(const CreateMessageOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.CreateMessageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mention()->::bgs::protocol::club::v1::MentionContent::MergeFrom(from._internal_mention());
    }
  }
}

void CreateMessageOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.CreateMessageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMessageOptions::CopyFrom(const CreateMessageOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.CreateMessageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMessageOptions::IsInitialized() const {
  if (_internal_has_mention()) {
    if (!mention_->IsInitialized()) return false;
  }
  return true;
}

void CreateMessageOptions::InternalSwap(CreateMessageOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mention_, other->mention_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMessageOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClubStreamMessageContainer::InitAsDefaultInstance() {
}
class ClubStreamMessageContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<ClubStreamMessageContainer>()._has_bits_);
};

ClubStreamMessageContainer::ClubStreamMessageContainer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
}
ClubStreamMessageContainer::ClubStreamMessageContainer(const ClubStreamMessageContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      message_(from.message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
}

void ClubStreamMessageContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClubStreamMessageContainer_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
}

ClubStreamMessageContainer::~ClubStreamMessageContainer() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
  SharedDtor();
}

void ClubStreamMessageContainer::SharedDtor() {
}

void ClubStreamMessageContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClubStreamMessageContainer& ClubStreamMessageContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClubStreamMessageContainer_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void ClubStreamMessageContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClubStreamMessageContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClubStreamMessageContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_message(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubStreamMessageContainer)
  return target;
}

size_t ClubStreamMessageContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  total_size += 1UL * this->_internal_message_size();
  for (const auto& msg : this->message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClubStreamMessageContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const ClubStreamMessageContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClubStreamMessageContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ClubStreamMessageContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ClubStreamMessageContainer)
    MergeFrom(*source);
  }
}

void ClubStreamMessageContainer::MergeFrom(const ClubStreamMessageContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_.MergeFrom(from.message_);
}

void ClubStreamMessageContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubStreamMessageContainer::CopyFrom(const ClubStreamMessageContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubStreamMessageContainer::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(message_)) return false;
  return true;
}

void ClubStreamMessageContainer::InternalSwap(ClubStreamMessageContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.InternalSwap(&other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClubStreamMessageContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContentChain::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_ContentChain_default_instance_._instance.get_mutable()->mention_ = const_cast< ::bgs::protocol::club::v1::MentionContent*>(
      ::bgs::protocol::club::v1::MentionContent::internal_default_instance());
}
class ContentChain::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentChain>()._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MentionContent& mention(const ContentChain* msg);
  static void set_has_mention(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_edit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::club::v1::MentionContent&
ContentChain::_Internal::mention(const ContentChain* msg) {
  return *msg->mention_;
}
void ContentChain::clear_embed() {
  embed_.Clear();
}
ContentChain::ContentChain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ContentChain)
}
ContentChain::ContentChain(const ContentChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      embed_(from.embed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_mention()) {
    mention_ = new ::bgs::protocol::club::v1::MentionContent(*from.mention_);
  } else {
    mention_ = nullptr;
  }
  edit_time_ = from.edit_time_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ContentChain)
}

void ContentChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContentChain_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mention_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edit_time_) -
      reinterpret_cast<char*>(&mention_)) + sizeof(edit_time_));
}

ContentChain::~ContentChain() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ContentChain)
  SharedDtor();
}

void ContentChain::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mention_;
}

void ContentChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentChain& ContentChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContentChain_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void ContentChain::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.ContentChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mention_ != nullptr);
      mention_->Clear();
    }
  }
  edit_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContentChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.ContentChain.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.EmbedInfo embed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_embed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MentionContent mention = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mention(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 edit_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_edit_time(&has_bits);
          edit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContentChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ContentChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.ContentChain.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // repeated .bgs.protocol.EmbedInfo embed = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_embed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_embed(i), target, stream);
  }

  // optional .bgs.protocol.club.v1.MentionContent mention = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mention(this), target, stream);
  }

  // optional uint64 edit_time = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_edit_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ContentChain)
  return target;
}

size_t ContentChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.ContentChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.EmbedInfo embed = 6;
  total_size += 1UL * this->_internal_embed_size();
  for (const auto& msg : this->embed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string content = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional .bgs.protocol.club.v1.MentionContent mention = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mention_);
    }

    // optional uint64 edit_time = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_edit_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.ContentChain)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContentChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.ContentChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.ContentChain)
    MergeFrom(*source);
  }
}

void ContentChain::MergeFrom(const ContentChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.ContentChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  embed_.MergeFrom(from.embed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mention()->::bgs::protocol::club::v1::MentionContent::MergeFrom(from._internal_mention());
    }
    if (cached_has_bits & 0x00000004u) {
      edit_time_ = from.edit_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.ContentChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentChain::CopyFrom(const ContentChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.ContentChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentChain::IsInitialized() const {
  if (_internal_has_mention()) {
    if (!mention_->IsInitialized()) return false;
  }
  return true;
}

void ContentChain::InternalSwap(ContentChain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  embed_.InternalSwap(&other->embed_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mention_, other->mention_);
  swap(edit_time_, other->edit_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentChain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMessage::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamMessage_default_instance_._instance.get_mutable()->id_ = const_cast< ::bgs::protocol::MessageId*>(
      ::bgs::protocol::MessageId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamMessage_default_instance_._instance.get_mutable()->author_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamMessage_default_instance_._instance.get_mutable()->destroyer_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
}
class StreamMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMessage>()._has_bits_);
  static const ::bgs::protocol::MessageId& id(const StreamMessage* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& author(const StreamMessage* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& destroyer(const StreamMessage* msg);
  static void set_has_destroyer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_destroy_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::MessageId&
StreamMessage::_Internal::id(const StreamMessage* msg) {
  return *msg->id_;
}
const ::bgs::protocol::club::v1::MemberDescription&
StreamMessage::_Internal::author(const StreamMessage* msg) {
  return *msg->author_;
}
const ::bgs::protocol::club::v1::MemberDescription&
StreamMessage::_Internal::destroyer(const StreamMessage* msg) {
  return *msg->destroyer_;
}
void StreamMessage::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamMessage::clear_author() {
  if (author_ != nullptr) author_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StreamMessage::clear_destroyer() {
  if (destroyer_ != nullptr) destroyer_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
StreamMessage::StreamMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMessage)
}
StreamMessage::StreamMessage(const StreamMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      content_chain_(from.content_chain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::bgs::protocol::MessageId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_author()) {
    author_ = new ::bgs::protocol::club::v1::MemberDescription(*from.author_);
  } else {
    author_ = nullptr;
  }
  if (from._internal_has_destroyer()) {
    destroyer_ = new ::bgs::protocol::club::v1::MemberDescription(*from.destroyer_);
  } else {
    destroyer_ = nullptr;
  }
  ::memcpy(&destroyed_, &from.destroyed_,
    static_cast<size_t>(reinterpret_cast<char*>(&destroy_time_) -
    reinterpret_cast<char*>(&destroyed_)) + sizeof(destroy_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMessage)
}

void StreamMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destroy_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(destroy_time_));
}

StreamMessage::~StreamMessage() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMessage)
  SharedDtor();
}

void StreamMessage::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete author_;
  if (this != internal_default_instance()) delete destroyer_;
}

void StreamMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMessage& StreamMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMessage_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_chain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(author_ != nullptr);
      author_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(destroyer_ != nullptr);
      destroyer_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&destroyed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destroy_time_) -
        reinterpret_cast<char*>(&destroyed_)) + sizeof(destroy_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.MessageId id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription author = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroyer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool destroyed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_destroyed(&has_bits);
          destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 destroy_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_destroy_time(&has_bits);
          destroy_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.MessageId id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.MemberDescription author = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::author(this), target, stream);
  }

  // repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_chain_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_content_chain(i), target, stream);
  }

  // optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::destroyer(this), target, stream);
  }

  // optional bool destroyed = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_destroyed(), target);
  }

  // optional uint64 destroy_time = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_destroy_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamMessage)
  return target;
}

size_t StreamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
  total_size += 1UL * this->_internal_content_chain_size();
  for (const auto& msg : this->content_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .bgs.protocol.MessageId id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .bgs.protocol.club.v1.MemberDescription author = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *author_);
    }

    // optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destroyer_);
    }

    // optional bool destroyed = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional uint64 destroy_time = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_destroy_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamMessage)
    MergeFrom(*source);
  }
}

void StreamMessage::MergeFrom(const StreamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_chain_.MergeFrom(from.content_chain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::bgs::protocol::MessageId::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_author()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_author());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_destroyer()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_destroyer());
    }
    if (cached_has_bits & 0x00000008u) {
      destroyed_ = from.destroyed_;
    }
    if (cached_has_bits & 0x00000010u) {
      destroy_time_ = from.destroy_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessage::CopyFrom(const StreamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(content_chain_)) return false;
  if (_internal_has_author()) {
    if (!author_->IsInitialized()) return false;
  }
  if (_internal_has_destroyer()) {
    if (!destroyer_->IsInitialized()) return false;
  }
  return true;
}

void StreamMessage::InternalSwap(StreamMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_chain_.InternalSwap(&other->content_chain_);
  swap(id_, other->id_);
  swap(author_, other->author_);
  swap(destroyer_, other->destroyer_);
  swap(destroyed_, other->destroyed_);
  swap(destroy_time_, other->destroy_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMention::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamMention_default_instance_._instance.get_mutable()->message_id_ = const_cast< ::bgs::protocol::MessageId*>(
      ::bgs::protocol::MessageId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamMention_default_instance_._instance.get_mutable()->author_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(
      ::bgs::protocol::club::v1::MemberDescription::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamMention_default_instance_._instance.get_mutable()->mention_id_ = const_cast< ::bgs::protocol::TimeSeriesId*>(
      ::bgs::protocol::TimeSeriesId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamMention_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
  ::bgs::protocol::club::v1::_StreamMention_default_instance_._instance.get_mutable()->message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(
      ::bgs::protocol::club::v1::StreamMessage::internal_default_instance());
}
class StreamMention::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMention>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::bgs::protocol::MessageId& message_id(const StreamMention* msg);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::club::v1::MemberDescription& author(const StreamMention* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::bgs::protocol::TimeSeriesId& mention_id(const StreamMention* msg);
  static void set_has_mention_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::club::v1::MemberId& member_id(const StreamMention* msg);
  static void set_has_member_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::club::v1::StreamMessage& message(const StreamMention* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::MessageId&
StreamMention::_Internal::message_id(const StreamMention* msg) {
  return *msg->message_id_;
}
const ::bgs::protocol::club::v1::MemberDescription&
StreamMention::_Internal::author(const StreamMention* msg) {
  return *msg->author_;
}
const ::bgs::protocol::TimeSeriesId&
StreamMention::_Internal::mention_id(const StreamMention* msg) {
  return *msg->mention_id_;
}
const ::bgs::protocol::club::v1::MemberId&
StreamMention::_Internal::member_id(const StreamMention* msg) {
  return *msg->member_id_;
}
const ::bgs::protocol::club::v1::StreamMessage&
StreamMention::_Internal::message(const StreamMention* msg) {
  return *msg->message_;
}
void StreamMention::clear_message_id() {
  if (message_id_ != nullptr) message_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StreamMention::clear_author() {
  if (author_ != nullptr) author_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StreamMention::clear_mention_id() {
  if (mention_id_ != nullptr) mention_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void StreamMention::clear_member_id() {
  if (member_id_ != nullptr) member_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
StreamMention::StreamMention()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMention)
}
StreamMention::StreamMention(const StreamMention& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_message_id()) {
    message_id_ = new ::bgs::protocol::MessageId(*from.message_id_);
  } else {
    message_id_ = nullptr;
  }
  if (from._internal_has_author()) {
    author_ = new ::bgs::protocol::club::v1::MemberDescription(*from.author_);
  } else {
    author_ = nullptr;
  }
  if (from._internal_has_mention_id()) {
    mention_id_ = new ::bgs::protocol::TimeSeriesId(*from.mention_id_);
  } else {
    mention_id_ = nullptr;
  }
  if (from._internal_has_member_id()) {
    member_id_ = new ::bgs::protocol::club::v1::MemberId(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::bgs::protocol::club::v1::StreamMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(destroyed_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMention)
}

void StreamMention::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destroyed_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(destroyed_));
}

StreamMention::~StreamMention() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMention)
  SharedDtor();
}

void StreamMention::SharedDtor() {
  if (this != internal_default_instance()) delete message_id_;
  if (this != internal_default_instance()) delete author_;
  if (this != internal_default_instance()) delete mention_id_;
  if (this != internal_default_instance()) delete member_id_;
  if (this != internal_default_instance()) delete message_;
}

void StreamMention::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMention& StreamMention::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMention_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamMention::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamMention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(message_id_ != nullptr);
      message_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(author_ != nullptr);
      author_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mention_id_ != nullptr);
      mention_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(member_id_ != nullptr);
      member_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(message_ != nullptr);
      message_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destroyed_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(destroyed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamMention::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.MessageId message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberDescription author = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool destroyed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_destroyed(&has_bits);
          destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.TimeSeriesId mention_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mention_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.MemberId member_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamMessage message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMention::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamMention)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.MessageId message_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.MemberDescription author = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::author(this), target, stream);
  }

  // optional bool destroyed = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_destroyed(), target);
  }

  // optional .bgs.protocol.TimeSeriesId mention_id = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mention_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::member_id(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.StreamMessage message = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamMention)
  return target;
}

size_t StreamMention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamMention)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .bgs.protocol.MessageId message_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_id_);
    }

    // optional .bgs.protocol.club.v1.MemberDescription author = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *author_);
    }

    // optional .bgs.protocol.TimeSeriesId mention_id = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mention_id_);
    }

    // optional .bgs.protocol.club.v1.MemberId member_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_id_);
    }

    // optional .bgs.protocol.club.v1.StreamMessage message = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional uint64 club_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional bool destroyed = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMention::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamMention)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMention* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMention>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamMention)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamMention)
    MergeFrom(*source);
  }
}

void StreamMention::MergeFrom(const StreamMention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamMention)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_message_id()->::bgs::protocol::MessageId::MergeFrom(from._internal_message_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_author()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from._internal_author());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mention_id()->::bgs::protocol::TimeSeriesId::MergeFrom(from._internal_mention_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_member_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_message()->::bgs::protocol::club::v1::StreamMessage::MergeFrom(from._internal_message());
    }
    if (cached_has_bits & 0x00000020u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      destroyed_ = from.destroyed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamMention::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamMention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMention::CopyFrom(const StreamMention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamMention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMention::IsInitialized() const {
  if (_internal_has_author()) {
    if (!author_->IsInitialized()) return false;
  }
  if (_internal_has_member_id()) {
    if (!member_id_->IsInitialized()) return false;
  }
  if (_internal_has_message()) {
    if (!message_->IsInitialized()) return false;
  }
  return true;
}

void StreamMention::InternalSwap(StreamMention* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_id_, other->message_id_);
  swap(author_, other->author_);
  swap(mention_id_, other->mention_id_);
  swap(member_id_, other->member_id_);
  swap(message_, other->message_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
  swap(destroyed_, other->destroyed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMention::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamView::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamView_default_instance_._instance.get_mutable()->marker_ = const_cast< ::bgs::protocol::ViewMarker*>(
      ::bgs::protocol::ViewMarker::internal_default_instance());
}
class StreamView::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamView>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::ViewMarker& marker(const StreamView* msg);
  static void set_has_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::ViewMarker&
StreamView::_Internal::marker(const StreamView* msg) {
  return *msg->marker_;
}
void StreamView::clear_marker() {
  if (marker_ != nullptr) marker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StreamView::StreamView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamView)
}
StreamView::StreamView(const StreamView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_marker()) {
    marker_ = new ::bgs::protocol::ViewMarker(*from.marker_);
  } else {
    marker_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamView)
}

void StreamView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  ::memset(&marker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&marker_)) + sizeof(stream_id_));
}

StreamView::~StreamView() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamView)
  SharedDtor();
}

void StreamView::SharedDtor() {
  if (this != internal_default_instance()) delete marker_;
}

void StreamView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamView& StreamView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamView::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(marker_ != nullptr);
    marker_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ViewMarker marker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.ViewMarker marker = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::marker(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamView)
  return target;
}

size_t StreamView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.ViewMarker marker = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *marker_);
    }

    // optional uint64 club_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamView)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamView)
    MergeFrom(*source);
  }
}

void StreamView::MergeFrom(const StreamView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_marker()->::bgs::protocol::ViewMarker::MergeFrom(from._internal_marker());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamView::CopyFrom(const StreamView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamView::IsInitialized() const {
  return true;
}

void StreamView::InternalSwap(StreamView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(marker_, other->marker_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamAdvanceViewTime::InitAsDefaultInstance() {
}
class StreamAdvanceViewTime::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamAdvanceViewTime>()._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StreamAdvanceViewTime::StreamAdvanceViewTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
}
StreamAdvanceViewTime::StreamAdvanceViewTime(const StreamAdvanceViewTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_time_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(view_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
}

void StreamAdvanceViewTime::SharedCtor() {
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_time_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(view_time_));
}

StreamAdvanceViewTime::~StreamAdvanceViewTime() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
  SharedDtor();
}

void StreamAdvanceViewTime::SharedDtor() {
}

void StreamAdvanceViewTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamAdvanceViewTime& StreamAdvanceViewTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamAdvanceViewTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamAdvanceViewTime::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_time_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(view_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamAdvanceViewTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 view_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_view_time(&has_bits);
          view_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamAdvanceViewTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stream_id(), target);
  }

  // optional uint64 view_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_view_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamAdvanceViewTime)
  return target;
}

size_t StreamAdvanceViewTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 stream_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional uint64 view_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_view_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamAdvanceViewTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAdvanceViewTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamAdvanceViewTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamAdvanceViewTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamAdvanceViewTime)
    MergeFrom(*source);
  }
}

void StreamAdvanceViewTime::MergeFrom(const StreamAdvanceViewTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_time_ = from.view_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamAdvanceViewTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAdvanceViewTime::CopyFrom(const StreamAdvanceViewTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAdvanceViewTime::IsInitialized() const {
  return true;
}

void StreamAdvanceViewTime::InternalSwap(StreamAdvanceViewTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stream_id_, other->stream_id_);
  swap(view_time_, other->view_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamAdvanceViewTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamEventTime::InitAsDefaultInstance() {
}
class StreamEventTime::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamEventTime>()._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StreamEventTime::StreamEventTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamEventTime)
}
StreamEventTime::StreamEventTime(const StreamEventTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_time_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(event_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamEventTime)
}

void StreamEventTime::SharedCtor() {
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_time_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(event_time_));
}

StreamEventTime::~StreamEventTime() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamEventTime)
  SharedDtor();
}

void StreamEventTime::SharedDtor() {
}

void StreamEventTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamEventTime& StreamEventTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamEventTime_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamEventTime::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamEventTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_time_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(event_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamEventTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 event_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_time(&has_bits);
          event_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamEventTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamEventTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stream_id(), target);
  }

  // optional uint64 event_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_event_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamEventTime)
  return target;
}

size_t StreamEventTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamEventTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 stream_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional uint64 event_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_event_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamEventTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamEventTime)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamEventTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamEventTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamEventTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamEventTime)
    MergeFrom(*source);
  }
}

void StreamEventTime::MergeFrom(const StreamEventTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamEventTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_time_ = from.event_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamEventTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamEventTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEventTime::CopyFrom(const StreamEventTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamEventTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEventTime::IsInitialized() const {
  return true;
}

void StreamEventTime::InternalSwap(StreamEventTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stream_id_, other->stream_id_);
  swap(event_time_, other->event_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamEventTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMentionView::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamMentionView_default_instance_._instance.get_mutable()->marker_ = const_cast< ::bgs::protocol::ViewMarker*>(
      ::bgs::protocol::ViewMarker::internal_default_instance());
}
class StreamMentionView::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMentionView>()._has_bits_);
  static void set_has_club_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::ViewMarker& marker(const StreamMentionView* msg);
  static void set_has_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::ViewMarker&
StreamMentionView::_Internal::marker(const StreamMentionView* msg) {
  return *msg->marker_;
}
void StreamMentionView::clear_marker() {
  if (marker_ != nullptr) marker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StreamMentionView::StreamMentionView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMentionView)
}
StreamMentionView::StreamMentionView(const StreamMentionView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_marker()) {
    marker_ = new ::bgs::protocol::ViewMarker(*from.marker_);
  } else {
    marker_ = nullptr;
  }
  ::memcpy(&club_id_, &from.club_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMentionView)
}

void StreamMentionView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMentionView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  ::memset(&marker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_id_) -
      reinterpret_cast<char*>(&marker_)) + sizeof(stream_id_));
}

StreamMentionView::~StreamMentionView() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMentionView)
  SharedDtor();
}

void StreamMentionView::SharedDtor() {
  if (this != internal_default_instance()) delete marker_;
}

void StreamMentionView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMentionView& StreamMentionView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMentionView_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamMentionView::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamMentionView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(marker_ != nullptr);
    marker_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&club_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&club_id_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamMentionView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 club_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_club_id(&has_bits);
          club_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ViewMarker marker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMentionView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamMentionView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 club_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stream_id(), target);
  }

  // optional .bgs.protocol.ViewMarker marker = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::marker(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamMentionView)
  return target;
}

size_t StreamMentionView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamMentionView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.ViewMarker marker = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *marker_);
    }

    // optional uint64 club_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_club_id());
    }

    // optional uint64 stream_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMentionView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamMentionView)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMentionView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMentionView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamMentionView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamMentionView)
    MergeFrom(*source);
  }
}

void StreamMentionView::MergeFrom(const StreamMentionView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamMentionView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_marker()->::bgs::protocol::ViewMarker::MergeFrom(from._internal_marker());
    }
    if (cached_has_bits & 0x00000002u) {
      club_id_ = from.club_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamMentionView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamMentionView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMentionView::CopyFrom(const StreamMentionView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamMentionView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMentionView::IsInitialized() const {
  return true;
}

void StreamMentionView::InternalSwap(StreamMentionView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(marker_, other->marker_);
  swap(club_id_, other->club_id_);
  swap(stream_id_, other->stream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMentionView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamStateOptions::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamStateOptions_default_instance_._instance.get_mutable()->access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(
      ::bgs::protocol::club::v1::StreamAccess::internal_default_instance());
}
class StreamStateOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamStateOptions>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subject(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::StreamAccess& access(const StreamStateOptions* msg);
  static void set_has_access(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_voice_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::club::v1::StreamAccess&
StreamStateOptions::_Internal::access(const StreamStateOptions* msg) {
  return *msg->access_;
}
void StreamStateOptions::clear_attribute() {
  attribute_.Clear();
}
StreamStateOptions::StreamStateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamStateOptions)
}
StreamStateOptions::StreamStateOptions(const StreamStateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subject()) {
    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from._internal_has_access()) {
    access_ = new ::bgs::protocol::club::v1::StreamAccess(*from.access_);
  } else {
    access_ = nullptr;
  }
  voice_level_ = from.voice_level_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamStateOptions)
}

void StreamStateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&access_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_level_) -
      reinterpret_cast<char*>(&access_)) + sizeof(voice_level_));
}

StreamStateOptions::~StreamStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamStateOptions)
  SharedDtor();
}

void StreamStateOptions::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete access_;
}

void StreamStateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStateOptions& StreamStateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStateOptions_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamStateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      subject_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(access_ != nullptr);
      access_->Clear();
    }
  }
  voice_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamStateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.v2.Attribute attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.StreamStateOptions.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.StreamStateOptions.subject");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamAccess access = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(val))) {
            _internal_set_voice_level(static_cast<::bgs::protocol::club::v1::StreamVoiceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamStateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attribute(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.StreamStateOptions.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string subject = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.StreamStateOptions.subject");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subject(), target);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::access(this), target, stream);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_voice_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamStateOptions)
  return target;
}

size_t StreamStateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamStateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string subject = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subject());
    }

    // optional .bgs.protocol.club.v1.StreamAccess access = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_);
    }

    // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_voice_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamStateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamStateOptions)
    MergeFrom(*source);
  }
}

void StreamStateOptions::MergeFrom(const StreamStateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamStateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_access()->::bgs::protocol::club::v1::StreamAccess::MergeFrom(from._internal_access());
    }
    if (cached_has_bits & 0x00000008u) {
      voice_level_ = from.voice_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamStateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStateOptions::CopyFrom(const StreamStateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamStateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateOptions::IsInitialized() const {
  return true;
}

void StreamStateOptions::InternalSwap(StreamStateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(access_, other->access_);
  swap(voice_level_, other->voice_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamStateAssignment::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamStateAssignment_default_instance_._instance.get_mutable()->access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(
      ::bgs::protocol::club::v1::StreamAccess::internal_default_instance());
}
class StreamStateAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamStateAssignment>()._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subject(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::club::v1::StreamAccess& access(const StreamStateAssignment* msg);
  static void set_has_access(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_subscription_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_voice_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::bgs::protocol::club::v1::StreamAccess&
StreamStateAssignment::_Internal::access(const StreamStateAssignment* msg) {
  return *msg->access_;
}
void StreamStateAssignment::clear_attribute() {
  attribute_.Clear();
}
StreamStateAssignment::StreamStateAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamStateAssignment)
}
StreamStateAssignment::StreamStateAssignment(const StreamStateAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subject()) {
    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from._internal_has_access()) {
    access_ = new ::bgs::protocol::club::v1::StreamAccess(*from.access_);
  } else {
    access_ = nullptr;
  }
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&voice_level_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(voice_level_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamStateAssignment)
}

void StreamStateAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&access_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_level_) -
      reinterpret_cast<char*>(&access_)) + sizeof(voice_level_));
}

StreamStateAssignment::~StreamStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamStateAssignment)
  SharedDtor();
}

void StreamStateAssignment::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete access_;
}

void StreamStateAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStateAssignment& StreamStateAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStateAssignment_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamStateAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamStateAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      subject_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(access_ != nullptr);
      access_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&voice_level_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(voice_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamStateAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.StreamStateAssignment.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.club.v1.StreamStateAssignment.subject");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamAccess access = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stream_subscription_removed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_stream_subscription_removed(&has_bits);
          stream_subscription_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(val))) {
            _internal_set_voice_level(static_cast<::bgs::protocol::club::v1::StreamVoiceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStateAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamStateAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 stream_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stream_id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.StreamStateAssignment.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string subject = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.club.v1.StreamStateAssignment.subject");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_subject(), target);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::access(this), target, stream);
  }

  // optional bool stream_subscription_removed = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_stream_subscription_removed(), target);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_voice_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamStateAssignment)
  return target;
}

size_t StreamStateAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamStateAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string subject = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subject());
    }

    // optional .bgs.protocol.club.v1.StreamAccess access = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_);
    }

    // optional uint64 stream_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_id());
    }

    // optional bool stream_subscription_removed = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_voice_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStateAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamStateAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStateAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStateAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamStateAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamStateAssignment)
    MergeFrom(*source);
  }
}

void StreamStateAssignment::MergeFrom(const StreamStateAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamStateAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_access()->::bgs::protocol::club::v1::StreamAccess::MergeFrom(from._internal_access());
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      stream_subscription_removed_ = from.stream_subscription_removed_;
    }
    if (cached_has_bits & 0x00000020u) {
      voice_level_ = from.voice_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamStateAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamStateAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStateAssignment::CopyFrom(const StreamStateAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamStateAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateAssignment::IsInitialized() const {
  return true;
}

void StreamStateAssignment::InternalSwap(StreamStateAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(access_, other->access_);
  swap(stream_id_, other->stream_id_);
  swap(stream_subscription_removed_, other->stream_subscription_removed_);
  swap(voice_level_, other->voice_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStateAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamTypingIndicator::InitAsDefaultInstance() {
  ::bgs::protocol::club::v1::_StreamTypingIndicator_default_instance_._instance.get_mutable()->author_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(
      ::bgs::protocol::club::v1::MemberId::internal_default_instance());
}
class StreamTypingIndicator::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamTypingIndicator>()._has_bits_);
  static const ::bgs::protocol::club::v1::MemberId& author_id(const StreamTypingIndicator* msg);
  static void set_has_author_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::club::v1::MemberId&
StreamTypingIndicator::_Internal::author_id(const StreamTypingIndicator* msg) {
  return *msg->author_id_;
}
void StreamTypingIndicator::clear_author_id() {
  if (author_id_ != nullptr) author_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StreamTypingIndicator::StreamTypingIndicator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamTypingIndicator)
}
StreamTypingIndicator::StreamTypingIndicator(const StreamTypingIndicator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_author_id()) {
    author_id_ = new ::bgs::protocol::club::v1::MemberId(*from.author_id_);
  } else {
    author_id_ = nullptr;
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&indicator_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(indicator_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamTypingIndicator)
}

void StreamTypingIndicator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamTypingIndicator_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  ::memset(&author_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indicator_) -
      reinterpret_cast<char*>(&author_id_)) + sizeof(indicator_));
}

StreamTypingIndicator::~StreamTypingIndicator() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamTypingIndicator)
  SharedDtor();
}

void StreamTypingIndicator::SharedDtor() {
  if (this != internal_default_instance()) delete author_id_;
}

void StreamTypingIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamTypingIndicator& StreamTypingIndicator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamTypingIndicator_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.base);
  return *internal_default_instance();
}


void StreamTypingIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.club.v1.StreamTypingIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(author_id_ != nullptr);
    author_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&epoch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&indicator_) -
        reinterpret_cast<char*>(&epoch_)) + sizeof(indicator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamTypingIndicator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.club.v1.MemberId author_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_author_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.TypingIndicator indicator = 2 [default = TYPING_START];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::TypingIndicator_IsValid(val))) {
            _internal_set_indicator(static_cast<::bgs::protocol::TypingIndicator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_epoch(&has_bits);
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamTypingIndicator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamTypingIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.club.v1.MemberId author_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::author_id(this), target, stream);
  }

  // optional .bgs.protocol.TypingIndicator indicator = 2 [default = TYPING_START];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_indicator(), target);
  }

  // optional uint64 epoch = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamTypingIndicator)
  return target;
}

size_t StreamTypingIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.club.v1.StreamTypingIndicator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.club.v1.MemberId author_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *author_id_);
    }

    // optional uint64 epoch = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_epoch());
    }

    // optional .bgs.protocol.TypingIndicator indicator = 2 [default = TYPING_START];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_indicator());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamTypingIndicator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.club.v1.StreamTypingIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamTypingIndicator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamTypingIndicator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.club.v1.StreamTypingIndicator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.club.v1.StreamTypingIndicator)
    MergeFrom(*source);
  }
}

void StreamTypingIndicator::MergeFrom(const StreamTypingIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.club.v1.StreamTypingIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_author_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from._internal_author_id());
    }
    if (cached_has_bits & 0x00000002u) {
      epoch_ = from.epoch_;
    }
    if (cached_has_bits & 0x00000004u) {
      indicator_ = from.indicator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamTypingIndicator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.club.v1.StreamTypingIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamTypingIndicator::CopyFrom(const StreamTypingIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.club.v1.StreamTypingIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTypingIndicator::IsInitialized() const {
  if (_internal_has_author_id()) {
    if (!author_id_->IsInitialized()) return false;
  }
  return true;
}

void StreamTypingIndicator::InternalSwap(StreamTypingIndicator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(author_id_, other->author_id_);
  swap(epoch_, other->epoch_);
  swap(indicator_, other->indicator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamTypingIndicator::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamPosition* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamPosition >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamAccess* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamAccess >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateStreamOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateStreamOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateStreamOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::Stream* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::Stream >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::MentionContent* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::MentionContent >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::MentionContent >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::CreateMessageOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::CreateMessageOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::CreateMessageOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ClubStreamMessageContainer* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ClubStreamMessageContainer >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ClubStreamMessageContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::ContentChain* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::ContentChain >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::ContentChain >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamMessage* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamMessage >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamMention* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamMention >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamMention >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamView* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamView >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamView >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamAdvanceViewTime* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamAdvanceViewTime >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamAdvanceViewTime >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamEventTime* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamEventTime >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamEventTime >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamMentionView* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamMentionView >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamMentionView >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamStateOptions* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamStateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamStateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamStateAssignment* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamStateAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamStateAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::club::v1::StreamTypingIndicator* Arena::CreateMaybeMessage< ::bgs::protocol::club::v1::StreamTypingIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::club::v1::StreamTypingIndicator >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
