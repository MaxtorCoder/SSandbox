// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/club_stream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/club_enum.pb.h"
#include "bgs/low/pb/client/club_member.pb.h"
#include "bgs/low/pb/client/api/client/v2/attribute_types.pb.h"
#include "bgs/low/pb/client/embed_types.pb.h"
#include "bgs/low/pb/client/event_view_types.pb.h"
#include "bgs/low/pb/client/message_types.pb.h"
#include "bgs/low/pb/client/ets_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
class ClubStreamMessageContainer;
class ClubStreamMessageContainerDefaultTypeInternal;
extern ClubStreamMessageContainerDefaultTypeInternal _ClubStreamMessageContainer_default_instance_;
class ContentChain;
class ContentChainDefaultTypeInternal;
extern ContentChainDefaultTypeInternal _ContentChain_default_instance_;
class CreateMessageOptions;
class CreateMessageOptionsDefaultTypeInternal;
extern CreateMessageOptionsDefaultTypeInternal _CreateMessageOptions_default_instance_;
class CreateStreamOptions;
class CreateStreamOptionsDefaultTypeInternal;
extern CreateStreamOptionsDefaultTypeInternal _CreateStreamOptions_default_instance_;
class MentionContent;
class MentionContentDefaultTypeInternal;
extern MentionContentDefaultTypeInternal _MentionContent_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamAccess;
class StreamAccessDefaultTypeInternal;
extern StreamAccessDefaultTypeInternal _StreamAccess_default_instance_;
class StreamAdvanceViewTime;
class StreamAdvanceViewTimeDefaultTypeInternal;
extern StreamAdvanceViewTimeDefaultTypeInternal _StreamAdvanceViewTime_default_instance_;
class StreamEventTime;
class StreamEventTimeDefaultTypeInternal;
extern StreamEventTimeDefaultTypeInternal _StreamEventTime_default_instance_;
class StreamMention;
class StreamMentionDefaultTypeInternal;
extern StreamMentionDefaultTypeInternal _StreamMention_default_instance_;
class StreamMentionView;
class StreamMentionViewDefaultTypeInternal;
extern StreamMentionViewDefaultTypeInternal _StreamMentionView_default_instance_;
class StreamMessage;
class StreamMessageDefaultTypeInternal;
extern StreamMessageDefaultTypeInternal _StreamMessage_default_instance_;
class StreamPosition;
class StreamPositionDefaultTypeInternal;
extern StreamPositionDefaultTypeInternal _StreamPosition_default_instance_;
class StreamStateAssignment;
class StreamStateAssignmentDefaultTypeInternal;
extern StreamStateAssignmentDefaultTypeInternal _StreamStateAssignment_default_instance_;
class StreamStateOptions;
class StreamStateOptionsDefaultTypeInternal;
extern StreamStateOptionsDefaultTypeInternal _StreamStateOptions_default_instance_;
class StreamTypingIndicator;
class StreamTypingIndicatorDefaultTypeInternal;
extern StreamTypingIndicatorDefaultTypeInternal _StreamTypingIndicator_default_instance_;
class StreamView;
class StreamViewDefaultTypeInternal;
extern StreamViewDefaultTypeInternal _StreamView_default_instance_;
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::club::v1::ClubStreamMessageContainer* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ClubStreamMessageContainer>(Arena*);
template<> ::bgs::protocol::club::v1::ContentChain* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::ContentChain>(Arena*);
template<> ::bgs::protocol::club::v1::CreateMessageOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateMessageOptions>(Arena*);
template<> ::bgs::protocol::club::v1::CreateStreamOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::CreateStreamOptions>(Arena*);
template<> ::bgs::protocol::club::v1::MentionContent* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::MentionContent>(Arena*);
template<> ::bgs::protocol::club::v1::Stream* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::Stream>(Arena*);
template<> ::bgs::protocol::club::v1::StreamAccess* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamAccess>(Arena*);
template<> ::bgs::protocol::club::v1::StreamAdvanceViewTime* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamAdvanceViewTime>(Arena*);
template<> ::bgs::protocol::club::v1::StreamEventTime* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamEventTime>(Arena*);
template<> ::bgs::protocol::club::v1::StreamMention* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamMention>(Arena*);
template<> ::bgs::protocol::club::v1::StreamMentionView* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamMentionView>(Arena*);
template<> ::bgs::protocol::club::v1::StreamMessage* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessage>(Arena*);
template<> ::bgs::protocol::club::v1::StreamPosition* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamPosition>(Arena*);
template<> ::bgs::protocol::club::v1::StreamStateAssignment* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamStateAssignment>(Arena*);
template<> ::bgs::protocol::club::v1::StreamStateOptions* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamStateOptions>(Arena*);
template<> ::bgs::protocol::club::v1::StreamTypingIndicator* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamTypingIndicator>(Arena*);
template<> ::bgs::protocol::club::v1::StreamView* Arena::CreateMaybeMessage<::bgs::protocol::club::v1::StreamView>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// ===================================================================

class StreamPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamPosition) */ {
 public:
  StreamPosition();
  virtual ~StreamPosition();

  StreamPosition(const StreamPosition& from);
  StreamPosition(StreamPosition&& from) noexcept
    : StreamPosition() {
    *this = ::std::move(from);
  }

  inline StreamPosition& operator=(const StreamPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPosition& operator=(StreamPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamPosition* internal_default_instance() {
    return reinterpret_cast<const StreamPosition*>(
               &_StreamPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamPosition& a, StreamPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamPosition* New() const final {
    return CreateMaybeMessage<StreamPosition>(nullptr);
  }

  StreamPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamPosition& from);
  void MergeFrom(const StreamPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
  };
  // repeated uint64 stream_id = 1 [packed = true];
  int stream_id_size() const;
  private:
  int _internal_stream_id_size() const;
  public:
  void clear_stream_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_stream_id() const;
  void _internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_stream_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id(int index) const;
  void set_stream_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      stream_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_stream_id();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > stream_id_;
  mutable std::atomic<int> _stream_id_cached_byte_size_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamAccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamAccess) */ {
 public:
  StreamAccess();
  virtual ~StreamAccess();

  StreamAccess(const StreamAccess& from);
  StreamAccess(StreamAccess&& from) noexcept
    : StreamAccess() {
    *this = ::std::move(from);
  }

  inline StreamAccess& operator=(const StreamAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAccess& operator=(StreamAccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamAccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamAccess* internal_default_instance() {
    return reinterpret_cast<const StreamAccess*>(
               &_StreamAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamAccess& a, StreamAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamAccess* New() const final {
    return CreateMaybeMessage<StreamAccess>(nullptr);
  }

  StreamAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamAccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamAccess& from);
  void MergeFrom(const StreamAccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamAccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // repeated uint32 role = 1 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamAccess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class CreateStreamOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateStreamOptions) */ {
 public:
  CreateStreamOptions();
  virtual ~CreateStreamOptions();

  CreateStreamOptions(const CreateStreamOptions& from);
  CreateStreamOptions(CreateStreamOptions&& from) noexcept
    : CreateStreamOptions() {
    *this = ::std::move(from);
  }

  inline CreateStreamOptions& operator=(const CreateStreamOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateStreamOptions& operator=(CreateStreamOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateStreamOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateStreamOptions* internal_default_instance() {
    return reinterpret_cast<const CreateStreamOptions*>(
               &_CreateStreamOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateStreamOptions& a, CreateStreamOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateStreamOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateStreamOptions* New() const final {
    return CreateMaybeMessage<CreateStreamOptions>(nullptr);
  }

  CreateStreamOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateStreamOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateStreamOptions& from);
  void MergeFrom(const CreateStreamOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStreamOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateStreamOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kNameFieldNumber = 2,
    kSubjectFieldNumber = 3,
    kAccessFieldNumber = 4,
    kVoiceLevelFieldNumber = 5,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string subject = 3;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // optional .bgs.protocol.club.v1.StreamAccess access = 4;
  bool has_access() const;
  private:
  bool _internal_has_access() const;
  public:
  void clear_access();
  const ::bgs::protocol::club::v1::StreamAccess& access() const;
  ::bgs::protocol::club::v1::StreamAccess* release_access();
  ::bgs::protocol::club::v1::StreamAccess* mutable_access();
  void set_allocated_access(::bgs::protocol::club::v1::StreamAccess* access);
  private:
  const ::bgs::protocol::club::v1::StreamAccess& _internal_access() const;
  ::bgs::protocol::club::v1::StreamAccess* _internal_mutable_access();
  public:

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
  bool has_voice_level() const;
  private:
  bool _internal_has_voice_level() const;
  public:
  void clear_voice_level();
  ::bgs::protocol::club::v1::StreamVoiceLevel voice_level() const;
  void set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value);
  private:
  ::bgs::protocol::club::v1::StreamVoiceLevel _internal_voice_level() const;
  void _internal_set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateStreamOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::bgs::protocol::club::v1::StreamAccess* access_;
  int voice_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class Stream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.Stream) */ {
 public:
  Stream();
  virtual ~Stream();

  Stream(const Stream& from);
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stream& operator=(Stream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(Stream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stream* New() const final {
    return CreateMaybeMessage<Stream>(nullptr);
  }

  Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.Stream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 3,
    kNameFieldNumber = 4,
    kSubjectFieldNumber = 5,
    kAccessFieldNumber = 6,
    kClubIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kCreationTimeFieldNumber = 8,
    kVoiceLevelFieldNumber = 7,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string subject = 5;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // optional .bgs.protocol.club.v1.StreamAccess access = 6;
  bool has_access() const;
  private:
  bool _internal_has_access() const;
  public:
  void clear_access();
  const ::bgs::protocol::club::v1::StreamAccess& access() const;
  ::bgs::protocol::club::v1::StreamAccess* release_access();
  ::bgs::protocol::club::v1::StreamAccess* mutable_access();
  void set_allocated_access(::bgs::protocol::club::v1::StreamAccess* access);
  private:
  const ::bgs::protocol::club::v1::StreamAccess& _internal_access() const;
  ::bgs::protocol::club::v1::StreamAccess* _internal_mutable_access();
  public:

  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 creation_time = 8;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
  bool has_voice_level() const;
  private:
  bool _internal_has_voice_level() const;
  public:
  void clear_voice_level();
  ::bgs::protocol::club::v1::StreamVoiceLevel voice_level() const;
  void set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value);
  private:
  ::bgs::protocol::club::v1::StreamVoiceLevel _internal_voice_level() const;
  void _internal_set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.Stream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::bgs::protocol::club::v1::StreamAccess* access_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  int voice_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class MentionContent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.MentionContent) */ {
 public:
  MentionContent();
  virtual ~MentionContent();

  MentionContent(const MentionContent& from);
  MentionContent(MentionContent&& from) noexcept
    : MentionContent() {
    *this = ::std::move(from);
  }

  inline MentionContent& operator=(const MentionContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MentionContent& operator=(MentionContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MentionContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MentionContent* internal_default_instance() {
    return reinterpret_cast<const MentionContent*>(
               &_MentionContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MentionContent& a, MentionContent& b) {
    a.Swap(&b);
  }
  inline void Swap(MentionContent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MentionContent* New() const final {
    return CreateMaybeMessage<MentionContent>(nullptr);
  }

  MentionContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MentionContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MentionContent& from);
  void MergeFrom(const MentionContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MentionContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.MentionContent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 3,
    kRoleFieldNumber = 4,
    kAllFieldNumber = 1,
    kHereFieldNumber = 2,
  };
  // repeated .bgs.protocol.club.v1.MemberId member_id = 3;
  int member_id_size() const;
  private:
  int _internal_member_id_size() const;
  public:
  void clear_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberId >*
      mutable_member_id();
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id(int index) const;
  ::bgs::protocol::club::v1::MemberId* _internal_add_member_id();
  public:
  const ::bgs::protocol::club::v1::MemberId& member_id(int index) const;
  ::bgs::protocol::club::v1::MemberId* add_member_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberId >&
      member_id() const;

  // repeated uint32 role = 4 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // optional bool all = 1;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // optional bool here = 2;
  bool has_here() const;
  private:
  bool _internal_has_here() const;
  public:
  void clear_here();
  bool here() const;
  void set_here(bool value);
  private:
  bool _internal_here() const;
  void _internal_set_here(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.MentionContent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberId > member_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  bool all_;
  bool here_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class CreateMessageOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.CreateMessageOptions) */ {
 public:
  CreateMessageOptions();
  virtual ~CreateMessageOptions();

  CreateMessageOptions(const CreateMessageOptions& from);
  CreateMessageOptions(CreateMessageOptions&& from) noexcept
    : CreateMessageOptions() {
    *this = ::std::move(from);
  }

  inline CreateMessageOptions& operator=(const CreateMessageOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMessageOptions& operator=(CreateMessageOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMessageOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMessageOptions* internal_default_instance() {
    return reinterpret_cast<const CreateMessageOptions*>(
               &_CreateMessageOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateMessageOptions& a, CreateMessageOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMessageOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMessageOptions* New() const final {
    return CreateMaybeMessage<CreateMessageOptions>(nullptr);
  }

  CreateMessageOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMessageOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMessageOptions& from);
  void MergeFrom(const CreateMessageOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMessageOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.CreateMessageOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kMentionFieldNumber = 3,
  };
  // optional string content = 2;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional .bgs.protocol.club.v1.MentionContent mention = 3;
  bool has_mention() const;
  private:
  bool _internal_has_mention() const;
  public:
  void clear_mention();
  const ::bgs::protocol::club::v1::MentionContent& mention() const;
  ::bgs::protocol::club::v1::MentionContent* release_mention();
  ::bgs::protocol::club::v1::MentionContent* mutable_mention();
  void set_allocated_mention(::bgs::protocol::club::v1::MentionContent* mention);
  private:
  const ::bgs::protocol::club::v1::MentionContent& _internal_mention() const;
  ::bgs::protocol::club::v1::MentionContent* _internal_mutable_mention();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.CreateMessageOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::bgs::protocol::club::v1::MentionContent* mention_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class ClubStreamMessageContainer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ClubStreamMessageContainer) */ {
 public:
  ClubStreamMessageContainer();
  virtual ~ClubStreamMessageContainer();

  ClubStreamMessageContainer(const ClubStreamMessageContainer& from);
  ClubStreamMessageContainer(ClubStreamMessageContainer&& from) noexcept
    : ClubStreamMessageContainer() {
    *this = ::std::move(from);
  }

  inline ClubStreamMessageContainer& operator=(const ClubStreamMessageContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClubStreamMessageContainer& operator=(ClubStreamMessageContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClubStreamMessageContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClubStreamMessageContainer* internal_default_instance() {
    return reinterpret_cast<const ClubStreamMessageContainer*>(
               &_ClubStreamMessageContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClubStreamMessageContainer& a, ClubStreamMessageContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(ClubStreamMessageContainer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClubStreamMessageContainer* New() const final {
    return CreateMaybeMessage<ClubStreamMessageContainer>(nullptr);
  }

  ClubStreamMessageContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClubStreamMessageContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClubStreamMessageContainer& from);
  void MergeFrom(const ClubStreamMessageContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClubStreamMessageContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ClubStreamMessageContainer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage >*
      mutable_message();
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message(int index) const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_add_message();
  public:
  const ::bgs::protocol::club::v1::StreamMessage& message(int index) const;
  ::bgs::protocol::club::v1::StreamMessage* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage >&
      message() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubStreamMessageContainer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage > message_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class ContentChain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.ContentChain) */ {
 public:
  ContentChain();
  virtual ~ContentChain();

  ContentChain(const ContentChain& from);
  ContentChain(ContentChain&& from) noexcept
    : ContentChain() {
    *this = ::std::move(from);
  }

  inline ContentChain& operator=(const ContentChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentChain& operator=(ContentChain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContentChain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentChain* internal_default_instance() {
    return reinterpret_cast<const ContentChain*>(
               &_ContentChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ContentChain& a, ContentChain& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentChain* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentChain* New() const final {
    return CreateMaybeMessage<ContentChain>(nullptr);
  }

  ContentChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentChain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContentChain& from);
  void MergeFrom(const ContentChain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentChain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.ContentChain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbedFieldNumber = 6,
    kContentFieldNumber = 5,
    kMentionFieldNumber = 7,
    kEditTimeFieldNumber = 8,
  };
  // repeated .bgs.protocol.EmbedInfo embed = 6;
  int embed_size() const;
  private:
  int _internal_embed_size() const;
  public:
  void clear_embed();
  ::bgs::protocol::EmbedInfo* mutable_embed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::EmbedInfo >*
      mutable_embed();
  private:
  const ::bgs::protocol::EmbedInfo& _internal_embed(int index) const;
  ::bgs::protocol::EmbedInfo* _internal_add_embed();
  public:
  const ::bgs::protocol::EmbedInfo& embed(int index) const;
  ::bgs::protocol::EmbedInfo* add_embed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::EmbedInfo >&
      embed() const;

  // optional string content = 5;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional .bgs.protocol.club.v1.MentionContent mention = 7;
  bool has_mention() const;
  private:
  bool _internal_has_mention() const;
  public:
  void clear_mention();
  const ::bgs::protocol::club::v1::MentionContent& mention() const;
  ::bgs::protocol::club::v1::MentionContent* release_mention();
  ::bgs::protocol::club::v1::MentionContent* mutable_mention();
  void set_allocated_mention(::bgs::protocol::club::v1::MentionContent* mention);
  private:
  const ::bgs::protocol::club::v1::MentionContent& _internal_mention() const;
  ::bgs::protocol::club::v1::MentionContent* _internal_mutable_mention();
  public:

  // optional uint64 edit_time = 8;
  bool has_edit_time() const;
  private:
  bool _internal_has_edit_time() const;
  public:
  void clear_edit_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 edit_time() const;
  void set_edit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_edit_time() const;
  void _internal_set_edit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ContentChain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::EmbedInfo > embed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::bgs::protocol::club::v1::MentionContent* mention_;
  ::PROTOBUF_NAMESPACE_ID::uint64 edit_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamMessage) */ {
 public:
  StreamMessage();
  virtual ~StreamMessage();

  StreamMessage(const StreamMessage& from);
  StreamMessage(StreamMessage&& from) noexcept
    : StreamMessage() {
    *this = ::std::move(from);
  }

  inline StreamMessage& operator=(const StreamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMessage& operator=(StreamMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMessage* internal_default_instance() {
    return reinterpret_cast<const StreamMessage*>(
               &_StreamMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StreamMessage& a, StreamMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMessage* New() const final {
    return CreateMaybeMessage<StreamMessage>(nullptr);
  }

  StreamMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMessage& from);
  void MergeFrom(const StreamMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentChainFieldNumber = 6,
    kIdFieldNumber = 3,
    kAuthorFieldNumber = 4,
    kDestroyerFieldNumber = 15,
    kDestroyedFieldNumber = 16,
    kDestroyTimeFieldNumber = 17,
  };
  // repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
  int content_chain_size() const;
  private:
  int _internal_content_chain_size() const;
  public:
  void clear_content_chain();
  ::bgs::protocol::club::v1::ContentChain* mutable_content_chain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ContentChain >*
      mutable_content_chain();
  private:
  const ::bgs::protocol::club::v1::ContentChain& _internal_content_chain(int index) const;
  ::bgs::protocol::club::v1::ContentChain* _internal_add_content_chain();
  public:
  const ::bgs::protocol::club::v1::ContentChain& content_chain(int index) const;
  ::bgs::protocol::club::v1::ContentChain* add_content_chain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ContentChain >&
      content_chain() const;

  // optional .bgs.protocol.MessageId id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bgs::protocol::MessageId& id() const;
  ::bgs::protocol::MessageId* release_id();
  ::bgs::protocol::MessageId* mutable_id();
  void set_allocated_id(::bgs::protocol::MessageId* id);
  private:
  const ::bgs::protocol::MessageId& _internal_id() const;
  ::bgs::protocol::MessageId* _internal_mutable_id();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription author = 4;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::bgs::protocol::club::v1::MemberDescription& author() const;
  ::bgs::protocol::club::v1::MemberDescription* release_author();
  ::bgs::protocol::club::v1::MemberDescription* mutable_author();
  void set_allocated_author(::bgs::protocol::club::v1::MemberDescription* author);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_author() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_author();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
  bool has_destroyer() const;
  private:
  bool _internal_has_destroyer() const;
  public:
  void clear_destroyer();
  const ::bgs::protocol::club::v1::MemberDescription& destroyer() const;
  ::bgs::protocol::club::v1::MemberDescription* release_destroyer();
  ::bgs::protocol::club::v1::MemberDescription* mutable_destroyer();
  void set_allocated_destroyer(::bgs::protocol::club::v1::MemberDescription* destroyer);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_destroyer() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_destroyer();
  public:

  // optional bool destroyed = 16;
  bool has_destroyed() const;
  private:
  bool _internal_has_destroyed() const;
  public:
  void clear_destroyed();
  bool destroyed() const;
  void set_destroyed(bool value);
  private:
  bool _internal_destroyed() const;
  void _internal_set_destroyed(bool value);
  public:

  // optional uint64 destroy_time = 17;
  bool has_destroy_time() const;
  private:
  bool _internal_has_destroy_time() const;
  public:
  void clear_destroy_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 destroy_time() const;
  void set_destroy_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_destroy_time() const;
  void _internal_set_destroy_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ContentChain > content_chain_;
  ::bgs::protocol::MessageId* id_;
  ::bgs::protocol::club::v1::MemberDescription* author_;
  ::bgs::protocol::club::v1::MemberDescription* destroyer_;
  bool destroyed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 destroy_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamMention :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamMention) */ {
 public:
  StreamMention();
  virtual ~StreamMention();

  StreamMention(const StreamMention& from);
  StreamMention(StreamMention&& from) noexcept
    : StreamMention() {
    *this = ::std::move(from);
  }

  inline StreamMention& operator=(const StreamMention& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMention& operator=(StreamMention&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMention& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMention* internal_default_instance() {
    return reinterpret_cast<const StreamMention*>(
               &_StreamMention_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StreamMention& a, StreamMention& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMention* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMention* New() const final {
    return CreateMaybeMessage<StreamMention>(nullptr);
  }

  StreamMention* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMention>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMention& from);
  void MergeFrom(const StreamMention& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMention* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamMention";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 3,
    kAuthorFieldNumber = 4,
    kMentionIdFieldNumber = 6,
    kMemberIdFieldNumber = 7,
    kMessageFieldNumber = 8,
    kClubIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
    kDestroyedFieldNumber = 5,
  };
  // optional .bgs.protocol.MessageId message_id = 3;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const ::bgs::protocol::MessageId& message_id() const;
  ::bgs::protocol::MessageId* release_message_id();
  ::bgs::protocol::MessageId* mutable_message_id();
  void set_allocated_message_id(::bgs::protocol::MessageId* message_id);
  private:
  const ::bgs::protocol::MessageId& _internal_message_id() const;
  ::bgs::protocol::MessageId* _internal_mutable_message_id();
  public:

  // optional .bgs.protocol.club.v1.MemberDescription author = 4;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::bgs::protocol::club::v1::MemberDescription& author() const;
  ::bgs::protocol::club::v1::MemberDescription* release_author();
  ::bgs::protocol::club::v1::MemberDescription* mutable_author();
  void set_allocated_author(::bgs::protocol::club::v1::MemberDescription* author);
  private:
  const ::bgs::protocol::club::v1::MemberDescription& _internal_author() const;
  ::bgs::protocol::club::v1::MemberDescription* _internal_mutable_author();
  public:

  // optional .bgs.protocol.TimeSeriesId mention_id = 6;
  bool has_mention_id() const;
  private:
  bool _internal_has_mention_id() const;
  public:
  void clear_mention_id();
  const ::bgs::protocol::TimeSeriesId& mention_id() const;
  ::bgs::protocol::TimeSeriesId* release_mention_id();
  ::bgs::protocol::TimeSeriesId* mutable_mention_id();
  void set_allocated_mention_id(::bgs::protocol::TimeSeriesId* mention_id);
  private:
  const ::bgs::protocol::TimeSeriesId& _internal_mention_id() const;
  ::bgs::protocol::TimeSeriesId* _internal_mutable_mention_id();
  public:

  // optional .bgs.protocol.club.v1.MemberId member_id = 7;
  bool has_member_id() const;
  private:
  bool _internal_has_member_id() const;
  public:
  void clear_member_id();
  const ::bgs::protocol::club::v1::MemberId& member_id() const;
  ::bgs::protocol::club::v1::MemberId* release_member_id();
  ::bgs::protocol::club::v1::MemberId* mutable_member_id();
  void set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_member_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_member_id();
  public:

  // optional .bgs.protocol.club.v1.StreamMessage message = 8;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::bgs::protocol::club::v1::StreamMessage& message() const;
  ::bgs::protocol::club::v1::StreamMessage* release_message();
  ::bgs::protocol::club::v1::StreamMessage* mutable_message();
  void set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message);
  private:
  const ::bgs::protocol::club::v1::StreamMessage& _internal_message() const;
  ::bgs::protocol::club::v1::StreamMessage* _internal_mutable_message();
  public:

  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 2;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool destroyed = 5;
  bool has_destroyed() const;
  private:
  bool _internal_has_destroyed() const;
  public:
  void clear_destroyed();
  bool destroyed() const;
  void set_destroyed(bool value);
  private:
  bool _internal_destroyed() const;
  void _internal_set_destroyed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamMention)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::MessageId* message_id_;
  ::bgs::protocol::club::v1::MemberDescription* author_;
  ::bgs::protocol::TimeSeriesId* mention_id_;
  ::bgs::protocol::club::v1::MemberId* member_id_;
  ::bgs::protocol::club::v1::StreamMessage* message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  bool destroyed_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamView) */ {
 public:
  StreamView();
  virtual ~StreamView();

  StreamView(const StreamView& from);
  StreamView(StreamView&& from) noexcept
    : StreamView() {
    *this = ::std::move(from);
  }

  inline StreamView& operator=(const StreamView& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamView& operator=(StreamView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamView* internal_default_instance() {
    return reinterpret_cast<const StreamView*>(
               &_StreamView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamView& a, StreamView& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamView* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamView* New() const final {
    return CreateMaybeMessage<StreamView>(nullptr);
  }

  StreamView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamView& from);
  void MergeFrom(const StreamView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkerFieldNumber = 3,
    kClubIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
  };
  // optional .bgs.protocol.ViewMarker marker = 3;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  const ::bgs::protocol::ViewMarker& marker() const;
  ::bgs::protocol::ViewMarker* release_marker();
  ::bgs::protocol::ViewMarker* mutable_marker();
  void set_allocated_marker(::bgs::protocol::ViewMarker* marker);
  private:
  const ::bgs::protocol::ViewMarker& _internal_marker() const;
  ::bgs::protocol::ViewMarker* _internal_mutable_marker();
  public:

  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 2;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamView)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::ViewMarker* marker_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamAdvanceViewTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamAdvanceViewTime) */ {
 public:
  StreamAdvanceViewTime();
  virtual ~StreamAdvanceViewTime();

  StreamAdvanceViewTime(const StreamAdvanceViewTime& from);
  StreamAdvanceViewTime(StreamAdvanceViewTime&& from) noexcept
    : StreamAdvanceViewTime() {
    *this = ::std::move(from);
  }

  inline StreamAdvanceViewTime& operator=(const StreamAdvanceViewTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAdvanceViewTime& operator=(StreamAdvanceViewTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamAdvanceViewTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamAdvanceViewTime* internal_default_instance() {
    return reinterpret_cast<const StreamAdvanceViewTime*>(
               &_StreamAdvanceViewTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreamAdvanceViewTime& a, StreamAdvanceViewTime& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAdvanceViewTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamAdvanceViewTime* New() const final {
    return CreateMaybeMessage<StreamAdvanceViewTime>(nullptr);
  }

  StreamAdvanceViewTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamAdvanceViewTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamAdvanceViewTime& from);
  void MergeFrom(const StreamAdvanceViewTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAdvanceViewTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamAdvanceViewTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kViewTimeFieldNumber = 2,
  };
  // optional uint64 stream_id = 1;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 view_time = 2;
  bool has_view_time() const;
  private:
  bool _internal_has_view_time() const;
  public:
  void clear_view_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 view_time() const;
  void set_view_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view_time() const;
  void _internal_set_view_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamAdvanceViewTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamEventTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamEventTime) */ {
 public:
  StreamEventTime();
  virtual ~StreamEventTime();

  StreamEventTime(const StreamEventTime& from);
  StreamEventTime(StreamEventTime&& from) noexcept
    : StreamEventTime() {
    *this = ::std::move(from);
  }

  inline StreamEventTime& operator=(const StreamEventTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventTime& operator=(StreamEventTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamEventTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamEventTime* internal_default_instance() {
    return reinterpret_cast<const StreamEventTime*>(
               &_StreamEventTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StreamEventTime& a, StreamEventTime& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamEventTime* New() const final {
    return CreateMaybeMessage<StreamEventTime>(nullptr);
  }

  StreamEventTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamEventTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamEventTime& from);
  void MergeFrom(const StreamEventTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamEventTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kEventTimeFieldNumber = 2,
  };
  // optional uint64 stream_id = 1;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 event_time = 2;
  bool has_event_time() const;
  private:
  bool _internal_has_event_time() const;
  public:
  void clear_event_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 event_time() const;
  void set_event_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_event_time() const;
  void _internal_set_event_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamEventTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 event_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamMentionView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamMentionView) */ {
 public:
  StreamMentionView();
  virtual ~StreamMentionView();

  StreamMentionView(const StreamMentionView& from);
  StreamMentionView(StreamMentionView&& from) noexcept
    : StreamMentionView() {
    *this = ::std::move(from);
  }

  inline StreamMentionView& operator=(const StreamMentionView& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMentionView& operator=(StreamMentionView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamMentionView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMentionView* internal_default_instance() {
    return reinterpret_cast<const StreamMentionView*>(
               &_StreamMentionView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StreamMentionView& a, StreamMentionView& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMentionView* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMentionView* New() const final {
    return CreateMaybeMessage<StreamMentionView>(nullptr);
  }

  StreamMentionView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMentionView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamMentionView& from);
  void MergeFrom(const StreamMentionView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMentionView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamMentionView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkerFieldNumber = 3,
    kClubIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
  };
  // optional .bgs.protocol.ViewMarker marker = 3;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  const ::bgs::protocol::ViewMarker& marker() const;
  ::bgs::protocol::ViewMarker* release_marker();
  ::bgs::protocol::ViewMarker* mutable_marker();
  void set_allocated_marker(::bgs::protocol::ViewMarker* marker);
  private:
  const ::bgs::protocol::ViewMarker& _internal_marker() const;
  ::bgs::protocol::ViewMarker* _internal_mutable_marker();
  public:

  // optional uint64 club_id = 1;
  bool has_club_id() const;
  private:
  bool _internal_has_club_id() const;
  public:
  void clear_club_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id() const;
  void set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_club_id() const;
  void _internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 stream_id = 2;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamMentionView)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::ViewMarker* marker_;
  ::PROTOBUF_NAMESPACE_ID::uint64 club_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamStateOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamStateOptions) */ {
 public:
  StreamStateOptions();
  virtual ~StreamStateOptions();

  StreamStateOptions(const StreamStateOptions& from);
  StreamStateOptions(StreamStateOptions&& from) noexcept
    : StreamStateOptions() {
    *this = ::std::move(from);
  }

  inline StreamStateOptions& operator=(const StreamStateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStateOptions& operator=(StreamStateOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStateOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamStateOptions* internal_default_instance() {
    return reinterpret_cast<const StreamStateOptions*>(
               &_StreamStateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StreamStateOptions& a, StreamStateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStateOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStateOptions* New() const final {
    return CreateMaybeMessage<StreamStateOptions>(nullptr);
  }

  StreamStateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStateOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStateOptions& from);
  void MergeFrom(const StreamStateOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStateOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamStateOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kNameFieldNumber = 2,
    kSubjectFieldNumber = 3,
    kAccessFieldNumber = 4,
    kVoiceLevelFieldNumber = 5,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string subject = 3;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // optional .bgs.protocol.club.v1.StreamAccess access = 4;
  bool has_access() const;
  private:
  bool _internal_has_access() const;
  public:
  void clear_access();
  const ::bgs::protocol::club::v1::StreamAccess& access() const;
  ::bgs::protocol::club::v1::StreamAccess* release_access();
  ::bgs::protocol::club::v1::StreamAccess* mutable_access();
  void set_allocated_access(::bgs::protocol::club::v1::StreamAccess* access);
  private:
  const ::bgs::protocol::club::v1::StreamAccess& _internal_access() const;
  ::bgs::protocol::club::v1::StreamAccess* _internal_mutable_access();
  public:

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
  bool has_voice_level() const;
  private:
  bool _internal_has_voice_level() const;
  public:
  void clear_voice_level();
  ::bgs::protocol::club::v1::StreamVoiceLevel voice_level() const;
  void set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value);
  private:
  ::bgs::protocol::club::v1::StreamVoiceLevel _internal_voice_level() const;
  void _internal_set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamStateOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::bgs::protocol::club::v1::StreamAccess* access_;
  int voice_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamStateAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamStateAssignment) */ {
 public:
  StreamStateAssignment();
  virtual ~StreamStateAssignment();

  StreamStateAssignment(const StreamStateAssignment& from);
  StreamStateAssignment(StreamStateAssignment&& from) noexcept
    : StreamStateAssignment() {
    *this = ::std::move(from);
  }

  inline StreamStateAssignment& operator=(const StreamStateAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStateAssignment& operator=(StreamStateAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStateAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamStateAssignment* internal_default_instance() {
    return reinterpret_cast<const StreamStateAssignment*>(
               &_StreamStateAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StreamStateAssignment& a, StreamStateAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStateAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStateAssignment* New() const final {
    return CreateMaybeMessage<StreamStateAssignment>(nullptr);
  }

  StreamStateAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStateAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStateAssignment& from);
  void MergeFrom(const StreamStateAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStateAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamStateAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kNameFieldNumber = 3,
    kSubjectFieldNumber = 4,
    kAccessFieldNumber = 5,
    kStreamIdFieldNumber = 1,
    kStreamSubscriptionRemovedFieldNumber = 6,
    kVoiceLevelFieldNumber = 7,
  };
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::v2::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::v2::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  ::bgs::protocol::v2::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string subject = 4;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // optional .bgs.protocol.club.v1.StreamAccess access = 5;
  bool has_access() const;
  private:
  bool _internal_has_access() const;
  public:
  void clear_access();
  const ::bgs::protocol::club::v1::StreamAccess& access() const;
  ::bgs::protocol::club::v1::StreamAccess* release_access();
  ::bgs::protocol::club::v1::StreamAccess* mutable_access();
  void set_allocated_access(::bgs::protocol::club::v1::StreamAccess* access);
  private:
  const ::bgs::protocol::club::v1::StreamAccess& _internal_access() const;
  ::bgs::protocol::club::v1::StreamAccess* _internal_mutable_access();
  public:

  // optional uint64 stream_id = 1;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool stream_subscription_removed = 6;
  bool has_stream_subscription_removed() const;
  private:
  bool _internal_has_stream_subscription_removed() const;
  public:
  void clear_stream_subscription_removed();
  bool stream_subscription_removed() const;
  void set_stream_subscription_removed(bool value);
  private:
  bool _internal_stream_subscription_removed() const;
  void _internal_set_stream_subscription_removed(bool value);
  public:

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
  bool has_voice_level() const;
  private:
  bool _internal_has_voice_level() const;
  public:
  void clear_voice_level();
  ::bgs::protocol::club::v1::StreamVoiceLevel voice_level() const;
  void set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value);
  private:
  ::bgs::protocol::club::v1::StreamVoiceLevel _internal_voice_level() const;
  void _internal_set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamStateAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::bgs::protocol::club::v1::StreamAccess* access_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  bool stream_subscription_removed_;
  int voice_level_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// -------------------------------------------------------------------

class StreamTypingIndicator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.club.v1.StreamTypingIndicator) */ {
 public:
  StreamTypingIndicator();
  virtual ~StreamTypingIndicator();

  StreamTypingIndicator(const StreamTypingIndicator& from);
  StreamTypingIndicator(StreamTypingIndicator&& from) noexcept
    : StreamTypingIndicator() {
    *this = ::std::move(from);
  }

  inline StreamTypingIndicator& operator=(const StreamTypingIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamTypingIndicator& operator=(StreamTypingIndicator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamTypingIndicator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamTypingIndicator* internal_default_instance() {
    return reinterpret_cast<const StreamTypingIndicator*>(
               &_StreamTypingIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StreamTypingIndicator& a, StreamTypingIndicator& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamTypingIndicator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamTypingIndicator* New() const final {
    return CreateMaybeMessage<StreamTypingIndicator>(nullptr);
  }

  StreamTypingIndicator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamTypingIndicator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamTypingIndicator& from);
  void MergeFrom(const StreamTypingIndicator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamTypingIndicator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.club.v1.StreamTypingIndicator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorIdFieldNumber = 1,
    kEpochFieldNumber = 3,
    kIndicatorFieldNumber = 2,
  };
  // optional .bgs.protocol.club.v1.MemberId author_id = 1;
  bool has_author_id() const;
  private:
  bool _internal_has_author_id() const;
  public:
  void clear_author_id();
  const ::bgs::protocol::club::v1::MemberId& author_id() const;
  ::bgs::protocol::club::v1::MemberId* release_author_id();
  ::bgs::protocol::club::v1::MemberId* mutable_author_id();
  void set_allocated_author_id(::bgs::protocol::club::v1::MemberId* author_id);
  private:
  const ::bgs::protocol::club::v1::MemberId& _internal_author_id() const;
  ::bgs::protocol::club::v1::MemberId* _internal_mutable_author_id();
  public:

  // optional uint64 epoch = 3;
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .bgs.protocol.TypingIndicator indicator = 2 [default = TYPING_START];
  bool has_indicator() const;
  private:
  bool _internal_has_indicator() const;
  public:
  void clear_indicator();
  ::bgs::protocol::TypingIndicator indicator() const;
  void set_indicator(::bgs::protocol::TypingIndicator value);
  private:
  ::bgs::protocol::TypingIndicator _internal_indicator() const;
  void _internal_set_indicator(::bgs::protocol::TypingIndicator value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamTypingIndicator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::club::v1::MemberId* author_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch_;
  int indicator_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamPosition

// repeated uint64 stream_id = 1 [packed = true];
inline int StreamPosition::_internal_stream_id_size() const {
  return stream_id_.size();
}
inline int StreamPosition::stream_id_size() const {
  return _internal_stream_id_size();
}
inline void StreamPosition::clear_stream_id() {
  stream_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamPosition::_internal_stream_id(int index) const {
  return stream_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamPosition::stream_id(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamPosition.stream_id)
  return _internal_stream_id(index);
}
inline void StreamPosition::set_stream_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  stream_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamPosition.stream_id)
}
inline void StreamPosition::_internal_add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  stream_id_.Add(value);
}
inline void StreamPosition::add_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_stream_id(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.StreamPosition.stream_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamPosition::_internal_stream_id() const {
  return stream_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
StreamPosition::stream_id() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.StreamPosition.stream_id)
  return _internal_stream_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamPosition::_internal_mutable_stream_id() {
  return &stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
StreamPosition::mutable_stream_id() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.StreamPosition.stream_id)
  return _internal_mutable_stream_id();
}

// -------------------------------------------------------------------

// StreamAccess

// repeated uint32 role = 1 [packed = true];
inline int StreamAccess::_internal_role_size() const {
  return role_.size();
}
inline int StreamAccess::role_size() const {
  return _internal_role_size();
}
inline void StreamAccess::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamAccess::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamAccess::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAccess.role)
  return _internal_role(index);
}
inline void StreamAccess::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamAccess.role)
}
inline void StreamAccess::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void StreamAccess::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.StreamAccess.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
StreamAccess::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
StreamAccess::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.StreamAccess.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
StreamAccess::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
StreamAccess::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.StreamAccess.role)
  return _internal_mutable_role();
}

// -------------------------------------------------------------------

// CreateStreamOptions

// repeated .bgs.protocol.v2.Attribute attribute = 1;
inline int CreateStreamOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int CreateStreamOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* CreateStreamOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateStreamOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
CreateStreamOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.CreateStreamOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& CreateStreamOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& CreateStreamOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* CreateStreamOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* CreateStreamOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.CreateStreamOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
CreateStreamOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.CreateStreamOptions.attribute)
  return attribute_;
}

// optional string name = 2;
inline bool CreateStreamOptions::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateStreamOptions::has_name() const {
  return _internal_has_name();
}
inline void CreateStreamOptions::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateStreamOptions::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamOptions.name)
  return _internal_name();
}
inline void CreateStreamOptions::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateStreamOptions.name)
}
inline std::string* CreateStreamOptions::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateStreamOptions.name)
  return _internal_mutable_name();
}
inline const std::string& CreateStreamOptions::_internal_name() const {
  return name_.GetNoArena();
}
inline void CreateStreamOptions::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateStreamOptions::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.CreateStreamOptions.name)
}
inline void CreateStreamOptions::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.CreateStreamOptions.name)
}
inline void CreateStreamOptions::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.CreateStreamOptions.name)
}
inline std::string* CreateStreamOptions::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateStreamOptions::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateStreamOptions.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStreamOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateStreamOptions.name)
}

// optional string subject = 3;
inline bool CreateStreamOptions::_internal_has_subject() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateStreamOptions::has_subject() const {
  return _internal_has_subject();
}
inline void CreateStreamOptions::clear_subject() {
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateStreamOptions::subject() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamOptions.subject)
  return _internal_subject();
}
inline void CreateStreamOptions::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateStreamOptions.subject)
}
inline std::string* CreateStreamOptions::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateStreamOptions.subject)
  return _internal_mutable_subject();
}
inline const std::string& CreateStreamOptions::_internal_subject() const {
  return subject_.GetNoArena();
}
inline void CreateStreamOptions::_internal_set_subject(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateStreamOptions::set_subject(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.CreateStreamOptions.subject)
}
inline void CreateStreamOptions::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.CreateStreamOptions.subject)
}
inline void CreateStreamOptions::set_subject(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.CreateStreamOptions.subject)
}
inline std::string* CreateStreamOptions::_internal_mutable_subject() {
  _has_bits_[0] |= 0x00000002u;
  return subject_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateStreamOptions::release_subject() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateStreamOptions.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return subject_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStreamOptions::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subject_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateStreamOptions.subject)
}

// optional .bgs.protocol.club.v1.StreamAccess access = 4;
inline bool CreateStreamOptions::_internal_has_access() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || access_ != nullptr);
  return value;
}
inline bool CreateStreamOptions::has_access() const {
  return _internal_has_access();
}
inline void CreateStreamOptions::clear_access() {
  if (access_ != nullptr) access_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::club::v1::StreamAccess& CreateStreamOptions::_internal_access() const {
  const ::bgs::protocol::club::v1::StreamAccess* p = access_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamAccess*>(
      &::bgs::protocol::club::v1::_StreamAccess_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamAccess& CreateStreamOptions::access() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamOptions.access)
  return _internal_access();
}
inline ::bgs::protocol::club::v1::StreamAccess* CreateStreamOptions::release_access() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateStreamOptions.access)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::StreamAccess* temp = access_;
  access_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamAccess* CreateStreamOptions::_internal_mutable_access() {
  _has_bits_[0] |= 0x00000004u;
  if (access_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamAccess>(GetArenaNoVirtual());
    access_ = p;
  }
  return access_;
}
inline ::bgs::protocol::club::v1::StreamAccess* CreateStreamOptions::mutable_access() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateStreamOptions.access)
  return _internal_mutable_access();
}
inline void CreateStreamOptions::set_allocated_access(::bgs::protocol::club::v1::StreamAccess* access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete access_;
  }
  if (access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateStreamOptions.access)
}

// optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
inline bool CreateStreamOptions::_internal_has_voice_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreateStreamOptions::has_voice_level() const {
  return _internal_has_voice_level();
}
inline void CreateStreamOptions::clear_voice_level() {
  voice_level_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::club::v1::StreamVoiceLevel CreateStreamOptions::_internal_voice_level() const {
  return static_cast< ::bgs::protocol::club::v1::StreamVoiceLevel >(voice_level_);
}
inline ::bgs::protocol::club::v1::StreamVoiceLevel CreateStreamOptions::voice_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateStreamOptions.voice_level)
  return _internal_voice_level();
}
inline void CreateStreamOptions::_internal_set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value) {
  assert(::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  voice_level_ = value;
}
inline void CreateStreamOptions::set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value) {
  _internal_set_voice_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateStreamOptions.voice_level)
}

// -------------------------------------------------------------------

// Stream

// optional uint64 club_id = 1;
inline bool Stream::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Stream::has_club_id() const {
  return _internal_has_club_id();
}
inline void Stream::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Stream::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Stream::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Stream.club_id)
  return _internal_club_id();
}
inline void Stream::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  club_id_ = value;
}
inline void Stream::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Stream.club_id)
}

// optional uint64 id = 2;
inline bool Stream::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Stream::has_id() const {
  return _internal_has_id();
}
inline void Stream::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Stream::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Stream::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Stream.id)
  return _internal_id();
}
inline void Stream::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void Stream::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Stream.id)
}

// repeated .bgs.protocol.v2.Attribute attribute = 3;
inline int Stream::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Stream::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* Stream::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Stream.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
Stream::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.Stream.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& Stream::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& Stream::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Stream.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* Stream::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* Stream::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.Stream.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
Stream::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.Stream.attribute)
  return attribute_;
}

// optional string name = 4;
inline bool Stream::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Stream::has_name() const {
  return _internal_has_name();
}
inline void Stream::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Stream::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Stream.name)
  return _internal_name();
}
inline void Stream::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Stream.name)
}
inline std::string* Stream::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Stream.name)
  return _internal_mutable_name();
}
inline const std::string& Stream::_internal_name() const {
  return name_.GetNoArena();
}
inline void Stream::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Stream::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.Stream.name)
}
inline void Stream::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Stream.name)
}
inline void Stream::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Stream.name)
}
inline std::string* Stream::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Stream::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Stream.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Stream::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Stream.name)
}

// optional string subject = 5;
inline bool Stream::_internal_has_subject() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Stream::has_subject() const {
  return _internal_has_subject();
}
inline void Stream::clear_subject() {
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Stream::subject() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Stream.subject)
  return _internal_subject();
}
inline void Stream::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Stream.subject)
}
inline std::string* Stream::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Stream.subject)
  return _internal_mutable_subject();
}
inline const std::string& Stream::_internal_subject() const {
  return subject_.GetNoArena();
}
inline void Stream::_internal_set_subject(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Stream::set_subject(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.Stream.subject)
}
inline void Stream::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Stream.subject)
}
inline void Stream::set_subject(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Stream.subject)
}
inline std::string* Stream::_internal_mutable_subject() {
  _has_bits_[0] |= 0x00000002u;
  return subject_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Stream::release_subject() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Stream.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return subject_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Stream::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subject_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Stream.subject)
}

// optional .bgs.protocol.club.v1.StreamAccess access = 6;
inline bool Stream::_internal_has_access() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || access_ != nullptr);
  return value;
}
inline bool Stream::has_access() const {
  return _internal_has_access();
}
inline void Stream::clear_access() {
  if (access_ != nullptr) access_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::club::v1::StreamAccess& Stream::_internal_access() const {
  const ::bgs::protocol::club::v1::StreamAccess* p = access_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamAccess*>(
      &::bgs::protocol::club::v1::_StreamAccess_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamAccess& Stream::access() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Stream.access)
  return _internal_access();
}
inline ::bgs::protocol::club::v1::StreamAccess* Stream::release_access() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.Stream.access)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::StreamAccess* temp = access_;
  access_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamAccess* Stream::_internal_mutable_access() {
  _has_bits_[0] |= 0x00000004u;
  if (access_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamAccess>(GetArenaNoVirtual());
    access_ = p;
  }
  return access_;
}
inline ::bgs::protocol::club::v1::StreamAccess* Stream::mutable_access() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Stream.access)
  return _internal_mutable_access();
}
inline void Stream::set_allocated_access(::bgs::protocol::club::v1::StreamAccess* access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete access_;
  }
  if (access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Stream.access)
}

// optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
inline bool Stream::_internal_has_voice_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Stream::has_voice_level() const {
  return _internal_has_voice_level();
}
inline void Stream::clear_voice_level() {
  voice_level_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::bgs::protocol::club::v1::StreamVoiceLevel Stream::_internal_voice_level() const {
  return static_cast< ::bgs::protocol::club::v1::StreamVoiceLevel >(voice_level_);
}
inline ::bgs::protocol::club::v1::StreamVoiceLevel Stream::voice_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Stream.voice_level)
  return _internal_voice_level();
}
inline void Stream::_internal_set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value) {
  assert(::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  voice_level_ = value;
}
inline void Stream::set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value) {
  _internal_set_voice_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Stream.voice_level)
}

// optional uint64 creation_time = 8;
inline bool Stream::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Stream::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void Stream::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Stream::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Stream::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Stream.creation_time)
  return _internal_creation_time();
}
inline void Stream::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  creation_time_ = value;
}
inline void Stream::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Stream.creation_time)
}

// -------------------------------------------------------------------

// MentionContent

// optional bool all = 1;
inline bool MentionContent::_internal_has_all() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MentionContent::has_all() const {
  return _internal_has_all();
}
inline void MentionContent::clear_all() {
  all_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MentionContent::_internal_all() const {
  return all_;
}
inline bool MentionContent::all() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MentionContent.all)
  return _internal_all();
}
inline void MentionContent::_internal_set_all(bool value) {
  _has_bits_[0] |= 0x00000001u;
  all_ = value;
}
inline void MentionContent::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MentionContent.all)
}

// optional bool here = 2;
inline bool MentionContent::_internal_has_here() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MentionContent::has_here() const {
  return _internal_has_here();
}
inline void MentionContent::clear_here() {
  here_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MentionContent::_internal_here() const {
  return here_;
}
inline bool MentionContent::here() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MentionContent.here)
  return _internal_here();
}
inline void MentionContent::_internal_set_here(bool value) {
  _has_bits_[0] |= 0x00000002u;
  here_ = value;
}
inline void MentionContent::set_here(bool value) {
  _internal_set_here(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MentionContent.here)
}

// repeated .bgs.protocol.club.v1.MemberId member_id = 3;
inline int MentionContent::_internal_member_id_size() const {
  return member_id_.size();
}
inline int MentionContent::member_id_size() const {
  return _internal_member_id_size();
}
inline ::bgs::protocol::club::v1::MemberId* MentionContent::mutable_member_id(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.MentionContent.member_id)
  return member_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberId >*
MentionContent::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MentionContent.member_id)
  return &member_id_;
}
inline const ::bgs::protocol::club::v1::MemberId& MentionContent::_internal_member_id(int index) const {
  return member_id_.Get(index);
}
inline const ::bgs::protocol::club::v1::MemberId& MentionContent::member_id(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MentionContent.member_id)
  return _internal_member_id(index);
}
inline ::bgs::protocol::club::v1::MemberId* MentionContent::_internal_add_member_id() {
  return member_id_.Add();
}
inline ::bgs::protocol::club::v1::MemberId* MentionContent::add_member_id() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MentionContent.member_id)
  return _internal_add_member_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::MemberId >&
MentionContent::member_id() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MentionContent.member_id)
  return member_id_;
}

// repeated uint32 role = 4 [packed = true];
inline int MentionContent::_internal_role_size() const {
  return role_.size();
}
inline int MentionContent::role_size() const {
  return _internal_role_size();
}
inline void MentionContent::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MentionContent::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MentionContent::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.MentionContent.role)
  return _internal_role(index);
}
inline void MentionContent::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.MentionContent.role)
}
inline void MentionContent::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void MentionContent::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.MentionContent.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MentionContent::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MentionContent::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.MentionContent.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MentionContent::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MentionContent::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.MentionContent.role)
  return _internal_mutable_role();
}

// -------------------------------------------------------------------

// CreateMessageOptions

// optional string content = 2;
inline bool CreateMessageOptions::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateMessageOptions::has_content() const {
  return _internal_has_content();
}
inline void CreateMessageOptions::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateMessageOptions::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMessageOptions.content)
  return _internal_content();
}
inline void CreateMessageOptions::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.CreateMessageOptions.content)
}
inline std::string* CreateMessageOptions::mutable_content() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateMessageOptions.content)
  return _internal_mutable_content();
}
inline const std::string& CreateMessageOptions::_internal_content() const {
  return content_.GetNoArena();
}
inline void CreateMessageOptions::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMessageOptions::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.CreateMessageOptions.content)
}
inline void CreateMessageOptions::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.CreateMessageOptions.content)
}
inline void CreateMessageOptions::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.CreateMessageOptions.content)
}
inline std::string* CreateMessageOptions::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMessageOptions::release_content() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateMessageOptions.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMessageOptions::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateMessageOptions.content)
}

// optional .bgs.protocol.club.v1.MentionContent mention = 3;
inline bool CreateMessageOptions::_internal_has_mention() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mention_ != nullptr);
  return value;
}
inline bool CreateMessageOptions::has_mention() const {
  return _internal_has_mention();
}
inline void CreateMessageOptions::clear_mention() {
  if (mention_ != nullptr) mention_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::club::v1::MentionContent& CreateMessageOptions::_internal_mention() const {
  const ::bgs::protocol::club::v1::MentionContent* p = mention_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MentionContent*>(
      &::bgs::protocol::club::v1::_MentionContent_default_instance_);
}
inline const ::bgs::protocol::club::v1::MentionContent& CreateMessageOptions::mention() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.CreateMessageOptions.mention)
  return _internal_mention();
}
inline ::bgs::protocol::club::v1::MentionContent* CreateMessageOptions::release_mention() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.CreateMessageOptions.mention)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MentionContent* temp = mention_;
  mention_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MentionContent* CreateMessageOptions::_internal_mutable_mention() {
  _has_bits_[0] |= 0x00000002u;
  if (mention_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MentionContent>(GetArenaNoVirtual());
    mention_ = p;
  }
  return mention_;
}
inline ::bgs::protocol::club::v1::MentionContent* CreateMessageOptions::mutable_mention() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.CreateMessageOptions.mention)
  return _internal_mutable_mention();
}
inline void CreateMessageOptions::set_allocated_mention(::bgs::protocol::club::v1::MentionContent* mention) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mention_;
  }
  if (mention) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mention = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mention, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mention_ = mention;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.CreateMessageOptions.mention)
}

// -------------------------------------------------------------------

// ClubStreamMessageContainer

// repeated .bgs.protocol.club.v1.StreamMessage message = 1;
inline int ClubStreamMessageContainer::_internal_message_size() const {
  return message_.size();
}
inline int ClubStreamMessageContainer::message_size() const {
  return _internal_message_size();
}
inline void ClubStreamMessageContainer::clear_message() {
  message_.Clear();
}
inline ::bgs::protocol::club::v1::StreamMessage* ClubStreamMessageContainer::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamMessageContainer.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage >*
ClubStreamMessageContainer::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubStreamMessageContainer.message)
  return &message_;
}
inline const ::bgs::protocol::club::v1::StreamMessage& ClubStreamMessageContainer::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::bgs::protocol::club::v1::StreamMessage& ClubStreamMessageContainer::message(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamMessageContainer.message)
  return _internal_message(index);
}
inline ::bgs::protocol::club::v1::StreamMessage* ClubStreamMessageContainer::_internal_add_message() {
  return message_.Add();
}
inline ::bgs::protocol::club::v1::StreamMessage* ClubStreamMessageContainer::add_message() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubStreamMessageContainer.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::StreamMessage >&
ClubStreamMessageContainer::message() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubStreamMessageContainer.message)
  return message_;
}

// -------------------------------------------------------------------

// ContentChain

// optional string content = 5;
inline bool ContentChain::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentChain::has_content() const {
  return _internal_has_content();
}
inline void ContentChain::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentChain::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ContentChain.content)
  return _internal_content();
}
inline void ContentChain::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ContentChain.content)
}
inline std::string* ContentChain::mutable_content() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ContentChain.content)
  return _internal_mutable_content();
}
inline const std::string& ContentChain::_internal_content() const {
  return content_.GetNoArena();
}
inline void ContentChain::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContentChain::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.ContentChain.content)
}
inline void ContentChain::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ContentChain.content)
}
inline void ContentChain::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ContentChain.content)
}
inline std::string* ContentChain::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentChain::release_content() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ContentChain.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentChain::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ContentChain.content)
}

// repeated .bgs.protocol.EmbedInfo embed = 6;
inline int ContentChain::_internal_embed_size() const {
  return embed_.size();
}
inline int ContentChain::embed_size() const {
  return _internal_embed_size();
}
inline ::bgs::protocol::EmbedInfo* ContentChain::mutable_embed(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ContentChain.embed)
  return embed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::EmbedInfo >*
ContentChain::mutable_embed() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ContentChain.embed)
  return &embed_;
}
inline const ::bgs::protocol::EmbedInfo& ContentChain::_internal_embed(int index) const {
  return embed_.Get(index);
}
inline const ::bgs::protocol::EmbedInfo& ContentChain::embed(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ContentChain.embed)
  return _internal_embed(index);
}
inline ::bgs::protocol::EmbedInfo* ContentChain::_internal_add_embed() {
  return embed_.Add();
}
inline ::bgs::protocol::EmbedInfo* ContentChain::add_embed() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ContentChain.embed)
  return _internal_add_embed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::EmbedInfo >&
ContentChain::embed() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ContentChain.embed)
  return embed_;
}

// optional .bgs.protocol.club.v1.MentionContent mention = 7;
inline bool ContentChain::_internal_has_mention() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mention_ != nullptr);
  return value;
}
inline bool ContentChain::has_mention() const {
  return _internal_has_mention();
}
inline void ContentChain::clear_mention() {
  if (mention_ != nullptr) mention_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::club::v1::MentionContent& ContentChain::_internal_mention() const {
  const ::bgs::protocol::club::v1::MentionContent* p = mention_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MentionContent*>(
      &::bgs::protocol::club::v1::_MentionContent_default_instance_);
}
inline const ::bgs::protocol::club::v1::MentionContent& ContentChain::mention() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ContentChain.mention)
  return _internal_mention();
}
inline ::bgs::protocol::club::v1::MentionContent* ContentChain::release_mention() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.ContentChain.mention)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MentionContent* temp = mention_;
  mention_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MentionContent* ContentChain::_internal_mutable_mention() {
  _has_bits_[0] |= 0x00000002u;
  if (mention_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MentionContent>(GetArenaNoVirtual());
    mention_ = p;
  }
  return mention_;
}
inline ::bgs::protocol::club::v1::MentionContent* ContentChain::mutable_mention() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ContentChain.mention)
  return _internal_mutable_mention();
}
inline void ContentChain::set_allocated_mention(::bgs::protocol::club::v1::MentionContent* mention) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mention_;
  }
  if (mention) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mention = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mention, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mention_ = mention;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ContentChain.mention)
}

// optional uint64 edit_time = 8;
inline bool ContentChain::_internal_has_edit_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentChain::has_edit_time() const {
  return _internal_has_edit_time();
}
inline void ContentChain::clear_edit_time() {
  edit_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContentChain::_internal_edit_time() const {
  return edit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContentChain::edit_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ContentChain.edit_time)
  return _internal_edit_time();
}
inline void ContentChain::_internal_set_edit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  edit_time_ = value;
}
inline void ContentChain::set_edit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_edit_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ContentChain.edit_time)
}

// -------------------------------------------------------------------

// StreamMessage

// optional .bgs.protocol.MessageId id = 3;
inline bool StreamMessage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool StreamMessage::has_id() const {
  return _internal_has_id();
}
inline const ::bgs::protocol::MessageId& StreamMessage::_internal_id() const {
  const ::bgs::protocol::MessageId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::MessageId*>(
      &::bgs::protocol::_MessageId_default_instance_);
}
inline const ::bgs::protocol::MessageId& StreamMessage::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessage.id)
  return _internal_id();
}
inline ::bgs::protocol::MessageId* StreamMessage::release_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMessage.id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::MessageId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::MessageId* StreamMessage::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::MessageId>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::bgs::protocol::MessageId* StreamMessage::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMessage.id)
  return _internal_mutable_id();
}
inline void StreamMessage::set_allocated_id(::bgs::protocol::MessageId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMessage.id)
}

// optional .bgs.protocol.club.v1.MemberDescription author = 4;
inline bool StreamMessage::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || author_ != nullptr);
  return value;
}
inline bool StreamMessage::has_author() const {
  return _internal_has_author();
}
inline const ::bgs::protocol::club::v1::MemberDescription& StreamMessage::_internal_author() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = author_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& StreamMessage::author() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessage.author)
  return _internal_author();
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMessage::release_author() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMessage.author)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberDescription* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMessage::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000002u;
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    author_ = p;
  }
  return author_;
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMessage::mutable_author() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMessage.author)
  return _internal_mutable_author();
}
inline void StreamMessage::set_allocated_author(::bgs::protocol::club::v1::MemberDescription* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMessage.author)
}

// repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
inline int StreamMessage::_internal_content_chain_size() const {
  return content_chain_.size();
}
inline int StreamMessage::content_chain_size() const {
  return _internal_content_chain_size();
}
inline void StreamMessage::clear_content_chain() {
  content_chain_.Clear();
}
inline ::bgs::protocol::club::v1::ContentChain* StreamMessage::mutable_content_chain(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMessage.content_chain)
  return content_chain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ContentChain >*
StreamMessage::mutable_content_chain() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.StreamMessage.content_chain)
  return &content_chain_;
}
inline const ::bgs::protocol::club::v1::ContentChain& StreamMessage::_internal_content_chain(int index) const {
  return content_chain_.Get(index);
}
inline const ::bgs::protocol::club::v1::ContentChain& StreamMessage::content_chain(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessage.content_chain)
  return _internal_content_chain(index);
}
inline ::bgs::protocol::club::v1::ContentChain* StreamMessage::_internal_add_content_chain() {
  return content_chain_.Add();
}
inline ::bgs::protocol::club::v1::ContentChain* StreamMessage::add_content_chain() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.StreamMessage.content_chain)
  return _internal_add_content_chain();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::club::v1::ContentChain >&
StreamMessage::content_chain() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.StreamMessage.content_chain)
  return content_chain_;
}

// optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
inline bool StreamMessage::_internal_has_destroyer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || destroyer_ != nullptr);
  return value;
}
inline bool StreamMessage::has_destroyer() const {
  return _internal_has_destroyer();
}
inline const ::bgs::protocol::club::v1::MemberDescription& StreamMessage::_internal_destroyer() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = destroyer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& StreamMessage::destroyer() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessage.destroyer)
  return _internal_destroyer();
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMessage::release_destroyer() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMessage.destroyer)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::MemberDescription* temp = destroyer_;
  destroyer_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMessage::_internal_mutable_destroyer() {
  _has_bits_[0] |= 0x00000004u;
  if (destroyer_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    destroyer_ = p;
  }
  return destroyer_;
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMessage::mutable_destroyer() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMessage.destroyer)
  return _internal_mutable_destroyer();
}
inline void StreamMessage::set_allocated_destroyer(::bgs::protocol::club::v1::MemberDescription* destroyer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destroyer_);
  }
  if (destroyer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destroyer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destroyer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  destroyer_ = destroyer;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMessage.destroyer)
}

// optional bool destroyed = 16;
inline bool StreamMessage::_internal_has_destroyed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamMessage::has_destroyed() const {
  return _internal_has_destroyed();
}
inline void StreamMessage::clear_destroyed() {
  destroyed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool StreamMessage::_internal_destroyed() const {
  return destroyed_;
}
inline bool StreamMessage::destroyed() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessage.destroyed)
  return _internal_destroyed();
}
inline void StreamMessage::_internal_set_destroyed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  destroyed_ = value;
}
inline void StreamMessage::set_destroyed(bool value) {
  _internal_set_destroyed(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMessage.destroyed)
}

// optional uint64 destroy_time = 17;
inline bool StreamMessage::_internal_has_destroy_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StreamMessage::has_destroy_time() const {
  return _internal_has_destroy_time();
}
inline void StreamMessage::clear_destroy_time() {
  destroy_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage::_internal_destroy_time() const {
  return destroy_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMessage::destroy_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMessage.destroy_time)
  return _internal_destroy_time();
}
inline void StreamMessage::_internal_set_destroy_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  destroy_time_ = value;
}
inline void StreamMessage::set_destroy_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_destroy_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMessage.destroy_time)
}

// -------------------------------------------------------------------

// StreamMention

// optional uint64 club_id = 1;
inline bool StreamMention::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StreamMention::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamMention::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMention::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMention::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMention.club_id)
  return _internal_club_id();
}
inline void StreamMention::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  club_id_ = value;
}
inline void StreamMention::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMention.club_id)
}

// optional uint64 stream_id = 2;
inline bool StreamMention::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StreamMention::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamMention::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMention::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMention::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMention.stream_id)
  return _internal_stream_id();
}
inline void StreamMention::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  stream_id_ = value;
}
inline void StreamMention::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMention.stream_id)
}

// optional .bgs.protocol.MessageId message_id = 3;
inline bool StreamMention::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_id_ != nullptr);
  return value;
}
inline bool StreamMention::has_message_id() const {
  return _internal_has_message_id();
}
inline const ::bgs::protocol::MessageId& StreamMention::_internal_message_id() const {
  const ::bgs::protocol::MessageId* p = message_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::MessageId*>(
      &::bgs::protocol::_MessageId_default_instance_);
}
inline const ::bgs::protocol::MessageId& StreamMention::message_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMention.message_id)
  return _internal_message_id();
}
inline ::bgs::protocol::MessageId* StreamMention::release_message_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMention.message_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::MessageId* temp = message_id_;
  message_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::MessageId* StreamMention::_internal_mutable_message_id() {
  _has_bits_[0] |= 0x00000001u;
  if (message_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::MessageId>(GetArenaNoVirtual());
    message_id_ = p;
  }
  return message_id_;
}
inline ::bgs::protocol::MessageId* StreamMention::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMention.message_id)
  return _internal_mutable_message_id();
}
inline void StreamMention::set_allocated_message_id(::bgs::protocol::MessageId* message_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_id_);
  }
  if (message_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_id_ = message_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMention.message_id)
}

// optional .bgs.protocol.club.v1.MemberDescription author = 4;
inline bool StreamMention::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || author_ != nullptr);
  return value;
}
inline bool StreamMention::has_author() const {
  return _internal_has_author();
}
inline const ::bgs::protocol::club::v1::MemberDescription& StreamMention::_internal_author() const {
  const ::bgs::protocol::club::v1::MemberDescription* p = author_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberDescription*>(
      &::bgs::protocol::club::v1::_MemberDescription_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberDescription& StreamMention::author() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMention.author)
  return _internal_author();
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMention::release_author() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMention.author)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::club::v1::MemberDescription* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMention::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000002u;
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberDescription>(GetArenaNoVirtual());
    author_ = p;
  }
  return author_;
}
inline ::bgs::protocol::club::v1::MemberDescription* StreamMention::mutable_author() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMention.author)
  return _internal_mutable_author();
}
inline void StreamMention::set_allocated_author(::bgs::protocol::club::v1::MemberDescription* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMention.author)
}

// optional bool destroyed = 5;
inline bool StreamMention::_internal_has_destroyed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StreamMention::has_destroyed() const {
  return _internal_has_destroyed();
}
inline void StreamMention::clear_destroyed() {
  destroyed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool StreamMention::_internal_destroyed() const {
  return destroyed_;
}
inline bool StreamMention::destroyed() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMention.destroyed)
  return _internal_destroyed();
}
inline void StreamMention::_internal_set_destroyed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  destroyed_ = value;
}
inline void StreamMention::set_destroyed(bool value) {
  _internal_set_destroyed(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMention.destroyed)
}

// optional .bgs.protocol.TimeSeriesId mention_id = 6;
inline bool StreamMention::_internal_has_mention_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || mention_id_ != nullptr);
  return value;
}
inline bool StreamMention::has_mention_id() const {
  return _internal_has_mention_id();
}
inline const ::bgs::protocol::TimeSeriesId& StreamMention::_internal_mention_id() const {
  const ::bgs::protocol::TimeSeriesId* p = mention_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::TimeSeriesId*>(
      &::bgs::protocol::_TimeSeriesId_default_instance_);
}
inline const ::bgs::protocol::TimeSeriesId& StreamMention::mention_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMention.mention_id)
  return _internal_mention_id();
}
inline ::bgs::protocol::TimeSeriesId* StreamMention::release_mention_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMention.mention_id)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::TimeSeriesId* temp = mention_id_;
  mention_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::TimeSeriesId* StreamMention::_internal_mutable_mention_id() {
  _has_bits_[0] |= 0x00000004u;
  if (mention_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::TimeSeriesId>(GetArenaNoVirtual());
    mention_id_ = p;
  }
  return mention_id_;
}
inline ::bgs::protocol::TimeSeriesId* StreamMention::mutable_mention_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMention.mention_id)
  return _internal_mutable_mention_id();
}
inline void StreamMention::set_allocated_mention_id(::bgs::protocol::TimeSeriesId* mention_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mention_id_);
  }
  if (mention_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mention_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mention_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mention_id_ = mention_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMention.mention_id)
}

// optional .bgs.protocol.club.v1.MemberId member_id = 7;
inline bool StreamMention::_internal_has_member_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || member_id_ != nullptr);
  return value;
}
inline bool StreamMention::has_member_id() const {
  return _internal_has_member_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMention::_internal_member_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = member_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMention::member_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMention.member_id)
  return _internal_member_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamMention::release_member_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMention.member_id)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::club::v1::MemberId* temp = member_id_;
  member_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMention::_internal_mutable_member_id() {
  _has_bits_[0] |= 0x00000008u;
  if (member_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    member_id_ = p;
  }
  return member_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMention::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMention.member_id)
  return _internal_mutable_member_id();
}
inline void StreamMention::set_allocated_member_id(::bgs::protocol::club::v1::MemberId* member_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMention.member_id)
}

// optional .bgs.protocol.club.v1.StreamMessage message = 8;
inline bool StreamMention::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool StreamMention::has_message() const {
  return _internal_has_message();
}
inline void StreamMention::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::club::v1::StreamMessage& StreamMention::_internal_message() const {
  const ::bgs::protocol::club::v1::StreamMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamMessage*>(
      &::bgs::protocol::club::v1::_StreamMessage_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamMessage& StreamMention::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMention.message)
  return _internal_message();
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMention::release_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMention.message)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::club::v1::StreamMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMention::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000010u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  return message_;
}
inline ::bgs::protocol::club::v1::StreamMessage* StreamMention::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMention.message)
  return _internal_mutable_message();
}
inline void StreamMention::set_allocated_message(::bgs::protocol::club::v1::StreamMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMention.message)
}

// -------------------------------------------------------------------

// StreamView

// optional uint64 club_id = 1;
inline bool StreamView::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamView::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamView::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamView::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamView::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamView.club_id)
  return _internal_club_id();
}
inline void StreamView::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void StreamView::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamView.club_id)
}

// optional uint64 stream_id = 2;
inline bool StreamView::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamView::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamView::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamView::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamView::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamView.stream_id)
  return _internal_stream_id();
}
inline void StreamView::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void StreamView::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamView.stream_id)
}

// optional .bgs.protocol.ViewMarker marker = 3;
inline bool StreamView::_internal_has_marker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || marker_ != nullptr);
  return value;
}
inline bool StreamView::has_marker() const {
  return _internal_has_marker();
}
inline const ::bgs::protocol::ViewMarker& StreamView::_internal_marker() const {
  const ::bgs::protocol::ViewMarker* p = marker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ViewMarker*>(
      &::bgs::protocol::_ViewMarker_default_instance_);
}
inline const ::bgs::protocol::ViewMarker& StreamView::marker() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamView.marker)
  return _internal_marker();
}
inline ::bgs::protocol::ViewMarker* StreamView::release_marker() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamView.marker)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::ViewMarker* temp = marker_;
  marker_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ViewMarker* StreamView::_internal_mutable_marker() {
  _has_bits_[0] |= 0x00000001u;
  if (marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ViewMarker>(GetArenaNoVirtual());
    marker_ = p;
  }
  return marker_;
}
inline ::bgs::protocol::ViewMarker* StreamView::mutable_marker() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamView.marker)
  return _internal_mutable_marker();
}
inline void StreamView::set_allocated_marker(::bgs::protocol::ViewMarker* marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(marker_);
  }
  if (marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  marker_ = marker;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamView.marker)
}

// -------------------------------------------------------------------

// StreamAdvanceViewTime

// optional uint64 stream_id = 1;
inline bool StreamAdvanceViewTime::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamAdvanceViewTime::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamAdvanceViewTime::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamAdvanceViewTime::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamAdvanceViewTime::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAdvanceViewTime.stream_id)
  return _internal_stream_id();
}
inline void StreamAdvanceViewTime::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  stream_id_ = value;
}
inline void StreamAdvanceViewTime::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamAdvanceViewTime.stream_id)
}

// optional uint64 view_time = 2;
inline bool StreamAdvanceViewTime::_internal_has_view_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamAdvanceViewTime::has_view_time() const {
  return _internal_has_view_time();
}
inline void StreamAdvanceViewTime::clear_view_time() {
  view_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamAdvanceViewTime::_internal_view_time() const {
  return view_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamAdvanceViewTime::view_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamAdvanceViewTime.view_time)
  return _internal_view_time();
}
inline void StreamAdvanceViewTime::_internal_set_view_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  view_time_ = value;
}
inline void StreamAdvanceViewTime::set_view_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamAdvanceViewTime.view_time)
}

// -------------------------------------------------------------------

// StreamEventTime

// optional uint64 stream_id = 1;
inline bool StreamEventTime::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamEventTime::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamEventTime::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamEventTime::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamEventTime::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamEventTime.stream_id)
  return _internal_stream_id();
}
inline void StreamEventTime::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  stream_id_ = value;
}
inline void StreamEventTime::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamEventTime.stream_id)
}

// optional uint64 event_time = 2;
inline bool StreamEventTime::_internal_has_event_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamEventTime::has_event_time() const {
  return _internal_has_event_time();
}
inline void StreamEventTime::clear_event_time() {
  event_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamEventTime::_internal_event_time() const {
  return event_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamEventTime::event_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamEventTime.event_time)
  return _internal_event_time();
}
inline void StreamEventTime::_internal_set_event_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  event_time_ = value;
}
inline void StreamEventTime::set_event_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_event_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamEventTime.event_time)
}

// -------------------------------------------------------------------

// StreamMentionView

// optional uint64 club_id = 1;
inline bool StreamMentionView::_internal_has_club_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamMentionView::has_club_id() const {
  return _internal_has_club_id();
}
inline void StreamMentionView::clear_club_id() {
  club_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMentionView::_internal_club_id() const {
  return club_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMentionView::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMentionView.club_id)
  return _internal_club_id();
}
inline void StreamMentionView::_internal_set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  club_id_ = value;
}
inline void StreamMentionView::set_club_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_club_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMentionView.club_id)
}

// optional uint64 stream_id = 2;
inline bool StreamMentionView::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamMentionView::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamMentionView::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMentionView::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamMentionView::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMentionView.stream_id)
  return _internal_stream_id();
}
inline void StreamMentionView::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  stream_id_ = value;
}
inline void StreamMentionView::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamMentionView.stream_id)
}

// optional .bgs.protocol.ViewMarker marker = 3;
inline bool StreamMentionView::_internal_has_marker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || marker_ != nullptr);
  return value;
}
inline bool StreamMentionView::has_marker() const {
  return _internal_has_marker();
}
inline const ::bgs::protocol::ViewMarker& StreamMentionView::_internal_marker() const {
  const ::bgs::protocol::ViewMarker* p = marker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ViewMarker*>(
      &::bgs::protocol::_ViewMarker_default_instance_);
}
inline const ::bgs::protocol::ViewMarker& StreamMentionView::marker() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamMentionView.marker)
  return _internal_marker();
}
inline ::bgs::protocol::ViewMarker* StreamMentionView::release_marker() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamMentionView.marker)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::ViewMarker* temp = marker_;
  marker_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ViewMarker* StreamMentionView::_internal_mutable_marker() {
  _has_bits_[0] |= 0x00000001u;
  if (marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ViewMarker>(GetArenaNoVirtual());
    marker_ = p;
  }
  return marker_;
}
inline ::bgs::protocol::ViewMarker* StreamMentionView::mutable_marker() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamMentionView.marker)
  return _internal_mutable_marker();
}
inline void StreamMentionView::set_allocated_marker(::bgs::protocol::ViewMarker* marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(marker_);
  }
  if (marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  marker_ = marker;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamMentionView.marker)
}

// -------------------------------------------------------------------

// StreamStateOptions

// repeated .bgs.protocol.v2.Attribute attribute = 1;
inline int StreamStateOptions::_internal_attribute_size() const {
  return attribute_.size();
}
inline int StreamStateOptions::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* StreamStateOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
StreamStateOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.StreamStateOptions.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& StreamStateOptions::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& StreamStateOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateOptions.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* StreamStateOptions::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* StreamStateOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.StreamStateOptions.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
StreamStateOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.StreamStateOptions.attribute)
  return attribute_;
}

// optional string name = 2;
inline bool StreamStateOptions::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamStateOptions::has_name() const {
  return _internal_has_name();
}
inline void StreamStateOptions::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StreamStateOptions::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateOptions.name)
  return _internal_name();
}
inline void StreamStateOptions::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateOptions.name)
}
inline std::string* StreamStateOptions::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateOptions.name)
  return _internal_mutable_name();
}
inline const std::string& StreamStateOptions::_internal_name() const {
  return name_.GetNoArena();
}
inline void StreamStateOptions::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StreamStateOptions::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.StreamStateOptions.name)
}
inline void StreamStateOptions::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.StreamStateOptions.name)
}
inline void StreamStateOptions::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.StreamStateOptions.name)
}
inline std::string* StreamStateOptions::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamStateOptions::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamStateOptions.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamStateOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamStateOptions.name)
}

// optional string subject = 3;
inline bool StreamStateOptions::_internal_has_subject() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamStateOptions::has_subject() const {
  return _internal_has_subject();
}
inline void StreamStateOptions::clear_subject() {
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StreamStateOptions::subject() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateOptions.subject)
  return _internal_subject();
}
inline void StreamStateOptions::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateOptions.subject)
}
inline std::string* StreamStateOptions::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateOptions.subject)
  return _internal_mutable_subject();
}
inline const std::string& StreamStateOptions::_internal_subject() const {
  return subject_.GetNoArena();
}
inline void StreamStateOptions::_internal_set_subject(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StreamStateOptions::set_subject(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.StreamStateOptions.subject)
}
inline void StreamStateOptions::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.StreamStateOptions.subject)
}
inline void StreamStateOptions::set_subject(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.StreamStateOptions.subject)
}
inline std::string* StreamStateOptions::_internal_mutable_subject() {
  _has_bits_[0] |= 0x00000002u;
  return subject_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamStateOptions::release_subject() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamStateOptions.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return subject_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamStateOptions::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subject_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamStateOptions.subject)
}

// optional .bgs.protocol.club.v1.StreamAccess access = 4;
inline bool StreamStateOptions::_internal_has_access() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || access_ != nullptr);
  return value;
}
inline bool StreamStateOptions::has_access() const {
  return _internal_has_access();
}
inline void StreamStateOptions::clear_access() {
  if (access_ != nullptr) access_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::club::v1::StreamAccess& StreamStateOptions::_internal_access() const {
  const ::bgs::protocol::club::v1::StreamAccess* p = access_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamAccess*>(
      &::bgs::protocol::club::v1::_StreamAccess_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamAccess& StreamStateOptions::access() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateOptions.access)
  return _internal_access();
}
inline ::bgs::protocol::club::v1::StreamAccess* StreamStateOptions::release_access() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamStateOptions.access)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::StreamAccess* temp = access_;
  access_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamAccess* StreamStateOptions::_internal_mutable_access() {
  _has_bits_[0] |= 0x00000004u;
  if (access_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamAccess>(GetArenaNoVirtual());
    access_ = p;
  }
  return access_;
}
inline ::bgs::protocol::club::v1::StreamAccess* StreamStateOptions::mutable_access() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateOptions.access)
  return _internal_mutable_access();
}
inline void StreamStateOptions::set_allocated_access(::bgs::protocol::club::v1::StreamAccess* access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete access_;
  }
  if (access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamStateOptions.access)
}

// optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5 [default = VOICE_LEVEL_DISABLED];
inline bool StreamStateOptions::_internal_has_voice_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamStateOptions::has_voice_level() const {
  return _internal_has_voice_level();
}
inline void StreamStateOptions::clear_voice_level() {
  voice_level_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bgs::protocol::club::v1::StreamVoiceLevel StreamStateOptions::_internal_voice_level() const {
  return static_cast< ::bgs::protocol::club::v1::StreamVoiceLevel >(voice_level_);
}
inline ::bgs::protocol::club::v1::StreamVoiceLevel StreamStateOptions::voice_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateOptions.voice_level)
  return _internal_voice_level();
}
inline void StreamStateOptions::_internal_set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value) {
  assert(::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  voice_level_ = value;
}
inline void StreamStateOptions::set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value) {
  _internal_set_voice_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateOptions.voice_level)
}

// -------------------------------------------------------------------

// StreamStateAssignment

// optional uint64 stream_id = 1;
inline bool StreamStateAssignment::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamStateAssignment::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void StreamStateAssignment::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamStateAssignment::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamStateAssignment::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateAssignment.stream_id)
  return _internal_stream_id();
}
inline void StreamStateAssignment::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void StreamStateAssignment::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateAssignment.stream_id)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int StreamStateAssignment::_internal_attribute_size() const {
  return attribute_.size();
}
inline int StreamStateAssignment::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::v2::Attribute* StreamStateAssignment::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateAssignment.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
StreamStateAssignment::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.StreamStateAssignment.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::v2::Attribute& StreamStateAssignment::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::v2::Attribute& StreamStateAssignment::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateAssignment.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::v2::Attribute* StreamStateAssignment::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::v2::Attribute* StreamStateAssignment::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.StreamStateAssignment.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
StreamStateAssignment::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.StreamStateAssignment.attribute)
  return attribute_;
}

// optional string name = 3;
inline bool StreamStateAssignment::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamStateAssignment::has_name() const {
  return _internal_has_name();
}
inline void StreamStateAssignment::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StreamStateAssignment::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateAssignment.name)
  return _internal_name();
}
inline void StreamStateAssignment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateAssignment.name)
}
inline std::string* StreamStateAssignment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateAssignment.name)
  return _internal_mutable_name();
}
inline const std::string& StreamStateAssignment::_internal_name() const {
  return name_.GetNoArena();
}
inline void StreamStateAssignment::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StreamStateAssignment::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.StreamStateAssignment.name)
}
inline void StreamStateAssignment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.StreamStateAssignment.name)
}
inline void StreamStateAssignment::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.StreamStateAssignment.name)
}
inline std::string* StreamStateAssignment::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamStateAssignment::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamStateAssignment.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamStateAssignment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamStateAssignment.name)
}

// optional string subject = 4;
inline bool StreamStateAssignment::_internal_has_subject() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamStateAssignment::has_subject() const {
  return _internal_has_subject();
}
inline void StreamStateAssignment::clear_subject() {
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StreamStateAssignment::subject() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateAssignment.subject)
  return _internal_subject();
}
inline void StreamStateAssignment::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateAssignment.subject)
}
inline std::string* StreamStateAssignment::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateAssignment.subject)
  return _internal_mutable_subject();
}
inline const std::string& StreamStateAssignment::_internal_subject() const {
  return subject_.GetNoArena();
}
inline void StreamStateAssignment::_internal_set_subject(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StreamStateAssignment::set_subject(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.club.v1.StreamStateAssignment.subject)
}
inline void StreamStateAssignment::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.StreamStateAssignment.subject)
}
inline void StreamStateAssignment::set_subject(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.StreamStateAssignment.subject)
}
inline std::string* StreamStateAssignment::_internal_mutable_subject() {
  _has_bits_[0] |= 0x00000002u;
  return subject_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamStateAssignment::release_subject() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamStateAssignment.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return subject_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamStateAssignment::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subject_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamStateAssignment.subject)
}

// optional .bgs.protocol.club.v1.StreamAccess access = 5;
inline bool StreamStateAssignment::_internal_has_access() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || access_ != nullptr);
  return value;
}
inline bool StreamStateAssignment::has_access() const {
  return _internal_has_access();
}
inline void StreamStateAssignment::clear_access() {
  if (access_ != nullptr) access_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::club::v1::StreamAccess& StreamStateAssignment::_internal_access() const {
  const ::bgs::protocol::club::v1::StreamAccess* p = access_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::StreamAccess*>(
      &::bgs::protocol::club::v1::_StreamAccess_default_instance_);
}
inline const ::bgs::protocol::club::v1::StreamAccess& StreamStateAssignment::access() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateAssignment.access)
  return _internal_access();
}
inline ::bgs::protocol::club::v1::StreamAccess* StreamStateAssignment::release_access() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamStateAssignment.access)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::club::v1::StreamAccess* temp = access_;
  access_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::StreamAccess* StreamStateAssignment::_internal_mutable_access() {
  _has_bits_[0] |= 0x00000004u;
  if (access_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::StreamAccess>(GetArenaNoVirtual());
    access_ = p;
  }
  return access_;
}
inline ::bgs::protocol::club::v1::StreamAccess* StreamStateAssignment::mutable_access() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamStateAssignment.access)
  return _internal_mutable_access();
}
inline void StreamStateAssignment::set_allocated_access(::bgs::protocol::club::v1::StreamAccess* access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete access_;
  }
  if (access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamStateAssignment.access)
}

// optional bool stream_subscription_removed = 6;
inline bool StreamStateAssignment::_internal_has_stream_subscription_removed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StreamStateAssignment::has_stream_subscription_removed() const {
  return _internal_has_stream_subscription_removed();
}
inline void StreamStateAssignment::clear_stream_subscription_removed() {
  stream_subscription_removed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool StreamStateAssignment::_internal_stream_subscription_removed() const {
  return stream_subscription_removed_;
}
inline bool StreamStateAssignment::stream_subscription_removed() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateAssignment.stream_subscription_removed)
  return _internal_stream_subscription_removed();
}
inline void StreamStateAssignment::_internal_set_stream_subscription_removed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  stream_subscription_removed_ = value;
}
inline void StreamStateAssignment::set_stream_subscription_removed(bool value) {
  _internal_set_stream_subscription_removed(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateAssignment.stream_subscription_removed)
}

// optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7 [default = VOICE_LEVEL_DISABLED];
inline bool StreamStateAssignment::_internal_has_voice_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StreamStateAssignment::has_voice_level() const {
  return _internal_has_voice_level();
}
inline void StreamStateAssignment::clear_voice_level() {
  voice_level_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::bgs::protocol::club::v1::StreamVoiceLevel StreamStateAssignment::_internal_voice_level() const {
  return static_cast< ::bgs::protocol::club::v1::StreamVoiceLevel >(voice_level_);
}
inline ::bgs::protocol::club::v1::StreamVoiceLevel StreamStateAssignment::voice_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamStateAssignment.voice_level)
  return _internal_voice_level();
}
inline void StreamStateAssignment::_internal_set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value) {
  assert(::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  voice_level_ = value;
}
inline void StreamStateAssignment::set_voice_level(::bgs::protocol::club::v1::StreamVoiceLevel value) {
  _internal_set_voice_level(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamStateAssignment.voice_level)
}

// -------------------------------------------------------------------

// StreamTypingIndicator

// optional .bgs.protocol.club.v1.MemberId author_id = 1;
inline bool StreamTypingIndicator::_internal_has_author_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || author_id_ != nullptr);
  return value;
}
inline bool StreamTypingIndicator::has_author_id() const {
  return _internal_has_author_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamTypingIndicator::_internal_author_id() const {
  const ::bgs::protocol::club::v1::MemberId* p = author_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::club::v1::MemberId*>(
      &::bgs::protocol::club::v1::_MemberId_default_instance_);
}
inline const ::bgs::protocol::club::v1::MemberId& StreamTypingIndicator::author_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamTypingIndicator.author_id)
  return _internal_author_id();
}
inline ::bgs::protocol::club::v1::MemberId* StreamTypingIndicator::release_author_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.club.v1.StreamTypingIndicator.author_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::club::v1::MemberId* temp = author_id_;
  author_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::club::v1::MemberId* StreamTypingIndicator::_internal_mutable_author_id() {
  _has_bits_[0] |= 0x00000001u;
  if (author_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::club::v1::MemberId>(GetArenaNoVirtual());
    author_id_ = p;
  }
  return author_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamTypingIndicator::mutable_author_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.StreamTypingIndicator.author_id)
  return _internal_mutable_author_id();
}
inline void StreamTypingIndicator::set_allocated_author_id(::bgs::protocol::club::v1::MemberId* author_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_id_);
  }
  if (author_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      author_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  author_id_ = author_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.StreamTypingIndicator.author_id)
}

// optional .bgs.protocol.TypingIndicator indicator = 2 [default = TYPING_START];
inline bool StreamTypingIndicator::_internal_has_indicator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamTypingIndicator::has_indicator() const {
  return _internal_has_indicator();
}
inline void StreamTypingIndicator::clear_indicator() {
  indicator_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::bgs::protocol::TypingIndicator StreamTypingIndicator::_internal_indicator() const {
  return static_cast< ::bgs::protocol::TypingIndicator >(indicator_);
}
inline ::bgs::protocol::TypingIndicator StreamTypingIndicator::indicator() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamTypingIndicator.indicator)
  return _internal_indicator();
}
inline void StreamTypingIndicator::_internal_set_indicator(::bgs::protocol::TypingIndicator value) {
  assert(::bgs::protocol::TypingIndicator_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  indicator_ = value;
}
inline void StreamTypingIndicator::set_indicator(::bgs::protocol::TypingIndicator value) {
  _internal_set_indicator(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamTypingIndicator.indicator)
}

// optional uint64 epoch = 3;
inline bool StreamTypingIndicator::_internal_has_epoch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamTypingIndicator::has_epoch() const {
  return _internal_has_epoch();
}
inline void StreamTypingIndicator::clear_epoch() {
  epoch_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamTypingIndicator::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamTypingIndicator::epoch() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamTypingIndicator.epoch)
  return _internal_epoch();
}
inline void StreamTypingIndicator::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  epoch_ = value;
}
inline void StreamTypingIndicator::set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamTypingIndicator.epoch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fclub_5fstream_2eproto
