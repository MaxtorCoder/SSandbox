// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/connection_service.proto

#include "bgs/low/pb/client/connection_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContentHandle_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BindRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BindResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundService_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectionMeteringContentHandles_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
namespace bgs {
namespace protocol {
namespace connection {
namespace v1 {
class ConnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectRequest> _instance;
} _ConnectRequest_default_instance_;
class ConnectionMeteringContentHandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionMeteringContentHandles> _instance;
} _ConnectionMeteringContentHandles_default_instance_;
class ConnectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectResponse> _instance;
} _ConnectResponse_default_instance_;
class BoundServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundService> _instance;
} _BoundService_default_instance_;
class BindRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BindRequest> _instance;
} _BindRequest_default_instance_;
class BindResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BindResponse> _instance;
} _BindResponse_default_instance_;
class EchoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoRequest> _instance;
} _EchoRequest_default_instance_;
class EchoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoResponse> _instance;
} _EchoResponse_default_instance_;
class DisconnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisconnectRequest> _instance;
} _DisconnectRequest_default_instance_;
class DisconnectNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisconnectNotification> _instance;
} _DisconnectNotification_default_instance_;
class EncryptRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncryptRequest> _instance;
} _EncryptRequest_default_instance_;
}  // namespace v1
}  // namespace connection
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_BindRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_BindRequest_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::BindRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::BindRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BindRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BindRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {
      &scc_info_BoundService_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BindResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_BindResponse_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::BindResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::BindResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BindResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BindResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_BoundService_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_BoundService_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::BoundService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::BoundService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundService_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoundService_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ConnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_ConnectRequest_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::ConnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::ConnectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {
      &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
      &scc_info_BindRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ConnectResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_ConnectResponse_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::ConnectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::ConnectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConnectResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConnectResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {
      &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
      &scc_info_BindResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
      &scc_info_ConnectionMeteringContentHandles_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ConnectionMeteringContentHandles_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_ConnectionMeteringContentHandles_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectionMeteringContentHandles_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnectionMeteringContentHandles_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {
      &scc_info_ContentHandle_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_DisconnectNotification_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_DisconnectNotification_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::DisconnectNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::DisconnectNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisconnectNotification_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisconnectNotification_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_DisconnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_DisconnectRequest_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::DisconnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::DisconnectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisconnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisconnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_EchoRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_EchoRequest_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::EchoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::EchoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EchoRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EchoRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {
      &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_EchoResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_EchoResponse_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::EchoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::EchoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EchoResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_EncryptRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::connection::v1::_EncryptRequest_default_instance_;
    new (ptr) ::bgs::protocol::connection::v1::EncryptRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::connection::v1::EncryptRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EncryptRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectRequest, bind_request_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectRequest, use_bindless_rpc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectionMeteringContentHandles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectionMeteringContentHandles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectionMeteringContentHandles, content_handle_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, server_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, client_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, bind_result_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, bind_response_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, content_handle_array_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, server_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, use_bindless_rpc_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::ConnectResponse, binary_content_handle_array_),
  0,
  1,
  5,
  2,
  3,
  7,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BoundService, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BoundService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BoundService, hash_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BoundService, id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindRequest, deprecated_imported_service_hash_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindRequest, deprecated_exported_service_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindRequest, exported_service_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindRequest, imported_service_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::BindResponse, imported_service_id_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoRequest, time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoRequest, network_only_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoRequest, payload_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoRequest, forward_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoRequest, forward_client_id_),
  3,
  4,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoResponse, time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EchoResponse, payload_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::DisconnectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::DisconnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::DisconnectRequest, error_code_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::DisconnectNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::DisconnectNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::DisconnectNotification, error_code_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::DisconnectNotification, reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EncryptRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::connection::v1::EncryptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::bgs::protocol::connection::v1::ConnectRequest)},
  { 11, 17, sizeof(::bgs::protocol::connection::v1::ConnectionMeteringContentHandles)},
  { 18, 31, sizeof(::bgs::protocol::connection::v1::ConnectResponse)},
  { 39, 46, sizeof(::bgs::protocol::connection::v1::BoundService)},
  { 48, 57, sizeof(::bgs::protocol::connection::v1::BindRequest)},
  { 61, 67, sizeof(::bgs::protocol::connection::v1::BindResponse)},
  { 68, 78, sizeof(::bgs::protocol::connection::v1::EchoRequest)},
  { 83, 90, sizeof(::bgs::protocol::connection::v1::EchoResponse)},
  { 92, 98, sizeof(::bgs::protocol::connection::v1::DisconnectRequest)},
  { 99, 106, sizeof(::bgs::protocol::connection::v1::DisconnectNotification)},
  { 108, 113, sizeof(::bgs::protocol::connection::v1::EncryptRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_ConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_ConnectionMeteringContentHandles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_ConnectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_BoundService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_BindRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_BindResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_EchoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_EchoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_DisconnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_DisconnectNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::connection::v1::_EncryptRequest_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*bgs/low/pb/client/connection_service.p"
  "roto\022\032bgs.protocol.connection.v1\032,bgs/lo"
  "w/pb/client/content_handle_types.proto\032!"
  "bgs/low/pb/client/rpc_types.proto\"\233\001\n\016Co"
  "nnectRequest\022*\n\tclient_id\030\001 \001(\0132\027.bgs.pr"
  "otocol.ProcessId\022=\n\014bind_request\030\002 \001(\0132\'"
  ".bgs.protocol.connection.v1.BindRequest\022"
  "\036\n\020use_bindless_rpc\030\003 \001(\010:\004true\"W\n Conne"
  "ctionMeteringContentHandles\0223\n\016content_h"
  "andle\030\001 \003(\0132\033.bgs.protocol.ContentHandle"
  "\"\264\003\n\017ConnectResponse\022*\n\tserver_id\030\001 \002(\0132"
  "\027.bgs.protocol.ProcessId\022*\n\tclient_id\030\002 "
  "\001(\0132\027.bgs.protocol.ProcessId\022\023\n\013bind_res"
  "ult\030\003 \001(\r\022\?\n\rbind_response\030\004 \001(\0132(.bgs.p"
  "rotocol.connection.v1.BindResponse\022Z\n\024co"
  "ntent_handle_array\030\005 \001(\0132<.bgs.protocol."
  "connection.v1.ConnectionMeteringContentH"
  "andles\022\023\n\013server_time\030\006 \001(\004\022\037\n\020use_bindl"
  "ess_rpc\030\007 \001(\010:\005false\022a\n\033binary_content_h"
  "andle_array\030\010 \001(\0132<.bgs.protocol.connect"
  "ion.v1.ConnectionMeteringContentHandles\""
  "(\n\014BoundService\022\014\n\004hash\030\001 \002(\007\022\n\n\002id\030\002 \002("
  "\r\"\230\002\n\013BindRequest\022.\n deprecated_imported"
  "_service_hash\030\001 \003(\007B\004\020\001\030\001\022Q\n\033deprecated_"
  "exported_service\030\002 \003(\0132(.bgs.protocol.co"
  "nnection.v1.BoundServiceB\002\030\001\022B\n\020exported"
  "_service\030\003 \003(\0132(.bgs.protocol.connection"
  ".v1.BoundService\022B\n\020imported_service\030\004 \003"
  "(\0132(.bgs.protocol.connection.v1.BoundSer"
  "vice\"1\n\014BindResponse\022!\n\023imported_service"
  "_id\030\001 \003(\rB\004\020\001\030\001\"\216\001\n\013EchoRequest\022\014\n\004time\030"
  "\001 \001(\006\022\033\n\014network_only\030\002 \001(\010:\005false\022\017\n\007pa"
  "yload\030\003 \001(\014\022(\n\007forward\030\004 \001(\0132\027.bgs.proto"
  "col.ProcessId\022\031\n\021forward_client_id\030\005 \001(\t"
  "\"-\n\014EchoResponse\022\014\n\004time\030\001 \001(\006\022\017\n\007payloa"
  "d\030\002 \001(\014\"\'\n\021DisconnectRequest\022\022\n\nerror_co"
  "de\030\001 \002(\r\"<\n\026DisconnectNotification\022\022\n\ner"
  "ror_code\030\001 \002(\r\022\016\n\006reason\030\002 \001(\t\"\020\n\016Encryp"
  "tRequest2\205\006\n\021ConnectionService\022j\n\007Connec"
  "t\022*.bgs.protocol.connection.v1.ConnectRe"
  "quest\032+.bgs.protocol.connection.v1.Conne"
  "ctResponse\"\006\202\371+\002\010\001\022d\n\004Bind\022\'.bgs.protoco"
  "l.connection.v1.BindRequest\032(.bgs.protoc"
  "ol.connection.v1.BindResponse\"\t\210\002\001\202\371+\002\010\002"
  "\022a\n\004Echo\022\'.bgs.protocol.connection.v1.Ec"
  "hoRequest\032(.bgs.protocol.connection.v1.E"
  "choResponse\"\006\202\371+\002\010\003\022h\n\017ForceDisconnect\0222"
  ".bgs.protocol.connection.v1.DisconnectNo"
  "tification\032\031.bgs.protocol.NO_RESPONSE\"\006\202"
  "\371+\002\010\004\022D\n\tKeepAlive\022\024.bgs.protocol.NoData"
  "\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\005\022V\n\007E"
  "ncrypt\022*.bgs.protocol.connection.v1.Encr"
  "yptRequest\032\024.bgs.protocol.NoData\"\t\210\002\001\202\371+"
  "\002\010\006\022e\n\021RequestDisconnect\022-.bgs.protocol."
  "connection.v1.DisconnectRequest\032\031.bgs.pr"
  "otocol.NO_RESPONSE\"\006\202\371+\002\010\007\032L\202\371+,\n*bnet.p"
  "rotocol.connection.ConnectionService\202\371+\014"
  "*\nconnection\212\371+\002\010\001\212\371+\002\020\001B;\n\033bnet.protoco"
  "l.connection.v1B\026ConnectionServiceProto\200"
  "\001\000\210\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto_deps[2] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto_sccs[11] = {
  &scc_info_BindRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_BindResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_BoundService_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_ConnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_ConnectResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_ConnectionMeteringContentHandles_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_DisconnectNotification_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_DisconnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_EchoRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_EchoResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
  &scc_info_EncryptRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto, "bgs/low/pb/client/connection_service.proto", 2365,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto, 11, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto)), true);
namespace bgs {
namespace protocol {
namespace connection {
namespace v1 {

// ===================================================================

void ConnectRequest::InitAsDefaultInstance() {
  ::bgs::protocol::connection::v1::_ConnectRequest_default_instance_._instance.get_mutable()->client_id_ = const_cast< ::bgs::protocol::ProcessId*>(
      ::bgs::protocol::ProcessId::internal_default_instance());
  ::bgs::protocol::connection::v1::_ConnectRequest_default_instance_._instance.get_mutable()->bind_request_ = const_cast< ::bgs::protocol::connection::v1::BindRequest*>(
      ::bgs::protocol::connection::v1::BindRequest::internal_default_instance());
}
class ConnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectRequest>()._has_bits_);
  static const ::bgs::protocol::ProcessId& client_id(const ConnectRequest* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::connection::v1::BindRequest& bind_request(const ConnectRequest* msg);
  static void set_has_bind_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_bindless_rpc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::ProcessId&
ConnectRequest::_Internal::client_id(const ConnectRequest* msg) {
  return *msg->client_id_;
}
const ::bgs::protocol::connection::v1::BindRequest&
ConnectRequest::_Internal::bind_request(const ConnectRequest* msg) {
  return *msg->bind_request_;
}
void ConnectRequest::clear_client_id() {
  if (client_id_ != nullptr) client_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ConnectRequest::ConnectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_client_id()) {
    client_id_ = new ::bgs::protocol::ProcessId(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  if (from._internal_has_bind_request()) {
    bind_request_ = new ::bgs::protocol::connection::v1::BindRequest(*from.bind_request_);
  } else {
    bind_request_ = nullptr;
  }
  use_bindless_rpc_ = from.use_bindless_rpc_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bind_request_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(bind_request_));
  use_bindless_rpc_ = true;
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (this != internal_default_instance()) delete client_id_;
  if (this != internal_default_instance()) delete bind_request_;
}

void ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectRequest& ConnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bind_request_ != nullptr);
      bind_request_->Clear();
    }
    use_bindless_rpc_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.ProcessId client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.connection.v1.BindRequest bind_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bind_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_bindless_rpc = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_bindless_rpc(&has_bits);
          use_bindless_rpc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.ProcessId client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client_id(this), target, stream);
  }

  // optional .bgs.protocol.connection.v1.BindRequest bind_request = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bind_request(this), target, stream);
  }

  // optional bool use_bindless_rpc = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_bindless_rpc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.ConnectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.ProcessId client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional .bgs.protocol.connection.v1.BindRequest bind_request = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bind_request_);
    }

    // optional bool use_bindless_rpc = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.ConnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.ConnectRequest)
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_id()->::bgs::protocol::ProcessId::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bind_request()->::bgs::protocol::connection::v1::BindRequest::MergeFrom(from._internal_bind_request());
    }
    if (cached_has_bits & 0x00000004u) {
      use_bindless_rpc_ = from.use_bindless_rpc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  if (_internal_has_client_id()) {
    if (!client_id_->IsInitialized()) return false;
  }
  if (_internal_has_bind_request()) {
    if (!bind_request_->IsInitialized()) return false;
  }
  return true;
}

void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
  swap(bind_request_, other->bind_request_);
  swap(use_bindless_rpc_, other->use_bindless_rpc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectionMeteringContentHandles::InitAsDefaultInstance() {
}
class ConnectionMeteringContentHandles::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionMeteringContentHandles>()._has_bits_);
};

void ConnectionMeteringContentHandles::clear_content_handle() {
  content_handle_.Clear();
}
ConnectionMeteringContentHandles::ConnectionMeteringContentHandles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
}
ConnectionMeteringContentHandles::ConnectionMeteringContentHandles(const ConnectionMeteringContentHandles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      content_handle_(from.content_handle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
}

void ConnectionMeteringContentHandles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectionMeteringContentHandles_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
}

ConnectionMeteringContentHandles::~ConnectionMeteringContentHandles() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  SharedDtor();
}

void ConnectionMeteringContentHandles::SharedDtor() {
}

void ConnectionMeteringContentHandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionMeteringContentHandles& ConnectionMeteringContentHandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionMeteringContentHandles_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConnectionMeteringContentHandles::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_handle_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConnectionMeteringContentHandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.ContentHandle content_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_handle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionMeteringContentHandles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.ContentHandle content_handle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_handle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_content_handle(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  return target;
}

size_t ConnectionMeteringContentHandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.ContentHandle content_handle = 1;
  total_size += 1UL * this->_internal_content_handle_size();
  for (const auto& msg : this->content_handle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionMeteringContentHandles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionMeteringContentHandles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionMeteringContentHandles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
    MergeFrom(*source);
  }
}

void ConnectionMeteringContentHandles::MergeFrom(const ConnectionMeteringContentHandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_handle_.MergeFrom(from.content_handle_);
}

void ConnectionMeteringContentHandles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionMeteringContentHandles::CopyFrom(const ConnectionMeteringContentHandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionMeteringContentHandles::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(content_handle_)) return false;
  return true;
}

void ConnectionMeteringContentHandles::InternalSwap(ConnectionMeteringContentHandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_handle_.InternalSwap(&other->content_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionMeteringContentHandles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectResponse::InitAsDefaultInstance() {
  ::bgs::protocol::connection::v1::_ConnectResponse_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::bgs::protocol::ProcessId*>(
      ::bgs::protocol::ProcessId::internal_default_instance());
  ::bgs::protocol::connection::v1::_ConnectResponse_default_instance_._instance.get_mutable()->client_id_ = const_cast< ::bgs::protocol::ProcessId*>(
      ::bgs::protocol::ProcessId::internal_default_instance());
  ::bgs::protocol::connection::v1::_ConnectResponse_default_instance_._instance.get_mutable()->bind_response_ = const_cast< ::bgs::protocol::connection::v1::BindResponse*>(
      ::bgs::protocol::connection::v1::BindResponse::internal_default_instance());
  ::bgs::protocol::connection::v1::_ConnectResponse_default_instance_._instance.get_mutable()->content_handle_array_ = const_cast< ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles*>(
      ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles::internal_default_instance());
  ::bgs::protocol::connection::v1::_ConnectResponse_default_instance_._instance.get_mutable()->binary_content_handle_array_ = const_cast< ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles*>(
      ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles::internal_default_instance());
}
class ConnectResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectResponse>()._has_bits_);
  static const ::bgs::protocol::ProcessId& server_id(const ConnectResponse* msg);
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::ProcessId& client_id(const ConnectResponse* msg);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bind_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::bgs::protocol::connection::v1::BindResponse& bind_response(const ConnectResponse* msg);
  static void set_has_bind_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& content_handle_array(const ConnectResponse* msg);
  static void set_has_content_handle_array(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_use_bindless_rpc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& binary_content_handle_array(const ConnectResponse* msg);
  static void set_has_binary_content_handle_array(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::bgs::protocol::ProcessId&
ConnectResponse::_Internal::server_id(const ConnectResponse* msg) {
  return *msg->server_id_;
}
const ::bgs::protocol::ProcessId&
ConnectResponse::_Internal::client_id(const ConnectResponse* msg) {
  return *msg->client_id_;
}
const ::bgs::protocol::connection::v1::BindResponse&
ConnectResponse::_Internal::bind_response(const ConnectResponse* msg) {
  return *msg->bind_response_;
}
const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles&
ConnectResponse::_Internal::content_handle_array(const ConnectResponse* msg) {
  return *msg->content_handle_array_;
}
const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles&
ConnectResponse::_Internal::binary_content_handle_array(const ConnectResponse* msg) {
  return *msg->binary_content_handle_array_;
}
void ConnectResponse::clear_server_id() {
  if (server_id_ != nullptr) server_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectResponse::clear_client_id() {
  if (client_id_ != nullptr) client_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ConnectResponse::ConnectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.ConnectResponse)
}
ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_server_id()) {
    server_id_ = new ::bgs::protocol::ProcessId(*from.server_id_);
  } else {
    server_id_ = nullptr;
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::bgs::protocol::ProcessId(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  if (from._internal_has_bind_response()) {
    bind_response_ = new ::bgs::protocol::connection::v1::BindResponse(*from.bind_response_);
  } else {
    bind_response_ = nullptr;
  }
  if (from._internal_has_content_handle_array()) {
    content_handle_array_ = new ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles(*from.content_handle_array_);
  } else {
    content_handle_array_ = nullptr;
  }
  if (from._internal_has_binary_content_handle_array()) {
    binary_content_handle_array_ = new ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles(*from.binary_content_handle_array_);
  } else {
    binary_content_handle_array_ = nullptr;
  }
  ::memcpy(&bind_result_, &from.bind_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&bind_result_)) + sizeof(server_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.ConnectResponse)
}

void ConnectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_time_));
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.ConnectResponse)
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
  if (this != internal_default_instance()) delete server_id_;
  if (this != internal_default_instance()) delete client_id_;
  if (this != internal_default_instance()) delete bind_response_;
  if (this != internal_default_instance()) delete content_handle_array_;
  if (this != internal_default_instance()) delete binary_content_handle_array_;
}

void ConnectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectResponse& ConnectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.ConnectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_id_ != nullptr);
      server_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(client_id_ != nullptr);
      client_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bind_response_ != nullptr);
      bind_response_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(content_handle_array_ != nullptr);
      content_handle_array_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(binary_content_handle_array_ != nullptr);
      binary_content_handle_array_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&bind_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_time_) -
        reinterpret_cast<char*>(&bind_result_)) + sizeof(server_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConnectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.ProcessId server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ProcessId client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bind_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bind_result(&has_bits);
          bind_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.connection.v1.BindResponse bind_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bind_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles content_handle_array = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_content_handle_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 server_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_bindless_rpc = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_bindless_rpc(&has_bits);
          use_bindless_rpc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles binary_content_handle_array = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_content_handle_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.ConnectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.ProcessId server_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server_id(this), target, stream);
  }

  // optional .bgs.protocol.ProcessId client_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client_id(this), target, stream);
  }

  // optional uint32 bind_result = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bind_result(), target);
  }

  // optional .bgs.protocol.connection.v1.BindResponse bind_response = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bind_response(this), target, stream);
  }

  // optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles content_handle_array = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::content_handle_array(this), target, stream);
  }

  // optional uint64 server_time = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_server_time(), target);
  }

  // optional bool use_bindless_rpc = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_use_bindless_rpc(), target);
  }

  // optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles binary_content_handle_array = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::binary_content_handle_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.ConnectResponse)
  return target;
}

size_t ConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.ConnectResponse)
  size_t total_size = 0;

  // required .bgs.protocol.ProcessId server_id = 1;
  if (_internal_has_server_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .bgs.protocol.ProcessId client_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_id_);
    }

    // optional .bgs.protocol.connection.v1.BindResponse bind_response = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bind_response_);
    }

    // optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles content_handle_array = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_handle_array_);
    }

    // optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles binary_content_handle_array = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *binary_content_handle_array_);
    }

    // optional uint32 bind_result = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bind_result());
    }

    // optional bool use_bindless_rpc = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 server_time = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_server_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.ConnectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.ConnectResponse)
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_server_id()->::bgs::protocol::ProcessId::MergeFrom(from._internal_server_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_client_id()->::bgs::protocol::ProcessId::MergeFrom(from._internal_client_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bind_response()->::bgs::protocol::connection::v1::BindResponse::MergeFrom(from._internal_bind_response());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_content_handle_array()->::bgs::protocol::connection::v1::ConnectionMeteringContentHandles::MergeFrom(from._internal_content_handle_array());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_binary_content_handle_array()->::bgs::protocol::connection::v1::ConnectionMeteringContentHandles::MergeFrom(from._internal_binary_content_handle_array());
    }
    if (cached_has_bits & 0x00000020u) {
      bind_result_ = from.bind_result_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_bindless_rpc_ = from.use_bindless_rpc_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_time_ = from.server_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_server_id()) {
    if (!server_id_->IsInitialized()) return false;
  }
  if (_internal_has_client_id()) {
    if (!client_id_->IsInitialized()) return false;
  }
  if (_internal_has_content_handle_array()) {
    if (!content_handle_array_->IsInitialized()) return false;
  }
  if (_internal_has_binary_content_handle_array()) {
    if (!binary_content_handle_array_->IsInitialized()) return false;
  }
  return true;
}

void ConnectResponse::InternalSwap(ConnectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_id_, other->server_id_);
  swap(client_id_, other->client_id_);
  swap(bind_response_, other->bind_response_);
  swap(content_handle_array_, other->content_handle_array_);
  swap(binary_content_handle_array_, other->binary_content_handle_array_);
  swap(bind_result_, other->bind_result_);
  swap(use_bindless_rpc_, other->use_bindless_rpc_);
  swap(server_time_, other->server_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundService::InitAsDefaultInstance() {
}
class BoundService::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundService>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BoundService::BoundService()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.BoundService)
}
BoundService::BoundService(const BoundService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.BoundService)
}

void BoundService::SharedCtor() {
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(id_));
}

BoundService::~BoundService() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.BoundService)
  SharedDtor();
}

void BoundService::SharedDtor() {
}

void BoundService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundService& BoundService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundService_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BoundService::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.BoundService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BoundService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.BoundService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_hash(), target);
  }

  // required uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.BoundService)
  return target;
}

size_t BoundService::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.connection.v1.BoundService)
  size_t total_size = 0;

  if (_internal_has_hash()) {
    // required fixed32 hash = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_id()) {
    // required uint32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t BoundService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.BoundService)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed32 hash = 1;
    total_size += 1 + 4;

    // required uint32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.BoundService)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.BoundService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.BoundService)
    MergeFrom(*source);
  }
}

void BoundService::MergeFrom(const BoundService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.BoundService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.BoundService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundService::CopyFrom(const BoundService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.BoundService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundService::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BoundService::InternalSwap(BoundService* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hash_, other->hash_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BindRequest::InitAsDefaultInstance() {
}
class BindRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BindRequest>()._has_bits_);
};

BindRequest::BindRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.BindRequest)
}
BindRequest::BindRequest(const BindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      deprecated_imported_service_hash_(from.deprecated_imported_service_hash_),
      deprecated_exported_service_(from.deprecated_exported_service_),
      exported_service_(from.exported_service_),
      imported_service_(from.imported_service_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.BindRequest)
}

void BindRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BindRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
}

BindRequest::~BindRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.BindRequest)
  SharedDtor();
}

void BindRequest::SharedDtor() {
}

void BindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BindRequest& BindRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BindRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.BindRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_imported_service_hash_.Clear();
  deprecated_exported_service_.Clear();
  exported_service_.Clear();
  imported_service_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BindRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed32 deprecated_imported_service_hash = 1 [packed = true, deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_deprecated_imported_service_hash(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_deprecated_imported_service_hash(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.connection.v1.BoundService deprecated_exported_service = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deprecated_exported_service(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.connection.v1.BoundService exported_service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exported_service(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.connection.v1.BoundService imported_service = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imported_service(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BindRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.BindRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 deprecated_imported_service_hash = 1 [packed = true, deprecated = true];
  if (this->_internal_deprecated_imported_service_hash_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_deprecated_imported_service_hash(), target);
  }

  // repeated .bgs.protocol.connection.v1.BoundService deprecated_exported_service = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deprecated_exported_service_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_deprecated_exported_service(i), target, stream);
  }

  // repeated .bgs.protocol.connection.v1.BoundService exported_service = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exported_service_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_exported_service(i), target, stream);
  }

  // repeated .bgs.protocol.connection.v1.BoundService imported_service = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imported_service_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_imported_service(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.BindRequest)
  return target;
}

size_t BindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.BindRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 deprecated_imported_service_hash = 1 [packed = true, deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_deprecated_imported_service_hash_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _deprecated_imported_service_hash_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .bgs.protocol.connection.v1.BoundService deprecated_exported_service = 2 [deprecated = true];
  total_size += 1UL * this->_internal_deprecated_exported_service_size();
  for (const auto& msg : this->deprecated_exported_service_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.connection.v1.BoundService exported_service = 3;
  total_size += 1UL * this->_internal_exported_service_size();
  for (const auto& msg : this->exported_service_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.connection.v1.BoundService imported_service = 4;
  total_size += 1UL * this->_internal_imported_service_size();
  for (const auto& msg : this->imported_service_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BindRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.BindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BindRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.BindRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.BindRequest)
    MergeFrom(*source);
  }
}

void BindRequest::MergeFrom(const BindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.BindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_imported_service_hash_.MergeFrom(from.deprecated_imported_service_hash_);
  deprecated_exported_service_.MergeFrom(from.deprecated_exported_service_);
  exported_service_.MergeFrom(from.exported_service_);
  imported_service_.MergeFrom(from.imported_service_);
}

void BindRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.BindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindRequest::CopyFrom(const BindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.BindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(deprecated_exported_service_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(exported_service_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(imported_service_)) return false;
  return true;
}

void BindRequest::InternalSwap(BindRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deprecated_imported_service_hash_.InternalSwap(&other->deprecated_imported_service_hash_);
  deprecated_exported_service_.InternalSwap(&other->deprecated_exported_service_);
  exported_service_.InternalSwap(&other->exported_service_);
  imported_service_.InternalSwap(&other->imported_service_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BindRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BindResponse::InitAsDefaultInstance() {
}
class BindResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BindResponse>()._has_bits_);
};

BindResponse::BindResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.BindResponse)
}
BindResponse::BindResponse(const BindResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      imported_service_id_(from.imported_service_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.BindResponse)
}

void BindResponse::SharedCtor() {
}

BindResponse::~BindResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.BindResponse)
  SharedDtor();
}

void BindResponse::SharedDtor() {
}

void BindResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BindResponse& BindResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BindResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.BindResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imported_service_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BindResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 imported_service_id = 1 [packed = true, deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_imported_service_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_imported_service_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BindResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.BindResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 imported_service_id = 1 [packed = true, deprecated = true];
  {
    int byte_size = _imported_service_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_imported_service_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.BindResponse)
  return target;
}

size_t BindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.BindResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 imported_service_id = 1 [packed = true, deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->imported_service_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _imported_service_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BindResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.BindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BindResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.BindResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.BindResponse)
    MergeFrom(*source);
  }
}

void BindResponse::MergeFrom(const BindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.BindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imported_service_id_.MergeFrom(from.imported_service_id_);
}

void BindResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.BindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindResponse::CopyFrom(const BindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.BindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindResponse::IsInitialized() const {
  return true;
}

void BindResponse::InternalSwap(BindResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  imported_service_id_.InternalSwap(&other->imported_service_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BindResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EchoRequest::InitAsDefaultInstance() {
  ::bgs::protocol::connection::v1::_EchoRequest_default_instance_._instance.get_mutable()->forward_ = const_cast< ::bgs::protocol::ProcessId*>(
      ::bgs::protocol::ProcessId::internal_default_instance());
}
class EchoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EchoRequest>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_network_only(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::ProcessId& forward(const EchoRequest* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_forward_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::ProcessId&
EchoRequest::_Internal::forward(const EchoRequest* msg) {
  return *msg->forward_;
}
void EchoRequest::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
EchoRequest::EchoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  forward_client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_forward_client_id()) {
    forward_client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.forward_client_id_);
  }
  if (from._internal_has_forward()) {
    forward_ = new ::bgs::protocol::ProcessId(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_only_) -
    reinterpret_cast<char*>(&time_)) + sizeof(network_only_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.EchoRequest)
}

void EchoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forward_client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&forward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_only_) -
      reinterpret_cast<char*>(&forward_)) + sizeof(network_only_));
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.EchoRequest)
  SharedDtor();
}

void EchoRequest::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forward_client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete forward_;
}

void EchoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoRequest& EchoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.EchoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      forward_client_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_only_) -
        reinterpret_cast<char*>(&time_)) + sizeof(network_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EchoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool network_only = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_network_only(&has_bits);
          network_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ProcessId forward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string forward_client_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_forward_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.connection.v1.EchoRequest.forward_client_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.EchoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 time = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_time(), target);
  }

  // optional bool network_only = 2 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_network_only(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // optional .bgs.protocol.ProcessId forward = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::forward(this), target, stream);
  }

  // optional string forward_client_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_forward_client_id().data(), static_cast<int>(this->_internal_forward_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.connection.v1.EchoRequest.forward_client_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_forward_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.EchoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional string forward_client_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_forward_client_id());
    }

    // optional .bgs.protocol.ProcessId forward = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

    // optional fixed64 time = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool network_only = 2 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.EchoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.EchoRequest)
    MergeFrom(*source);
  }
}

void EchoRequest::MergeFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      forward_client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.forward_client_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_forward()->::bgs::protocol::ProcessId::MergeFrom(from._internal_forward());
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      network_only_ = from.network_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EchoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  if (_internal_has_forward()) {
    if (!forward_->IsInitialized()) return false;
  }
  return true;
}

void EchoRequest::InternalSwap(EchoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  forward_client_id_.Swap(&other->forward_client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(forward_, other->forward_);
  swap(time_, other->time_);
  swap(network_only_, other->network_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EchoResponse::InitAsDefaultInstance() {
}
class EchoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EchoResponse>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EchoResponse::EchoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.EchoResponse)
}
EchoResponse::EchoResponse(const EchoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.EchoResponse)
}

void EchoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_ULONGLONG(0);
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.EchoResponse)
  SharedDtor();
}

void EchoResponse::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoResponse& EchoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoResponse_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EchoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.EchoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EchoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.EchoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_time(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.EchoResponse)
  return target;
}

size_t EchoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.EchoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional fixed64 time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.EchoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.EchoResponse)
    MergeFrom(*source);
  }
}

void EchoResponse::MergeFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EchoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const {
  return true;
}

void EchoResponse::InternalSwap(EchoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisconnectRequest::InitAsDefaultInstance() {
}
class DisconnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DisconnectRequest>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisconnectRequest::DisconnectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.DisconnectRequest)
}
DisconnectRequest::DisconnectRequest(const DisconnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.DisconnectRequest)
}

void DisconnectRequest::SharedCtor() {
  error_code_ = 0u;
}

DisconnectRequest::~DisconnectRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.DisconnectRequest)
  SharedDtor();
}

void DisconnectRequest::SharedDtor() {
}

void DisconnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisconnectRequest& DisconnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisconnectRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DisconnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.DisconnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DisconnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisconnectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.DisconnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.DisconnectRequest)
  return target;
}

size_t DisconnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.DisconnectRequest)
  size_t total_size = 0;

  // required uint32 error_code = 1;
  if (_internal_has_error_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisconnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.DisconnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisconnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisconnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.DisconnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.DisconnectRequest)
    MergeFrom(*source);
  }
}

void DisconnectRequest::MergeFrom(const DisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.DisconnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error_code()) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void DisconnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.DisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectRequest::CopyFrom(const DisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.DisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DisconnectRequest::InternalSwap(DisconnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisconnectNotification::InitAsDefaultInstance() {
}
class DisconnectNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<DisconnectNotification>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisconnectNotification::DisconnectNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.DisconnectNotification)
}
DisconnectNotification::DisconnectNotification(const DisconnectNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.DisconnectNotification)
}

void DisconnectNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisconnectNotification_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0u;
}

DisconnectNotification::~DisconnectNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.DisconnectNotification)
  SharedDtor();
}

void DisconnectNotification::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisconnectNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisconnectNotification& DisconnectNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisconnectNotification_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DisconnectNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.DisconnectNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  error_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DisconnectNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.connection.v1.DisconnectNotification.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisconnectNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.DisconnectNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.connection.v1.DisconnectNotification.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.DisconnectNotification)
  return target;
}

size_t DisconnectNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.DisconnectNotification)
  size_t total_size = 0;

  // required uint32 error_code = 1;
  if (_internal_has_error_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisconnectNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.DisconnectNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const DisconnectNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisconnectNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.DisconnectNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.DisconnectNotification)
    MergeFrom(*source);
  }
}

void DisconnectNotification::MergeFrom(const DisconnectNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.DisconnectNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisconnectNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.DisconnectNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectNotification::CopyFrom(const DisconnectNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.DisconnectNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void DisconnectNotification::InternalSwap(DisconnectNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncryptRequest::InitAsDefaultInstance() {
}
class EncryptRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptRequest>()._has_bits_);
};

EncryptRequest::EncryptRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.EncryptRequest)
}
EncryptRequest::EncryptRequest(const EncryptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.EncryptRequest)
}

void EncryptRequest::SharedCtor() {
}

EncryptRequest::~EncryptRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.EncryptRequest)
  SharedDtor();
}

void EncryptRequest::SharedDtor() {
}

void EncryptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptRequest& EncryptRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncryptRequest_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EncryptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.connection.v1.EncryptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EncryptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncryptRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.connection.v1.EncryptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.connection.v1.EncryptRequest)
  return target;
}

size_t EncryptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.connection.v1.EncryptRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.connection.v1.EncryptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncryptRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.connection.v1.EncryptRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.connection.v1.EncryptRequest)
    MergeFrom(*source);
  }
}

void EncryptRequest::MergeFrom(const EncryptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.connection.v1.EncryptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EncryptRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.connection.v1.EncryptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptRequest::CopyFrom(const EncryptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.connection.v1.EncryptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptRequest::IsInitialized() const {
  return true;
}

void EncryptRequest::InternalSwap(EncryptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace connection
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::ConnectRequest* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::ConnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::ConnectResponse* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::ConnectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::ConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::BoundService* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::BoundService >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::BoundService >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::BindRequest* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::BindRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::BindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::BindResponse* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::BindResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::BindResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::EchoRequest* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::EchoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::EchoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::EchoResponse* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::EchoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::EchoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::DisconnectRequest* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::DisconnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::DisconnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::DisconnectNotification* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::DisconnectNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::DisconnectNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::connection::v1::EncryptRequest* Arena::CreateMaybeMessage< ::bgs::protocol::connection::v1::EncryptRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::connection::v1::EncryptRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
