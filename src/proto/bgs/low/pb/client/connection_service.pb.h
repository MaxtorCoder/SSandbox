// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/connection_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/content_handle_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
namespace bgs {
namespace protocol {
namespace connection {
namespace v1 {
class BindRequest;
class BindRequestDefaultTypeInternal;
extern BindRequestDefaultTypeInternal _BindRequest_default_instance_;
class BindResponse;
class BindResponseDefaultTypeInternal;
extern BindResponseDefaultTypeInternal _BindResponse_default_instance_;
class BoundService;
class BoundServiceDefaultTypeInternal;
extern BoundServiceDefaultTypeInternal _BoundService_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectResponse;
class ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class ConnectionMeteringContentHandles;
class ConnectionMeteringContentHandlesDefaultTypeInternal;
extern ConnectionMeteringContentHandlesDefaultTypeInternal _ConnectionMeteringContentHandles_default_instance_;
class DisconnectNotification;
class DisconnectNotificationDefaultTypeInternal;
extern DisconnectNotificationDefaultTypeInternal _DisconnectNotification_default_instance_;
class DisconnectRequest;
class DisconnectRequestDefaultTypeInternal;
extern DisconnectRequestDefaultTypeInternal _DisconnectRequest_default_instance_;
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoResponse;
class EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
class EncryptRequest;
class EncryptRequestDefaultTypeInternal;
extern EncryptRequestDefaultTypeInternal _EncryptRequest_default_instance_;
}  // namespace v1
}  // namespace connection
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::connection::v1::BindRequest* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::BindRequest>(Arena*);
template<> ::bgs::protocol::connection::v1::BindResponse* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::BindResponse>(Arena*);
template<> ::bgs::protocol::connection::v1::BoundService* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::BoundService>(Arena*);
template<> ::bgs::protocol::connection::v1::ConnectRequest* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::ConnectRequest>(Arena*);
template<> ::bgs::protocol::connection::v1::ConnectResponse* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::ConnectResponse>(Arena*);
template<> ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::ConnectionMeteringContentHandles>(Arena*);
template<> ::bgs::protocol::connection::v1::DisconnectNotification* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::DisconnectNotification>(Arena*);
template<> ::bgs::protocol::connection::v1::DisconnectRequest* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::DisconnectRequest>(Arena*);
template<> ::bgs::protocol::connection::v1::EchoRequest* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::EchoRequest>(Arena*);
template<> ::bgs::protocol::connection::v1::EchoResponse* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::EchoResponse>(Arena*);
template<> ::bgs::protocol::connection::v1::EncryptRequest* Arena::CreateMaybeMessage<::bgs::protocol::connection::v1::EncryptRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace connection {
namespace v1 {

// ===================================================================

class ConnectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const final {
    return CreateMaybeMessage<ConnectRequest>(nullptr);
  }

  ConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.ConnectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kBindRequestFieldNumber = 2,
    kUseBindlessRpcFieldNumber = 3,
  };
  // optional .bgs.protocol.ProcessId client_id = 1;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const ::bgs::protocol::ProcessId& client_id() const;
  ::bgs::protocol::ProcessId* release_client_id();
  ::bgs::protocol::ProcessId* mutable_client_id();
  void set_allocated_client_id(::bgs::protocol::ProcessId* client_id);
  private:
  const ::bgs::protocol::ProcessId& _internal_client_id() const;
  ::bgs::protocol::ProcessId* _internal_mutable_client_id();
  public:

  // optional .bgs.protocol.connection.v1.BindRequest bind_request = 2;
  bool has_bind_request() const;
  private:
  bool _internal_has_bind_request() const;
  public:
  void clear_bind_request();
  const ::bgs::protocol::connection::v1::BindRequest& bind_request() const;
  ::bgs::protocol::connection::v1::BindRequest* release_bind_request();
  ::bgs::protocol::connection::v1::BindRequest* mutable_bind_request();
  void set_allocated_bind_request(::bgs::protocol::connection::v1::BindRequest* bind_request);
  private:
  const ::bgs::protocol::connection::v1::BindRequest& _internal_bind_request() const;
  ::bgs::protocol::connection::v1::BindRequest* _internal_mutable_bind_request();
  public:

  // optional bool use_bindless_rpc = 3 [default = true];
  bool has_use_bindless_rpc() const;
  private:
  bool _internal_has_use_bindless_rpc() const;
  public:
  void clear_use_bindless_rpc();
  bool use_bindless_rpc() const;
  void set_use_bindless_rpc(bool value);
  private:
  bool _internal_use_bindless_rpc() const;
  void _internal_set_use_bindless_rpc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.ConnectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::ProcessId* client_id_;
  ::bgs::protocol::connection::v1::BindRequest* bind_request_;
  bool use_bindless_rpc_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ConnectionMeteringContentHandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.ConnectionMeteringContentHandles) */ {
 public:
  ConnectionMeteringContentHandles();
  virtual ~ConnectionMeteringContentHandles();

  ConnectionMeteringContentHandles(const ConnectionMeteringContentHandles& from);
  ConnectionMeteringContentHandles(ConnectionMeteringContentHandles&& from) noexcept
    : ConnectionMeteringContentHandles() {
    *this = ::std::move(from);
  }

  inline ConnectionMeteringContentHandles& operator=(const ConnectionMeteringContentHandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionMeteringContentHandles& operator=(ConnectionMeteringContentHandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionMeteringContentHandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionMeteringContentHandles* internal_default_instance() {
    return reinterpret_cast<const ConnectionMeteringContentHandles*>(
               &_ConnectionMeteringContentHandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectionMeteringContentHandles& a, ConnectionMeteringContentHandles& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionMeteringContentHandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionMeteringContentHandles* New() const final {
    return CreateMaybeMessage<ConnectionMeteringContentHandles>(nullptr);
  }

  ConnectionMeteringContentHandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionMeteringContentHandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionMeteringContentHandles& from);
  void MergeFrom(const ConnectionMeteringContentHandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionMeteringContentHandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.ConnectionMeteringContentHandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentHandleFieldNumber = 1,
  };
  // repeated .bgs.protocol.ContentHandle content_handle = 1;
  int content_handle_size() const;
  private:
  int _internal_content_handle_size() const;
  public:
  void clear_content_handle();
  ::bgs::protocol::ContentHandle* mutable_content_handle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ContentHandle >*
      mutable_content_handle();
  private:
  const ::bgs::protocol::ContentHandle& _internal_content_handle(int index) const;
  ::bgs::protocol::ContentHandle* _internal_add_content_handle();
  public:
  const ::bgs::protocol::ContentHandle& content_handle(int index) const;
  ::bgs::protocol::ContentHandle* add_content_handle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ContentHandle >&
      content_handle() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ContentHandle > content_handle_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.ConnectResponse) */ {
 public:
  ConnectResponse();
  virtual ~ConnectResponse();

  ConnectResponse(const ConnectResponse& from);
  ConnectResponse(ConnectResponse&& from) noexcept
    : ConnectResponse() {
    *this = ::std::move(from);
  }

  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResponse& operator=(ConnectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectResponse*>(
               &_ConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectResponse& a, ConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectResponse* New() const final {
    return CreateMaybeMessage<ConnectResponse>(nullptr);
  }

  ConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectResponse& from);
  void MergeFrom(const ConnectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.ConnectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kBindResponseFieldNumber = 4,
    kContentHandleArrayFieldNumber = 5,
    kBinaryContentHandleArrayFieldNumber = 8,
    kBindResultFieldNumber = 3,
    kUseBindlessRpcFieldNumber = 7,
    kServerTimeFieldNumber = 6,
  };
  // required .bgs.protocol.ProcessId server_id = 1;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const ::bgs::protocol::ProcessId& server_id() const;
  ::bgs::protocol::ProcessId* release_server_id();
  ::bgs::protocol::ProcessId* mutable_server_id();
  void set_allocated_server_id(::bgs::protocol::ProcessId* server_id);
  private:
  const ::bgs::protocol::ProcessId& _internal_server_id() const;
  ::bgs::protocol::ProcessId* _internal_mutable_server_id();
  public:

  // optional .bgs.protocol.ProcessId client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const ::bgs::protocol::ProcessId& client_id() const;
  ::bgs::protocol::ProcessId* release_client_id();
  ::bgs::protocol::ProcessId* mutable_client_id();
  void set_allocated_client_id(::bgs::protocol::ProcessId* client_id);
  private:
  const ::bgs::protocol::ProcessId& _internal_client_id() const;
  ::bgs::protocol::ProcessId* _internal_mutable_client_id();
  public:

  // optional .bgs.protocol.connection.v1.BindResponse bind_response = 4;
  bool has_bind_response() const;
  private:
  bool _internal_has_bind_response() const;
  public:
  void clear_bind_response();
  const ::bgs::protocol::connection::v1::BindResponse& bind_response() const;
  ::bgs::protocol::connection::v1::BindResponse* release_bind_response();
  ::bgs::protocol::connection::v1::BindResponse* mutable_bind_response();
  void set_allocated_bind_response(::bgs::protocol::connection::v1::BindResponse* bind_response);
  private:
  const ::bgs::protocol::connection::v1::BindResponse& _internal_bind_response() const;
  ::bgs::protocol::connection::v1::BindResponse* _internal_mutable_bind_response();
  public:

  // optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles content_handle_array = 5;
  bool has_content_handle_array() const;
  private:
  bool _internal_has_content_handle_array() const;
  public:
  void clear_content_handle_array();
  const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& content_handle_array() const;
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* release_content_handle_array();
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* mutable_content_handle_array();
  void set_allocated_content_handle_array(::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* content_handle_array);
  private:
  const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& _internal_content_handle_array() const;
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* _internal_mutable_content_handle_array();
  public:

  // optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles binary_content_handle_array = 8;
  bool has_binary_content_handle_array() const;
  private:
  bool _internal_has_binary_content_handle_array() const;
  public:
  void clear_binary_content_handle_array();
  const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& binary_content_handle_array() const;
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* release_binary_content_handle_array();
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* mutable_binary_content_handle_array();
  void set_allocated_binary_content_handle_array(::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* binary_content_handle_array);
  private:
  const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& _internal_binary_content_handle_array() const;
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* _internal_mutable_binary_content_handle_array();
  public:

  // optional uint32 bind_result = 3;
  bool has_bind_result() const;
  private:
  bool _internal_has_bind_result() const;
  public:
  void clear_bind_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 bind_result() const;
  void set_bind_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bind_result() const;
  void _internal_set_bind_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool use_bindless_rpc = 7 [default = false];
  bool has_use_bindless_rpc() const;
  private:
  bool _internal_has_use_bindless_rpc() const;
  public:
  void clear_use_bindless_rpc();
  bool use_bindless_rpc() const;
  void set_use_bindless_rpc(bool value);
  private:
  bool _internal_use_bindless_rpc() const;
  void _internal_set_use_bindless_rpc(bool value);
  public:

  // optional uint64 server_time = 6;
  bool has_server_time() const;
  private:
  bool _internal_has_server_time() const;
  public:
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.ConnectResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::ProcessId* server_id_;
  ::bgs::protocol::ProcessId* client_id_;
  ::bgs::protocol::connection::v1::BindResponse* bind_response_;
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* content_handle_array_;
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* binary_content_handle_array_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bind_result_;
  bool use_bindless_rpc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BoundService :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.BoundService) */ {
 public:
  BoundService();
  virtual ~BoundService();

  BoundService(const BoundService& from);
  BoundService(BoundService&& from) noexcept
    : BoundService() {
    *this = ::std::move(from);
  }

  inline BoundService& operator=(const BoundService& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundService& operator=(BoundService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundService* internal_default_instance() {
    return reinterpret_cast<const BoundService*>(
               &_BoundService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BoundService& a, BoundService& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundService* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundService* New() const final {
    return CreateMaybeMessage<BoundService>(nullptr);
  }

  BoundService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundService>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundService& from);
  void MergeFrom(const BoundService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundService* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.BoundService";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // required fixed32 hash = 1;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.BoundService)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BindRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.BindRequest) */ {
 public:
  BindRequest();
  virtual ~BindRequest();

  BindRequest(const BindRequest& from);
  BindRequest(BindRequest&& from) noexcept
    : BindRequest() {
    *this = ::std::move(from);
  }

  inline BindRequest& operator=(const BindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindRequest& operator=(BindRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BindRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BindRequest* internal_default_instance() {
    return reinterpret_cast<const BindRequest*>(
               &_BindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BindRequest& a, BindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BindRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindRequest* New() const final {
    return CreateMaybeMessage<BindRequest>(nullptr);
  }

  BindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BindRequest& from);
  void MergeFrom(const BindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.BindRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedImportedServiceHashFieldNumber = 1,
    kDeprecatedExportedServiceFieldNumber = 2,
    kExportedServiceFieldNumber = 3,
    kImportedServiceFieldNumber = 4,
  };
  // repeated fixed32 deprecated_imported_service_hash = 1 [packed = true, deprecated = true];
  PROTOBUF_DEPRECATED int deprecated_imported_service_hash_size() const;
  private:
  int _internal_deprecated_imported_service_hash_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_imported_service_hash();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deprecated_imported_service_hash(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_deprecated_imported_service_hash() const;
  void _internal_add_deprecated_imported_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_deprecated_imported_service_hash();
  public:
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_imported_service_hash(int index) const;
  PROTOBUF_DEPRECATED void set_deprecated_imported_service_hash(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED void add_deprecated_imported_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      deprecated_imported_service_hash() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_deprecated_imported_service_hash();

  // repeated .bgs.protocol.connection.v1.BoundService deprecated_exported_service = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int deprecated_exported_service_size() const;
  private:
  int _internal_deprecated_exported_service_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_exported_service();
  PROTOBUF_DEPRECATED ::bgs::protocol::connection::v1::BoundService* mutable_deprecated_exported_service(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >*
      mutable_deprecated_exported_service();
  private:
  const ::bgs::protocol::connection::v1::BoundService& _internal_deprecated_exported_service(int index) const;
  ::bgs::protocol::connection::v1::BoundService* _internal_add_deprecated_exported_service();
  public:
  PROTOBUF_DEPRECATED const ::bgs::protocol::connection::v1::BoundService& deprecated_exported_service(int index) const;
  PROTOBUF_DEPRECATED ::bgs::protocol::connection::v1::BoundService* add_deprecated_exported_service();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >&
      deprecated_exported_service() const;

  // repeated .bgs.protocol.connection.v1.BoundService exported_service = 3;
  int exported_service_size() const;
  private:
  int _internal_exported_service_size() const;
  public:
  void clear_exported_service();
  ::bgs::protocol::connection::v1::BoundService* mutable_exported_service(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >*
      mutable_exported_service();
  private:
  const ::bgs::protocol::connection::v1::BoundService& _internal_exported_service(int index) const;
  ::bgs::protocol::connection::v1::BoundService* _internal_add_exported_service();
  public:
  const ::bgs::protocol::connection::v1::BoundService& exported_service(int index) const;
  ::bgs::protocol::connection::v1::BoundService* add_exported_service();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >&
      exported_service() const;

  // repeated .bgs.protocol.connection.v1.BoundService imported_service = 4;
  int imported_service_size() const;
  private:
  int _internal_imported_service_size() const;
  public:
  void clear_imported_service();
  ::bgs::protocol::connection::v1::BoundService* mutable_imported_service(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >*
      mutable_imported_service();
  private:
  const ::bgs::protocol::connection::v1::BoundService& _internal_imported_service(int index) const;
  ::bgs::protocol::connection::v1::BoundService* _internal_add_imported_service();
  public:
  const ::bgs::protocol::connection::v1::BoundService& imported_service(int index) const;
  ::bgs::protocol::connection::v1::BoundService* add_imported_service();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >&
      imported_service() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.BindRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > deprecated_imported_service_hash_;
  mutable std::atomic<int> _deprecated_imported_service_hash_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService > deprecated_exported_service_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService > exported_service_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService > imported_service_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BindResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.BindResponse) */ {
 public:
  BindResponse();
  virtual ~BindResponse();

  BindResponse(const BindResponse& from);
  BindResponse(BindResponse&& from) noexcept
    : BindResponse() {
    *this = ::std::move(from);
  }

  inline BindResponse& operator=(const BindResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindResponse& operator=(BindResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BindResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BindResponse* internal_default_instance() {
    return reinterpret_cast<const BindResponse*>(
               &_BindResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BindResponse& a, BindResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BindResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindResponse* New() const final {
    return CreateMaybeMessage<BindResponse>(nullptr);
  }

  BindResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BindResponse& from);
  void MergeFrom(const BindResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.BindResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImportedServiceIdFieldNumber = 1,
  };
  // repeated uint32 imported_service_id = 1 [packed = true, deprecated = true];
  PROTOBUF_DEPRECATED int imported_service_id_size() const;
  private:
  int _internal_imported_service_id_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_imported_service_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imported_service_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_imported_service_id() const;
  void _internal_add_imported_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_imported_service_id();
  public:
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 imported_service_id(int index) const;
  PROTOBUF_DEPRECATED void set_imported_service_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED void add_imported_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      imported_service_id() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_imported_service_id();

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.BindResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > imported_service_id_;
  mutable std::atomic<int> _imported_service_id_cached_byte_size_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EchoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.EchoRequest) */ {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(nullptr);
  }

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.EchoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kForwardClientIdFieldNumber = 5,
    kForwardFieldNumber = 4,
    kTimeFieldNumber = 1,
    kNetworkOnlyFieldNumber = 2,
  };
  // optional bytes payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional string forward_client_id = 5;
  bool has_forward_client_id() const;
  private:
  bool _internal_has_forward_client_id() const;
  public:
  void clear_forward_client_id();
  const std::string& forward_client_id() const;
  void set_forward_client_id(const std::string& value);
  void set_forward_client_id(std::string&& value);
  void set_forward_client_id(const char* value);
  void set_forward_client_id(const char* value, size_t size);
  std::string* mutable_forward_client_id();
  std::string* release_forward_client_id();
  void set_allocated_forward_client_id(std::string* forward_client_id);
  private:
  const std::string& _internal_forward_client_id() const;
  void _internal_set_forward_client_id(const std::string& value);
  std::string* _internal_mutable_forward_client_id();
  public:

  // optional .bgs.protocol.ProcessId forward = 4;
  bool has_forward() const;
  private:
  bool _internal_has_forward() const;
  public:
  void clear_forward();
  const ::bgs::protocol::ProcessId& forward() const;
  ::bgs::protocol::ProcessId* release_forward();
  ::bgs::protocol::ProcessId* mutable_forward();
  void set_allocated_forward(::bgs::protocol::ProcessId* forward);
  private:
  const ::bgs::protocol::ProcessId& _internal_forward() const;
  ::bgs::protocol::ProcessId* _internal_mutable_forward();
  public:

  // optional fixed64 time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool network_only = 2 [default = false];
  bool has_network_only() const;
  private:
  bool _internal_has_network_only() const;
  public:
  void clear_network_only();
  bool network_only() const;
  void set_network_only(bool value);
  private:
  bool _internal_network_only() const;
  void _internal_set_network_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.EchoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr forward_client_id_;
  ::bgs::protocol::ProcessId* forward_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  bool network_only_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.EchoResponse) */ {
 public:
  EchoResponse();
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return CreateMaybeMessage<EchoResponse>(nullptr);
  }

  EchoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.EchoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // optional bytes payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional fixed64 time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.EchoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DisconnectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.DisconnectRequest) */ {
 public:
  DisconnectRequest();
  virtual ~DisconnectRequest();

  DisconnectRequest(const DisconnectRequest& from);
  DisconnectRequest(DisconnectRequest&& from) noexcept
    : DisconnectRequest() {
    *this = ::std::move(from);
  }

  inline DisconnectRequest& operator=(const DisconnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectRequest& operator=(DisconnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectRequest* internal_default_instance() {
    return reinterpret_cast<const DisconnectRequest*>(
               &_DisconnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DisconnectRequest& a, DisconnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisconnectRequest* New() const final {
    return CreateMaybeMessage<DisconnectRequest>(nullptr);
  }

  DisconnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectRequest& from);
  void MergeFrom(const DisconnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.DisconnectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // required uint32 error_code = 1;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.DisconnectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DisconnectNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.DisconnectNotification) */ {
 public:
  DisconnectNotification();
  virtual ~DisconnectNotification();

  DisconnectNotification(const DisconnectNotification& from);
  DisconnectNotification(DisconnectNotification&& from) noexcept
    : DisconnectNotification() {
    *this = ::std::move(from);
  }

  inline DisconnectNotification& operator=(const DisconnectNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectNotification& operator=(DisconnectNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectNotification* internal_default_instance() {
    return reinterpret_cast<const DisconnectNotification*>(
               &_DisconnectNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DisconnectNotification& a, DisconnectNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisconnectNotification* New() const final {
    return CreateMaybeMessage<DisconnectNotification>(nullptr);
  }

  DisconnectNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectNotification& from);
  void MergeFrom(const DisconnectNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.DisconnectNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // required uint32 error_code = 1;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.DisconnectNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EncryptRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.connection.v1.EncryptRequest) */ {
 public:
  EncryptRequest();
  virtual ~EncryptRequest();

  EncryptRequest(const EncryptRequest& from);
  EncryptRequest(EncryptRequest&& from) noexcept
    : EncryptRequest() {
    *this = ::std::move(from);
  }

  inline EncryptRequest& operator=(const EncryptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptRequest& operator=(EncryptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptRequest* internal_default_instance() {
    return reinterpret_cast<const EncryptRequest*>(
               &_EncryptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EncryptRequest& a, EncryptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptRequest* New() const final {
    return CreateMaybeMessage<EncryptRequest>(nullptr);
  }

  EncryptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptRequest& from);
  void MergeFrom(const EncryptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.connection.v1.EncryptRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bgs.protocol.connection.v1.EncryptRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectRequest

// optional .bgs.protocol.ProcessId client_id = 1;
inline bool ConnectRequest::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || client_id_ != nullptr);
  return value;
}
inline bool ConnectRequest::has_client_id() const {
  return _internal_has_client_id();
}
inline const ::bgs::protocol::ProcessId& ConnectRequest::_internal_client_id() const {
  const ::bgs::protocol::ProcessId* p = client_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ProcessId*>(
      &::bgs::protocol::_ProcessId_default_instance_);
}
inline const ::bgs::protocol::ProcessId& ConnectRequest::client_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectRequest.client_id)
  return _internal_client_id();
}
inline ::bgs::protocol::ProcessId* ConnectRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.ConnectRequest.client_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::ProcessId* temp = client_id_;
  client_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ProcessId* ConnectRequest::_internal_mutable_client_id() {
  _has_bits_[0] |= 0x00000001u;
  if (client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ProcessId>(GetArenaNoVirtual());
    client_id_ = p;
  }
  return client_id_;
}
inline ::bgs::protocol::ProcessId* ConnectRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.ConnectRequest.client_id)
  return _internal_mutable_client_id();
}
inline void ConnectRequest::set_allocated_client_id(::bgs::protocol::ProcessId* client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.ConnectRequest.client_id)
}

// optional .bgs.protocol.connection.v1.BindRequest bind_request = 2;
inline bool ConnectRequest::_internal_has_bind_request() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bind_request_ != nullptr);
  return value;
}
inline bool ConnectRequest::has_bind_request() const {
  return _internal_has_bind_request();
}
inline void ConnectRequest::clear_bind_request() {
  if (bind_request_ != nullptr) bind_request_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::connection::v1::BindRequest& ConnectRequest::_internal_bind_request() const {
  const ::bgs::protocol::connection::v1::BindRequest* p = bind_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::connection::v1::BindRequest*>(
      &::bgs::protocol::connection::v1::_BindRequest_default_instance_);
}
inline const ::bgs::protocol::connection::v1::BindRequest& ConnectRequest::bind_request() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectRequest.bind_request)
  return _internal_bind_request();
}
inline ::bgs::protocol::connection::v1::BindRequest* ConnectRequest::release_bind_request() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.ConnectRequest.bind_request)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::connection::v1::BindRequest* temp = bind_request_;
  bind_request_ = nullptr;
  return temp;
}
inline ::bgs::protocol::connection::v1::BindRequest* ConnectRequest::_internal_mutable_bind_request() {
  _has_bits_[0] |= 0x00000002u;
  if (bind_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::connection::v1::BindRequest>(GetArenaNoVirtual());
    bind_request_ = p;
  }
  return bind_request_;
}
inline ::bgs::protocol::connection::v1::BindRequest* ConnectRequest::mutable_bind_request() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.ConnectRequest.bind_request)
  return _internal_mutable_bind_request();
}
inline void ConnectRequest::set_allocated_bind_request(::bgs::protocol::connection::v1::BindRequest* bind_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bind_request_;
  }
  if (bind_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bind_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bind_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bind_request_ = bind_request;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.ConnectRequest.bind_request)
}

// optional bool use_bindless_rpc = 3 [default = true];
inline bool ConnectRequest::_internal_has_use_bindless_rpc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConnectRequest::has_use_bindless_rpc() const {
  return _internal_has_use_bindless_rpc();
}
inline void ConnectRequest::clear_use_bindless_rpc() {
  use_bindless_rpc_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ConnectRequest::_internal_use_bindless_rpc() const {
  return use_bindless_rpc_;
}
inline bool ConnectRequest::use_bindless_rpc() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectRequest.use_bindless_rpc)
  return _internal_use_bindless_rpc();
}
inline void ConnectRequest::_internal_set_use_bindless_rpc(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_bindless_rpc_ = value;
}
inline void ConnectRequest::set_use_bindless_rpc(bool value) {
  _internal_set_use_bindless_rpc(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.ConnectRequest.use_bindless_rpc)
}

// -------------------------------------------------------------------

// ConnectionMeteringContentHandles

// repeated .bgs.protocol.ContentHandle content_handle = 1;
inline int ConnectionMeteringContentHandles::_internal_content_handle_size() const {
  return content_handle_.size();
}
inline int ConnectionMeteringContentHandles::content_handle_size() const {
  return _internal_content_handle_size();
}
inline ::bgs::protocol::ContentHandle* ConnectionMeteringContentHandles::mutable_content_handle(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.ConnectionMeteringContentHandles.content_handle)
  return content_handle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ContentHandle >*
ConnectionMeteringContentHandles::mutable_content_handle() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.connection.v1.ConnectionMeteringContentHandles.content_handle)
  return &content_handle_;
}
inline const ::bgs::protocol::ContentHandle& ConnectionMeteringContentHandles::_internal_content_handle(int index) const {
  return content_handle_.Get(index);
}
inline const ::bgs::protocol::ContentHandle& ConnectionMeteringContentHandles::content_handle(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectionMeteringContentHandles.content_handle)
  return _internal_content_handle(index);
}
inline ::bgs::protocol::ContentHandle* ConnectionMeteringContentHandles::_internal_add_content_handle() {
  return content_handle_.Add();
}
inline ::bgs::protocol::ContentHandle* ConnectionMeteringContentHandles::add_content_handle() {
  // @@protoc_insertion_point(field_add:bgs.protocol.connection.v1.ConnectionMeteringContentHandles.content_handle)
  return _internal_add_content_handle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ContentHandle >&
ConnectionMeteringContentHandles::content_handle() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.connection.v1.ConnectionMeteringContentHandles.content_handle)
  return content_handle_;
}

// -------------------------------------------------------------------

// ConnectResponse

// required .bgs.protocol.ProcessId server_id = 1;
inline bool ConnectResponse::_internal_has_server_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || server_id_ != nullptr);
  return value;
}
inline bool ConnectResponse::has_server_id() const {
  return _internal_has_server_id();
}
inline const ::bgs::protocol::ProcessId& ConnectResponse::_internal_server_id() const {
  const ::bgs::protocol::ProcessId* p = server_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ProcessId*>(
      &::bgs::protocol::_ProcessId_default_instance_);
}
inline const ::bgs::protocol::ProcessId& ConnectResponse::server_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectResponse.server_id)
  return _internal_server_id();
}
inline ::bgs::protocol::ProcessId* ConnectResponse::release_server_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.ConnectResponse.server_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::ProcessId* temp = server_id_;
  server_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ProcessId* ConnectResponse::_internal_mutable_server_id() {
  _has_bits_[0] |= 0x00000001u;
  if (server_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ProcessId>(GetArenaNoVirtual());
    server_id_ = p;
  }
  return server_id_;
}
inline ::bgs::protocol::ProcessId* ConnectResponse::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.ConnectResponse.server_id)
  return _internal_mutable_server_id();
}
inline void ConnectResponse::set_allocated_server_id(::bgs::protocol::ProcessId* server_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  if (server_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_id_ = server_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.ConnectResponse.server_id)
}

// optional .bgs.protocol.ProcessId client_id = 2;
inline bool ConnectResponse::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || client_id_ != nullptr);
  return value;
}
inline bool ConnectResponse::has_client_id() const {
  return _internal_has_client_id();
}
inline const ::bgs::protocol::ProcessId& ConnectResponse::_internal_client_id() const {
  const ::bgs::protocol::ProcessId* p = client_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ProcessId*>(
      &::bgs::protocol::_ProcessId_default_instance_);
}
inline const ::bgs::protocol::ProcessId& ConnectResponse::client_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectResponse.client_id)
  return _internal_client_id();
}
inline ::bgs::protocol::ProcessId* ConnectResponse::release_client_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.ConnectResponse.client_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::ProcessId* temp = client_id_;
  client_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ProcessId* ConnectResponse::_internal_mutable_client_id() {
  _has_bits_[0] |= 0x00000002u;
  if (client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ProcessId>(GetArenaNoVirtual());
    client_id_ = p;
  }
  return client_id_;
}
inline ::bgs::protocol::ProcessId* ConnectResponse::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.ConnectResponse.client_id)
  return _internal_mutable_client_id();
}
inline void ConnectResponse::set_allocated_client_id(::bgs::protocol::ProcessId* client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.ConnectResponse.client_id)
}

// optional uint32 bind_result = 3;
inline bool ConnectResponse::_internal_has_bind_result() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConnectResponse::has_bind_result() const {
  return _internal_has_bind_result();
}
inline void ConnectResponse::clear_bind_result() {
  bind_result_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectResponse::_internal_bind_result() const {
  return bind_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectResponse::bind_result() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectResponse.bind_result)
  return _internal_bind_result();
}
inline void ConnectResponse::_internal_set_bind_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  bind_result_ = value;
}
inline void ConnectResponse::set_bind_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bind_result(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.ConnectResponse.bind_result)
}

// optional .bgs.protocol.connection.v1.BindResponse bind_response = 4;
inline bool ConnectResponse::_internal_has_bind_response() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || bind_response_ != nullptr);
  return value;
}
inline bool ConnectResponse::has_bind_response() const {
  return _internal_has_bind_response();
}
inline void ConnectResponse::clear_bind_response() {
  if (bind_response_ != nullptr) bind_response_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::connection::v1::BindResponse& ConnectResponse::_internal_bind_response() const {
  const ::bgs::protocol::connection::v1::BindResponse* p = bind_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::connection::v1::BindResponse*>(
      &::bgs::protocol::connection::v1::_BindResponse_default_instance_);
}
inline const ::bgs::protocol::connection::v1::BindResponse& ConnectResponse::bind_response() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectResponse.bind_response)
  return _internal_bind_response();
}
inline ::bgs::protocol::connection::v1::BindResponse* ConnectResponse::release_bind_response() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.ConnectResponse.bind_response)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::connection::v1::BindResponse* temp = bind_response_;
  bind_response_ = nullptr;
  return temp;
}
inline ::bgs::protocol::connection::v1::BindResponse* ConnectResponse::_internal_mutable_bind_response() {
  _has_bits_[0] |= 0x00000004u;
  if (bind_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::connection::v1::BindResponse>(GetArenaNoVirtual());
    bind_response_ = p;
  }
  return bind_response_;
}
inline ::bgs::protocol::connection::v1::BindResponse* ConnectResponse::mutable_bind_response() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.ConnectResponse.bind_response)
  return _internal_mutable_bind_response();
}
inline void ConnectResponse::set_allocated_bind_response(::bgs::protocol::connection::v1::BindResponse* bind_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bind_response_;
  }
  if (bind_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bind_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bind_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bind_response_ = bind_response;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.ConnectResponse.bind_response)
}

// optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles content_handle_array = 5;
inline bool ConnectResponse::_internal_has_content_handle_array() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || content_handle_array_ != nullptr);
  return value;
}
inline bool ConnectResponse::has_content_handle_array() const {
  return _internal_has_content_handle_array();
}
inline void ConnectResponse::clear_content_handle_array() {
  if (content_handle_array_ != nullptr) content_handle_array_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& ConnectResponse::_internal_content_handle_array() const {
  const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* p = content_handle_array_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles*>(
      &::bgs::protocol::connection::v1::_ConnectionMeteringContentHandles_default_instance_);
}
inline const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& ConnectResponse::content_handle_array() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectResponse.content_handle_array)
  return _internal_content_handle_array();
}
inline ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* ConnectResponse::release_content_handle_array() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.ConnectResponse.content_handle_array)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* temp = content_handle_array_;
  content_handle_array_ = nullptr;
  return temp;
}
inline ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* ConnectResponse::_internal_mutable_content_handle_array() {
  _has_bits_[0] |= 0x00000008u;
  if (content_handle_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::connection::v1::ConnectionMeteringContentHandles>(GetArenaNoVirtual());
    content_handle_array_ = p;
  }
  return content_handle_array_;
}
inline ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* ConnectResponse::mutable_content_handle_array() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.ConnectResponse.content_handle_array)
  return _internal_mutable_content_handle_array();
}
inline void ConnectResponse::set_allocated_content_handle_array(::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* content_handle_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete content_handle_array_;
  }
  if (content_handle_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content_handle_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_handle_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  content_handle_array_ = content_handle_array;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.ConnectResponse.content_handle_array)
}

// optional uint64 server_time = 6;
inline bool ConnectResponse::_internal_has_server_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConnectResponse::has_server_time() const {
  return _internal_has_server_time();
}
inline void ConnectResponse::clear_server_time() {
  server_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectResponse::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectResponse::server_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectResponse.server_time)
  return _internal_server_time();
}
inline void ConnectResponse::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  server_time_ = value;
}
inline void ConnectResponse::set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.ConnectResponse.server_time)
}

// optional bool use_bindless_rpc = 7 [default = false];
inline bool ConnectResponse::_internal_has_use_bindless_rpc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConnectResponse::has_use_bindless_rpc() const {
  return _internal_has_use_bindless_rpc();
}
inline void ConnectResponse::clear_use_bindless_rpc() {
  use_bindless_rpc_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ConnectResponse::_internal_use_bindless_rpc() const {
  return use_bindless_rpc_;
}
inline bool ConnectResponse::use_bindless_rpc() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectResponse.use_bindless_rpc)
  return _internal_use_bindless_rpc();
}
inline void ConnectResponse::_internal_set_use_bindless_rpc(bool value) {
  _has_bits_[0] |= 0x00000040u;
  use_bindless_rpc_ = value;
}
inline void ConnectResponse::set_use_bindless_rpc(bool value) {
  _internal_set_use_bindless_rpc(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.ConnectResponse.use_bindless_rpc)
}

// optional .bgs.protocol.connection.v1.ConnectionMeteringContentHandles binary_content_handle_array = 8;
inline bool ConnectResponse::_internal_has_binary_content_handle_array() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || binary_content_handle_array_ != nullptr);
  return value;
}
inline bool ConnectResponse::has_binary_content_handle_array() const {
  return _internal_has_binary_content_handle_array();
}
inline void ConnectResponse::clear_binary_content_handle_array() {
  if (binary_content_handle_array_ != nullptr) binary_content_handle_array_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& ConnectResponse::_internal_binary_content_handle_array() const {
  const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* p = binary_content_handle_array_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles*>(
      &::bgs::protocol::connection::v1::_ConnectionMeteringContentHandles_default_instance_);
}
inline const ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles& ConnectResponse::binary_content_handle_array() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.ConnectResponse.binary_content_handle_array)
  return _internal_binary_content_handle_array();
}
inline ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* ConnectResponse::release_binary_content_handle_array() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.ConnectResponse.binary_content_handle_array)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* temp = binary_content_handle_array_;
  binary_content_handle_array_ = nullptr;
  return temp;
}
inline ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* ConnectResponse::_internal_mutable_binary_content_handle_array() {
  _has_bits_[0] |= 0x00000010u;
  if (binary_content_handle_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::connection::v1::ConnectionMeteringContentHandles>(GetArenaNoVirtual());
    binary_content_handle_array_ = p;
  }
  return binary_content_handle_array_;
}
inline ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* ConnectResponse::mutable_binary_content_handle_array() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.ConnectResponse.binary_content_handle_array)
  return _internal_mutable_binary_content_handle_array();
}
inline void ConnectResponse::set_allocated_binary_content_handle_array(::bgs::protocol::connection::v1::ConnectionMeteringContentHandles* binary_content_handle_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete binary_content_handle_array_;
  }
  if (binary_content_handle_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binary_content_handle_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_content_handle_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  binary_content_handle_array_ = binary_content_handle_array;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.ConnectResponse.binary_content_handle_array)
}

// -------------------------------------------------------------------

// BoundService

// required fixed32 hash = 1;
inline bool BoundService::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoundService::has_hash() const {
  return _internal_has_hash();
}
inline void BoundService::clear_hash() {
  hash_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundService::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundService::hash() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.BoundService.hash)
  return _internal_hash();
}
inline void BoundService::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hash_ = value;
}
inline void BoundService::set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.BoundService.hash)
}

// required uint32 id = 2;
inline bool BoundService::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoundService::has_id() const {
  return _internal_has_id();
}
inline void BoundService::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundService::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundService::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.BoundService.id)
  return _internal_id();
}
inline void BoundService::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void BoundService::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.BoundService.id)
}

// -------------------------------------------------------------------

// BindRequest

// repeated fixed32 deprecated_imported_service_hash = 1 [packed = true, deprecated = true];
inline int BindRequest::_internal_deprecated_imported_service_hash_size() const {
  return deprecated_imported_service_hash_.size();
}
inline int BindRequest::deprecated_imported_service_hash_size() const {
  return _internal_deprecated_imported_service_hash_size();
}
inline void BindRequest::clear_deprecated_imported_service_hash() {
  deprecated_imported_service_hash_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BindRequest::_internal_deprecated_imported_service_hash(int index) const {
  return deprecated_imported_service_hash_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BindRequest::deprecated_imported_service_hash(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.BindRequest.deprecated_imported_service_hash)
  return _internal_deprecated_imported_service_hash(index);
}
inline void BindRequest::set_deprecated_imported_service_hash(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  deprecated_imported_service_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.BindRequest.deprecated_imported_service_hash)
}
inline void BindRequest::_internal_add_deprecated_imported_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  deprecated_imported_service_hash_.Add(value);
}
inline void BindRequest::add_deprecated_imported_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_deprecated_imported_service_hash(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.connection.v1.BindRequest.deprecated_imported_service_hash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BindRequest::_internal_deprecated_imported_service_hash() const {
  return deprecated_imported_service_hash_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BindRequest::deprecated_imported_service_hash() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.connection.v1.BindRequest.deprecated_imported_service_hash)
  return _internal_deprecated_imported_service_hash();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BindRequest::_internal_mutable_deprecated_imported_service_hash() {
  return &deprecated_imported_service_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BindRequest::mutable_deprecated_imported_service_hash() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.connection.v1.BindRequest.deprecated_imported_service_hash)
  return _internal_mutable_deprecated_imported_service_hash();
}

// repeated .bgs.protocol.connection.v1.BoundService deprecated_exported_service = 2 [deprecated = true];
inline int BindRequest::_internal_deprecated_exported_service_size() const {
  return deprecated_exported_service_.size();
}
inline int BindRequest::deprecated_exported_service_size() const {
  return _internal_deprecated_exported_service_size();
}
inline void BindRequest::clear_deprecated_exported_service() {
  deprecated_exported_service_.Clear();
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::mutable_deprecated_exported_service(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.BindRequest.deprecated_exported_service)
  return deprecated_exported_service_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >*
BindRequest::mutable_deprecated_exported_service() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.connection.v1.BindRequest.deprecated_exported_service)
  return &deprecated_exported_service_;
}
inline const ::bgs::protocol::connection::v1::BoundService& BindRequest::_internal_deprecated_exported_service(int index) const {
  return deprecated_exported_service_.Get(index);
}
inline const ::bgs::protocol::connection::v1::BoundService& BindRequest::deprecated_exported_service(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.BindRequest.deprecated_exported_service)
  return _internal_deprecated_exported_service(index);
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::_internal_add_deprecated_exported_service() {
  return deprecated_exported_service_.Add();
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::add_deprecated_exported_service() {
  // @@protoc_insertion_point(field_add:bgs.protocol.connection.v1.BindRequest.deprecated_exported_service)
  return _internal_add_deprecated_exported_service();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >&
BindRequest::deprecated_exported_service() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.connection.v1.BindRequest.deprecated_exported_service)
  return deprecated_exported_service_;
}

// repeated .bgs.protocol.connection.v1.BoundService exported_service = 3;
inline int BindRequest::_internal_exported_service_size() const {
  return exported_service_.size();
}
inline int BindRequest::exported_service_size() const {
  return _internal_exported_service_size();
}
inline void BindRequest::clear_exported_service() {
  exported_service_.Clear();
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::mutable_exported_service(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.BindRequest.exported_service)
  return exported_service_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >*
BindRequest::mutable_exported_service() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.connection.v1.BindRequest.exported_service)
  return &exported_service_;
}
inline const ::bgs::protocol::connection::v1::BoundService& BindRequest::_internal_exported_service(int index) const {
  return exported_service_.Get(index);
}
inline const ::bgs::protocol::connection::v1::BoundService& BindRequest::exported_service(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.BindRequest.exported_service)
  return _internal_exported_service(index);
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::_internal_add_exported_service() {
  return exported_service_.Add();
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::add_exported_service() {
  // @@protoc_insertion_point(field_add:bgs.protocol.connection.v1.BindRequest.exported_service)
  return _internal_add_exported_service();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >&
BindRequest::exported_service() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.connection.v1.BindRequest.exported_service)
  return exported_service_;
}

// repeated .bgs.protocol.connection.v1.BoundService imported_service = 4;
inline int BindRequest::_internal_imported_service_size() const {
  return imported_service_.size();
}
inline int BindRequest::imported_service_size() const {
  return _internal_imported_service_size();
}
inline void BindRequest::clear_imported_service() {
  imported_service_.Clear();
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::mutable_imported_service(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.BindRequest.imported_service)
  return imported_service_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >*
BindRequest::mutable_imported_service() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.connection.v1.BindRequest.imported_service)
  return &imported_service_;
}
inline const ::bgs::protocol::connection::v1::BoundService& BindRequest::_internal_imported_service(int index) const {
  return imported_service_.Get(index);
}
inline const ::bgs::protocol::connection::v1::BoundService& BindRequest::imported_service(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.BindRequest.imported_service)
  return _internal_imported_service(index);
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::_internal_add_imported_service() {
  return imported_service_.Add();
}
inline ::bgs::protocol::connection::v1::BoundService* BindRequest::add_imported_service() {
  // @@protoc_insertion_point(field_add:bgs.protocol.connection.v1.BindRequest.imported_service)
  return _internal_add_imported_service();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::connection::v1::BoundService >&
BindRequest::imported_service() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.connection.v1.BindRequest.imported_service)
  return imported_service_;
}

// -------------------------------------------------------------------

// BindResponse

// repeated uint32 imported_service_id = 1 [packed = true, deprecated = true];
inline int BindResponse::_internal_imported_service_id_size() const {
  return imported_service_id_.size();
}
inline int BindResponse::imported_service_id_size() const {
  return _internal_imported_service_id_size();
}
inline void BindResponse::clear_imported_service_id() {
  imported_service_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BindResponse::_internal_imported_service_id(int index) const {
  return imported_service_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BindResponse::imported_service_id(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.BindResponse.imported_service_id)
  return _internal_imported_service_id(index);
}
inline void BindResponse::set_imported_service_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  imported_service_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.BindResponse.imported_service_id)
}
inline void BindResponse::_internal_add_imported_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  imported_service_id_.Add(value);
}
inline void BindResponse::add_imported_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_imported_service_id(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.connection.v1.BindResponse.imported_service_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BindResponse::_internal_imported_service_id() const {
  return imported_service_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BindResponse::imported_service_id() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.connection.v1.BindResponse.imported_service_id)
  return _internal_imported_service_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BindResponse::_internal_mutable_imported_service_id() {
  return &imported_service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BindResponse::mutable_imported_service_id() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.connection.v1.BindResponse.imported_service_id)
  return _internal_mutable_imported_service_id();
}

// -------------------------------------------------------------------

// EchoRequest

// optional fixed64 time = 1;
inline bool EchoRequest::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EchoRequest::has_time() const {
  return _internal_has_time();
}
inline void EchoRequest::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EchoRequest::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EchoRequest::time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.EchoRequest.time)
  return _internal_time();
}
inline void EchoRequest::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void EchoRequest::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.EchoRequest.time)
}

// optional bool network_only = 2 [default = false];
inline bool EchoRequest::_internal_has_network_only() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EchoRequest::has_network_only() const {
  return _internal_has_network_only();
}
inline void EchoRequest::clear_network_only() {
  network_only_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool EchoRequest::_internal_network_only() const {
  return network_only_;
}
inline bool EchoRequest::network_only() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.EchoRequest.network_only)
  return _internal_network_only();
}
inline void EchoRequest::_internal_set_network_only(bool value) {
  _has_bits_[0] |= 0x00000010u;
  network_only_ = value;
}
inline void EchoRequest::set_network_only(bool value) {
  _internal_set_network_only(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.EchoRequest.network_only)
}

// optional bytes payload = 3;
inline bool EchoRequest::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EchoRequest::has_payload() const {
  return _internal_has_payload();
}
inline void EchoRequest::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EchoRequest::payload() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.EchoRequest.payload)
  return _internal_payload();
}
inline void EchoRequest::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.EchoRequest.payload)
}
inline std::string* EchoRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.EchoRequest.payload)
  return _internal_mutable_payload();
}
inline const std::string& EchoRequest::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void EchoRequest::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EchoRequest::set_payload(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.connection.v1.EchoRequest.payload)
}
inline void EchoRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.connection.v1.EchoRequest.payload)
}
inline void EchoRequest::set_payload(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.connection.v1.EchoRequest.payload)
}
inline std::string* EchoRequest::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EchoRequest::release_payload() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.EchoRequest.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return payload_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EchoRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.EchoRequest.payload)
}

// optional .bgs.protocol.ProcessId forward = 4;
inline bool EchoRequest::_internal_has_forward() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || forward_ != nullptr);
  return value;
}
inline bool EchoRequest::has_forward() const {
  return _internal_has_forward();
}
inline const ::bgs::protocol::ProcessId& EchoRequest::_internal_forward() const {
  const ::bgs::protocol::ProcessId* p = forward_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ProcessId*>(
      &::bgs::protocol::_ProcessId_default_instance_);
}
inline const ::bgs::protocol::ProcessId& EchoRequest::forward() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.EchoRequest.forward)
  return _internal_forward();
}
inline ::bgs::protocol::ProcessId* EchoRequest::release_forward() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.EchoRequest.forward)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::ProcessId* temp = forward_;
  forward_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ProcessId* EchoRequest::_internal_mutable_forward() {
  _has_bits_[0] |= 0x00000004u;
  if (forward_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ProcessId>(GetArenaNoVirtual());
    forward_ = p;
  }
  return forward_;
}
inline ::bgs::protocol::ProcessId* EchoRequest::mutable_forward() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.EchoRequest.forward)
  return _internal_mutable_forward();
}
inline void EchoRequest::set_allocated_forward(::bgs::protocol::ProcessId* forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_);
  }
  if (forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  forward_ = forward;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.EchoRequest.forward)
}

// optional string forward_client_id = 5;
inline bool EchoRequest::_internal_has_forward_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EchoRequest::has_forward_client_id() const {
  return _internal_has_forward_client_id();
}
inline void EchoRequest::clear_forward_client_id() {
  forward_client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EchoRequest::forward_client_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.EchoRequest.forward_client_id)
  return _internal_forward_client_id();
}
inline void EchoRequest::set_forward_client_id(const std::string& value) {
  _internal_set_forward_client_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.EchoRequest.forward_client_id)
}
inline std::string* EchoRequest::mutable_forward_client_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.EchoRequest.forward_client_id)
  return _internal_mutable_forward_client_id();
}
inline const std::string& EchoRequest::_internal_forward_client_id() const {
  return forward_client_id_.GetNoArena();
}
inline void EchoRequest::_internal_set_forward_client_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  forward_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EchoRequest::set_forward_client_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  forward_client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.connection.v1.EchoRequest.forward_client_id)
}
inline void EchoRequest::set_forward_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  forward_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.connection.v1.EchoRequest.forward_client_id)
}
inline void EchoRequest::set_forward_client_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  forward_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.connection.v1.EchoRequest.forward_client_id)
}
inline std::string* EchoRequest::_internal_mutable_forward_client_id() {
  _has_bits_[0] |= 0x00000002u;
  return forward_client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EchoRequest::release_forward_client_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.EchoRequest.forward_client_id)
  if (!_internal_has_forward_client_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return forward_client_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EchoRequest::set_allocated_forward_client_id(std::string* forward_client_id) {
  if (forward_client_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  forward_client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), forward_client_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.EchoRequest.forward_client_id)
}

// -------------------------------------------------------------------

// EchoResponse

// optional fixed64 time = 1;
inline bool EchoResponse::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EchoResponse::has_time() const {
  return _internal_has_time();
}
inline void EchoResponse::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EchoResponse::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EchoResponse::time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.EchoResponse.time)
  return _internal_time();
}
inline void EchoResponse::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void EchoResponse::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.EchoResponse.time)
}

// optional bytes payload = 2;
inline bool EchoResponse::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EchoResponse::has_payload() const {
  return _internal_has_payload();
}
inline void EchoResponse::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EchoResponse::payload() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.EchoResponse.payload)
  return _internal_payload();
}
inline void EchoResponse::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.EchoResponse.payload)
}
inline std::string* EchoResponse::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.EchoResponse.payload)
  return _internal_mutable_payload();
}
inline const std::string& EchoResponse::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void EchoResponse::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EchoResponse::set_payload(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.connection.v1.EchoResponse.payload)
}
inline void EchoResponse::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.connection.v1.EchoResponse.payload)
}
inline void EchoResponse::set_payload(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.connection.v1.EchoResponse.payload)
}
inline std::string* EchoResponse::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EchoResponse::release_payload() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.EchoResponse.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return payload_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EchoResponse::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.EchoResponse.payload)
}

// -------------------------------------------------------------------

// DisconnectRequest

// required uint32 error_code = 1;
inline bool DisconnectRequest::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisconnectRequest::has_error_code() const {
  return _internal_has_error_code();
}
inline void DisconnectRequest::clear_error_code() {
  error_code_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisconnectRequest::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisconnectRequest::error_code() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.DisconnectRequest.error_code)
  return _internal_error_code();
}
inline void DisconnectRequest::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_code_ = value;
}
inline void DisconnectRequest::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.DisconnectRequest.error_code)
}

// -------------------------------------------------------------------

// DisconnectNotification

// required uint32 error_code = 1;
inline bool DisconnectNotification::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DisconnectNotification::has_error_code() const {
  return _internal_has_error_code();
}
inline void DisconnectNotification::clear_error_code() {
  error_code_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisconnectNotification::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisconnectNotification::error_code() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.DisconnectNotification.error_code)
  return _internal_error_code();
}
inline void DisconnectNotification::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  error_code_ = value;
}
inline void DisconnectNotification::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.DisconnectNotification.error_code)
}

// optional string reason = 2;
inline bool DisconnectNotification::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisconnectNotification::has_reason() const {
  return _internal_has_reason();
}
inline void DisconnectNotification::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisconnectNotification::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.connection.v1.DisconnectNotification.reason)
  return _internal_reason();
}
inline void DisconnectNotification::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.connection.v1.DisconnectNotification.reason)
}
inline std::string* DisconnectNotification::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.connection.v1.DisconnectNotification.reason)
  return _internal_mutable_reason();
}
inline const std::string& DisconnectNotification::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void DisconnectNotification::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DisconnectNotification::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.connection.v1.DisconnectNotification.reason)
}
inline void DisconnectNotification::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.connection.v1.DisconnectNotification.reason)
}
inline void DisconnectNotification::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.connection.v1.DisconnectNotification.reason)
}
inline std::string* DisconnectNotification::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisconnectNotification::release_reason() {
  // @@protoc_insertion_point(field_release:bgs.protocol.connection.v1.DisconnectNotification.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisconnectNotification::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.connection.v1.DisconnectNotification.reason)
}

// -------------------------------------------------------------------

// EncryptRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace connection
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fconnection_5fservice_2eproto
