// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/content_handle_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class ContentHandle;
class ContentHandleDefaultTypeInternal;
extern ContentHandleDefaultTypeInternal _ContentHandle_default_instance_;
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::ContentHandle* Arena::CreateMaybeMessage<::bgs::protocol::ContentHandle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {

// ===================================================================

class ContentHandle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.ContentHandle) */ {
 public:
  ContentHandle();
  virtual ~ContentHandle();

  ContentHandle(const ContentHandle& from);
  ContentHandle(ContentHandle&& from) noexcept
    : ContentHandle() {
    *this = ::std::move(from);
  }

  inline ContentHandle& operator=(const ContentHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentHandle& operator=(ContentHandle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContentHandle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentHandle* internal_default_instance() {
    return reinterpret_cast<const ContentHandle*>(
               &_ContentHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentHandle& a, ContentHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentHandle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentHandle* New() const final {
    return CreateMaybeMessage<ContentHandle>(nullptr);
  }

  ContentHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentHandle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContentHandle& from);
  void MergeFrom(const ContentHandle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentHandle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.ContentHandle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 3,
    kProtoUrlFieldNumber = 4,
    kRegionFieldNumber = 1,
    kUsageFieldNumber = 2,
  };
  // required bytes hash = 3;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional string proto_url = 4;
  bool has_proto_url() const;
  private:
  bool _internal_has_proto_url() const;
  public:
  void clear_proto_url();
  const std::string& proto_url() const;
  void set_proto_url(const std::string& value);
  void set_proto_url(std::string&& value);
  void set_proto_url(const char* value);
  void set_proto_url(const char* value, size_t size);
  std::string* mutable_proto_url();
  std::string* release_proto_url();
  void set_allocated_proto_url(std::string* proto_url);
  private:
  const std::string& _internal_proto_url() const;
  void _internal_set_proto_url(const std::string& value);
  std::string* _internal_mutable_proto_url();
  public:

  // required fixed32 region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required fixed32 usage = 2;
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  ::PROTOBUF_NAMESPACE_ID::uint32 usage() const;
  void set_usage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usage() const;
  void _internal_set_usage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.ContentHandle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usage_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentHandle

// required fixed32 region = 1;
inline bool ContentHandle::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentHandle::has_region() const {
  return _internal_has_region();
}
inline void ContentHandle::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContentHandle::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContentHandle::region() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ContentHandle.region)
  return _internal_region();
}
inline void ContentHandle::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  region_ = value;
}
inline void ContentHandle::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ContentHandle.region)
}

// required fixed32 usage = 2;
inline bool ContentHandle::_internal_has_usage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentHandle::has_usage() const {
  return _internal_has_usage();
}
inline void ContentHandle::clear_usage() {
  usage_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContentHandle::_internal_usage() const {
  return usage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContentHandle::usage() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ContentHandle.usage)
  return _internal_usage();
}
inline void ContentHandle::_internal_set_usage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  usage_ = value;
}
inline void ContentHandle::set_usage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ContentHandle.usage)
}

// required bytes hash = 3;
inline bool ContentHandle::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentHandle::has_hash() const {
  return _internal_has_hash();
}
inline void ContentHandle::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentHandle::hash() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ContentHandle.hash)
  return _internal_hash();
}
inline void ContentHandle::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ContentHandle.hash)
}
inline std::string* ContentHandle::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.ContentHandle.hash)
  return _internal_mutable_hash();
}
inline const std::string& ContentHandle::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void ContentHandle::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContentHandle::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.ContentHandle.hash)
}
inline void ContentHandle::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.ContentHandle.hash)
}
inline void ContentHandle::set_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.ContentHandle.hash)
}
inline std::string* ContentHandle::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentHandle::release_hash() {
  // @@protoc_insertion_point(field_release:bgs.protocol.ContentHandle.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentHandle::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.ContentHandle.hash)
}

// optional string proto_url = 4;
inline bool ContentHandle::_internal_has_proto_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentHandle::has_proto_url() const {
  return _internal_has_proto_url();
}
inline void ContentHandle::clear_proto_url() {
  proto_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentHandle::proto_url() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ContentHandle.proto_url)
  return _internal_proto_url();
}
inline void ContentHandle::set_proto_url(const std::string& value) {
  _internal_set_proto_url(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ContentHandle.proto_url)
}
inline std::string* ContentHandle::mutable_proto_url() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.ContentHandle.proto_url)
  return _internal_mutable_proto_url();
}
inline const std::string& ContentHandle::_internal_proto_url() const {
  return proto_url_.GetNoArena();
}
inline void ContentHandle::_internal_set_proto_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContentHandle::set_proto_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.ContentHandle.proto_url)
}
inline void ContentHandle::set_proto_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.ContentHandle.proto_url)
}
inline void ContentHandle::set_proto_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.ContentHandle.proto_url)
}
inline std::string* ContentHandle::_internal_mutable_proto_url() {
  _has_bits_[0] |= 0x00000002u;
  return proto_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentHandle::release_proto_url() {
  // @@protoc_insertion_point(field_release:bgs.protocol.ContentHandle.proto_url)
  if (!_internal_has_proto_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentHandle::set_allocated_proto_url(std::string* proto_url) {
  if (proto_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_url);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.ContentHandle.proto_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto
