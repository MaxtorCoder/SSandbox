// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/embed_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class EmbedHTML;
class EmbedHTMLDefaultTypeInternal;
extern EmbedHTMLDefaultTypeInternal _EmbedHTML_default_instance_;
class EmbedImage;
class EmbedImageDefaultTypeInternal;
extern EmbedImageDefaultTypeInternal _EmbedImage_default_instance_;
class EmbedInfo;
class EmbedInfoDefaultTypeInternal;
extern EmbedInfoDefaultTypeInternal _EmbedInfo_default_instance_;
class Favicon;
class FaviconDefaultTypeInternal;
extern FaviconDefaultTypeInternal _Favicon_default_instance_;
class Provider;
class ProviderDefaultTypeInternal;
extern ProviderDefaultTypeInternal _Provider_default_instance_;
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::EmbedHTML* Arena::CreateMaybeMessage<::bgs::protocol::EmbedHTML>(Arena*);
template<> ::bgs::protocol::EmbedImage* Arena::CreateMaybeMessage<::bgs::protocol::EmbedImage>(Arena*);
template<> ::bgs::protocol::EmbedInfo* Arena::CreateMaybeMessage<::bgs::protocol::EmbedInfo>(Arena*);
template<> ::bgs::protocol::Favicon* Arena::CreateMaybeMessage<::bgs::protocol::Favicon>(Arena*);
template<> ::bgs::protocol::Provider* Arena::CreateMaybeMessage<::bgs::protocol::Provider>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {

// ===================================================================

class EmbedImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.EmbedImage) */ {
 public:
  EmbedImage();
  virtual ~EmbedImage();

  EmbedImage(const EmbedImage& from);
  EmbedImage(EmbedImage&& from) noexcept
    : EmbedImage() {
    *this = ::std::move(from);
  }

  inline EmbedImage& operator=(const EmbedImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedImage& operator=(EmbedImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbedImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbedImage* internal_default_instance() {
    return reinterpret_cast<const EmbedImage*>(
               &_EmbedImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmbedImage& a, EmbedImage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbedImage* New() const final {
    return CreateMaybeMessage<EmbedImage>(nullptr);
  }

  EmbedImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbedImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbedImage& from);
  void MergeFrom(const EmbedImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.EmbedImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.EmbedImage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Provider :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.Provider) */ {
 public:
  Provider();
  virtual ~Provider();

  Provider(const Provider& from);
  Provider(Provider&& from) noexcept
    : Provider() {
    *this = ::std::move(from);
  }

  inline Provider& operator=(const Provider& from) {
    CopyFrom(from);
    return *this;
  }
  inline Provider& operator=(Provider&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Provider& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Provider* internal_default_instance() {
    return reinterpret_cast<const Provider*>(
               &_Provider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Provider& a, Provider& b) {
    a.Swap(&b);
  }
  inline void Swap(Provider* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Provider* New() const final {
    return CreateMaybeMessage<Provider>(nullptr);
  }

  Provider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Provider>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Provider& from);
  void MergeFrom(const Provider& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Provider* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.Provider";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.Provider)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Favicon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.Favicon) */ {
 public:
  Favicon();
  virtual ~Favicon();

  Favicon(const Favicon& from);
  Favicon(Favicon&& from) noexcept
    : Favicon() {
    *this = ::std::move(from);
  }

  inline Favicon& operator=(const Favicon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Favicon& operator=(Favicon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Favicon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Favicon* internal_default_instance() {
    return reinterpret_cast<const Favicon*>(
               &_Favicon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Favicon& a, Favicon& b) {
    a.Swap(&b);
  }
  inline void Swap(Favicon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Favicon* New() const final {
    return CreateMaybeMessage<Favicon>(nullptr);
  }

  Favicon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Favicon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Favicon& from);
  void MergeFrom(const Favicon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Favicon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.Favicon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.Favicon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class EmbedHTML :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.EmbedHTML) */ {
 public:
  EmbedHTML();
  virtual ~EmbedHTML();

  EmbedHTML(const EmbedHTML& from);
  EmbedHTML(EmbedHTML&& from) noexcept
    : EmbedHTML() {
    *this = ::std::move(from);
  }

  inline EmbedHTML& operator=(const EmbedHTML& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedHTML& operator=(EmbedHTML&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbedHTML& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbedHTML* internal_default_instance() {
    return reinterpret_cast<const EmbedHTML*>(
               &_EmbedHTML_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmbedHTML& a, EmbedHTML& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedHTML* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbedHTML* New() const final {
    return CreateMaybeMessage<EmbedHTML>(nullptr);
  }

  EmbedHTML* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbedHTML>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbedHTML& from);
  void MergeFrom(const EmbedHTML& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedHTML* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.EmbedHTML";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // optional string content = 1;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.EmbedHTML)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class EmbedInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.EmbedInfo) */ {
 public:
  EmbedInfo();
  virtual ~EmbedInfo();

  EmbedInfo(const EmbedInfo& from);
  EmbedInfo(EmbedInfo&& from) noexcept
    : EmbedInfo() {
    *this = ::std::move(from);
  }

  inline EmbedInfo& operator=(const EmbedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedInfo& operator=(EmbedInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbedInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbedInfo* internal_default_instance() {
    return reinterpret_cast<const EmbedInfo*>(
               &_EmbedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EmbedInfo& a, EmbedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbedInfo* New() const final {
    return CreateMaybeMessage<EmbedInfo>(nullptr);
  }

  EmbedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbedInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbedInfo& from);
  void MergeFrom(const EmbedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.EmbedInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kTypeFieldNumber = 2,
    kOriginalUrlFieldNumber = 3,
    kDescriptionFieldNumber = 6,
    kThumbnailFieldNumber = 4,
    kProviderFieldNumber = 5,
    kFaviconFieldNumber = 7,
    kHtmlFieldNumber = 8,
  };
  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string original_url = 3;
  bool has_original_url() const;
  private:
  bool _internal_has_original_url() const;
  public:
  void clear_original_url();
  const std::string& original_url() const;
  void set_original_url(const std::string& value);
  void set_original_url(std::string&& value);
  void set_original_url(const char* value);
  void set_original_url(const char* value, size_t size);
  std::string* mutable_original_url();
  std::string* release_original_url();
  void set_allocated_original_url(std::string* original_url);
  private:
  const std::string& _internal_original_url() const;
  void _internal_set_original_url(const std::string& value);
  std::string* _internal_mutable_original_url();
  public:

  // optional string description = 6;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional .bgs.protocol.EmbedImage thumbnail = 4;
  bool has_thumbnail() const;
  private:
  bool _internal_has_thumbnail() const;
  public:
  void clear_thumbnail();
  const ::bgs::protocol::EmbedImage& thumbnail() const;
  ::bgs::protocol::EmbedImage* release_thumbnail();
  ::bgs::protocol::EmbedImage* mutable_thumbnail();
  void set_allocated_thumbnail(::bgs::protocol::EmbedImage* thumbnail);
  private:
  const ::bgs::protocol::EmbedImage& _internal_thumbnail() const;
  ::bgs::protocol::EmbedImage* _internal_mutable_thumbnail();
  public:

  // optional .bgs.protocol.Provider provider = 5;
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::bgs::protocol::Provider& provider() const;
  ::bgs::protocol::Provider* release_provider();
  ::bgs::protocol::Provider* mutable_provider();
  void set_allocated_provider(::bgs::protocol::Provider* provider);
  private:
  const ::bgs::protocol::Provider& _internal_provider() const;
  ::bgs::protocol::Provider* _internal_mutable_provider();
  public:

  // optional .bgs.protocol.Favicon favicon = 7;
  bool has_favicon() const;
  private:
  bool _internal_has_favicon() const;
  public:
  void clear_favicon();
  const ::bgs::protocol::Favicon& favicon() const;
  ::bgs::protocol::Favicon* release_favicon();
  ::bgs::protocol::Favicon* mutable_favicon();
  void set_allocated_favicon(::bgs::protocol::Favicon* favicon);
  private:
  const ::bgs::protocol::Favicon& _internal_favicon() const;
  ::bgs::protocol::Favicon* _internal_mutable_favicon();
  public:

  // optional .bgs.protocol.EmbedHTML html = 8;
  bool has_html() const;
  private:
  bool _internal_has_html() const;
  public:
  void clear_html();
  const ::bgs::protocol::EmbedHTML& html() const;
  ::bgs::protocol::EmbedHTML* release_html();
  ::bgs::protocol::EmbedHTML* mutable_html();
  void set_allocated_html(::bgs::protocol::EmbedHTML* html);
  private:
  const ::bgs::protocol::EmbedHTML& _internal_html() const;
  ::bgs::protocol::EmbedHTML* _internal_mutable_html();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.EmbedInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::bgs::protocol::EmbedImage* thumbnail_;
  ::bgs::protocol::Provider* provider_;
  ::bgs::protocol::Favicon* favicon_;
  ::bgs::protocol::EmbedHTML* html_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmbedImage

// optional string url = 1;
inline bool EmbedImage::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmbedImage::has_url() const {
  return _internal_has_url();
}
inline void EmbedImage::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EmbedImage::url() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedImage.url)
  return _internal_url();
}
inline void EmbedImage::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedImage.url)
}
inline std::string* EmbedImage::mutable_url() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedImage.url)
  return _internal_mutable_url();
}
inline const std::string& EmbedImage::_internal_url() const {
  return url_.GetNoArena();
}
inline void EmbedImage::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbedImage::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.EmbedImage.url)
}
inline void EmbedImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.EmbedImage.url)
}
inline void EmbedImage::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.EmbedImage.url)
}
inline std::string* EmbedImage::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbedImage::release_url() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedImage.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbedImage::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedImage.url)
}

// optional uint32 width = 2;
inline bool EmbedImage::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EmbedImage::has_width() const {
  return _internal_has_width();
}
inline void EmbedImage::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedImage::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedImage::width() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedImage.width)
  return _internal_width();
}
inline void EmbedImage::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void EmbedImage::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedImage.width)
}

// optional uint32 height = 3;
inline bool EmbedImage::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EmbedImage::has_height() const {
  return _internal_has_height();
}
inline void EmbedImage::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedImage::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedImage::height() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedImage.height)
  return _internal_height();
}
inline void EmbedImage::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void EmbedImage::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedImage.height)
}

// -------------------------------------------------------------------

// Provider

// optional string name = 1;
inline bool Provider::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Provider::has_name() const {
  return _internal_has_name();
}
inline void Provider::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Provider::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Provider.name)
  return _internal_name();
}
inline void Provider::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Provider.name)
}
inline std::string* Provider::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Provider.name)
  return _internal_mutable_name();
}
inline const std::string& Provider::_internal_name() const {
  return name_.GetNoArena();
}
inline void Provider::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Provider::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.Provider.name)
}
inline void Provider::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Provider.name)
}
inline void Provider::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Provider.name)
}
inline std::string* Provider::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Provider::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Provider.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Provider::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Provider.name)
}

// -------------------------------------------------------------------

// Favicon

// optional string url = 1;
inline bool Favicon::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Favicon::has_url() const {
  return _internal_has_url();
}
inline void Favicon::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Favicon::url() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Favicon.url)
  return _internal_url();
}
inline void Favicon::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Favicon.url)
}
inline std::string* Favicon::mutable_url() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Favicon.url)
  return _internal_mutable_url();
}
inline const std::string& Favicon::_internal_url() const {
  return url_.GetNoArena();
}
inline void Favicon::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Favicon::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.Favicon.url)
}
inline void Favicon::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Favicon.url)
}
inline void Favicon::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Favicon.url)
}
inline std::string* Favicon::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Favicon::release_url() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Favicon.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Favicon::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Favicon.url)
}

// -------------------------------------------------------------------

// EmbedHTML

// optional string content = 1;
inline bool EmbedHTML::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmbedHTML::has_content() const {
  return _internal_has_content();
}
inline void EmbedHTML::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EmbedHTML::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedHTML.content)
  return _internal_content();
}
inline void EmbedHTML::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedHTML.content)
}
inline std::string* EmbedHTML::mutable_content() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedHTML.content)
  return _internal_mutable_content();
}
inline const std::string& EmbedHTML::_internal_content() const {
  return content_.GetNoArena();
}
inline void EmbedHTML::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbedHTML::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.EmbedHTML.content)
}
inline void EmbedHTML::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.EmbedHTML.content)
}
inline void EmbedHTML::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.EmbedHTML.content)
}
inline std::string* EmbedHTML::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbedHTML::release_content() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedHTML.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbedHTML::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedHTML.content)
}

// optional uint32 width = 2;
inline bool EmbedHTML::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EmbedHTML::has_width() const {
  return _internal_has_width();
}
inline void EmbedHTML::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedHTML::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedHTML::width() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedHTML.width)
  return _internal_width();
}
inline void EmbedHTML::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void EmbedHTML::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedHTML.width)
}

// optional uint32 height = 3;
inline bool EmbedHTML::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EmbedHTML::has_height() const {
  return _internal_has_height();
}
inline void EmbedHTML::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedHTML::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EmbedHTML::height() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedHTML.height)
  return _internal_height();
}
inline void EmbedHTML::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void EmbedHTML::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedHTML.height)
}

// -------------------------------------------------------------------

// EmbedInfo

// optional string title = 1;
inline bool EmbedInfo::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmbedInfo::has_title() const {
  return _internal_has_title();
}
inline void EmbedInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EmbedInfo::title() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedInfo.title)
  return _internal_title();
}
inline void EmbedInfo::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedInfo.title)
}
inline std::string* EmbedInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedInfo.title)
  return _internal_mutable_title();
}
inline const std::string& EmbedInfo::_internal_title() const {
  return title_.GetNoArena();
}
inline void EmbedInfo::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbedInfo::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.EmbedInfo.title)
}
inline void EmbedInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.EmbedInfo.title)
}
inline void EmbedInfo::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.EmbedInfo.title)
}
inline std::string* EmbedInfo::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbedInfo::release_title() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedInfo.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbedInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedInfo.title)
}

// optional string type = 2;
inline bool EmbedInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EmbedInfo::has_type() const {
  return _internal_has_type();
}
inline void EmbedInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EmbedInfo::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedInfo.type)
  return _internal_type();
}
inline void EmbedInfo::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedInfo.type)
}
inline std::string* EmbedInfo::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedInfo.type)
  return _internal_mutable_type();
}
inline const std::string& EmbedInfo::_internal_type() const {
  return type_.GetNoArena();
}
inline void EmbedInfo::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbedInfo::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.EmbedInfo.type)
}
inline void EmbedInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.EmbedInfo.type)
}
inline void EmbedInfo::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.EmbedInfo.type)
}
inline std::string* EmbedInfo::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbedInfo::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedInfo.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbedInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedInfo.type)
}

// optional string original_url = 3;
inline bool EmbedInfo::_internal_has_original_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EmbedInfo::has_original_url() const {
  return _internal_has_original_url();
}
inline void EmbedInfo::clear_original_url() {
  original_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EmbedInfo::original_url() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedInfo.original_url)
  return _internal_original_url();
}
inline void EmbedInfo::set_original_url(const std::string& value) {
  _internal_set_original_url(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedInfo.original_url)
}
inline std::string* EmbedInfo::mutable_original_url() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedInfo.original_url)
  return _internal_mutable_original_url();
}
inline const std::string& EmbedInfo::_internal_original_url() const {
  return original_url_.GetNoArena();
}
inline void EmbedInfo::_internal_set_original_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  original_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbedInfo::set_original_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  original_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.EmbedInfo.original_url)
}
inline void EmbedInfo::set_original_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  original_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.EmbedInfo.original_url)
}
inline void EmbedInfo::set_original_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  original_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.EmbedInfo.original_url)
}
inline std::string* EmbedInfo::_internal_mutable_original_url() {
  _has_bits_[0] |= 0x00000004u;
  return original_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbedInfo::release_original_url() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedInfo.original_url)
  if (!_internal_has_original_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return original_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbedInfo::set_allocated_original_url(std::string* original_url) {
  if (original_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  original_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_url);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedInfo.original_url)
}

// optional .bgs.protocol.EmbedImage thumbnail = 4;
inline bool EmbedInfo::_internal_has_thumbnail() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || thumbnail_ != nullptr);
  return value;
}
inline bool EmbedInfo::has_thumbnail() const {
  return _internal_has_thumbnail();
}
inline void EmbedInfo::clear_thumbnail() {
  if (thumbnail_ != nullptr) thumbnail_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::bgs::protocol::EmbedImage& EmbedInfo::_internal_thumbnail() const {
  const ::bgs::protocol::EmbedImage* p = thumbnail_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EmbedImage*>(
      &::bgs::protocol::_EmbedImage_default_instance_);
}
inline const ::bgs::protocol::EmbedImage& EmbedInfo::thumbnail() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedInfo.thumbnail)
  return _internal_thumbnail();
}
inline ::bgs::protocol::EmbedImage* EmbedInfo::release_thumbnail() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedInfo.thumbnail)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::EmbedImage* temp = thumbnail_;
  thumbnail_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EmbedImage* EmbedInfo::_internal_mutable_thumbnail() {
  _has_bits_[0] |= 0x00000010u;
  if (thumbnail_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EmbedImage>(GetArenaNoVirtual());
    thumbnail_ = p;
  }
  return thumbnail_;
}
inline ::bgs::protocol::EmbedImage* EmbedInfo::mutable_thumbnail() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedInfo.thumbnail)
  return _internal_mutable_thumbnail();
}
inline void EmbedInfo::set_allocated_thumbnail(::bgs::protocol::EmbedImage* thumbnail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thumbnail_;
  }
  if (thumbnail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thumbnail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  thumbnail_ = thumbnail;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedInfo.thumbnail)
}

// optional .bgs.protocol.Provider provider = 5;
inline bool EmbedInfo::_internal_has_provider() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || provider_ != nullptr);
  return value;
}
inline bool EmbedInfo::has_provider() const {
  return _internal_has_provider();
}
inline void EmbedInfo::clear_provider() {
  if (provider_ != nullptr) provider_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::bgs::protocol::Provider& EmbedInfo::_internal_provider() const {
  const ::bgs::protocol::Provider* p = provider_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::Provider*>(
      &::bgs::protocol::_Provider_default_instance_);
}
inline const ::bgs::protocol::Provider& EmbedInfo::provider() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedInfo.provider)
  return _internal_provider();
}
inline ::bgs::protocol::Provider* EmbedInfo::release_provider() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedInfo.provider)
  _has_bits_[0] &= ~0x00000020u;
  ::bgs::protocol::Provider* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::bgs::protocol::Provider* EmbedInfo::_internal_mutable_provider() {
  _has_bits_[0] |= 0x00000020u;
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::Provider>(GetArenaNoVirtual());
    provider_ = p;
  }
  return provider_;
}
inline ::bgs::protocol::Provider* EmbedInfo::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedInfo.provider)
  return _internal_mutable_provider();
}
inline void EmbedInfo::set_allocated_provider(::bgs::protocol::Provider* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedInfo.provider)
}

// optional string description = 6;
inline bool EmbedInfo::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EmbedInfo::has_description() const {
  return _internal_has_description();
}
inline void EmbedInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EmbedInfo::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedInfo.description)
  return _internal_description();
}
inline void EmbedInfo::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EmbedInfo.description)
}
inline std::string* EmbedInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedInfo.description)
  return _internal_mutable_description();
}
inline const std::string& EmbedInfo::_internal_description() const {
  return description_.GetNoArena();
}
inline void EmbedInfo::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbedInfo::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.EmbedInfo.description)
}
inline void EmbedInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.EmbedInfo.description)
}
inline void EmbedInfo::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.EmbedInfo.description)
}
inline std::string* EmbedInfo::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000008u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbedInfo::release_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbedInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedInfo.description)
}

// optional .bgs.protocol.Favicon favicon = 7;
inline bool EmbedInfo::_internal_has_favicon() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || favicon_ != nullptr);
  return value;
}
inline bool EmbedInfo::has_favicon() const {
  return _internal_has_favicon();
}
inline void EmbedInfo::clear_favicon() {
  if (favicon_ != nullptr) favicon_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::bgs::protocol::Favicon& EmbedInfo::_internal_favicon() const {
  const ::bgs::protocol::Favicon* p = favicon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::Favicon*>(
      &::bgs::protocol::_Favicon_default_instance_);
}
inline const ::bgs::protocol::Favicon& EmbedInfo::favicon() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedInfo.favicon)
  return _internal_favicon();
}
inline ::bgs::protocol::Favicon* EmbedInfo::release_favicon() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedInfo.favicon)
  _has_bits_[0] &= ~0x00000040u;
  ::bgs::protocol::Favicon* temp = favicon_;
  favicon_ = nullptr;
  return temp;
}
inline ::bgs::protocol::Favicon* EmbedInfo::_internal_mutable_favicon() {
  _has_bits_[0] |= 0x00000040u;
  if (favicon_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::Favicon>(GetArenaNoVirtual());
    favicon_ = p;
  }
  return favicon_;
}
inline ::bgs::protocol::Favicon* EmbedInfo::mutable_favicon() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedInfo.favicon)
  return _internal_mutable_favicon();
}
inline void EmbedInfo::set_allocated_favicon(::bgs::protocol::Favicon* favicon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete favicon_;
  }
  if (favicon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      favicon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  favicon_ = favicon;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedInfo.favicon)
}

// optional .bgs.protocol.EmbedHTML html = 8;
inline bool EmbedInfo::_internal_has_html() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || html_ != nullptr);
  return value;
}
inline bool EmbedInfo::has_html() const {
  return _internal_has_html();
}
inline void EmbedInfo::clear_html() {
  if (html_ != nullptr) html_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::bgs::protocol::EmbedHTML& EmbedInfo::_internal_html() const {
  const ::bgs::protocol::EmbedHTML* p = html_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EmbedHTML*>(
      &::bgs::protocol::_EmbedHTML_default_instance_);
}
inline const ::bgs::protocol::EmbedHTML& EmbedInfo::html() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EmbedInfo.html)
  return _internal_html();
}
inline ::bgs::protocol::EmbedHTML* EmbedInfo::release_html() {
  // @@protoc_insertion_point(field_release:bgs.protocol.EmbedInfo.html)
  _has_bits_[0] &= ~0x00000080u;
  ::bgs::protocol::EmbedHTML* temp = html_;
  html_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EmbedHTML* EmbedInfo::_internal_mutable_html() {
  _has_bits_[0] |= 0x00000080u;
  if (html_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EmbedHTML>(GetArenaNoVirtual());
    html_ = p;
  }
  return html_;
}
inline ::bgs::protocol::EmbedHTML* EmbedInfo::mutable_html() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.EmbedInfo.html)
  return _internal_mutable_html();
}
inline void EmbedInfo::set_allocated_html(::bgs::protocol::EmbedHTML* html) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete html_;
  }
  if (html) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      html = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, html, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  html_ = html;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.EmbedInfo.html)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fembed_5ftypes_2eproto
