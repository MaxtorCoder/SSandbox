// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/entity_types.proto

#include "bgs/low/pb/client/entity_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class EntityIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityId> _instance;
} _EntityId_default_instance_;
class IdentityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identity> _instance;
} _Identity_default_instance_;
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_EntityId_default_instance_;
    new (ptr) ::bgs::protocol::EntityId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::EntityId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_Identity_default_instance_;
    new (ptr) ::bgs::protocol::Identity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::Identity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::EntityId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::EntityId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::EntityId, high_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::EntityId, low_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Identity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Identity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Identity, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Identity, game_account_id_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::EntityId)},
  { 9, 16, sizeof(::bgs::protocol::Identity)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_EntityId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_Identity_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$bgs/low/pb/client/entity_types.proto\022\014"
  "bgs.protocol\0327bgs/low/pb/client/global_e"
  "xtensions/field_options.proto\0329bgs/low/p"
  "b/client/global_extensions/message_optio"
  "ns.proto\"=\n\010EntityId\022\024\n\004high\030\001 \002(\006B\006\202\371+\002"
  "\010\002\022\023\n\003low\030\002 \002(\006B\006\202\371+\002\010\002:\006\202\371+\002\010\001\"{\n\010Ident"
  "ity\0224\n\naccount_id\030\001 \001(\0132\026.bgs.protocol.E"
  "ntityIdB\010\212\371+\004:\002\020\001\0229\n\017game_account_id\030\002 \001"
  "(\0132\026.bgs.protocol.EntityIdB\010\212\371+\004:\002\020\002B\034\n\r"
  "bnet.protocolB\013EntityProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto_deps[2] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2ffield_5foptions_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fmessage_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto_sccs[2] = {
  &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
  &scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto, "bgs/low/pb/client/entity_types.proto", 386,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto, 2, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {

// ===================================================================

void EntityId::InitAsDefaultInstance() {
}
class EntityId::_Internal {
 public:
  using HasBits = decltype(std::declval<EntityId>()._has_bits_);
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EntityId::EntityId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.EntityId)
}
EntityId::EntityId(const EntityId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.EntityId)
}

void EntityId::SharedCtor() {
  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
}

EntityId::~EntityId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.EntityId)
  SharedDtor();
}

void EntityId::SharedDtor() {
}

void EntityId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityId& EntityId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void EntityId::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.EntityId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&high_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_) -
        reinterpret_cast<char*>(&high_)) + sizeof(low_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EntityId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 high = 1 [(.bgs.protocol.field_options) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_high(&has_bits);
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 low = 2 [(.bgs.protocol.field_options) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_low(&has_bits);
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.EntityId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 high = 1 [(.bgs.protocol.field_options) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_high(), target);
  }

  // required fixed64 low = 2 [(.bgs.protocol.field_options) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_low(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.EntityId)
  return target;
}

size_t EntityId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.EntityId)
  size_t total_size = 0;

  if (_internal_has_high()) {
    // required fixed64 high = 1 [(.bgs.protocol.field_options) = {
    total_size += 1 + 8;
  }

  if (_internal_has_low()) {
    // required fixed64 low = 2 [(.bgs.protocol.field_options) = {
    total_size += 1 + 8;
  }

  return total_size;
}
size_t EntityId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.EntityId)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed64 high = 1 [(.bgs.protocol.field_options) = {
    total_size += 1 + 8;

    // required fixed64 low = 2 [(.bgs.protocol.field_options) = {
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.EntityId)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntityId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.EntityId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.EntityId)
    MergeFrom(*source);
  }
}

void EntityId::MergeFrom(const EntityId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.EntityId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      high_ = from.high_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_ = from.low_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EntityId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.EntityId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityId::CopyFrom(const EntityId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.EntityId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void EntityId::InternalSwap(EntityId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(high_, other->high_);
  swap(low_, other->low_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identity::InitAsDefaultInstance() {
  ::bgs::protocol::_Identity_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::_Identity_default_instance_._instance.get_mutable()->game_account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class Identity::_Internal {
 public:
  using HasBits = decltype(std::declval<Identity>()._has_bits_);
  static const ::bgs::protocol::EntityId& account_id(const Identity* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& game_account_id(const Identity* msg);
  static void set_has_game_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
Identity::_Internal::account_id(const Identity* msg) {
  return *msg->account_id_;
}
const ::bgs::protocol::EntityId&
Identity::_Internal::game_account_id(const Identity* msg) {
  return *msg->game_account_id_;
}
Identity::Identity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.Identity)
}
Identity::Identity(const Identity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  if (from._internal_has_game_account_id()) {
    game_account_id_ = new ::bgs::protocol::EntityId(*from.game_account_id_);
  } else {
    game_account_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.Identity)
}

void Identity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_account_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(game_account_id_));
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:bgs.protocol.Identity)
  SharedDtor();
}

void Identity::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
  if (this != internal_default_instance()) delete game_account_id_;
}

void Identity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identity& Identity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Identity::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.Identity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_account_id_ != nullptr);
      game_account_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Identity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId account_id = 1 [(.bgs.protocol.valid) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId game_account_id = 2 [(.bgs.protocol.valid) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.Identity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId account_id = 1 [(.bgs.protocol.valid) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_id(this), target, stream);
  }

  // optional .bgs.protocol.EntityId game_account_id = 2 [(.bgs.protocol.valid) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_account_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.Identity)
  return target;
}

size_t Identity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.Identity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId account_id = 1 [(.bgs.protocol.valid) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

    // optional .bgs.protocol.EntityId game_account_id = 2 [(.bgs.protocol.valid) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_account_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  const Identity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.Identity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.Identity)
    MergeFrom(*source);
  }
}

void Identity::MergeFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_game_account_id());
    }
  }
}

void Identity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identity::CopyFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity::IsInitialized() const {
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  if (_internal_has_game_account_id()) {
    if (!game_account_id_->IsInitialized()) return false;
  }
  return true;
}

void Identity::InternalSwap(Identity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(game_account_id_, other->game_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::EntityId* Arena::CreateMaybeMessage< ::bgs::protocol::EntityId >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::EntityId >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::Identity* Arena::CreateMaybeMessage< ::bgs::protocol::Identity >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::Identity >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
