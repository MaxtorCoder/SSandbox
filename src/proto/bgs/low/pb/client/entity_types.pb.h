// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/entity_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/global_extensions/field_options.pb.h"
#include "bgs/low/pb/client/global_extensions/message_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class EntityId;
class EntityIdDefaultTypeInternal;
extern EntityIdDefaultTypeInternal _EntityId_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::EntityId* Arena::CreateMaybeMessage<::bgs::protocol::EntityId>(Arena*);
template<> ::bgs::protocol::Identity* Arena::CreateMaybeMessage<::bgs::protocol::Identity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {

// ===================================================================

class EntityId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.EntityId) */ {
 public:
  EntityId();
  virtual ~EntityId();

  EntityId(const EntityId& from);
  EntityId(EntityId&& from) noexcept
    : EntityId() {
    *this = ::std::move(from);
  }

  inline EntityId& operator=(const EntityId& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityId& operator=(EntityId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityId* internal_default_instance() {
    return reinterpret_cast<const EntityId*>(
               &_EntityId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntityId& a, EntityId& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityId* New() const final {
    return CreateMaybeMessage<EntityId>(nullptr);
  }

  EntityId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityId& from);
  void MergeFrom(const EntityId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.EntityId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kLowFieldNumber = 2,
  };
  // required fixed64 high = 1 [(.bgs.protocol.field_options) = {
  bool has_high() const;
  private:
  bool _internal_has_high() const;
  public:
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 low = 2 [(.bgs.protocol.field_options) = {
  bool has_low() const;
  private:
  bool _internal_has_low() const;
  public:
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.EntityId)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Identity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(nullptr);
  }

  Identity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.Identity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kGameAccountIdFieldNumber = 2,
  };
  // optional .bgs.protocol.EntityId account_id = 1 [(.bgs.protocol.valid) = {
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::bgs::protocol::EntityId& account_id() const;
  ::bgs::protocol::EntityId* release_account_id();
  ::bgs::protocol::EntityId* mutable_account_id();
  void set_allocated_account_id(::bgs::protocol::EntityId* account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_account_id();
  public:

  // optional .bgs.protocol.EntityId game_account_id = 2 [(.bgs.protocol.valid) = {
  bool has_game_account_id() const;
  private:
  bool _internal_has_game_account_id() const;
  public:
  void clear_game_account_id();
  const ::bgs::protocol::EntityId& game_account_id() const;
  ::bgs::protocol::EntityId* release_game_account_id();
  ::bgs::protocol::EntityId* mutable_game_account_id();
  void set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_game_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_game_account_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.Identity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::EntityId* account_id_;
  ::bgs::protocol::EntityId* game_account_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityId

// required fixed64 high = 1 [(.bgs.protocol.field_options) = {
inline bool EntityId::_internal_has_high() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EntityId::has_high() const {
  return _internal_has_high();
}
inline void EntityId::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityId::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityId::high() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EntityId.high)
  return _internal_high();
}
inline void EntityId::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  high_ = value;
}
inline void EntityId::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EntityId.high)
}

// required fixed64 low = 2 [(.bgs.protocol.field_options) = {
inline bool EntityId::_internal_has_low() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EntityId::has_low() const {
  return _internal_has_low();
}
inline void EntityId::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityId::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityId::low() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.EntityId.low)
  return _internal_low();
}
inline void EntityId::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  low_ = value;
}
inline void EntityId::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.EntityId.low)
}

// -------------------------------------------------------------------

// Identity

// optional .bgs.protocol.EntityId account_id = 1 [(.bgs.protocol.valid) = {
inline bool Identity::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_id_ != nullptr);
  return value;
}
inline bool Identity::has_account_id() const {
  return _internal_has_account_id();
}
inline void Identity::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::EntityId& Identity::_internal_account_id() const {
  const ::bgs::protocol::EntityId* p = account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Identity::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Identity.account_id)
  return _internal_account_id();
}
inline ::bgs::protocol::EntityId* Identity::release_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Identity.account_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Identity::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000001u;
  if (account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    account_id_ = p;
  }
  return account_id_;
}
inline ::bgs::protocol::EntityId* Identity::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Identity.account_id)
  return _internal_mutable_account_id();
}
inline void Identity::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_id_;
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Identity.account_id)
}

// optional .bgs.protocol.EntityId game_account_id = 2 [(.bgs.protocol.valid) = {
inline bool Identity::_internal_has_game_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_account_id_ != nullptr);
  return value;
}
inline bool Identity::has_game_account_id() const {
  return _internal_has_game_account_id();
}
inline void Identity::clear_game_account_id() {
  if (game_account_id_ != nullptr) game_account_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::bgs::protocol::EntityId& Identity::_internal_game_account_id() const {
  const ::bgs::protocol::EntityId* p = game_account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Identity::game_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Identity.game_account_id)
  return _internal_game_account_id();
}
inline ::bgs::protocol::EntityId* Identity::release_game_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Identity.game_account_id)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Identity::_internal_mutable_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
  if (game_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    game_account_id_ = p;
  }
  return game_account_id_;
}
inline ::bgs::protocol::EntityId* Identity::mutable_game_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Identity.game_account_id)
  return _internal_mutable_game_account_id();
}
inline void Identity::set_allocated_game_account_id(::bgs::protocol::EntityId* game_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_account_id_;
  }
  if (game_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_account_id_ = game_account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Identity.game_account_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto
