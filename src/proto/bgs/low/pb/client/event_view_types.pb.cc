// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/event_view_types.proto

#include "bgs/low/pb/client/event_view_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace bgs {
namespace protocol {
class GetEventOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEventOptions> _instance;
} _GetEventOptions_default_instance_;
class ViewMarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewMarker> _instance;
} _ViewMarker_default_instance_;
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_GetEventOptions_default_instance_;
    new (ptr) ::bgs::protocol::GetEventOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::GetEventOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_ViewMarker_default_instance_;
    new (ptr) ::bgs::protocol::ViewMarker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::ViewMarker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::GetEventOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::GetEventOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::GetEventOptions, fetch_from_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::GetEventOptions, fetch_until_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::GetEventOptions, max_events_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::GetEventOptions, order_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ViewMarker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ViewMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ViewMarker, last_read_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ViewMarker, last_message_time_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::bgs::protocol::GetEventOptions)},
  { 13, 20, sizeof(::bgs::protocol::ViewMarker)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_GetEventOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_ViewMarker_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(bgs/low/pb/client/event_view_types.pro"
  "to\022\014bgs.protocol\"\211\001\n\017GetEventOptions\022\022\n\n"
  "fetch_from\030\001 \001(\004\022\023\n\013fetch_until\030\002 \001(\004\022\022\n"
  "\nmax_events\030\003 \001(\r\0229\n\005order\030\004 \001(\0162\030.bgs.p"
  "rotocol.EventOrder:\020EVENT_DESCENDING\"\?\n\n"
  "ViewMarker\022\026\n\016last_read_time\030\001 \001(\004\022\031\n\021la"
  "st_message_time\030\002 \001(\004*7\n\nEventOrder\022\024\n\020E"
  "VENT_DESCENDING\020\000\022\023\n\017EVENT_ASCENDING\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto_sccs[2] = {
  &scc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,
  &scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto, "bgs/low/pb/client/event_view_types.proto", 318,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto, 2, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto[0];
}
bool EventOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetEventOptions::InitAsDefaultInstance() {
}
class GetEventOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEventOptions>()._has_bits_);
  static void set_has_fetch_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fetch_until(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GetEventOptions::GetEventOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.GetEventOptions)
}
GetEventOptions::GetEventOptions(const GetEventOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fetch_from_, &from.fetch_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&fetch_from_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.GetEventOptions)
}

void GetEventOptions::SharedCtor() {
  ::memset(&fetch_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&fetch_from_)) + sizeof(order_));
}

GetEventOptions::~GetEventOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.GetEventOptions)
  SharedDtor();
}

void GetEventOptions::SharedDtor() {
}

void GetEventOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEventOptions& GetEventOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEventOptions_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void GetEventOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.GetEventOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fetch_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&fetch_from_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetEventOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 fetch_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fetch_from(&has_bits);
          fetch_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fetch_until = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fetch_until(&has_bits);
          fetch_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_events(&has_bits);
          max_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EventOrder order = 4 [default = EVENT_DESCENDING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::EventOrder_IsValid(val))) {
            _internal_set_order(static_cast<::bgs::protocol::EventOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEventOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.GetEventOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fetch_from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fetch_from(), target);
  }

  // optional uint64 fetch_until = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fetch_until(), target);
  }

  // optional uint32 max_events = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_events(), target);
  }

  // optional .bgs.protocol.EventOrder order = 4 [default = EVENT_DESCENDING];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.GetEventOptions)
  return target;
}

size_t GetEventOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.GetEventOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 fetch_from = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fetch_from());
    }

    // optional uint64 fetch_until = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_fetch_until());
    }

    // optional uint32 max_events = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_events());
    }

    // optional .bgs.protocol.EventOrder order = 4 [default = EVENT_DESCENDING];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEventOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.GetEventOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEventOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEventOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.GetEventOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.GetEventOptions)
    MergeFrom(*source);
  }
}

void GetEventOptions::MergeFrom(const GetEventOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.GetEventOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fetch_from_ = from.fetch_from_;
    }
    if (cached_has_bits & 0x00000002u) {
      fetch_until_ = from.fetch_until_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_events_ = from.max_events_;
    }
    if (cached_has_bits & 0x00000008u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetEventOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.GetEventOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEventOptions::CopyFrom(const GetEventOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.GetEventOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventOptions::IsInitialized() const {
  return true;
}

void GetEventOptions::InternalSwap(GetEventOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fetch_from_, other->fetch_from_);
  swap(fetch_until_, other->fetch_until_);
  swap(max_events_, other->max_events_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewMarker::InitAsDefaultInstance() {
}
class ViewMarker::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewMarker>()._has_bits_);
  static void set_has_last_read_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_message_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ViewMarker::ViewMarker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.ViewMarker)
}
ViewMarker::ViewMarker(const ViewMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_read_time_, &from.last_read_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_message_time_) -
    reinterpret_cast<char*>(&last_read_time_)) + sizeof(last_message_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.ViewMarker)
}

void ViewMarker::SharedCtor() {
  ::memset(&last_read_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_message_time_) -
      reinterpret_cast<char*>(&last_read_time_)) + sizeof(last_message_time_));
}

ViewMarker::~ViewMarker() {
  // @@protoc_insertion_point(destructor:bgs.protocol.ViewMarker)
  SharedDtor();
}

void ViewMarker::SharedDtor() {
}

void ViewMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewMarker& ViewMarker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewMarker_bgs_2flow_2fpb_2fclient_2fevent_5fview_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ViewMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.ViewMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_read_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_message_time_) -
        reinterpret_cast<char*>(&last_read_time_)) + sizeof(last_message_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ViewMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 last_read_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_read_time(&has_bits);
          last_read_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_message_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_message_time(&has_bits);
          last_message_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewMarker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.ViewMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 last_read_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_last_read_time(), target);
  }

  // optional uint64 last_message_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_message_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.ViewMarker)
  return target;
}

size_t ViewMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.ViewMarker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 last_read_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_read_time());
    }

    // optional uint64 last_message_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_message_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewMarker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.ViewMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewMarker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewMarker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.ViewMarker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.ViewMarker)
    MergeFrom(*source);
  }
}

void ViewMarker::MergeFrom(const ViewMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.ViewMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_read_time_ = from.last_read_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_message_time_ = from.last_message_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ViewMarker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.ViewMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewMarker::CopyFrom(const ViewMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.ViewMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewMarker::IsInitialized() const {
  return true;
}

void ViewMarker::InternalSwap(ViewMarker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_read_time_, other->last_read_time_);
  swap(last_message_time_, other->last_message_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewMarker::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::GetEventOptions* Arena::CreateMaybeMessage< ::bgs::protocol::GetEventOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::GetEventOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::ViewMarker* Arena::CreateMaybeMessage< ::bgs::protocol::ViewMarker >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::ViewMarker >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
