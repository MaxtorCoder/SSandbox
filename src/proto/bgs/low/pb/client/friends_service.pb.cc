// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/friends_service.proto

#include "bgs/low/pb/client/friends_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvitationParams_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptInvitationOptions_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendOfFriend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace friends {
namespace v1 {
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
} _SubscribeRequest_default_instance_;
class UnsubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeRequest> _instance;
} _UnsubscribeRequest_default_instance_;
class SendInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendInvitationRequest> _instance;
} _SendInvitationRequest_default_instance_;
class RevokeInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevokeInvitationRequest> _instance;
} _RevokeInvitationRequest_default_instance_;
class AcceptInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptInvitationRequest> _instance;
} _AcceptInvitationRequest_default_instance_;
class DeclineInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeclineInvitationRequest> _instance;
} _DeclineInvitationRequest_default_instance_;
class IgnoreInvitationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IgnoreInvitationRequest> _instance;
} _IgnoreInvitationRequest_default_instance_;
class RemoveFriendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveFriendRequest> _instance;
} _RemoveFriendRequest_default_instance_;
class RevokeAllInvitationsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevokeAllInvitationsRequest> _instance;
} _RevokeAllInvitationsRequest_default_instance_;
class ViewFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewFriendsRequest> _instance;
} _ViewFriendsRequest_default_instance_;
class ViewFriendsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewFriendsResponse> _instance;
} _ViewFriendsResponse_default_instance_;
class UpdateFriendStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFriendStateRequest> _instance;
} _UpdateFriendStateRequest_default_instance_;
class GetFriendListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFriendListRequest> _instance;
} _GetFriendListRequest_default_instance_;
class GetFriendListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFriendListResponse> _instance;
} _GetFriendListResponse_default_instance_;
class CreateFriendshipRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateFriendshipRequest> _instance;
} _CreateFriendshipRequest_default_instance_;
class FriendNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendNotification> _instance;
} _FriendNotification_default_instance_;
class UpdateFriendStateNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFriendStateNotification> _instance;
} _UpdateFriendStateNotification_default_instance_;
class InvitationNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvitationNotification> _instance;
} _InvitationNotification_default_instance_;
class SentInvitationAddedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentInvitationAddedNotification> _instance;
} _SentInvitationAddedNotification_default_instance_;
class SentInvitationRemovedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentInvitationRemovedNotification> _instance;
} _SentInvitationRemovedNotification_default_instance_;
}  // namespace v1
}  // namespace friends
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_AcceptInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::AcceptInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::AcceptInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_AcceptInvitationOptions_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_CreateFriendshipRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_CreateFriendshipRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::CreateFriendshipRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::CreateFriendshipRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateFriendshipRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateFriendshipRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_DeclineInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::DeclineInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::DeclineInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_FriendNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_FriendNotification_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::FriendNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::FriendNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FriendNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FriendNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetFriendListRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_GetFriendListRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::GetFriendListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::GetFriendListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFriendListRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFriendListRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetFriendListResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_GetFriendListResponse_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::GetFriendListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::GetFriendListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFriendListResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFriendListResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_IgnoreInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_IgnoreInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::IgnoreInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::IgnoreInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IgnoreInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IgnoreInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_InvitationNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_InvitationNotification_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::InvitationNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::InvitationNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InvitationNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_InvitationNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RemoveFriendRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_RemoveFriendRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::RemoveFriendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::RemoveFriendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoveFriendRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoveFriendRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RevokeAllInvitationsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_RevokeAllInvitationsRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::RevokeAllInvitationsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::RevokeAllInvitationsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RevokeAllInvitationsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RevokeAllInvitationsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_RevokeInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::RevokeInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::RevokeInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_SendInvitationRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::SendInvitationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::SendInvitationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_InvitationParams_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SentInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_SentInvitationAddedNotification_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::SentInvitationAddedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::SentInvitationAddedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SentInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SentInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
      &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SentInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_SentInvitationRemovedNotification_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::SentInvitationRemovedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::SentInvitationRemovedNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SentInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SentInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_SubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_UnsubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::UnsubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::UnsubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFriendStateNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_UpdateFriendStateNotification_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::UpdateFriendStateNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::UpdateFriendStateNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateFriendStateNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateFriendStateNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFriendStateRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_UpdateFriendStateRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::UpdateFriendStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::UpdateFriendStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateFriendStateRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateFriendStateRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ViewFriendsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_ViewFriendsRequest_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::ViewFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::ViewFriendsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewFriendsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ViewFriendsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ViewFriendsResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_ViewFriendsResponse_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::ViewFriendsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::ViewFriendsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewFriendsResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ViewFriendsResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto}, {
      &scc_info_FriendOfFriend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeRequest, forward_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UnsubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UnsubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UnsubscribeRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UnsubscribeRequest, forward_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SendInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SendInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SendInvitationRequest, agent_identity_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SendInvitationRequest, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SendInvitationRequest, params_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RevokeInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RevokeInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RevokeInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RevokeInvitationRequest, invitation_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationRequest, invitation_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationRequest, options_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::DeclineInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::DeclineInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::DeclineInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::DeclineInvitationRequest, invitation_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::IgnoreInvitationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::IgnoreInvitationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::IgnoreInvitationRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::IgnoreInvitationRequest, invitation_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::IgnoreInvitationRequest, program_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RemoveFriendRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RemoveFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RemoveFriendRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RemoveFriendRequest, target_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RevokeAllInvitationsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RevokeAllInvitationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::RevokeAllInvitationsRequest, agent_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ViewFriendsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ViewFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ViewFriendsRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ViewFriendsRequest, target_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ViewFriendsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ViewFriendsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ViewFriendsResponse, friends_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateRequest, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateRequest, attribute_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::GetFriendListRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::GetFriendListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::GetFriendListRequest, agent_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::GetFriendListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::GetFriendListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::GetFriendListResponse, friends_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::CreateFriendshipRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::CreateFriendshipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::CreateFriendshipRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::CreateFriendshipRequest, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::CreateFriendshipRequest, role_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendNotification, target_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendNotification, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendNotification, forward_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateNotification, changed_friend_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateNotification, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::UpdateFriendStateNotification, forward_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::InvitationNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::InvitationNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::InvitationNotification, invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::InvitationNotification, reason_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::InvitationNotification, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::InvitationNotification, forward_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationAddedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationAddedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationAddedNotification, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationAddedNotification, invitation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationAddedNotification, forward_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationRemovedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationRemovedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationRemovedNotification, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationRemovedNotification, invitation_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationRemovedNotification, reason_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitationRemovedNotification, forward_),
  0,
  2,
  3,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::bgs::protocol::friends::v1::SubscribeRequest)},
  { 11, 19, sizeof(::bgs::protocol::friends::v1::UnsubscribeRequest)},
  { 22, 30, sizeof(::bgs::protocol::friends::v1::SendInvitationRequest)},
  { 33, 40, sizeof(::bgs::protocol::friends::v1::RevokeInvitationRequest)},
  { 42, 50, sizeof(::bgs::protocol::friends::v1::AcceptInvitationRequest)},
  { 53, 60, sizeof(::bgs::protocol::friends::v1::DeclineInvitationRequest)},
  { 62, 70, sizeof(::bgs::protocol::friends::v1::IgnoreInvitationRequest)},
  { 73, 80, sizeof(::bgs::protocol::friends::v1::RemoveFriendRequest)},
  { 82, 88, sizeof(::bgs::protocol::friends::v1::RevokeAllInvitationsRequest)},
  { 89, 96, sizeof(::bgs::protocol::friends::v1::ViewFriendsRequest)},
  { 98, 104, sizeof(::bgs::protocol::friends::v1::ViewFriendsResponse)},
  { 105, 113, sizeof(::bgs::protocol::friends::v1::UpdateFriendStateRequest)},
  { 116, 122, sizeof(::bgs::protocol::friends::v1::GetFriendListRequest)},
  { 123, 129, sizeof(::bgs::protocol::friends::v1::GetFriendListResponse)},
  { 130, 138, sizeof(::bgs::protocol::friends::v1::CreateFriendshipRequest)},
  { 141, 149, sizeof(::bgs::protocol::friends::v1::FriendNotification)},
  { 152, 160, sizeof(::bgs::protocol::friends::v1::UpdateFriendStateNotification)},
  { 163, 172, sizeof(::bgs::protocol::friends::v1::InvitationNotification)},
  { 176, 184, sizeof(::bgs::protocol::friends::v1::SentInvitationAddedNotification)},
  { 187, 196, sizeof(::bgs::protocol::friends::v1::SentInvitationRemovedNotification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_UnsubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_SendInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_RevokeInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_AcceptInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_DeclineInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_IgnoreInvitationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_RemoveFriendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_RevokeAllInvitationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_ViewFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_ViewFriendsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_UpdateFriendStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_GetFriendListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_GetFriendListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_CreateFriendshipRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_FriendNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_UpdateFriendStateNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_InvitationNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_SentInvitationAddedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_SentInvitationRemovedNotification_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'bgs/low/pb/client/friends_service.prot"
  "o\022\027bgs.protocol.friends.v1\032\'bgs/low/pb/c"
  "lient/attribute_types.proto\032$bgs/low/pb/"
  "client/entity_types.proto\032%bgs/low/pb/cl"
  "ient/friends_types.proto\032(bgs/low/pb/cli"
  "ent/invitation_types.proto\032!bgs/low/pb/c"
  "lient/rpc_types.proto\"\201\001\n\020SubscribeReque"
  "st\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protocol.Enti"
  "tyId\022\021\n\tobject_id\030\002 \002(\004\0220\n\007forward\030\003 \001(\013"
  "2\033.bgs.protocol.ObjectAddressB\002\030\001\"\203\001\n\022Un"
  "subscribeRequest\022(\n\010agent_id\030\001 \001(\0132\026.bgs"
  ".protocol.EntityId\022\021\n\tobject_id\030\002 \001(\004\0220\n"
  "\007forward\030\003 \001(\0132\033.bgs.protocol.ObjectAddr"
  "essB\002\030\001\"\242\001\n\025SendInvitationRequest\022.\n\016age"
  "nt_identity\030\001 \001(\0132\026.bgs.protocol.Identit"
  "y\022)\n\ttarget_id\030\002 \002(\0132\026.bgs.protocol.Enti"
  "tyId\022.\n\006params\030\003 \002(\0132\036.bgs.protocol.Invi"
  "tationParams\"Z\n\027RevokeInvitationRequest\022"
  "(\n\010agent_id\030\001 \001(\0132\026.bgs.protocol.EntityI"
  "d\022\025\n\rinvitation_id\030\002 \001(\006\"\235\001\n\027AcceptInvit"
  "ationRequest\022(\n\010agent_id\030\001 \001(\0132\026.bgs.pro"
  "tocol.EntityId\022\025\n\rinvitation_id\030\003 \002(\006\022A\n"
  "\007options\030\004 \001(\01320.bgs.protocol.friends.v1"
  ".AcceptInvitationOptions\"[\n\030DeclineInvit"
  "ationRequest\022(\n\010agent_id\030\001 \001(\0132\026.bgs.pro"
  "tocol.EntityId\022\025\n\rinvitation_id\030\003 \002(\006\"k\n"
  "\027IgnoreInvitationRequest\022(\n\010agent_id\030\001 \001"
  "(\0132\026.bgs.protocol.EntityId\022\025\n\rinvitation"
  "_id\030\003 \002(\006\022\017\n\007program\030\004 \001(\007\"j\n\023RemoveFrie"
  "ndRequest\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protoc"
  "ol.EntityId\022)\n\ttarget_id\030\002 \002(\0132\026.bgs.pro"
  "tocol.EntityId\"G\n\033RevokeAllInvitationsRe"
  "quest\022(\n\010agent_id\030\002 \001(\0132\026.bgs.protocol.E"
  "ntityId\"i\n\022ViewFriendsRequest\022(\n\010agent_i"
  "d\030\001 \001(\0132\026.bgs.protocol.EntityId\022)\n\ttarge"
  "t_id\030\002 \002(\0132\026.bgs.protocol.EntityId\"O\n\023Vi"
  "ewFriendsResponse\0228\n\007friends\030\001 \003(\0132\'.bgs"
  ".protocol.friends.v1.FriendOfFriend\"\233\001\n\030"
  "UpdateFriendStateRequest\022(\n\010agent_id\030\001 \001"
  "(\0132\026.bgs.protocol.EntityId\022)\n\ttarget_id\030"
  "\002 \002(\0132\026.bgs.protocol.EntityId\022*\n\tattribu"
  "te\030\003 \003(\0132\027.bgs.protocol.Attribute\"@\n\024Get"
  "FriendListRequest\022(\n\010agent_id\030\002 \001(\0132\026.bg"
  "s.protocol.EntityId\"I\n\025GetFriendListResp"
  "onse\0220\n\007friends\030\001 \003(\0132\037.bgs.protocol.fri"
  "ends.v1.Friend\"\200\001\n\027CreateFriendshipReque"
  "st\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protocol.Enti"
  "tyId\022)\n\ttarget_id\030\002 \001(\0132\026.bgs.protocol.E"
  "ntityId\022\020\n\004role\030\003 \003(\rB\002\020\001\"\243\001\n\022FriendNoti"
  "fication\022/\n\006target\030\001 \002(\0132\037.bgs.protocol."
  "friends.v1.Friend\022*\n\naccount_id\030\005 \001(\0132\026."
  "bgs.protocol.EntityId\0220\n\007forward\030\006 \001(\0132\033"
  ".bgs.protocol.ObjectAddressB\002\030\001\"\266\001\n\035Upda"
  "teFriendStateNotification\0227\n\016changed_fri"
  "end\030\001 \002(\0132\037.bgs.protocol.friends.v1.Frie"
  "nd\022*\n\naccount_id\030\005 \001(\0132\026.bgs.protocol.En"
  "tityId\0220\n\007forward\030\006 \001(\0132\033.bgs.protocol.O"
  "bjectAddressB\002\030\001\"\312\001\n\026InvitationNotificat"
  "ion\022\?\n\ninvitation\030\001 \002(\0132+.bgs.protocol.f"
  "riends.v1.ReceivedInvitation\022\021\n\006reason\030\003"
  " \001(\r:\0010\022*\n\naccount_id\030\005 \001(\0132\026.bgs.protoc"
  "ol.EntityId\0220\n\007forward\030\006 \001(\0132\033.bgs.proto"
  "col.ObjectAddressB\002\030\001\"\274\001\n\037SentInvitation"
  "AddedNotification\022*\n\naccount_id\030\001 \001(\0132\026."
  "bgs.protocol.EntityId\022;\n\ninvitation\030\002 \001("
  "\0132\'.bgs.protocol.friends.v1.SentInvitati"
  "on\0220\n\007forward\030\003 \001(\0132\033.bgs.protocol.Objec"
  "tAddressB\002\030\001\"\250\001\n!SentInvitationRemovedNo"
  "tification\022*\n\naccount_id\030\001 \001(\0132\026.bgs.pro"
  "tocol.EntityId\022\025\n\rinvitation_id\030\002 \001(\006\022\016\n"
  "\006reason\030\003 \001(\r\0220\n\007forward\030\004 \001(\0132\033.bgs.pro"
  "tocol.ObjectAddressB\002\030\0012\206\013\n\016FriendsServi"
  "ce\022j\n\tSubscribe\022).bgs.protocol.friends.v"
  "1.SubscribeRequest\032*.bgs.protocol.friend"
  "s.v1.SubscribeResponse\"\006\202\371+\002\010\001\022^\n\016SendIn"
  "vitation\022..bgs.protocol.friends.v1.SendI"
  "nvitationRequest\032\024.bgs.protocol.NoData\"\006"
  "\202\371+\002\010\002\022b\n\020AcceptInvitation\0220.bgs.protoco"
  "l.friends.v1.AcceptInvitationRequest\032\024.b"
  "gs.protocol.NoData\"\006\202\371+\002\010\003\022b\n\020RevokeInvi"
  "tation\0220.bgs.protocol.friends.v1.RevokeI"
  "nvitationRequest\032\024.bgs.protocol.NoData\"\006"
  "\202\371+\002\010\004\022g\n\021DeclineInvitation\0221.bgs.protoc"
  "ol.friends.v1.DeclineInvitationRequest\032\024"
  ".bgs.protocol.NoData\"\t\210\002\001\202\371+\002\010\005\022b\n\020Ignor"
  "eInvitation\0220.bgs.protocol.friends.v1.Ig"
  "noreInvitationRequest\032\024.bgs.protocol.NoD"
  "ata\"\006\202\371+\002\010\006\022Z\n\014RemoveFriend\022,.bgs.protoc"
  "ol.friends.v1.RemoveFriendRequest\032\024.bgs."
  "protocol.NoData\"\006\202\371+\002\010\010\022p\n\013ViewFriends\022+"
  ".bgs.protocol.friends.v1.ViewFriendsRequ"
  "est\032,.bgs.protocol.friends.v1.ViewFriend"
  "sResponse\"\006\202\371+\002\010\t\022d\n\021UpdateFriendState\0221"
  ".bgs.protocol.friends.v1.UpdateFriendSta"
  "teRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010\n\022"
  "X\n\013Unsubscribe\022+.bgs.protocol.friends.v1"
  ".UnsubscribeRequest\032\024.bgs.protocol.NoDat"
  "a\"\006\202\371+\002\010\013\022j\n\024RevokeAllInvitations\0224.bgs."
  "protocol.friends.v1.RevokeAllInvitations"
  "Request\032\024.bgs.protocol.NoData\"\006\202\371+\002\010\014\022v\n"
  "\rGetFriendList\022-.bgs.protocol.friends.v1"
  ".GetFriendListRequest\032..bgs.protocol.fri"
  "ends.v1.GetFriendListResponse\"\006\202\371+\002\010\r\022b\n"
  "\020CreateFriendship\0220.bgs.protocol.friends"
  ".v1.CreateFriendshipRequest\032\024.bgs.protoc"
  "ol.NoData\"\006\202\371+\002\010\016\032=\202\371+&\n$bnet.protocol.f"
  "riends.FriendsService\202\371+\t*\007friends\212\371+\002\020\001"
  "2\314\006\n\017FriendsListener\022_\n\rOnFriendAdded\022+."
  "bgs.protocol.friends.v1.FriendNotificati"
  "on\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\001\022a\n"
  "\017OnFriendRemoved\022+.bgs.protocol.friends."
  "v1.FriendNotification\032\031.bgs.protocol.NO_"
  "RESPONSE\"\006\202\371+\002\010\002\022o\n\031OnReceivedInvitation"
  "Added\022/.bgs.protocol.friends.v1.Invitati"
  "onNotification\032\031.bgs.protocol.NO_RESPONS"
  "E\"\006\202\371+\002\010\003\022q\n\033OnReceivedInvitationRemoved"
  "\022/.bgs.protocol.friends.v1.InvitationNot"
  "ification\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371"
  "+\002\010\004\022t\n\025OnSentInvitationAdded\0228.bgs.prot"
  "ocol.friends.v1.SentInvitationAddedNotif"
  "ication\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002"
  "\010\005\022x\n\027OnSentInvitationRemoved\022:.bgs.prot"
  "ocol.friends.v1.SentInvitationRemovedNot"
  "ification\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371"
  "+\002\010\006\022p\n\023OnUpdateFriendState\0226.bgs.protoc"
  "ol.friends.v1.UpdateFriendStateNotificat"
  "ion\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\007\032/"
  "\202\371+%\n#bnet.protocol.friends.FriendsNotif"
  "y\212\371+\002\010\001B5\n\030bnet.protocol.friends.v1B\023Fri"
  "endsServiceProto\200\001\000\210\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto_deps[5] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto_sccs[20] = {
  &scc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_CreateFriendshipRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_FriendNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_GetFriendListRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_GetFriendListResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_IgnoreInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_InvitationNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_RemoveFriendRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_RevokeAllInvitationsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_SentInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_SentInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_UpdateFriendStateNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_UpdateFriendStateRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_ViewFriendsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
  &scc_info_ViewFriendsResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto, "bgs/low/pb/client/friends_service.proto", 5182,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto_deps, 20, 5,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto, 20, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto)), true);
namespace bgs {
namespace protocol {
namespace friends {
namespace v1 {

// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_SubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_SubscribeRequest_default_instance_._instance.get_mutable()->forward_ = const_cast< ::bgs::protocol::ObjectAddress*>(
      ::bgs::protocol::ObjectAddress::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const SubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::ObjectAddress& forward(const SubscribeRequest* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
SubscribeRequest::_Internal::agent_id(const SubscribeRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::ObjectAddress&
SubscribeRequest::_Internal::forward(const SubscribeRequest* msg) {
  return *msg->forward_;
}
void SubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SubscribeRequest::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SubscribeRequest::SubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new ::bgs::protocol::ObjectAddress(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(object_id_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete forward_;
}

void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required uint64 object_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.SubscribeRequest)
  size_t total_size = 0;

  // required uint64 object_id = 2;
  if (_internal_has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_forward()->::bgs::protocol::ObjectAddress::MergeFrom(from._internal_forward());
    }
    if (cached_has_bits & 0x00000004u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_forward()) {
    if (!forward_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(forward_, other->forward_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_UnsubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_UnsubscribeRequest_default_instance_._instance.get_mutable()->forward_ = const_cast< ::bgs::protocol::ObjectAddress*>(
      ::bgs::protocol::ObjectAddress::internal_default_instance());
}
class UnsubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const UnsubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::ObjectAddress& forward(const UnsubscribeRequest* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
UnsubscribeRequest::_Internal::agent_id(const UnsubscribeRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::ObjectAddress&
UnsubscribeRequest::_Internal::forward(const UnsubscribeRequest* msg) {
  return *msg->forward_;
}
void UnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UnsubscribeRequest::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UnsubscribeRequest::UnsubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.UnsubscribeRequest)
}
UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new ::bgs::protocol::ObjectAddress(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(object_id_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete forward_;
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnsubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional uint64 object_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.UnsubscribeRequest)
  return target;
}

size_t UnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.UnsubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

    // optional uint64 object_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_object_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.UnsubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.UnsubscribeRequest)
    MergeFrom(*source);
  }
}

void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_forward()->::bgs::protocol::ObjectAddress::MergeFrom(from._internal_forward());
    }
    if (cached_has_bits & 0x00000004u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_forward()) {
    if (!forward_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeRequest::InternalSwap(UnsubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(forward_, other->forward_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_SendInvitationRequest_default_instance_._instance.get_mutable()->agent_identity_ = const_cast< ::bgs::protocol::Identity*>(
      ::bgs::protocol::Identity::internal_default_instance());
  ::bgs::protocol::friends::v1::_SendInvitationRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_SendInvitationRequest_default_instance_._instance.get_mutable()->params_ = const_cast< ::bgs::protocol::InvitationParams*>(
      ::bgs::protocol::InvitationParams::internal_default_instance());
}
class SendInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::Identity& agent_identity(const SendInvitationRequest* msg);
  static void set_has_agent_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& target_id(const SendInvitationRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::InvitationParams& params(const SendInvitationRequest* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::Identity&
SendInvitationRequest::_Internal::agent_identity(const SendInvitationRequest* msg) {
  return *msg->agent_identity_;
}
const ::bgs::protocol::EntityId&
SendInvitationRequest::_Internal::target_id(const SendInvitationRequest* msg) {
  return *msg->target_id_;
}
const ::bgs::protocol::InvitationParams&
SendInvitationRequest::_Internal::params(const SendInvitationRequest* msg) {
  return *msg->params_;
}
void SendInvitationRequest::clear_agent_identity() {
  if (agent_identity_ != nullptr) agent_identity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SendInvitationRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SendInvitationRequest::clear_params() {
  if (params_ != nullptr) params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SendInvitationRequest::SendInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.SendInvitationRequest)
}
SendInvitationRequest::SendInvitationRequest(const SendInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_identity()) {
    agent_identity_ = new ::bgs::protocol::Identity(*from.agent_identity_);
  } else {
    agent_identity_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new ::bgs::protocol::InvitationParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.SendInvitationRequest)
}

void SendInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&params_) -
      reinterpret_cast<char*>(&agent_identity_)) + sizeof(params_));
}

SendInvitationRequest::~SendInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.SendInvitationRequest)
  SharedDtor();
}

void SendInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_identity_;
  if (this != internal_default_instance()) delete target_id_;
  if (this != internal_default_instance()) delete params_;
}

void SendInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendInvitationRequest& SendInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SendInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.SendInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_identity_ != nullptr);
      agent_identity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(params_ != nullptr);
      params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SendInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.Identity agent_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.InvitationParams params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.SendInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.Identity agent_identity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_identity(this), target, stream);
  }

  // required .bgs.protocol.EntityId target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // required .bgs.protocol.InvitationParams params = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.SendInvitationRequest)
  return target;
}

size_t SendInvitationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.friends.v1.SendInvitationRequest)
  size_t total_size = 0;

  if (_internal_has_target_id()) {
    // required .bgs.protocol.EntityId target_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  if (_internal_has_params()) {
    // required .bgs.protocol.InvitationParams params = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  return total_size;
}
size_t SendInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.SendInvitationRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .bgs.protocol.EntityId target_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);

    // required .bgs.protocol.InvitationParams params = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.Identity agent_identity = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_identity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.SendInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.SendInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.SendInvitationRequest)
    MergeFrom(*source);
  }
}

void SendInvitationRequest::MergeFrom(const SendInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.SendInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_identity()->::bgs::protocol::Identity::MergeFrom(from._internal_agent_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_params()->::bgs::protocol::InvitationParams::MergeFrom(from._internal_params());
    }
  }
}

void SendInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.SendInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitationRequest::CopyFrom(const SendInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.SendInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (_internal_has_agent_identity()) {
    if (!agent_identity_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  if (_internal_has_params()) {
    if (!params_->IsInitialized()) return false;
  }
  return true;
}

void SendInvitationRequest::InternalSwap(SendInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_identity_, other->agent_identity_);
  swap(target_id_, other->target_id_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevokeInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_RevokeInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class RevokeInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RevokeInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const RevokeInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
RevokeInvitationRequest::_Internal::agent_id(const RevokeInvitationRequest* msg) {
  return *msg->agent_id_;
}
void RevokeInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RevokeInvitationRequest::RevokeInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.RevokeInvitationRequest)
}
RevokeInvitationRequest::RevokeInvitationRequest(const RevokeInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  invitation_id_ = from.invitation_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.RevokeInvitationRequest)
}

void RevokeInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitation_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(invitation_id_));
}

RevokeInvitationRequest::~RevokeInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.RevokeInvitationRequest)
  SharedDtor();
}

void RevokeInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void RevokeInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevokeInvitationRequest& RevokeInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevokeInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RevokeInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.RevokeInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RevokeInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invitation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.RevokeInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional fixed64 invitation_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_invitation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.RevokeInvitationRequest)
  return target;
}

size_t RevokeInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.RevokeInvitationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional fixed64 invitation_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.RevokeInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokeInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.RevokeInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.RevokeInvitationRequest)
    MergeFrom(*source);
  }
}

void RevokeInvitationRequest::MergeFrom(const RevokeInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.RevokeInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      invitation_id_ = from.invitation_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RevokeInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.RevokeInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeInvitationRequest::CopyFrom(const RevokeInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.RevokeInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeInvitationRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void RevokeInvitationRequest::InternalSwap(RevokeInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(invitation_id_, other->invitation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_AcceptInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_AcceptInvitationRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::bgs::protocol::friends::v1::AcceptInvitationOptions*>(
      ::bgs::protocol::friends::v1::AcceptInvitationOptions::internal_default_instance());
}
class AcceptInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AcceptInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const AcceptInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::friends::v1::AcceptInvitationOptions& options(const AcceptInvitationRequest* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
AcceptInvitationRequest::_Internal::agent_id(const AcceptInvitationRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::friends::v1::AcceptInvitationOptions&
AcceptInvitationRequest::_Internal::options(const AcceptInvitationRequest* msg) {
  return *msg->options_;
}
void AcceptInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AcceptInvitationRequest::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AcceptInvitationRequest::AcceptInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.AcceptInvitationRequest)
}
AcceptInvitationRequest::AcceptInvitationRequest(const AcceptInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::bgs::protocol::friends::v1::AcceptInvitationOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  invitation_id_ = from.invitation_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.AcceptInvitationRequest)
}

void AcceptInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitation_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(invitation_id_));
}

AcceptInvitationRequest::~AcceptInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.AcceptInvitationRequest)
  SharedDtor();
}

void AcceptInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete options_;
}

void AcceptInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptInvitationRequest& AcceptInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AcceptInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.AcceptInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AcceptInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 invitation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.friends.v1.AcceptInvitationOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.AcceptInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required fixed64 invitation_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_invitation_id(), target);
  }

  // optional .bgs.protocol.friends.v1.AcceptInvitationOptions options = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.AcceptInvitationRequest)
  return target;
}

size_t AcceptInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.AcceptInvitationRequest)
  size_t total_size = 0;

  // required fixed64 invitation_id = 3;
  if (_internal_has_invitation_id()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.friends.v1.AcceptInvitationOptions options = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.AcceptInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.AcceptInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.AcceptInvitationRequest)
    MergeFrom(*source);
  }
}

void AcceptInvitationRequest::MergeFrom(const AcceptInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.AcceptInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::bgs::protocol::friends::v1::AcceptInvitationOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      invitation_id_ = from.invitation_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.AcceptInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptInvitationRequest::CopyFrom(const AcceptInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.AcceptInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void AcceptInvitationRequest::InternalSwap(AcceptInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(options_, other->options_);
  swap(invitation_id_, other->invitation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeclineInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_DeclineInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class DeclineInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeclineInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const DeclineInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
DeclineInvitationRequest::_Internal::agent_id(const DeclineInvitationRequest* msg) {
  return *msg->agent_id_;
}
void DeclineInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DeclineInvitationRequest::DeclineInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.DeclineInvitationRequest)
}
DeclineInvitationRequest::DeclineInvitationRequest(const DeclineInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  invitation_id_ = from.invitation_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.DeclineInvitationRequest)
}

void DeclineInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitation_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(invitation_id_));
}

DeclineInvitationRequest::~DeclineInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.DeclineInvitationRequest)
  SharedDtor();
}

void DeclineInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void DeclineInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeclineInvitationRequest& DeclineInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeclineInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DeclineInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.DeclineInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  invitation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeclineInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 invitation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeclineInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.DeclineInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required fixed64 invitation_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_invitation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.DeclineInvitationRequest)
  return target;
}

size_t DeclineInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.DeclineInvitationRequest)
  size_t total_size = 0;

  // required fixed64 invitation_id = 3;
  if (_internal_has_invitation_id()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeclineInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.DeclineInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeclineInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeclineInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.DeclineInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.DeclineInvitationRequest)
    MergeFrom(*source);
  }
}

void DeclineInvitationRequest::MergeFrom(const DeclineInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.DeclineInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      invitation_id_ = from.invitation_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeclineInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.DeclineInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeclineInvitationRequest::CopyFrom(const DeclineInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.DeclineInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclineInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void DeclineInvitationRequest::InternalSwap(DeclineInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(invitation_id_, other->invitation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeclineInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IgnoreInvitationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_IgnoreInvitationRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class IgnoreInvitationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<IgnoreInvitationRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const IgnoreInvitationRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::EntityId&
IgnoreInvitationRequest::_Internal::agent_id(const IgnoreInvitationRequest* msg) {
  return *msg->agent_id_;
}
void IgnoreInvitationRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
IgnoreInvitationRequest::IgnoreInvitationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.IgnoreInvitationRequest)
}
IgnoreInvitationRequest::IgnoreInvitationRequest(const IgnoreInvitationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  ::memcpy(&invitation_id_, &from.invitation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&program_) -
    reinterpret_cast<char*>(&invitation_id_)) + sizeof(program_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.IgnoreInvitationRequest)
}

void IgnoreInvitationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IgnoreInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(program_));
}

IgnoreInvitationRequest::~IgnoreInvitationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  SharedDtor();
}

void IgnoreInvitationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void IgnoreInvitationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IgnoreInvitationRequest& IgnoreInvitationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IgnoreInvitationRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void IgnoreInvitationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&invitation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&program_) -
        reinterpret_cast<char*>(&invitation_id_)) + sizeof(program_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IgnoreInvitationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 invitation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IgnoreInvitationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required fixed64 invitation_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_invitation_id(), target);
  }

  // optional fixed32 program = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  return target;
}

size_t IgnoreInvitationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  size_t total_size = 0;

  // required fixed64 invitation_id = 3;
  if (_internal_has_invitation_id()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  // optional fixed32 program = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IgnoreInvitationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IgnoreInvitationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IgnoreInvitationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.IgnoreInvitationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.IgnoreInvitationRequest)
    MergeFrom(*source);
  }
}

void IgnoreInvitationRequest::MergeFrom(const IgnoreInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      invitation_id_ = from.invitation_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IgnoreInvitationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IgnoreInvitationRequest::CopyFrom(const IgnoreInvitationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.IgnoreInvitationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IgnoreInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void IgnoreInvitationRequest::InternalSwap(IgnoreInvitationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(invitation_id_, other->invitation_id_);
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IgnoreInvitationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveFriendRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_RemoveFriendRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_RemoveFriendRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class RemoveFriendRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveFriendRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const RemoveFriendRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& target_id(const RemoveFriendRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
RemoveFriendRequest::_Internal::agent_id(const RemoveFriendRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::EntityId&
RemoveFriendRequest::_Internal::target_id(const RemoveFriendRequest* msg) {
  return *msg->target_id_;
}
void RemoveFriendRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveFriendRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RemoveFriendRequest::RemoveFriendRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.RemoveFriendRequest)
}
RemoveFriendRequest::RemoveFriendRequest(const RemoveFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.RemoveFriendRequest)
}

void RemoveFriendRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveFriendRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(target_id_));
}

RemoveFriendRequest::~RemoveFriendRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.RemoveFriendRequest)
  SharedDtor();
}

void RemoveFriendRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void RemoveFriendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveFriendRequest& RemoveFriendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveFriendRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RemoveFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.RemoveFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoveFriendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveFriendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.RemoveFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required .bgs.protocol.EntityId target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.RemoveFriendRequest)
  return target;
}

size_t RemoveFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.RemoveFriendRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId target_id = 2;
  if (_internal_has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveFriendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.RemoveFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveFriendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveFriendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.RemoveFriendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.RemoveFriendRequest)
    MergeFrom(*source);
  }
}

void RemoveFriendRequest::MergeFrom(const RemoveFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.RemoveFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
  }
}

void RemoveFriendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.RemoveFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFriendRequest::CopyFrom(const RemoveFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.RemoveFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void RemoveFriendRequest::InternalSwap(RemoveFriendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveFriendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevokeAllInvitationsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_RevokeAllInvitationsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class RevokeAllInvitationsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RevokeAllInvitationsRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const RevokeAllInvitationsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::EntityId&
RevokeAllInvitationsRequest::_Internal::agent_id(const RevokeAllInvitationsRequest* msg) {
  return *msg->agent_id_;
}
void RevokeAllInvitationsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RevokeAllInvitationsRequest::RevokeAllInvitationsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
}
RevokeAllInvitationsRequest::RevokeAllInvitationsRequest(const RevokeAllInvitationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
}

void RevokeAllInvitationsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RevokeAllInvitationsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  agent_id_ = nullptr;
}

RevokeAllInvitationsRequest::~RevokeAllInvitationsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  SharedDtor();
}

void RevokeAllInvitationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void RevokeAllInvitationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevokeAllInvitationsRequest& RevokeAllInvitationsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevokeAllInvitationsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RevokeAllInvitationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RevokeAllInvitationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeAllInvitationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::agent_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  return target;
}

size_t RevokeAllInvitationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeAllInvitationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeAllInvitationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokeAllInvitationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
    MergeFrom(*source);
  }
}

void RevokeAllInvitationsRequest::MergeFrom(const RevokeAllInvitationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_agent_id()) {
    _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
  }
}

void RevokeAllInvitationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeAllInvitationsRequest::CopyFrom(const RevokeAllInvitationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.RevokeAllInvitationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeAllInvitationsRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void RevokeAllInvitationsRequest::InternalSwap(RevokeAllInvitationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeAllInvitationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewFriendsRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_ViewFriendsRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_ViewFriendsRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class ViewFriendsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewFriendsRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const ViewFriendsRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& target_id(const ViewFriendsRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
ViewFriendsRequest::_Internal::agent_id(const ViewFriendsRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::EntityId&
ViewFriendsRequest::_Internal::target_id(const ViewFriendsRequest* msg) {
  return *msg->target_id_;
}
void ViewFriendsRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ViewFriendsRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ViewFriendsRequest::ViewFriendsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.ViewFriendsRequest)
}
ViewFriendsRequest::ViewFriendsRequest(const ViewFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.ViewFriendsRequest)
}

void ViewFriendsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewFriendsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(target_id_));
}

ViewFriendsRequest::~ViewFriendsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.ViewFriendsRequest)
  SharedDtor();
}

void ViewFriendsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ViewFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewFriendsRequest& ViewFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewFriendsRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ViewFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.ViewFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ViewFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.ViewFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required .bgs.protocol.EntityId target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.ViewFriendsRequest)
  return target;
}

size_t ViewFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.ViewFriendsRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId target_id = 2;
  if (_internal_has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.ViewFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.ViewFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.ViewFriendsRequest)
    MergeFrom(*source);
  }
}

void ViewFriendsRequest::MergeFrom(const ViewFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.ViewFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
  }
}

void ViewFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.ViewFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewFriendsRequest::CopyFrom(const ViewFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.ViewFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewFriendsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void ViewFriendsRequest::InternalSwap(ViewFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewFriendsResponse::InitAsDefaultInstance() {
}
class ViewFriendsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewFriendsResponse>()._has_bits_);
};

void ViewFriendsResponse::clear_friends() {
  friends_.Clear();
}
ViewFriendsResponse::ViewFriendsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.ViewFriendsResponse)
}
ViewFriendsResponse::ViewFriendsResponse(const ViewFriendsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.ViewFriendsResponse)
}

void ViewFriendsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewFriendsResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
}

ViewFriendsResponse::~ViewFriendsResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.ViewFriendsResponse)
  SharedDtor();
}

void ViewFriendsResponse::SharedDtor() {
}

void ViewFriendsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewFriendsResponse& ViewFriendsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewFriendsResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ViewFriendsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.ViewFriendsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ViewFriendsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.friends.v1.FriendOfFriend friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewFriendsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.ViewFriendsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.friends.v1.FriendOfFriend friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.ViewFriendsResponse)
  return target;
}

size_t ViewFriendsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.ViewFriendsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.friends.v1.FriendOfFriend friends = 1;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewFriendsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.ViewFriendsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewFriendsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewFriendsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.ViewFriendsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.ViewFriendsResponse)
    MergeFrom(*source);
  }
}

void ViewFriendsResponse::MergeFrom(const ViewFriendsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.ViewFriendsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void ViewFriendsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.ViewFriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewFriendsResponse::CopyFrom(const ViewFriendsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.ViewFriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewFriendsResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(friends_)) return false;
  return true;
}

void ViewFriendsResponse::InternalSwap(ViewFriendsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friends_.InternalSwap(&other->friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewFriendsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFriendStateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_UpdateFriendStateRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_UpdateFriendStateRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class UpdateFriendStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFriendStateRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const UpdateFriendStateRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& target_id(const UpdateFriendStateRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
UpdateFriendStateRequest::_Internal::agent_id(const UpdateFriendStateRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::EntityId&
UpdateFriendStateRequest::_Internal::target_id(const UpdateFriendStateRequest* msg) {
  return *msg->target_id_;
}
void UpdateFriendStateRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateFriendStateRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateFriendStateRequest::clear_attribute() {
  attribute_.Clear();
}
UpdateFriendStateRequest::UpdateFriendStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.UpdateFriendStateRequest)
}
UpdateFriendStateRequest::UpdateFriendStateRequest(const UpdateFriendStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.UpdateFriendStateRequest)
}

void UpdateFriendStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFriendStateRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(target_id_));
}

UpdateFriendStateRequest::~UpdateFriendStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  SharedDtor();
}

void UpdateFriendStateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void UpdateFriendStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFriendStateRequest& UpdateFriendStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFriendStateRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateFriendStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateFriendStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFriendStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required .bgs.protocol.EntityId target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // repeated .bgs.protocol.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  return target;
}

size_t UpdateFriendStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId target_id = 2;
  if (_internal_has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFriendStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFriendStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFriendStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.UpdateFriendStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.UpdateFriendStateRequest)
    MergeFrom(*source);
  }
}

void UpdateFriendStateRequest::MergeFrom(const UpdateFriendStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
  }
}

void UpdateFriendStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendStateRequest::CopyFrom(const UpdateFriendStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.UpdateFriendStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateFriendStateRequest::InternalSwap(UpdateFriendStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFriendStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFriendListRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_GetFriendListRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class GetFriendListRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFriendListRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const GetFriendListRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::EntityId&
GetFriendListRequest::_Internal::agent_id(const GetFriendListRequest* msg) {
  return *msg->agent_id_;
}
void GetFriendListRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetFriendListRequest::GetFriendListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.GetFriendListRequest)
}
GetFriendListRequest::GetFriendListRequest(const GetFriendListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.GetFriendListRequest)
}

void GetFriendListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFriendListRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  agent_id_ = nullptr;
}

GetFriendListRequest::~GetFriendListRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.GetFriendListRequest)
  SharedDtor();
}

void GetFriendListRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void GetFriendListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFriendListRequest& GetFriendListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFriendListRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetFriendListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.GetFriendListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFriendListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFriendListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.GetFriendListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::agent_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.GetFriendListRequest)
  return target;
}

size_t GetFriendListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.GetFriendListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFriendListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.GetFriendListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFriendListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFriendListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.GetFriendListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.GetFriendListRequest)
    MergeFrom(*source);
  }
}

void GetFriendListRequest::MergeFrom(const GetFriendListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.GetFriendListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_agent_id()) {
    _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
  }
}

void GetFriendListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.GetFriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListRequest::CopyFrom(const GetFriendListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.GetFriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void GetFriendListRequest::InternalSwap(GetFriendListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFriendListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFriendListResponse::InitAsDefaultInstance() {
}
class GetFriendListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFriendListResponse>()._has_bits_);
};

void GetFriendListResponse::clear_friends() {
  friends_.Clear();
}
GetFriendListResponse::GetFriendListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.GetFriendListResponse)
}
GetFriendListResponse::GetFriendListResponse(const GetFriendListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.GetFriendListResponse)
}

void GetFriendListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFriendListResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
}

GetFriendListResponse::~GetFriendListResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.GetFriendListResponse)
  SharedDtor();
}

void GetFriendListResponse::SharedDtor() {
}

void GetFriendListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFriendListResponse& GetFriendListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFriendListResponse_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetFriendListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.GetFriendListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetFriendListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.friends.v1.Friend friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFriendListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.GetFriendListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.friends.v1.Friend friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.GetFriendListResponse)
  return target;
}

size_t GetFriendListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.GetFriendListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.friends.v1.Friend friends = 1;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFriendListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.GetFriendListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFriendListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFriendListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.GetFriendListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.GetFriendListResponse)
    MergeFrom(*source);
  }
}

void GetFriendListResponse::MergeFrom(const GetFriendListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.GetFriendListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void GetFriendListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.GetFriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListResponse::CopyFrom(const GetFriendListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.GetFriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(friends_)) return false;
  return true;
}

void GetFriendListResponse::InternalSwap(GetFriendListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friends_.InternalSwap(&other->friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFriendListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateFriendshipRequest::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_CreateFriendshipRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_CreateFriendshipRequest_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class CreateFriendshipRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateFriendshipRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const CreateFriendshipRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& target_id(const CreateFriendshipRequest* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
CreateFriendshipRequest::_Internal::agent_id(const CreateFriendshipRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::EntityId&
CreateFriendshipRequest::_Internal::target_id(const CreateFriendshipRequest* msg) {
  return *msg->target_id_;
}
void CreateFriendshipRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CreateFriendshipRequest::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CreateFriendshipRequest::CreateFriendshipRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.CreateFriendshipRequest)
}
CreateFriendshipRequest::CreateFriendshipRequest(const CreateFriendshipRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.CreateFriendshipRequest)
}

void CreateFriendshipRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateFriendshipRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(target_id_));
}

CreateFriendshipRequest::~CreateFriendshipRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.CreateFriendshipRequest)
  SharedDtor();
}

void CreateFriendshipRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void CreateFriendshipRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateFriendshipRequest& CreateFriendshipRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateFriendshipRequest_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CreateFriendshipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.CreateFriendshipRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreateFriendshipRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateFriendshipRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.CreateFriendshipRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // optional .bgs.protocol.EntityId target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // repeated uint32 role = 3 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_role(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.CreateFriendshipRequest)
  return target;
}

size_t CreateFriendshipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.CreateFriendshipRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional .bgs.protocol.EntityId target_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateFriendshipRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.CreateFriendshipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateFriendshipRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateFriendshipRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.CreateFriendshipRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.CreateFriendshipRequest)
    MergeFrom(*source);
  }
}

void CreateFriendshipRequest::MergeFrom(const CreateFriendshipRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.CreateFriendshipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
  }
}

void CreateFriendshipRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.CreateFriendshipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFriendshipRequest::CopyFrom(const CreateFriendshipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.CreateFriendshipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFriendshipRequest::IsInitialized() const {
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  return true;
}

void CreateFriendshipRequest::InternalSwap(CreateFriendshipRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  swap(agent_id_, other->agent_id_);
  swap(target_id_, other->target_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateFriendshipRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendNotification::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_FriendNotification_default_instance_._instance.get_mutable()->target_ = const_cast< ::bgs::protocol::friends::v1::Friend*>(
      ::bgs::protocol::friends::v1::Friend::internal_default_instance());
  ::bgs::protocol::friends::v1::_FriendNotification_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_FriendNotification_default_instance_._instance.get_mutable()->forward_ = const_cast< ::bgs::protocol::ObjectAddress*>(
      ::bgs::protocol::ObjectAddress::internal_default_instance());
}
class FriendNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendNotification>()._has_bits_);
  static const ::bgs::protocol::friends::v1::Friend& target(const FriendNotification* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& account_id(const FriendNotification* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::ObjectAddress& forward(const FriendNotification* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::friends::v1::Friend&
FriendNotification::_Internal::target(const FriendNotification* msg) {
  return *msg->target_;
}
const ::bgs::protocol::EntityId&
FriendNotification::_Internal::account_id(const FriendNotification* msg) {
  return *msg->account_id_;
}
const ::bgs::protocol::ObjectAddress&
FriendNotification::_Internal::forward(const FriendNotification* msg) {
  return *msg->forward_;
}
void FriendNotification::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FriendNotification::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FriendNotification::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FriendNotification::FriendNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.FriendNotification)
}
FriendNotification::FriendNotification(const FriendNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::bgs::protocol::friends::v1::Friend(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new ::bgs::protocol::ObjectAddress(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.FriendNotification)
}

void FriendNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_) -
      reinterpret_cast<char*>(&target_)) + sizeof(forward_));
}

FriendNotification::~FriendNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.FriendNotification)
  SharedDtor();
}

void FriendNotification::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete account_id_;
  if (this != internal_default_instance()) delete forward_;
}

void FriendNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendNotification& FriendNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FriendNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.FriendNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FriendNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.friends.v1.Friend target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.FriendNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.friends.v1.Friend target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional .bgs.protocol.EntityId account_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::account_id(this), target, stream);
  }

  // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::forward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.FriendNotification)
  return target;
}

size_t FriendNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.FriendNotification)
  size_t total_size = 0;

  // required .bgs.protocol.friends.v1.Friend target = 1;
  if (_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .bgs.protocol.EntityId account_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

    // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.FriendNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.FriendNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.FriendNotification)
    MergeFrom(*source);
  }
}

void FriendNotification::MergeFrom(const FriendNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.FriendNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target()->::bgs::protocol::friends::v1::Friend::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_forward()->::bgs::protocol::ObjectAddress::MergeFrom(from._internal_forward());
    }
  }
}

void FriendNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.FriendNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendNotification::CopyFrom(const FriendNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.FriendNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  if (_internal_has_forward()) {
    if (!forward_->IsInitialized()) return false;
  }
  return true;
}

void FriendNotification::InternalSwap(FriendNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
  swap(account_id_, other->account_id_);
  swap(forward_, other->forward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFriendStateNotification::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_UpdateFriendStateNotification_default_instance_._instance.get_mutable()->changed_friend_ = const_cast< ::bgs::protocol::friends::v1::Friend*>(
      ::bgs::protocol::friends::v1::Friend::internal_default_instance());
  ::bgs::protocol::friends::v1::_UpdateFriendStateNotification_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_UpdateFriendStateNotification_default_instance_._instance.get_mutable()->forward_ = const_cast< ::bgs::protocol::ObjectAddress*>(
      ::bgs::protocol::ObjectAddress::internal_default_instance());
}
class UpdateFriendStateNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFriendStateNotification>()._has_bits_);
  static const ::bgs::protocol::friends::v1::Friend& changed_friend(const UpdateFriendStateNotification* msg);
  static void set_has_changed_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& account_id(const UpdateFriendStateNotification* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::ObjectAddress& forward(const UpdateFriendStateNotification* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::friends::v1::Friend&
UpdateFriendStateNotification::_Internal::changed_friend(const UpdateFriendStateNotification* msg) {
  return *msg->changed_friend_;
}
const ::bgs::protocol::EntityId&
UpdateFriendStateNotification::_Internal::account_id(const UpdateFriendStateNotification* msg) {
  return *msg->account_id_;
}
const ::bgs::protocol::ObjectAddress&
UpdateFriendStateNotification::_Internal::forward(const UpdateFriendStateNotification* msg) {
  return *msg->forward_;
}
void UpdateFriendStateNotification::clear_changed_friend() {
  if (changed_friend_ != nullptr) changed_friend_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateFriendStateNotification::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateFriendStateNotification::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
UpdateFriendStateNotification::UpdateFriendStateNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.UpdateFriendStateNotification)
}
UpdateFriendStateNotification::UpdateFriendStateNotification(const UpdateFriendStateNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_changed_friend()) {
    changed_friend_ = new ::bgs::protocol::friends::v1::Friend(*from.changed_friend_);
  } else {
    changed_friend_ = nullptr;
  }
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new ::bgs::protocol::ObjectAddress(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.UpdateFriendStateNotification)
}

void UpdateFriendStateNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFriendStateNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&changed_friend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_) -
      reinterpret_cast<char*>(&changed_friend_)) + sizeof(forward_));
}

UpdateFriendStateNotification::~UpdateFriendStateNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  SharedDtor();
}

void UpdateFriendStateNotification::SharedDtor() {
  if (this != internal_default_instance()) delete changed_friend_;
  if (this != internal_default_instance()) delete account_id_;
  if (this != internal_default_instance()) delete forward_;
}

void UpdateFriendStateNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFriendStateNotification& UpdateFriendStateNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFriendStateNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateFriendStateNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(changed_friend_ != nullptr);
      changed_friend_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateFriendStateNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.friends.v1.Friend changed_friend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_changed_friend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFriendStateNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.friends.v1.Friend changed_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::changed_friend(this), target, stream);
  }

  // optional .bgs.protocol.EntityId account_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::account_id(this), target, stream);
  }

  // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::forward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  return target;
}

size_t UpdateFriendStateNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  size_t total_size = 0;

  // required .bgs.protocol.friends.v1.Friend changed_friend = 1;
  if (_internal_has_changed_friend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *changed_friend_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .bgs.protocol.EntityId account_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

    // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFriendStateNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFriendStateNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFriendStateNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.UpdateFriendStateNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.UpdateFriendStateNotification)
    MergeFrom(*source);
  }
}

void UpdateFriendStateNotification::MergeFrom(const UpdateFriendStateNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_changed_friend()->::bgs::protocol::friends::v1::Friend::MergeFrom(from._internal_changed_friend());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_forward()->::bgs::protocol::ObjectAddress::MergeFrom(from._internal_forward());
    }
  }
}

void UpdateFriendStateNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendStateNotification::CopyFrom(const UpdateFriendStateNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.UpdateFriendStateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendStateNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_changed_friend()) {
    if (!changed_friend_->IsInitialized()) return false;
  }
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  if (_internal_has_forward()) {
    if (!forward_->IsInitialized()) return false;
  }
  return true;
}

void UpdateFriendStateNotification::InternalSwap(UpdateFriendStateNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(changed_friend_, other->changed_friend_);
  swap(account_id_, other->account_id_);
  swap(forward_, other->forward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFriendStateNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvitationNotification::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_InvitationNotification_default_instance_._instance.get_mutable()->invitation_ = const_cast< ::bgs::protocol::friends::v1::ReceivedInvitation*>(
      ::bgs::protocol::friends::v1::ReceivedInvitation::internal_default_instance());
  ::bgs::protocol::friends::v1::_InvitationNotification_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_InvitationNotification_default_instance_._instance.get_mutable()->forward_ = const_cast< ::bgs::protocol::ObjectAddress*>(
      ::bgs::protocol::ObjectAddress::internal_default_instance());
}
class InvitationNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<InvitationNotification>()._has_bits_);
  static const ::bgs::protocol::friends::v1::ReceivedInvitation& invitation(const InvitationNotification* msg);
  static void set_has_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::EntityId& account_id(const InvitationNotification* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::ObjectAddress& forward(const InvitationNotification* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::friends::v1::ReceivedInvitation&
InvitationNotification::_Internal::invitation(const InvitationNotification* msg) {
  return *msg->invitation_;
}
const ::bgs::protocol::EntityId&
InvitationNotification::_Internal::account_id(const InvitationNotification* msg) {
  return *msg->account_id_;
}
const ::bgs::protocol::ObjectAddress&
InvitationNotification::_Internal::forward(const InvitationNotification* msg) {
  return *msg->forward_;
}
void InvitationNotification::clear_invitation() {
  if (invitation_ != nullptr) invitation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InvitationNotification::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InvitationNotification::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
InvitationNotification::InvitationNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.InvitationNotification)
}
InvitationNotification::InvitationNotification(const InvitationNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_invitation()) {
    invitation_ = new ::bgs::protocol::friends::v1::ReceivedInvitation(*from.invitation_);
  } else {
    invitation_ = nullptr;
  }
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new ::bgs::protocol::ObjectAddress(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.InvitationNotification)
}

void InvitationNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvitationNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&invitation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&invitation_)) + sizeof(reason_));
}

InvitationNotification::~InvitationNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.InvitationNotification)
  SharedDtor();
}

void InvitationNotification::SharedDtor() {
  if (this != internal_default_instance()) delete invitation_;
  if (this != internal_default_instance()) delete account_id_;
  if (this != internal_default_instance()) delete forward_;
}

void InvitationNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvitationNotification& InvitationNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvitationNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InvitationNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.InvitationNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(invitation_ != nullptr);
      invitation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
  }
  reason_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InvitationNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.friends.v1.ReceivedInvitation invitation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvitationNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.InvitationNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.friends.v1.ReceivedInvitation invitation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::invitation(this), target, stream);
  }

  // optional uint32 reason = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reason(), target);
  }

  // optional .bgs.protocol.EntityId account_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::account_id(this), target, stream);
  }

  // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::forward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.InvitationNotification)
  return target;
}

size_t InvitationNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.InvitationNotification)
  size_t total_size = 0;

  // required .bgs.protocol.friends.v1.ReceivedInvitation invitation = 1;
  if (_internal_has_invitation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invitation_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .bgs.protocol.EntityId account_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

    // optional .bgs.protocol.ObjectAddress forward = 6 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

    // optional uint32 reason = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitationNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.InvitationNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvitationNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.InvitationNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.InvitationNotification)
    MergeFrom(*source);
  }
}

void InvitationNotification::MergeFrom(const InvitationNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.InvitationNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_invitation()->::bgs::protocol::friends::v1::ReceivedInvitation::MergeFrom(from._internal_invitation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_forward()->::bgs::protocol::ObjectAddress::MergeFrom(from._internal_forward());
    }
    if (cached_has_bits & 0x00000008u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InvitationNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.InvitationNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationNotification::CopyFrom(const InvitationNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.InvitationNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_invitation()) {
    if (!invitation_->IsInitialized()) return false;
  }
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  if (_internal_has_forward()) {
    if (!forward_->IsInitialized()) return false;
  }
  return true;
}

void InvitationNotification::InternalSwap(InvitationNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(invitation_, other->invitation_);
  swap(account_id_, other->account_id_);
  swap(forward_, other->forward_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvitationNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SentInvitationAddedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_SentInvitationAddedNotification_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_SentInvitationAddedNotification_default_instance_._instance.get_mutable()->invitation_ = const_cast< ::bgs::protocol::friends::v1::SentInvitation*>(
      ::bgs::protocol::friends::v1::SentInvitation::internal_default_instance());
  ::bgs::protocol::friends::v1::_SentInvitationAddedNotification_default_instance_._instance.get_mutable()->forward_ = const_cast< ::bgs::protocol::ObjectAddress*>(
      ::bgs::protocol::ObjectAddress::internal_default_instance());
}
class SentInvitationAddedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SentInvitationAddedNotification>()._has_bits_);
  static const ::bgs::protocol::EntityId& account_id(const SentInvitationAddedNotification* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::friends::v1::SentInvitation& invitation(const SentInvitationAddedNotification* msg);
  static void set_has_invitation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::ObjectAddress& forward(const SentInvitationAddedNotification* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::EntityId&
SentInvitationAddedNotification::_Internal::account_id(const SentInvitationAddedNotification* msg) {
  return *msg->account_id_;
}
const ::bgs::protocol::friends::v1::SentInvitation&
SentInvitationAddedNotification::_Internal::invitation(const SentInvitationAddedNotification* msg) {
  return *msg->invitation_;
}
const ::bgs::protocol::ObjectAddress&
SentInvitationAddedNotification::_Internal::forward(const SentInvitationAddedNotification* msg) {
  return *msg->forward_;
}
void SentInvitationAddedNotification::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SentInvitationAddedNotification::clear_invitation() {
  if (invitation_ != nullptr) invitation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SentInvitationAddedNotification::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SentInvitationAddedNotification::SentInvitationAddedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.SentInvitationAddedNotification)
}
SentInvitationAddedNotification::SentInvitationAddedNotification(const SentInvitationAddedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  if (from._internal_has_invitation()) {
    invitation_ = new ::bgs::protocol::friends::v1::SentInvitation(*from.invitation_);
  } else {
    invitation_ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new ::bgs::protocol::ObjectAddress(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.SentInvitationAddedNotification)
}

void SentInvitationAddedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(forward_));
}

SentInvitationAddedNotification::~SentInvitationAddedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  SharedDtor();
}

void SentInvitationAddedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
  if (this != internal_default_instance()) delete invitation_;
  if (this != internal_default_instance()) delete forward_;
}

void SentInvitationAddedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SentInvitationAddedNotification& SentInvitationAddedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentInvitationAddedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SentInvitationAddedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(invitation_ != nullptr);
      invitation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SentInvitationAddedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.friends.v1.SentInvitation invitation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SentInvitationAddedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_id(this), target, stream);
  }

  // optional .bgs.protocol.friends.v1.SentInvitation invitation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::invitation(this), target, stream);
  }

  // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  return target;
}

size_t SentInvitationAddedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .bgs.protocol.EntityId account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

    // optional .bgs.protocol.friends.v1.SentInvitation invitation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *invitation_);
    }

    // optional .bgs.protocol.ObjectAddress forward = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SentInvitationAddedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SentInvitationAddedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SentInvitationAddedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.SentInvitationAddedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.SentInvitationAddedNotification)
    MergeFrom(*source);
  }
}

void SentInvitationAddedNotification::MergeFrom(const SentInvitationAddedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_invitation()->::bgs::protocol::friends::v1::SentInvitation::MergeFrom(from._internal_invitation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_forward()->::bgs::protocol::ObjectAddress::MergeFrom(from._internal_forward());
    }
  }
}

void SentInvitationAddedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentInvitationAddedNotification::CopyFrom(const SentInvitationAddedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.SentInvitationAddedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentInvitationAddedNotification::IsInitialized() const {
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  if (_internal_has_invitation()) {
    if (!invitation_->IsInitialized()) return false;
  }
  if (_internal_has_forward()) {
    if (!forward_->IsInitialized()) return false;
  }
  return true;
}

void SentInvitationAddedNotification::InternalSwap(SentInvitationAddedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(invitation_, other->invitation_);
  swap(forward_, other->forward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SentInvitationAddedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SentInvitationRemovedNotification::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_SentInvitationRemovedNotification_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::friends::v1::_SentInvitationRemovedNotification_default_instance_._instance.get_mutable()->forward_ = const_cast< ::bgs::protocol::ObjectAddress*>(
      ::bgs::protocol::ObjectAddress::internal_default_instance());
}
class SentInvitationRemovedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<SentInvitationRemovedNotification>()._has_bits_);
  static const ::bgs::protocol::EntityId& account_id(const SentInvitationRemovedNotification* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::ObjectAddress& forward(const SentInvitationRemovedNotification* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
SentInvitationRemovedNotification::_Internal::account_id(const SentInvitationRemovedNotification* msg) {
  return *msg->account_id_;
}
const ::bgs::protocol::ObjectAddress&
SentInvitationRemovedNotification::_Internal::forward(const SentInvitationRemovedNotification* msg) {
  return *msg->forward_;
}
void SentInvitationRemovedNotification::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SentInvitationRemovedNotification::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SentInvitationRemovedNotification::SentInvitationRemovedNotification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
}
SentInvitationRemovedNotification::SentInvitationRemovedNotification(const SentInvitationRemovedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new ::bgs::protocol::ObjectAddress(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  ::memcpy(&invitation_id_, &from.invitation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&invitation_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
}

void SentInvitationRemovedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(reason_));
}

SentInvitationRemovedNotification::~SentInvitationRemovedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  SharedDtor();
}

void SentInvitationRemovedNotification::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
  if (this != internal_default_instance()) delete forward_;
}

void SentInvitationRemovedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SentInvitationRemovedNotification& SentInvitationRemovedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentInvitationRemovedNotification_bgs_2flow_2fpb_2fclient_2ffriends_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SentInvitationRemovedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&invitation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&invitation_id_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SentInvitationRemovedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invitation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_invitation_id(&has_bits);
          invitation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ObjectAddress forward = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SentInvitationRemovedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_id(this), target, stream);
  }

  // optional fixed64 invitation_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_invitation_id(), target);
  }

  // optional uint32 reason = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reason(), target);
  }

  // optional .bgs.protocol.ObjectAddress forward = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::forward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  return target;
}

size_t SentInvitationRemovedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .bgs.protocol.EntityId account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

    // optional .bgs.protocol.ObjectAddress forward = 4 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_);
    }

    // optional fixed64 invitation_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 reason = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SentInvitationRemovedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SentInvitationRemovedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SentInvitationRemovedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
    MergeFrom(*source);
  }
}

void SentInvitationRemovedNotification::MergeFrom(const SentInvitationRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_forward()->::bgs::protocol::ObjectAddress::MergeFrom(from._internal_forward());
    }
    if (cached_has_bits & 0x00000004u) {
      invitation_id_ = from.invitation_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SentInvitationRemovedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentInvitationRemovedNotification::CopyFrom(const SentInvitationRemovedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.SentInvitationRemovedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentInvitationRemovedNotification::IsInitialized() const {
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  if (_internal_has_forward()) {
    if (!forward_->IsInitialized()) return false;
  }
  return true;
}

void SentInvitationRemovedNotification::InternalSwap(SentInvitationRemovedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(forward_, other->forward_);
  swap(invitation_id_, other->invitation_id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SentInvitationRemovedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace friends
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::SubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::SubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::UnsubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::UnsubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::UnsubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::SendInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::SendInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::SendInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::RevokeInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::RevokeInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::RevokeInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::AcceptInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::AcceptInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::AcceptInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::DeclineInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::DeclineInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::DeclineInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::IgnoreInvitationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::IgnoreInvitationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::IgnoreInvitationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::RemoveFriendRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::RemoveFriendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::RemoveFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::RevokeAllInvitationsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::RevokeAllInvitationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::RevokeAllInvitationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::ViewFriendsRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::ViewFriendsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::ViewFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::ViewFriendsResponse* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::ViewFriendsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::ViewFriendsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::UpdateFriendStateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::UpdateFriendStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::UpdateFriendStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::GetFriendListRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::GetFriendListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::GetFriendListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::GetFriendListResponse* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::GetFriendListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::GetFriendListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::CreateFriendshipRequest* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::CreateFriendshipRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::CreateFriendshipRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::FriendNotification* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::FriendNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::FriendNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::UpdateFriendStateNotification* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::UpdateFriendStateNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::UpdateFriendStateNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::InvitationNotification* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::InvitationNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::InvitationNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::SentInvitationAddedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::SentInvitationAddedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::SentInvitationAddedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::SentInvitationRemovedNotification* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::SentInvitationRemovedNotification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::SentInvitationRemovedNotification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
