// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/friends_types.proto

#include "bgs/low/pb/client/friends_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Role_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendInvitationParams_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace friends {
namespace v1 {
class FriendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Friend> _instance;
} _Friend_default_instance_;
class FriendOfFriendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendOfFriend> _instance;
} _FriendOfFriend_default_instance_;
class ReceivedInvitationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceivedInvitation> _instance;
} _ReceivedInvitation_default_instance_;
class FriendInvitationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendInvitation> _instance;
} _FriendInvitation_default_instance_;
class SentInvitationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentInvitation> _instance;
} _SentInvitation_default_instance_;
class FriendInvitationParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendInvitationParams> _instance;
} _FriendInvitationParams_default_instance_;
class SubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeResponse> _instance;
} _SubscribeResponse_default_instance_;
class AcceptInvitationOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptInvitationOptions> _instance;
} _AcceptInvitationOptions_default_instance_;
}  // namespace v1
}  // namespace friends
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_AcceptInvitationOptions_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_AcceptInvitationOptions_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::AcceptInvitationOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::AcceptInvitationOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptInvitationOptions_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcceptInvitationOptions_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_Friend_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::Friend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::Friend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_FriendInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_FriendInvitation_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::FriendInvitation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::FriendInvitation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FriendInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_FriendInvitationParams_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_FriendInvitationParams_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::FriendInvitationParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::FriendInvitationParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendInvitationParams_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FriendInvitationParams_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_FriendOfFriend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_FriendOfFriend_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::FriendOfFriend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::FriendOfFriend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendOfFriend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FriendOfFriend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_ReceivedInvitation_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::ReceivedInvitation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::ReceivedInvitation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto}, {
      &scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_SentInvitation_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::SentInvitation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::SentInvitation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::friends::v1::_SubscribeResponse_default_instance_;
    new (ptr) ::bgs::protocol::friends::v1::SubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::friends::v1::SubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto}, {
      &scc_info_Role_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto.base,
      &scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
      &scc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
      &scc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::Friend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::Friend, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::Friend, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::Friend, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::Friend, privileges_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::Friend, attributes_epoch_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::Friend, creation_time_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendOfFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendOfFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendOfFriend, account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendOfFriend, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendOfFriend, privileges_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendOfFriend, full_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendOfFriend, battle_tag_),
  2,
  ~0u,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, inviter_identity_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, invitee_identity_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, inviter_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, invitee_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, creation_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::ReceivedInvitation, program_),
  4,
  2,
  3,
  0,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitation, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitation, attribute_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitation, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitation, target_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitation, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitation, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitation, creation_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SentInvitation, program_),
  1,
  0,
  2,
  ~0u,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitationParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitationParams, target_email_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitationParams, target_battle_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitationParams, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitationParams, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitationParams, target_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::FriendInvitationParams, program_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, max_friends_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, max_received_invitations_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, max_sent_invitations_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, friends_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, received_invitations_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::SubscribeResponse, sent_invitations_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationOptions, role_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::friends::v1::AcceptInvitationOptions, program_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::bgs::protocol::friends::v1::Friend)},
  { 17, 27, sizeof(::bgs::protocol::friends::v1::FriendOfFriend)},
  { 32, 44, sizeof(::bgs::protocol::friends::v1::ReceivedInvitation)},
  { 51, 58, sizeof(::bgs::protocol::friends::v1::FriendInvitation)},
  { 60, 71, sizeof(::bgs::protocol::friends::v1::SentInvitation)},
  { 77, 88, sizeof(::bgs::protocol::friends::v1::FriendInvitationParams)},
  { 94, 106, sizeof(::bgs::protocol::friends::v1::SubscribeResponse)},
  { 113, 120, sizeof(::bgs::protocol::friends::v1::AcceptInvitationOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_Friend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_FriendOfFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_ReceivedInvitation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_FriendInvitation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_SentInvitation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_FriendInvitationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::friends::v1::_AcceptInvitationOptions_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%bgs/low/pb/client/friends_types.proto\022"
  "\027bgs.protocol.friends.v1\032\'bgs/low/pb/cli"
  "ent/attribute_types.proto\032$bgs/low/pb/cl"
  "ient/entity_types.proto\032(bgs/low/pb/clie"
  "nt/invitation_types.proto\032\"bgs/low/pb/cl"
  "ient/role_types.proto\"\273\001\n\006Friend\022*\n\nacco"
  "unt_id\030\001 \002(\0132\026.bgs.protocol.EntityId\022*\n\t"
  "attribute\030\002 \003(\0132\027.bgs.protocol.Attribute"
  "\022\020\n\004role\030\003 \003(\rB\002\020\001\022\022\n\nprivileges\030\004 \001(\004\022\034"
  "\n\020attributes_epoch\030\005 \001(\004B\002\030\001\022\025\n\rcreation"
  "_time\030\006 \001(\004\"\211\001\n\016FriendOfFriend\022*\n\naccoun"
  "t_id\030\001 \001(\0132\026.bgs.protocol.EntityId\022\020\n\004ro"
  "le\030\003 \003(\rB\002\020\001\022\022\n\nprivileges\030\004 \001(\004\022\021\n\tfull"
  "_name\030\006 \001(\t\022\022\n\nbattle_tag\030\007 \001(\t\"\337\001\n\022Rece"
  "ivedInvitation\022\n\n\002id\030\001 \002(\006\0220\n\020inviter_id"
  "entity\030\002 \002(\0132\026.bgs.protocol.Identity\0220\n\020"
  "invitee_identity\030\003 \002(\0132\026.bgs.protocol.Id"
  "entity\022\024\n\014inviter_name\030\004 \001(\t\022\024\n\014invitee_"
  "name\030\005 \001(\t\022\025\n\rcreation_time\030\007 \001(\004\022\017\n\007pro"
  "gram\030\t \001(\007*\005\010d\020\221N\"\303\001\n\020FriendInvitation\022\020"
  "\n\004role\030\002 \003(\rB\002\020\001\022*\n\tattribute\030\003 \003(\0132\027.bg"
  "s.protocol.Attribute2q\n\021friend_invitatio"
  "n\022+.bgs.protocol.friends.v1.ReceivedInvi"
  "tation\030g \001(\0132).bgs.protocol.friends.v1.F"
  "riendInvitation\"\223\001\n\016SentInvitation\022\n\n\002id"
  "\030\001 \001(\006\022\023\n\013target_name\030\002 \001(\t\022\014\n\004role\030\003 \001("
  "\r\022*\n\tattribute\030\004 \003(\0132\027.bgs.protocol.Attr"
  "ibute\022\025\n\rcreation_time\030\005 \001(\004\022\017\n\007program\030"
  "\006 \001(\007\"\231\002\n\026FriendInvitationParams\022\024\n\014targ"
  "et_email\030\001 \001(\t\022\031\n\021target_battle_tag\030\002 \001("
  "\t\022\020\n\004role\030\006 \003(\rB\002\020\001\022*\n\tattribute\030\010 \003(\0132\027"
  ".bgs.protocol.Attribute\022\023\n\013target_name\030\t"
  " \001(\t\022\023\n\007program\030\n \001(\007B\002\030\0012f\n\rfriend_para"
  "ms\022\036.bgs.protocol.InvitationParams\030g \001(\013"
  "2/.bgs.protocol.friends.v1.FriendInvitat"
  "ionParams\"\326\002\n\021SubscribeResponse\022\027\n\013max_f"
  "riends\030\001 \001(\rB\002\030\001\022$\n\030max_received_invitat"
  "ions\030\002 \001(\rB\002\030\001\022 \n\024max_sent_invitations\030\003"
  " \001(\rB\002\030\001\022 \n\004role\030\004 \003(\0132\022.bgs.protocol.Ro"
  "le\0220\n\007friends\030\005 \003(\0132\037.bgs.protocol.frien"
  "ds.v1.Friend\022I\n\024received_invitations\030\007 \003"
  "(\0132+.bgs.protocol.friends.v1.ReceivedInv"
  "itation\022A\n\020sent_invitations\030\010 \003(\0132\'.bgs."
  "protocol.friends.v1.SentInvitation\"8\n\027Ac"
  "ceptInvitationOptions\022\014\n\004role\030\001 \001(\r\022\017\n\007p"
  "rogram\030\002 \001(\007B-\n\030bnet.protocol.friends.v1"
  "B\021FriendsTypesProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto_deps[4] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto_sccs[8] = {
  &scc_info_AcceptInvitationOptions_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
  &scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
  &scc_info_FriendInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
  &scc_info_FriendInvitationParams_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
  &scc_info_FriendOfFriend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
  &scc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
  &scc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
  &scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto, "bgs/low/pb/client/friends_types.proto", 1859,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto_deps, 8, 4,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto, 8, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace friends {
namespace v1 {

// ===================================================================

void Friend::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_Friend_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class Friend::_Internal {
 public:
  using HasBits = decltype(std::declval<Friend>()._has_bits_);
  static const ::bgs::protocol::EntityId& account_id(const Friend* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privileges(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attributes_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::EntityId&
Friend::_Internal::account_id(const Friend* msg) {
  return *msg->account_id_;
}
void Friend::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Friend::clear_attribute() {
  attribute_.Clear();
}
Friend::Friend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.Friend)
}
Friend::Friend(const Friend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  ::memcpy(&privileges_, &from.privileges_,
    static_cast<size_t>(reinterpret_cast<char*>(&creation_time_) -
    reinterpret_cast<char*>(&privileges_)) + sizeof(creation_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.Friend)
}

void Friend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creation_time_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(creation_time_));
}

Friend::~Friend() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.Friend)
  SharedDtor();
}

void Friend::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
}

void Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Friend& Friend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Friend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.Friend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(account_id_ != nullptr);
    account_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&privileges_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_time_) -
        reinterpret_cast<char*>(&privileges_)) + sizeof(creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Friend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.EntityId account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 privileges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_privileges(&has_bits);
          privileges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 attributes_epoch = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_attributes_epoch(&has_bits);
          attributes_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Friend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.Friend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.EntityId account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_id(this), target, stream);
  }

  // repeated .bgs.protocol.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  // repeated uint32 role = 3 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_role(), byte_size, target);
    }
  }

  // optional uint64 privileges = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_privileges(), target);
  }

  // optional uint64 attributes_epoch = 5 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_attributes_epoch(), target);
  }

  // optional uint64 creation_time = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_creation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.Friend)
  return target;
}

size_t Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.Friend)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId account_id = 1;
  if (_internal_has_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 role = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint64 privileges = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_privileges());
    }

    // optional uint64 attributes_epoch = 5 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_attributes_epoch());
    }

    // optional uint64 creation_time = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Friend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  const Friend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Friend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.Friend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.Friend)
    MergeFrom(*source);
  }
}

void Friend::MergeFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  role_.MergeFrom(from.role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000002u) {
      privileges_ = from.privileges_;
    }
    if (cached_has_bits & 0x00000004u) {
      attributes_epoch_ = from.attributes_epoch_;
    }
    if (cached_has_bits & 0x00000008u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Friend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend::CopyFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  return true;
}

void Friend::InternalSwap(Friend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  role_.InternalSwap(&other->role_);
  swap(account_id_, other->account_id_);
  swap(privileges_, other->privileges_);
  swap(attributes_epoch_, other->attributes_epoch_);
  swap(creation_time_, other->creation_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Friend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendOfFriend::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_FriendOfFriend_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class FriendOfFriend::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendOfFriend>()._has_bits_);
  static const ::bgs::protocol::EntityId& account_id(const FriendOfFriend* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_privileges(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
FriendOfFriend::_Internal::account_id(const FriendOfFriend* msg) {
  return *msg->account_id_;
}
void FriendOfFriend::clear_account_id() {
  if (account_id_ != nullptr) account_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FriendOfFriend::FriendOfFriend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.FriendOfFriend)
}
FriendOfFriend::FriendOfFriend(const FriendOfFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name()) {
    full_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_name_);
  }
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_battle_tag()) {
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
  if (from._internal_has_account_id()) {
    account_id_ = new ::bgs::protocol::EntityId(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  privileges_ = from.privileges_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.FriendOfFriend)
}

void FriendOfFriend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendOfFriend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privileges_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(privileges_));
}

FriendOfFriend::~FriendOfFriend() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.FriendOfFriend)
  SharedDtor();
}

void FriendOfFriend::SharedDtor() {
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_id_;
}

void FriendOfFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendOfFriend& FriendOfFriend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendOfFriend_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void FriendOfFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.FriendOfFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      full_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(account_id_ != nullptr);
      account_id_->Clear();
    }
  }
  privileges_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FriendOfFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 privileges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_privileges(&has_bits);
          privileges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.friends.v1.FriendOfFriend.full_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battle_tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.friends.v1.FriendOfFriend.battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendOfFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.FriendOfFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_id(this), target, stream);
  }

  // repeated uint32 role = 3 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_role(), byte_size, target);
    }
  }

  // optional uint64 privileges = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_privileges(), target);
  }

  // optional string full_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.friends.v1.FriendOfFriend.full_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_full_name(), target);
  }

  // optional string battle_tag = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_battle_tag().data(), static_cast<int>(this->_internal_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.friends.v1.FriendOfFriend.battle_tag");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_battle_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.FriendOfFriend)
  return target;
}

size_t FriendOfFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.FriendOfFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string full_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

    // optional string battle_tag = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_battle_tag());
    }

    // optional .bgs.protocol.EntityId account_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_id_);
    }

    // optional uint64 privileges = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_privileges());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendOfFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.FriendOfFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendOfFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendOfFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.FriendOfFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.FriendOfFriend)
    MergeFrom(*source);
  }
}

void FriendOfFriend::MergeFrom(const FriendOfFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.FriendOfFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      full_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_account_id());
    }
    if (cached_has_bits & 0x00000008u) {
      privileges_ = from.privileges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendOfFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.FriendOfFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendOfFriend::CopyFrom(const FriendOfFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.FriendOfFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendOfFriend::IsInitialized() const {
  if (_internal_has_account_id()) {
    if (!account_id_->IsInitialized()) return false;
  }
  return true;
}

void FriendOfFriend::InternalSwap(FriendOfFriend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  full_name_.Swap(&other->full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  battle_tag_.Swap(&other->battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(privileges_, other->privileges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendOfFriend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReceivedInvitation::InitAsDefaultInstance() {
  ::bgs::protocol::friends::v1::_ReceivedInvitation_default_instance_._instance.get_mutable()->inviter_identity_ = const_cast< ::bgs::protocol::Identity*>(
      ::bgs::protocol::Identity::internal_default_instance());
  ::bgs::protocol::friends::v1::_ReceivedInvitation_default_instance_._instance.get_mutable()->invitee_identity_ = const_cast< ::bgs::protocol::Identity*>(
      ::bgs::protocol::Identity::internal_default_instance());
}
class ReceivedInvitation::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceivedInvitation>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::Identity& inviter_identity(const ReceivedInvitation* msg);
  static void set_has_inviter_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::Identity& invitee_identity(const ReceivedInvitation* msg);
  static void set_has_invitee_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inviter_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitee_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::bgs::protocol::Identity&
ReceivedInvitation::_Internal::inviter_identity(const ReceivedInvitation* msg) {
  return *msg->inviter_identity_;
}
const ::bgs::protocol::Identity&
ReceivedInvitation::_Internal::invitee_identity(const ReceivedInvitation* msg) {
  return *msg->invitee_identity_;
}
void ReceivedInvitation::clear_inviter_identity() {
  if (inviter_identity_ != nullptr) inviter_identity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ReceivedInvitation::clear_invitee_identity() {
  if (invitee_identity_ != nullptr) invitee_identity_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ReceivedInvitation::ReceivedInvitation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.ReceivedInvitation)
}
ReceivedInvitation::ReceivedInvitation(const ReceivedInvitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  inviter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviter_name()) {
    inviter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
  }
  invitee_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitee_name()) {
    invitee_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
  }
  if (from._internal_has_inviter_identity()) {
    inviter_identity_ = new ::bgs::protocol::Identity(*from.inviter_identity_);
  } else {
    inviter_identity_ = nullptr;
  }
  if (from._internal_has_invitee_identity()) {
    invitee_identity_ = new ::bgs::protocol::Identity(*from.invitee_identity_);
  } else {
    invitee_identity_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&program_) -
    reinterpret_cast<char*>(&id_)) + sizeof(program_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.ReceivedInvitation)
}

void ReceivedInvitation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  inviter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitee_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&inviter_identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_) -
      reinterpret_cast<char*>(&inviter_identity_)) + sizeof(program_));
}

ReceivedInvitation::~ReceivedInvitation() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.ReceivedInvitation)
  SharedDtor();
}

void ReceivedInvitation::SharedDtor() {
  inviter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitee_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inviter_identity_;
  if (this != internal_default_instance()) delete invitee_identity_;
}

void ReceivedInvitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceivedInvitation& ReceivedInvitation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceivedInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ReceivedInvitation::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.ReceivedInvitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      inviter_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      invitee_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inviter_identity_ != nullptr);
      inviter_identity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(invitee_identity_ != nullptr);
      invitee_identity_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&program_) -
        reinterpret_cast<char*>(&id_)) + sizeof(program_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReceivedInvitation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.Identity inviter_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviter_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.Identity invitee_identity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitee_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inviter_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_inviter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.friends.v1.ReceivedInvitation.inviter_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string invitee_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_invitee_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.friends.v1.ReceivedInvitation.invitee_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 80008u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceivedInvitation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.ReceivedInvitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // required .bgs.protocol.Identity inviter_identity = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inviter_identity(this), target, stream);
  }

  // required .bgs.protocol.Identity invitee_identity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::invitee_identity(this), target, stream);
  }

  // optional string inviter_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviter_name().data(), static_cast<int>(this->_internal_inviter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.friends.v1.ReceivedInvitation.inviter_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_inviter_name(), target);
  }

  // optional string invitee_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitee_name().data(), static_cast<int>(this->_internal_invitee_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.friends.v1.ReceivedInvitation.invitee_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_invitee_name(), target);
  }

  // optional uint64 creation_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_creation_time(), target);
  }

  // optional fixed32 program = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_program(), target);
  }

  // Extension range [100, 10001)
  target = _extensions_._InternalSerialize(
      100, 10001, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.ReceivedInvitation)
  return target;
}

size_t ReceivedInvitation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.friends.v1.ReceivedInvitation)
  size_t total_size = 0;

  if (_internal_has_inviter_identity()) {
    // required .bgs.protocol.Identity inviter_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inviter_identity_);
  }

  if (_internal_has_invitee_identity()) {
    // required .bgs.protocol.Identity invitee_identity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invitee_identity_);
  }

  if (_internal_has_id()) {
    // required fixed64 id = 1;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ReceivedInvitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.ReceivedInvitation)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .bgs.protocol.Identity inviter_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inviter_identity_);

    // required .bgs.protocol.Identity invitee_identity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invitee_identity_);

    // required fixed64 id = 1;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string inviter_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inviter_name());
    }

    // optional string invitee_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitee_name());
    }

  }
  if (cached_has_bits & 0x00000060u) {
    // optional uint64 creation_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

    // optional fixed32 program = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedInvitation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.ReceivedInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedInvitation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceivedInvitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.ReceivedInvitation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.ReceivedInvitation)
    MergeFrom(*source);
  }
}

void ReceivedInvitation::MergeFrom(const ReceivedInvitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.ReceivedInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      inviter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      invitee_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inviter_identity()->::bgs::protocol::Identity::MergeFrom(from._internal_inviter_identity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_invitee_identity()->::bgs::protocol::Identity::MergeFrom(from._internal_invitee_identity());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReceivedInvitation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.ReceivedInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedInvitation::CopyFrom(const ReceivedInvitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.ReceivedInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedInvitation::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (_internal_has_inviter_identity()) {
    if (!inviter_identity_->IsInitialized()) return false;
  }
  if (_internal_has_invitee_identity()) {
    if (!invitee_identity_->IsInitialized()) return false;
  }
  return true;
}

void ReceivedInvitation::InternalSwap(ReceivedInvitation* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inviter_name_.Swap(&other->inviter_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invitee_name_.Swap(&other->invitee_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inviter_identity_, other->inviter_identity_);
  swap(invitee_identity_, other->invitee_identity_);
  swap(id_, other->id_);
  swap(creation_time_, other->creation_time_);
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedInvitation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendInvitation::InitAsDefaultInstance() {
}
class FriendInvitation::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendInvitation>()._has_bits_);
};

void FriendInvitation::clear_attribute() {
  attribute_.Clear();
}
FriendInvitation::FriendInvitation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.FriendInvitation)
}
FriendInvitation::FriendInvitation(const FriendInvitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.FriendInvitation)
}

void FriendInvitation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
}

FriendInvitation::~FriendInvitation() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.FriendInvitation)
  SharedDtor();
}

void FriendInvitation::SharedDtor() {
}

void FriendInvitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendInvitation& FriendInvitation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void FriendInvitation::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.FriendInvitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  attribute_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FriendInvitation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 role = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendInvitation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.FriendInvitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 role = 2 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_role(), byte_size, target);
    }
  }

  // repeated .bgs.protocol.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.FriendInvitation)
  return target;
}

size_t FriendInvitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.FriendInvitation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .bgs.protocol.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendInvitation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.FriendInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendInvitation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendInvitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.FriendInvitation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.FriendInvitation)
    MergeFrom(*source);
  }
}

void FriendInvitation::MergeFrom(const FriendInvitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.FriendInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  attribute_.MergeFrom(from.attribute_);
}

void FriendInvitation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.FriendInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInvitation::CopyFrom(const FriendInvitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.FriendInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInvitation::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  return true;
}

void FriendInvitation::InternalSwap(FriendInvitation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  attribute_.InternalSwap(&other->attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInvitation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SentInvitation::InitAsDefaultInstance() {
}
class SentInvitation::_Internal {
 public:
  using HasBits = decltype(std::declval<SentInvitation>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void SentInvitation::clear_attribute() {
  attribute_.Clear();
}
SentInvitation::SentInvitation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.SentInvitation)
}
SentInvitation::SentInvitation(const SentInvitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_name()) {
    target_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&creation_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(creation_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.SentInvitation)
}

void SentInvitation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creation_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(creation_time_));
}

SentInvitation::~SentInvitation() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.SentInvitation)
  SharedDtor();
}

void SentInvitation::SharedDtor() {
  target_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SentInvitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SentInvitation& SentInvitation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentInvitation_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void SentInvitation::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.SentInvitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    target_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_time_) -
        reinterpret_cast<char*>(&id_)) + sizeof(creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SentInvitation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string target_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.friends.v1.SentInvitation.target_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_role(&has_bits);
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SentInvitation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.SentInvitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // optional string target_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_name().data(), static_cast<int>(this->_internal_target_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.friends.v1.SentInvitation.target_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_name(), target);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_role(), target);
  }

  // repeated .bgs.protocol.Attribute attribute = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribute(i), target, stream);
  }

  // optional uint64 creation_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_creation_time(), target);
  }

  // optional fixed32 program = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.SentInvitation)
  return target;
}

size_t SentInvitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.SentInvitation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 4;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string target_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_name());
    }

    // optional fixed64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 role = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_role());
    }

    // optional fixed32 program = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint64 creation_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SentInvitation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.SentInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  const SentInvitation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SentInvitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.SentInvitation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.SentInvitation)
    MergeFrom(*source);
  }
}

void SentInvitation::MergeFrom(const SentInvitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.SentInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      target_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000008u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000010u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SentInvitation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.SentInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentInvitation::CopyFrom(const SentInvitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.SentInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentInvitation::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  return true;
}

void SentInvitation::InternalSwap(SentInvitation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  target_name_.Swap(&other->target_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(role_, other->role_);
  swap(program_, other->program_);
  swap(creation_time_, other->creation_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SentInvitation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FriendInvitationParams::InitAsDefaultInstance() {
}
class FriendInvitationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendInvitationParams>()._has_bits_);
  static void set_has_target_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void FriendInvitationParams::clear_attribute() {
  attribute_.Clear();
}
FriendInvitationParams::FriendInvitationParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.FriendInvitationParams)
}
FriendInvitationParams::FriendInvitationParams(const FriendInvitationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_email()) {
    target_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_email_);
  }
  target_battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_battle_tag()) {
    target_battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_battle_tag_);
  }
  target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_name()) {
    target_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_name_);
  }
  program_ = from.program_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.FriendInvitationParams)
}

void FriendInvitationParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendInvitationParams_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  target_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_ = 0u;
}

FriendInvitationParams::~FriendInvitationParams() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.FriendInvitationParams)
  SharedDtor();
}

void FriendInvitationParams::SharedDtor() {
  target_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendInvitationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendInvitationParams& FriendInvitationParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendInvitationParams_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void FriendInvitationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.FriendInvitationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      target_email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      target_battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      target_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  program_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FriendInvitationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string target_email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.friends.v1.FriendInvitationParams.target_email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target_battle_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 role = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_role(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string target_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_target_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.friends.v1.FriendInvitationParams.target_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendInvitationParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.FriendInvitationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string target_email = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_email().data(), static_cast<int>(this->_internal_target_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.friends.v1.FriendInvitationParams.target_email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_email(), target);
  }

  // optional string target_battle_tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_battle_tag().data(), static_cast<int>(this->_internal_target_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_battle_tag(), target);
  }

  // repeated uint32 role = 6 [packed = true];
  {
    int byte_size = _role_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_role(), byte_size, target);
    }
  }

  // repeated .bgs.protocol.Attribute attribute = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_attribute(i), target, stream);
  }

  // optional string target_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_name().data(), static_cast<int>(this->_internal_target_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.friends.v1.FriendInvitationParams.target_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_target_name(), target);
  }

  // optional fixed32 program = 10 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.FriendInvitationParams)
  return target;
}

size_t FriendInvitationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.FriendInvitationParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .bgs.protocol.Attribute attribute = 8;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string target_email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_email());
    }

    // optional string target_battle_tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_battle_tag());
    }

    // optional string target_name = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_name());
    }

    // optional fixed32 program = 10 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendInvitationParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.FriendInvitationParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendInvitationParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendInvitationParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.FriendInvitationParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.FriendInvitationParams)
    MergeFrom(*source);
  }
}

void FriendInvitationParams::MergeFrom(const FriendInvitationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.FriendInvitationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      target_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_email_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      target_battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_battle_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      target_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendInvitationParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.FriendInvitationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInvitationParams::CopyFrom(const FriendInvitationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.FriendInvitationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInvitationParams::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  return true;
}

void FriendInvitationParams::InternalSwap(FriendInvitationParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  attribute_.InternalSwap(&other->attribute_);
  target_email_.Swap(&other->target_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_battle_tag_.Swap(&other->target_battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_name_.Swap(&other->target_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInvitationParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeResponse::InitAsDefaultInstance() {
}
class SubscribeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeResponse>()._has_bits_);
  static void set_has_max_friends(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_received_invitations(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_sent_invitations(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void SubscribeResponse::clear_role() {
  role_.Clear();
}
SubscribeResponse::SubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      role_(from.role_),
      friends_(from.friends_),
      received_invitations_(from.received_invitations_),
      sent_invitations_(from.sent_invitations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_friends_, &from.max_friends_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_sent_invitations_) -
    reinterpret_cast<char*>(&max_friends_)) + sizeof(max_sent_invitations_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  ::memset(&max_friends_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_sent_invitations_) -
      reinterpret_cast<char*>(&max_friends_)) + sizeof(max_sent_invitations_));
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
}

void SubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeResponse& SubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeResponse_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  friends_.Clear();
  received_invitations_.Clear();
  sent_invitations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&max_friends_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_sent_invitations_) -
        reinterpret_cast<char*>(&max_friends_)) + sizeof(max_sent_invitations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_friends = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_friends(&has_bits);
          max_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_received_invitations = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_received_invitations(&has_bits);
          max_received_invitations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_sent_invitations = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_sent_invitations(&has_bits);
          max_sent_invitations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Role role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.friends.v1.Friend friends = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.friends.v1.ReceivedInvitation received_invitations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_received_invitations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.friends.v1.SentInvitation sent_invitations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sent_invitations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_friends = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_friends(), target);
  }

  // optional uint32 max_received_invitations = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_received_invitations(), target);
  }

  // optional uint32 max_sent_invitations = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_sent_invitations(), target);
  }

  // repeated .bgs.protocol.Role role = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_role(i), target, stream);
  }

  // repeated .bgs.protocol.friends.v1.Friend friends = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_friends(i), target, stream);
  }

  // repeated .bgs.protocol.friends.v1.ReceivedInvitation received_invitations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_received_invitations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_received_invitations(i), target, stream);
  }

  // repeated .bgs.protocol.friends.v1.SentInvitation sent_invitations = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sent_invitations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_sent_invitations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.SubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Role role = 4;
  total_size += 1UL * this->_internal_role_size();
  for (const auto& msg : this->role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.friends.v1.Friend friends = 5;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.friends.v1.ReceivedInvitation received_invitations = 7;
  total_size += 1UL * this->_internal_received_invitations_size();
  for (const auto& msg : this->received_invitations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.friends.v1.SentInvitation sent_invitations = 8;
  total_size += 1UL * this->_internal_sent_invitations_size();
  for (const auto& msg : this->sent_invitations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 max_friends = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_friends());
    }

    // optional uint32 max_received_invitations = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_received_invitations());
    }

    // optional uint32 max_sent_invitations = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_sent_invitations());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.SubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.SubscribeResponse)
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  friends_.MergeFrom(from.friends_);
  received_invitations_.MergeFrom(from.received_invitations_);
  sent_invitations_.MergeFrom(from.sent_invitations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      max_friends_ = from.max_friends_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_received_invitations_ = from.max_received_invitations_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_sent_invitations_ = from.max_sent_invitations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(role_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(friends_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(received_invitations_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sent_invitations_)) return false;
  return true;
}

void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_.InternalSwap(&other->role_);
  friends_.InternalSwap(&other->friends_);
  received_invitations_.InternalSwap(&other->received_invitations_);
  sent_invitations_.InternalSwap(&other->sent_invitations_);
  swap(max_friends_, other->max_friends_);
  swap(max_received_invitations_, other->max_received_invitations_);
  swap(max_sent_invitations_, other->max_sent_invitations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptInvitationOptions::InitAsDefaultInstance() {
}
class AcceptInvitationOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<AcceptInvitationOptions>()._has_bits_);
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AcceptInvitationOptions::AcceptInvitationOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.friends.v1.AcceptInvitationOptions)
}
AcceptInvitationOptions::AcceptInvitationOptions(const AcceptInvitationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_, &from.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&program_) -
    reinterpret_cast<char*>(&role_)) + sizeof(program_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.friends.v1.AcceptInvitationOptions)
}

void AcceptInvitationOptions::SharedCtor() {
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_) -
      reinterpret_cast<char*>(&role_)) + sizeof(program_));
}

AcceptInvitationOptions::~AcceptInvitationOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.friends.v1.AcceptInvitationOptions)
  SharedDtor();
}

void AcceptInvitationOptions::SharedDtor() {
}

void AcceptInvitationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptInvitationOptions& AcceptInvitationOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptInvitationOptions_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void AcceptInvitationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.friends.v1.AcceptInvitationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&role_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&program_) -
        reinterpret_cast<char*>(&role_)) + sizeof(program_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AcceptInvitationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_role(&has_bits);
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 program = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptInvitationOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.friends.v1.AcceptInvitationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 role = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_role(), target);
  }

  // optional fixed32 program = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.friends.v1.AcceptInvitationOptions)
  return target;
}

size_t AcceptInvitationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.friends.v1.AcceptInvitationOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 role = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_role());
    }

    // optional fixed32 program = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptInvitationOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.friends.v1.AcceptInvitationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptInvitationOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptInvitationOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.friends.v1.AcceptInvitationOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.friends.v1.AcceptInvitationOptions)
    MergeFrom(*source);
  }
}

void AcceptInvitationOptions::MergeFrom(const AcceptInvitationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.friends.v1.AcceptInvitationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000002u) {
      program_ = from.program_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptInvitationOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.friends.v1.AcceptInvitationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptInvitationOptions::CopyFrom(const AcceptInvitationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.friends.v1.AcceptInvitationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptInvitationOptions::IsInitialized() const {
  return true;
}

void AcceptInvitationOptions::InternalSwap(AcceptInvitationOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(role_, other->role_);
  swap(program_, other->program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptInvitationOptions::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendInvitation::kFriendInvitationFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::bgs::protocol::friends::v1::ReceivedInvitation,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::bgs::protocol::friends::v1::FriendInvitation >, 11, false >
  FriendInvitation::friend_invitation(kFriendInvitationFieldNumber, *::bgs::protocol::friends::v1::FriendInvitation::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendInvitationParams::kFriendParamsFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::bgs::protocol::InvitationParams,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::bgs::protocol::friends::v1::FriendInvitationParams >, 11, false >
  FriendInvitationParams::friend_params(kFriendParamsFieldNumber, *::bgs::protocol::friends::v1::FriendInvitationParams::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace friends
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::Friend* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::Friend >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::Friend >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::FriendOfFriend* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::FriendOfFriend >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::FriendOfFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::ReceivedInvitation* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::ReceivedInvitation >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::ReceivedInvitation >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::FriendInvitation* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::FriendInvitation >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::FriendInvitation >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::SentInvitation* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::SentInvitation >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::SentInvitation >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::FriendInvitationParams* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::FriendInvitationParams >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::FriendInvitationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::SubscribeResponse* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::SubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::SubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::friends::v1::AcceptInvitationOptions* Arena::CreateMaybeMessage< ::bgs::protocol::friends::v1::AcceptInvitationOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::friends::v1::AcceptInvitationOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
