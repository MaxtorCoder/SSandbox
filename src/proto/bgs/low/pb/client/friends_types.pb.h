// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/friends_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/attribute_types.pb.h"
#include "bgs/low/pb/client/entity_types.pb.h"
#include "bgs/low/pb/client/invitation_types.pb.h"
#include "bgs/low/pb/client/role_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace friends {
namespace v1 {
class AcceptInvitationOptions;
class AcceptInvitationOptionsDefaultTypeInternal;
extern AcceptInvitationOptionsDefaultTypeInternal _AcceptInvitationOptions_default_instance_;
class Friend;
class FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class FriendInvitation;
class FriendInvitationDefaultTypeInternal;
extern FriendInvitationDefaultTypeInternal _FriendInvitation_default_instance_;
class FriendInvitationParams;
class FriendInvitationParamsDefaultTypeInternal;
extern FriendInvitationParamsDefaultTypeInternal _FriendInvitationParams_default_instance_;
class FriendOfFriend;
class FriendOfFriendDefaultTypeInternal;
extern FriendOfFriendDefaultTypeInternal _FriendOfFriend_default_instance_;
class ReceivedInvitation;
class ReceivedInvitationDefaultTypeInternal;
extern ReceivedInvitationDefaultTypeInternal _ReceivedInvitation_default_instance_;
class SentInvitation;
class SentInvitationDefaultTypeInternal;
extern SentInvitationDefaultTypeInternal _SentInvitation_default_instance_;
class SubscribeResponse;
class SubscribeResponseDefaultTypeInternal;
extern SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
}  // namespace v1
}  // namespace friends
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::friends::v1::AcceptInvitationOptions* Arena::CreateMaybeMessage<::bgs::protocol::friends::v1::AcceptInvitationOptions>(Arena*);
template<> ::bgs::protocol::friends::v1::Friend* Arena::CreateMaybeMessage<::bgs::protocol::friends::v1::Friend>(Arena*);
template<> ::bgs::protocol::friends::v1::FriendInvitation* Arena::CreateMaybeMessage<::bgs::protocol::friends::v1::FriendInvitation>(Arena*);
template<> ::bgs::protocol::friends::v1::FriendInvitationParams* Arena::CreateMaybeMessage<::bgs::protocol::friends::v1::FriendInvitationParams>(Arena*);
template<> ::bgs::protocol::friends::v1::FriendOfFriend* Arena::CreateMaybeMessage<::bgs::protocol::friends::v1::FriendOfFriend>(Arena*);
template<> ::bgs::protocol::friends::v1::ReceivedInvitation* Arena::CreateMaybeMessage<::bgs::protocol::friends::v1::ReceivedInvitation>(Arena*);
template<> ::bgs::protocol::friends::v1::SentInvitation* Arena::CreateMaybeMessage<::bgs::protocol::friends::v1::SentInvitation>(Arena*);
template<> ::bgs::protocol::friends::v1::SubscribeResponse* Arena::CreateMaybeMessage<::bgs::protocol::friends::v1::SubscribeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace friends {
namespace v1 {

// ===================================================================

class Friend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.friends.v1.Friend) */ {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);
  Friend(Friend&& from) noexcept
    : Friend() {
    *this = ::std::move(from);
  }

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Friend& operator=(Friend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Friend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Friend& a, Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(Friend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Friend* New() const final {
    return CreateMaybeMessage<Friend>(nullptr);
  }

  Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Friend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.friends.v1.Friend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kRoleFieldNumber = 3,
    kAccountIdFieldNumber = 1,
    kPrivilegesFieldNumber = 4,
    kAttributesEpochFieldNumber = 5,
    kCreationTimeFieldNumber = 6,
  };
  // repeated .bgs.protocol.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  // repeated uint32 role = 3 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // required .bgs.protocol.EntityId account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::bgs::protocol::EntityId& account_id() const;
  ::bgs::protocol::EntityId* release_account_id();
  ::bgs::protocol::EntityId* mutable_account_id();
  void set_allocated_account_id(::bgs::protocol::EntityId* account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_account_id();
  public:

  // optional uint64 privileges = 4;
  bool has_privileges() const;
  private:
  bool _internal_has_privileges() const;
  public:
  void clear_privileges();
  ::PROTOBUF_NAMESPACE_ID::uint64 privileges() const;
  void set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_privileges() const;
  void _internal_set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 attributes_epoch = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_attributes_epoch() const;
  private:
  bool _internal_has_attributes_epoch() const;
  public:
  PROTOBUF_DEPRECATED void clear_attributes_epoch();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 attributes_epoch() const;
  PROTOBUF_DEPRECATED void set_attributes_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attributes_epoch() const;
  void _internal_set_attributes_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 creation_time = 6;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.friends.v1.Friend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::bgs::protocol::EntityId* account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 privileges_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attributes_epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class FriendOfFriend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.friends.v1.FriendOfFriend) */ {
 public:
  FriendOfFriend();
  virtual ~FriendOfFriend();

  FriendOfFriend(const FriendOfFriend& from);
  FriendOfFriend(FriendOfFriend&& from) noexcept
    : FriendOfFriend() {
    *this = ::std::move(from);
  }

  inline FriendOfFriend& operator=(const FriendOfFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendOfFriend& operator=(FriendOfFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendOfFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendOfFriend* internal_default_instance() {
    return reinterpret_cast<const FriendOfFriend*>(
               &_FriendOfFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FriendOfFriend& a, FriendOfFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendOfFriend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendOfFriend* New() const final {
    return CreateMaybeMessage<FriendOfFriend>(nullptr);
  }

  FriendOfFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendOfFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendOfFriend& from);
  void MergeFrom(const FriendOfFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendOfFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.friends.v1.FriendOfFriend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 3,
    kFullNameFieldNumber = 6,
    kBattleTagFieldNumber = 7,
    kAccountIdFieldNumber = 1,
    kPrivilegesFieldNumber = 4,
  };
  // repeated uint32 role = 3 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // optional string full_name = 6;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // optional string battle_tag = 7;
  bool has_battle_tag() const;
  private:
  bool _internal_has_battle_tag() const;
  public:
  void clear_battle_tag();
  const std::string& battle_tag() const;
  void set_battle_tag(const std::string& value);
  void set_battle_tag(std::string&& value);
  void set_battle_tag(const char* value);
  void set_battle_tag(const char* value, size_t size);
  std::string* mutable_battle_tag();
  std::string* release_battle_tag();
  void set_allocated_battle_tag(std::string* battle_tag);
  private:
  const std::string& _internal_battle_tag() const;
  void _internal_set_battle_tag(const std::string& value);
  std::string* _internal_mutable_battle_tag();
  public:

  // optional .bgs.protocol.EntityId account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::bgs::protocol::EntityId& account_id() const;
  ::bgs::protocol::EntityId* release_account_id();
  ::bgs::protocol::EntityId* mutable_account_id();
  void set_allocated_account_id(::bgs::protocol::EntityId* account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_account_id();
  public:

  // optional uint64 privileges = 4;
  bool has_privileges() const;
  private:
  bool _internal_has_privileges() const;
  public:
  void clear_privileges();
  ::PROTOBUF_NAMESPACE_ID::uint64 privileges() const;
  void set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_privileges() const;
  void _internal_set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.friends.v1.FriendOfFriend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_tag_;
  ::bgs::protocol::EntityId* account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 privileges_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ReceivedInvitation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.friends.v1.ReceivedInvitation) */ {
 public:
  ReceivedInvitation();
  virtual ~ReceivedInvitation();

  ReceivedInvitation(const ReceivedInvitation& from);
  ReceivedInvitation(ReceivedInvitation&& from) noexcept
    : ReceivedInvitation() {
    *this = ::std::move(from);
  }

  inline ReceivedInvitation& operator=(const ReceivedInvitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceivedInvitation& operator=(ReceivedInvitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceivedInvitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivedInvitation* internal_default_instance() {
    return reinterpret_cast<const ReceivedInvitation*>(
               &_ReceivedInvitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReceivedInvitation& a, ReceivedInvitation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceivedInvitation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceivedInvitation* New() const final {
    return CreateMaybeMessage<ReceivedInvitation>(nullptr);
  }

  ReceivedInvitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedInvitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceivedInvitation& from);
  void MergeFrom(const ReceivedInvitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedInvitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.friends.v1.ReceivedInvitation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviterNameFieldNumber = 4,
    kInviteeNameFieldNumber = 5,
    kInviterIdentityFieldNumber = 2,
    kInviteeIdentityFieldNumber = 3,
    kIdFieldNumber = 1,
    kCreationTimeFieldNumber = 7,
    kProgramFieldNumber = 9,
  };
  // optional string inviter_name = 4;
  bool has_inviter_name() const;
  private:
  bool _internal_has_inviter_name() const;
  public:
  void clear_inviter_name();
  const std::string& inviter_name() const;
  void set_inviter_name(const std::string& value);
  void set_inviter_name(std::string&& value);
  void set_inviter_name(const char* value);
  void set_inviter_name(const char* value, size_t size);
  std::string* mutable_inviter_name();
  std::string* release_inviter_name();
  void set_allocated_inviter_name(std::string* inviter_name);
  private:
  const std::string& _internal_inviter_name() const;
  void _internal_set_inviter_name(const std::string& value);
  std::string* _internal_mutable_inviter_name();
  public:

  // optional string invitee_name = 5;
  bool has_invitee_name() const;
  private:
  bool _internal_has_invitee_name() const;
  public:
  void clear_invitee_name();
  const std::string& invitee_name() const;
  void set_invitee_name(const std::string& value);
  void set_invitee_name(std::string&& value);
  void set_invitee_name(const char* value);
  void set_invitee_name(const char* value, size_t size);
  std::string* mutable_invitee_name();
  std::string* release_invitee_name();
  void set_allocated_invitee_name(std::string* invitee_name);
  private:
  const std::string& _internal_invitee_name() const;
  void _internal_set_invitee_name(const std::string& value);
  std::string* _internal_mutable_invitee_name();
  public:

  // required .bgs.protocol.Identity inviter_identity = 2;
  bool has_inviter_identity() const;
  private:
  bool _internal_has_inviter_identity() const;
  public:
  void clear_inviter_identity();
  const ::bgs::protocol::Identity& inviter_identity() const;
  ::bgs::protocol::Identity* release_inviter_identity();
  ::bgs::protocol::Identity* mutable_inviter_identity();
  void set_allocated_inviter_identity(::bgs::protocol::Identity* inviter_identity);
  private:
  const ::bgs::protocol::Identity& _internal_inviter_identity() const;
  ::bgs::protocol::Identity* _internal_mutable_inviter_identity();
  public:

  // required .bgs.protocol.Identity invitee_identity = 3;
  bool has_invitee_identity() const;
  private:
  bool _internal_has_invitee_identity() const;
  public:
  void clear_invitee_identity();
  const ::bgs::protocol::Identity& invitee_identity() const;
  ::bgs::protocol::Identity* release_invitee_identity();
  ::bgs::protocol::Identity* mutable_invitee_identity();
  void set_allocated_invitee_identity(::bgs::protocol::Identity* invitee_identity);
  private:
  const ::bgs::protocol::Identity& _internal_invitee_identity() const;
  ::bgs::protocol::Identity* _internal_mutable_invitee_identity();
  public:

  // required fixed64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 creation_time = 7;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 program = 9;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ReceivedInvitation)
  // @@protoc_insertion_point(class_scope:bgs.protocol.friends.v1.ReceivedInvitation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviter_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitee_name_;
  ::bgs::protocol::Identity* inviter_identity_;
  ::bgs::protocol::Identity* invitee_identity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class FriendInvitation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.friends.v1.FriendInvitation) */ {
 public:
  FriendInvitation();
  virtual ~FriendInvitation();

  FriendInvitation(const FriendInvitation& from);
  FriendInvitation(FriendInvitation&& from) noexcept
    : FriendInvitation() {
    *this = ::std::move(from);
  }

  inline FriendInvitation& operator=(const FriendInvitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInvitation& operator=(FriendInvitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendInvitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendInvitation* internal_default_instance() {
    return reinterpret_cast<const FriendInvitation*>(
               &_FriendInvitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendInvitation& a, FriendInvitation& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInvitation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendInvitation* New() const final {
    return CreateMaybeMessage<FriendInvitation>(nullptr);
  }

  FriendInvitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendInvitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendInvitation& from);
  void MergeFrom(const FriendInvitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInvitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.friends.v1.FriendInvitation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kAttributeFieldNumber = 3,
  };
  // repeated uint32 role = 2 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // repeated .bgs.protocol.Attribute attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  static const int kFriendInvitationFieldNumber = 103;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::bgs::protocol::friends::v1::ReceivedInvitation,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::bgs::protocol::friends::v1::FriendInvitation >, 11, false >
    friend_invitation;
  // @@protoc_insertion_point(class_scope:bgs.protocol.friends.v1.FriendInvitation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SentInvitation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.friends.v1.SentInvitation) */ {
 public:
  SentInvitation();
  virtual ~SentInvitation();

  SentInvitation(const SentInvitation& from);
  SentInvitation(SentInvitation&& from) noexcept
    : SentInvitation() {
    *this = ::std::move(from);
  }

  inline SentInvitation& operator=(const SentInvitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentInvitation& operator=(SentInvitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SentInvitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SentInvitation* internal_default_instance() {
    return reinterpret_cast<const SentInvitation*>(
               &_SentInvitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SentInvitation& a, SentInvitation& b) {
    a.Swap(&b);
  }
  inline void Swap(SentInvitation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SentInvitation* New() const final {
    return CreateMaybeMessage<SentInvitation>(nullptr);
  }

  SentInvitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SentInvitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SentInvitation& from);
  void MergeFrom(const SentInvitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SentInvitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.friends.v1.SentInvitation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 4,
    kTargetNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kRoleFieldNumber = 3,
    kProgramFieldNumber = 6,
    kCreationTimeFieldNumber = 5,
  };
  // repeated .bgs.protocol.Attribute attribute = 4;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  // optional string target_name = 2;
  bool has_target_name() const;
  private:
  bool _internal_has_target_name() const;
  public:
  void clear_target_name();
  const std::string& target_name() const;
  void set_target_name(const std::string& value);
  void set_target_name(std::string&& value);
  void set_target_name(const char* value);
  void set_target_name(const char* value, size_t size);
  std::string* mutable_target_name();
  std::string* release_target_name();
  void set_allocated_target_name(std::string* target_name);
  private:
  const std::string& _internal_target_name() const;
  void _internal_set_target_name(const std::string& value);
  std::string* _internal_mutable_target_name();
  public:

  // optional fixed64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 role = 3;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::uint32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 program = 6;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 creation_time = 5;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.friends.v1.SentInvitation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 role_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class FriendInvitationParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.friends.v1.FriendInvitationParams) */ {
 public:
  FriendInvitationParams();
  virtual ~FriendInvitationParams();

  FriendInvitationParams(const FriendInvitationParams& from);
  FriendInvitationParams(FriendInvitationParams&& from) noexcept
    : FriendInvitationParams() {
    *this = ::std::move(from);
  }

  inline FriendInvitationParams& operator=(const FriendInvitationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInvitationParams& operator=(FriendInvitationParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendInvitationParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendInvitationParams* internal_default_instance() {
    return reinterpret_cast<const FriendInvitationParams*>(
               &_FriendInvitationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FriendInvitationParams& a, FriendInvitationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInvitationParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendInvitationParams* New() const final {
    return CreateMaybeMessage<FriendInvitationParams>(nullptr);
  }

  FriendInvitationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendInvitationParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendInvitationParams& from);
  void MergeFrom(const FriendInvitationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInvitationParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.friends.v1.FriendInvitationParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 6,
    kAttributeFieldNumber = 8,
    kTargetEmailFieldNumber = 1,
    kTargetBattleTagFieldNumber = 2,
    kTargetNameFieldNumber = 9,
    kProgramFieldNumber = 10,
  };
  // repeated uint32 role = 6 [packed = true];
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_role() const;
  void _internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 role(int index) const;
  void set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_role();

  // repeated .bgs.protocol.Attribute attribute = 8;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  // optional string target_email = 1;
  bool has_target_email() const;
  private:
  bool _internal_has_target_email() const;
  public:
  void clear_target_email();
  const std::string& target_email() const;
  void set_target_email(const std::string& value);
  void set_target_email(std::string&& value);
  void set_target_email(const char* value);
  void set_target_email(const char* value, size_t size);
  std::string* mutable_target_email();
  std::string* release_target_email();
  void set_allocated_target_email(std::string* target_email);
  private:
  const std::string& _internal_target_email() const;
  void _internal_set_target_email(const std::string& value);
  std::string* _internal_mutable_target_email();
  public:

  // optional string target_battle_tag = 2;
  bool has_target_battle_tag() const;
  private:
  bool _internal_has_target_battle_tag() const;
  public:
  void clear_target_battle_tag();
  const std::string& target_battle_tag() const;
  void set_target_battle_tag(const std::string& value);
  void set_target_battle_tag(std::string&& value);
  void set_target_battle_tag(const char* value);
  void set_target_battle_tag(const char* value, size_t size);
  std::string* mutable_target_battle_tag();
  std::string* release_target_battle_tag();
  void set_allocated_target_battle_tag(std::string* target_battle_tag);
  private:
  const std::string& _internal_target_battle_tag() const;
  void _internal_set_target_battle_tag(const std::string& value);
  std::string* _internal_mutable_target_battle_tag();
  public:

  // optional string target_name = 9;
  bool has_target_name() const;
  private:
  bool _internal_has_target_name() const;
  public:
  void clear_target_name();
  const std::string& target_name() const;
  void set_target_name(const std::string& value);
  void set_target_name(std::string&& value);
  void set_target_name(const char* value);
  void set_target_name(const char* value, size_t size);
  std::string* mutable_target_name();
  std::string* release_target_name();
  void set_allocated_target_name(std::string* target_name);
  private:
  const std::string& _internal_target_name() const;
  void _internal_set_target_name(const std::string& value);
  std::string* _internal_mutable_target_name();
  public:

  // optional fixed32 program = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  PROTOBUF_DEPRECATED void clear_program();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  PROTOBUF_DEPRECATED void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  static const int kFriendParamsFieldNumber = 103;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::bgs::protocol::InvitationParams,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::bgs::protocol::friends::v1::FriendInvitationParams >, 11, false >
    friend_params;
  // @@protoc_insertion_point(class_scope:bgs.protocol.friends.v1.FriendInvitationParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > role_;
  mutable std::atomic<int> _role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_battle_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.friends.v1.SubscribeResponse) */ {
 public:
  SubscribeResponse();
  virtual ~SubscribeResponse();

  SubscribeResponse(const SubscribeResponse& from);
  SubscribeResponse(SubscribeResponse&& from) noexcept
    : SubscribeResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResponse& operator=(SubscribeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeResponse*>(
               &_SubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeResponse& a, SubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeResponse* New() const final {
    return CreateMaybeMessage<SubscribeResponse>(nullptr);
  }

  SubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeResponse& from);
  void MergeFrom(const SubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.friends.v1.SubscribeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 4,
    kFriendsFieldNumber = 5,
    kReceivedInvitationsFieldNumber = 7,
    kSentInvitationsFieldNumber = 8,
    kMaxFriendsFieldNumber = 1,
    kMaxReceivedInvitationsFieldNumber = 2,
    kMaxSentInvitationsFieldNumber = 3,
  };
  // repeated .bgs.protocol.Role role = 4;
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  ::bgs::protocol::Role* mutable_role(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role >*
      mutable_role();
  private:
  const ::bgs::protocol::Role& _internal_role(int index) const;
  ::bgs::protocol::Role* _internal_add_role();
  public:
  const ::bgs::protocol::Role& role(int index) const;
  ::bgs::protocol::Role* add_role();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role >&
      role() const;

  // repeated .bgs.protocol.friends.v1.Friend friends = 5;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::bgs::protocol::friends::v1::Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::Friend >*
      mutable_friends();
  private:
  const ::bgs::protocol::friends::v1::Friend& _internal_friends(int index) const;
  ::bgs::protocol::friends::v1::Friend* _internal_add_friends();
  public:
  const ::bgs::protocol::friends::v1::Friend& friends(int index) const;
  ::bgs::protocol::friends::v1::Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::Friend >&
      friends() const;

  // repeated .bgs.protocol.friends.v1.ReceivedInvitation received_invitations = 7;
  int received_invitations_size() const;
  private:
  int _internal_received_invitations_size() const;
  public:
  void clear_received_invitations();
  ::bgs::protocol::friends::v1::ReceivedInvitation* mutable_received_invitations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::ReceivedInvitation >*
      mutable_received_invitations();
  private:
  const ::bgs::protocol::friends::v1::ReceivedInvitation& _internal_received_invitations(int index) const;
  ::bgs::protocol::friends::v1::ReceivedInvitation* _internal_add_received_invitations();
  public:
  const ::bgs::protocol::friends::v1::ReceivedInvitation& received_invitations(int index) const;
  ::bgs::protocol::friends::v1::ReceivedInvitation* add_received_invitations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::ReceivedInvitation >&
      received_invitations() const;

  // repeated .bgs.protocol.friends.v1.SentInvitation sent_invitations = 8;
  int sent_invitations_size() const;
  private:
  int _internal_sent_invitations_size() const;
  public:
  void clear_sent_invitations();
  ::bgs::protocol::friends::v1::SentInvitation* mutable_sent_invitations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::SentInvitation >*
      mutable_sent_invitations();
  private:
  const ::bgs::protocol::friends::v1::SentInvitation& _internal_sent_invitations(int index) const;
  ::bgs::protocol::friends::v1::SentInvitation* _internal_add_sent_invitations();
  public:
  const ::bgs::protocol::friends::v1::SentInvitation& sent_invitations(int index) const;
  ::bgs::protocol::friends::v1::SentInvitation* add_sent_invitations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::SentInvitation >&
      sent_invitations() const;

  // optional uint32 max_friends = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_max_friends() const;
  private:
  bool _internal_has_max_friends() const;
  public:
  PROTOBUF_DEPRECATED void clear_max_friends();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 max_friends() const;
  PROTOBUF_DEPRECATED void set_max_friends(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_friends() const;
  void _internal_set_max_friends(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_received_invitations = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_max_received_invitations() const;
  private:
  bool _internal_has_max_received_invitations() const;
  public:
  PROTOBUF_DEPRECATED void clear_max_received_invitations();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 max_received_invitations() const;
  PROTOBUF_DEPRECATED void set_max_received_invitations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_received_invitations() const;
  void _internal_set_max_received_invitations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_sent_invitations = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_max_sent_invitations() const;
  private:
  bool _internal_has_max_sent_invitations() const;
  public:
  PROTOBUF_DEPRECATED void clear_max_sent_invitations();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 max_sent_invitations() const;
  PROTOBUF_DEPRECATED void set_max_sent_invitations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_sent_invitations() const;
  void _internal_set_max_sent_invitations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.friends.v1.SubscribeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role > role_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::Friend > friends_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::ReceivedInvitation > received_invitations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::SentInvitation > sent_invitations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_friends_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_received_invitations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_sent_invitations_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AcceptInvitationOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.friends.v1.AcceptInvitationOptions) */ {
 public:
  AcceptInvitationOptions();
  virtual ~AcceptInvitationOptions();

  AcceptInvitationOptions(const AcceptInvitationOptions& from);
  AcceptInvitationOptions(AcceptInvitationOptions&& from) noexcept
    : AcceptInvitationOptions() {
    *this = ::std::move(from);
  }

  inline AcceptInvitationOptions& operator=(const AcceptInvitationOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptInvitationOptions& operator=(AcceptInvitationOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptInvitationOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptInvitationOptions* internal_default_instance() {
    return reinterpret_cast<const AcceptInvitationOptions*>(
               &_AcceptInvitationOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AcceptInvitationOptions& a, AcceptInvitationOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptInvitationOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptInvitationOptions* New() const final {
    return CreateMaybeMessage<AcceptInvitationOptions>(nullptr);
  }

  AcceptInvitationOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptInvitationOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptInvitationOptions& from);
  void MergeFrom(const AcceptInvitationOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptInvitationOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.friends.v1.AcceptInvitationOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kProgramFieldNumber = 2,
  };
  // optional uint32 role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::uint32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 program = 2;
  bool has_program() const;
  private:
  bool _internal_has_program() const;
  public:
  void clear_program();
  ::PROTOBUF_NAMESPACE_ID::uint32 program() const;
  void set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_program() const;
  void _internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.friends.v1.AcceptInvitationOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 role_;
  ::PROTOBUF_NAMESPACE_ID::uint32 program_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Friend

// required .bgs.protocol.EntityId account_id = 1;
inline bool Friend::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_id_ != nullptr);
  return value;
}
inline bool Friend::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::bgs::protocol::EntityId& Friend::_internal_account_id() const {
  const ::bgs::protocol::EntityId* p = account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Friend::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.Friend.account_id)
  return _internal_account_id();
}
inline ::bgs::protocol::EntityId* Friend::release_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.Friend.account_id)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Friend::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000001u;
  if (account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    account_id_ = p;
  }
  return account_id_;
}
inline ::bgs::protocol::EntityId* Friend::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.Friend.account_id)
  return _internal_mutable_account_id();
}
inline void Friend::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.Friend.account_id)
}

// repeated .bgs.protocol.Attribute attribute = 2;
inline int Friend::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Friend::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* Friend::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.Friend.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
Friend::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.Friend.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& Friend::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& Friend::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.Friend.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* Friend::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* Friend::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.Friend.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
Friend::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.Friend.attribute)
  return attribute_;
}

// repeated uint32 role = 3 [packed = true];
inline int Friend::_internal_role_size() const {
  return role_.size();
}
inline int Friend::role_size() const {
  return _internal_role_size();
}
inline void Friend::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Friend::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Friend::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.Friend.role)
  return _internal_role(index);
}
inline void Friend::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.Friend.role)
}
inline void Friend::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void Friend::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.Friend.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Friend::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Friend::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.Friend.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Friend::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Friend::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.Friend.role)
  return _internal_mutable_role();
}

// optional uint64 privileges = 4;
inline bool Friend::_internal_has_privileges() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Friend::has_privileges() const {
  return _internal_has_privileges();
}
inline void Friend::clear_privileges() {
  privileges_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Friend::_internal_privileges() const {
  return privileges_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Friend::privileges() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.Friend.privileges)
  return _internal_privileges();
}
inline void Friend::_internal_set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  privileges_ = value;
}
inline void Friend::set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_privileges(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.Friend.privileges)
}

// optional uint64 attributes_epoch = 5 [deprecated = true];
inline bool Friend::_internal_has_attributes_epoch() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Friend::has_attributes_epoch() const {
  return _internal_has_attributes_epoch();
}
inline void Friend::clear_attributes_epoch() {
  attributes_epoch_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Friend::_internal_attributes_epoch() const {
  return attributes_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Friend::attributes_epoch() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.Friend.attributes_epoch)
  return _internal_attributes_epoch();
}
inline void Friend::_internal_set_attributes_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  attributes_epoch_ = value;
}
inline void Friend::set_attributes_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attributes_epoch(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.Friend.attributes_epoch)
}

// optional uint64 creation_time = 6;
inline bool Friend::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Friend::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void Friend::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Friend::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Friend::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.Friend.creation_time)
  return _internal_creation_time();
}
inline void Friend::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  creation_time_ = value;
}
inline void Friend::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.Friend.creation_time)
}

// -------------------------------------------------------------------

// FriendOfFriend

// optional .bgs.protocol.EntityId account_id = 1;
inline bool FriendOfFriend::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || account_id_ != nullptr);
  return value;
}
inline bool FriendOfFriend::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::bgs::protocol::EntityId& FriendOfFriend::_internal_account_id() const {
  const ::bgs::protocol::EntityId* p = account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& FriendOfFriend::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendOfFriend.account_id)
  return _internal_account_id();
}
inline ::bgs::protocol::EntityId* FriendOfFriend::release_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.FriendOfFriend.account_id)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* FriendOfFriend::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000004u;
  if (account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    account_id_ = p;
  }
  return account_id_;
}
inline ::bgs::protocol::EntityId* FriendOfFriend::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.FriendOfFriend.account_id)
  return _internal_mutable_account_id();
}
inline void FriendOfFriend::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.FriendOfFriend.account_id)
}

// repeated uint32 role = 3 [packed = true];
inline int FriendOfFriend::_internal_role_size() const {
  return role_.size();
}
inline int FriendOfFriend::role_size() const {
  return _internal_role_size();
}
inline void FriendOfFriend::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FriendOfFriend::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FriendOfFriend::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendOfFriend.role)
  return _internal_role(index);
}
inline void FriendOfFriend::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendOfFriend.role)
}
inline void FriendOfFriend::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void FriendOfFriend::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.FriendOfFriend.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FriendOfFriend::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FriendOfFriend::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.FriendOfFriend.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FriendOfFriend::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FriendOfFriend::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.FriendOfFriend.role)
  return _internal_mutable_role();
}

// optional uint64 privileges = 4;
inline bool FriendOfFriend::_internal_has_privileges() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FriendOfFriend::has_privileges() const {
  return _internal_has_privileges();
}
inline void FriendOfFriend::clear_privileges() {
  privileges_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FriendOfFriend::_internal_privileges() const {
  return privileges_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FriendOfFriend::privileges() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendOfFriend.privileges)
  return _internal_privileges();
}
inline void FriendOfFriend::_internal_set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  privileges_ = value;
}
inline void FriendOfFriend::set_privileges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_privileges(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendOfFriend.privileges)
}

// optional string full_name = 6;
inline bool FriendOfFriend::_internal_has_full_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendOfFriend::has_full_name() const {
  return _internal_has_full_name();
}
inline void FriendOfFriend::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendOfFriend::full_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendOfFriend.full_name)
  return _internal_full_name();
}
inline void FriendOfFriend::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendOfFriend.full_name)
}
inline std::string* FriendOfFriend::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.FriendOfFriend.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& FriendOfFriend::_internal_full_name() const {
  return full_name_.GetNoArena();
}
inline void FriendOfFriend::_internal_set_full_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendOfFriend::set_full_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  full_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.friends.v1.FriendOfFriend.full_name)
}
inline void FriendOfFriend::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.friends.v1.FriendOfFriend.full_name)
}
inline void FriendOfFriend::set_full_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.friends.v1.FriendOfFriend.full_name)
}
inline std::string* FriendOfFriend::_internal_mutable_full_name() {
  _has_bits_[0] |= 0x00000001u;
  return full_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendOfFriend::release_full_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.FriendOfFriend.full_name)
  if (!_internal_has_full_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return full_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendOfFriend::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  full_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.FriendOfFriend.full_name)
}

// optional string battle_tag = 7;
inline bool FriendOfFriend::_internal_has_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendOfFriend::has_battle_tag() const {
  return _internal_has_battle_tag();
}
inline void FriendOfFriend::clear_battle_tag() {
  battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendOfFriend::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendOfFriend.battle_tag)
  return _internal_battle_tag();
}
inline void FriendOfFriend::set_battle_tag(const std::string& value) {
  _internal_set_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendOfFriend.battle_tag)
}
inline std::string* FriendOfFriend::mutable_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.FriendOfFriend.battle_tag)
  return _internal_mutable_battle_tag();
}
inline const std::string& FriendOfFriend::_internal_battle_tag() const {
  return battle_tag_.GetNoArena();
}
inline void FriendOfFriend::_internal_set_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendOfFriend::set_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.friends.v1.FriendOfFriend.battle_tag)
}
inline void FriendOfFriend::set_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.friends.v1.FriendOfFriend.battle_tag)
}
inline void FriendOfFriend::set_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.friends.v1.FriendOfFriend.battle_tag)
}
inline std::string* FriendOfFriend::_internal_mutable_battle_tag() {
  _has_bits_[0] |= 0x00000002u;
  return battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendOfFriend::release_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.FriendOfFriend.battle_tag)
  if (!_internal_has_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendOfFriend::set_allocated_battle_tag(std::string* battle_tag) {
  if (battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.FriendOfFriend.battle_tag)
}

// -------------------------------------------------------------------

// ReceivedInvitation

// required fixed64 id = 1;
inline bool ReceivedInvitation::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReceivedInvitation::has_id() const {
  return _internal_has_id();
}
inline void ReceivedInvitation::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReceivedInvitation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReceivedInvitation::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.ReceivedInvitation.id)
  return _internal_id();
}
inline void ReceivedInvitation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void ReceivedInvitation::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.ReceivedInvitation.id)
}

// required .bgs.protocol.Identity inviter_identity = 2;
inline bool ReceivedInvitation::_internal_has_inviter_identity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || inviter_identity_ != nullptr);
  return value;
}
inline bool ReceivedInvitation::has_inviter_identity() const {
  return _internal_has_inviter_identity();
}
inline const ::bgs::protocol::Identity& ReceivedInvitation::_internal_inviter_identity() const {
  const ::bgs::protocol::Identity* p = inviter_identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::Identity*>(
      &::bgs::protocol::_Identity_default_instance_);
}
inline const ::bgs::protocol::Identity& ReceivedInvitation::inviter_identity() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.ReceivedInvitation.inviter_identity)
  return _internal_inviter_identity();
}
inline ::bgs::protocol::Identity* ReceivedInvitation::release_inviter_identity() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.ReceivedInvitation.inviter_identity)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::Identity* temp = inviter_identity_;
  inviter_identity_ = nullptr;
  return temp;
}
inline ::bgs::protocol::Identity* ReceivedInvitation::_internal_mutable_inviter_identity() {
  _has_bits_[0] |= 0x00000004u;
  if (inviter_identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::Identity>(GetArenaNoVirtual());
    inviter_identity_ = p;
  }
  return inviter_identity_;
}
inline ::bgs::protocol::Identity* ReceivedInvitation::mutable_inviter_identity() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.ReceivedInvitation.inviter_identity)
  return _internal_mutable_inviter_identity();
}
inline void ReceivedInvitation::set_allocated_inviter_identity(::bgs::protocol::Identity* inviter_identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviter_identity_);
  }
  if (inviter_identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inviter_identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviter_identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inviter_identity_ = inviter_identity;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.ReceivedInvitation.inviter_identity)
}

// required .bgs.protocol.Identity invitee_identity = 3;
inline bool ReceivedInvitation::_internal_has_invitee_identity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || invitee_identity_ != nullptr);
  return value;
}
inline bool ReceivedInvitation::has_invitee_identity() const {
  return _internal_has_invitee_identity();
}
inline const ::bgs::protocol::Identity& ReceivedInvitation::_internal_invitee_identity() const {
  const ::bgs::protocol::Identity* p = invitee_identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::Identity*>(
      &::bgs::protocol::_Identity_default_instance_);
}
inline const ::bgs::protocol::Identity& ReceivedInvitation::invitee_identity() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.ReceivedInvitation.invitee_identity)
  return _internal_invitee_identity();
}
inline ::bgs::protocol::Identity* ReceivedInvitation::release_invitee_identity() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.ReceivedInvitation.invitee_identity)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::Identity* temp = invitee_identity_;
  invitee_identity_ = nullptr;
  return temp;
}
inline ::bgs::protocol::Identity* ReceivedInvitation::_internal_mutable_invitee_identity() {
  _has_bits_[0] |= 0x00000008u;
  if (invitee_identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::Identity>(GetArenaNoVirtual());
    invitee_identity_ = p;
  }
  return invitee_identity_;
}
inline ::bgs::protocol::Identity* ReceivedInvitation::mutable_invitee_identity() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.ReceivedInvitation.invitee_identity)
  return _internal_mutable_invitee_identity();
}
inline void ReceivedInvitation::set_allocated_invitee_identity(::bgs::protocol::Identity* invitee_identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitee_identity_);
  }
  if (invitee_identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invitee_identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitee_identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  invitee_identity_ = invitee_identity;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.ReceivedInvitation.invitee_identity)
}

// optional string inviter_name = 4;
inline bool ReceivedInvitation::_internal_has_inviter_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReceivedInvitation::has_inviter_name() const {
  return _internal_has_inviter_name();
}
inline void ReceivedInvitation::clear_inviter_name() {
  inviter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReceivedInvitation::inviter_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.ReceivedInvitation.inviter_name)
  return _internal_inviter_name();
}
inline void ReceivedInvitation::set_inviter_name(const std::string& value) {
  _internal_set_inviter_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.ReceivedInvitation.inviter_name)
}
inline std::string* ReceivedInvitation::mutable_inviter_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.ReceivedInvitation.inviter_name)
  return _internal_mutable_inviter_name();
}
inline const std::string& ReceivedInvitation::_internal_inviter_name() const {
  return inviter_name_.GetNoArena();
}
inline void ReceivedInvitation::_internal_set_inviter_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReceivedInvitation::set_inviter_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  inviter_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.friends.v1.ReceivedInvitation.inviter_name)
}
inline void ReceivedInvitation::set_inviter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.friends.v1.ReceivedInvitation.inviter_name)
}
inline void ReceivedInvitation::set_inviter_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.friends.v1.ReceivedInvitation.inviter_name)
}
inline std::string* ReceivedInvitation::_internal_mutable_inviter_name() {
  _has_bits_[0] |= 0x00000001u;
  return inviter_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReceivedInvitation::release_inviter_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.ReceivedInvitation.inviter_name)
  if (!_internal_has_inviter_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return inviter_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReceivedInvitation::set_allocated_inviter_name(std::string* inviter_name) {
  if (inviter_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inviter_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviter_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.ReceivedInvitation.inviter_name)
}

// optional string invitee_name = 5;
inline bool ReceivedInvitation::_internal_has_invitee_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReceivedInvitation::has_invitee_name() const {
  return _internal_has_invitee_name();
}
inline void ReceivedInvitation::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReceivedInvitation::invitee_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.ReceivedInvitation.invitee_name)
  return _internal_invitee_name();
}
inline void ReceivedInvitation::set_invitee_name(const std::string& value) {
  _internal_set_invitee_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.ReceivedInvitation.invitee_name)
}
inline std::string* ReceivedInvitation::mutable_invitee_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.ReceivedInvitation.invitee_name)
  return _internal_mutable_invitee_name();
}
inline const std::string& ReceivedInvitation::_internal_invitee_name() const {
  return invitee_name_.GetNoArena();
}
inline void ReceivedInvitation::_internal_set_invitee_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  invitee_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReceivedInvitation::set_invitee_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  invitee_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.friends.v1.ReceivedInvitation.invitee_name)
}
inline void ReceivedInvitation::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  invitee_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.friends.v1.ReceivedInvitation.invitee_name)
}
inline void ReceivedInvitation::set_invitee_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  invitee_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.friends.v1.ReceivedInvitation.invitee_name)
}
inline std::string* ReceivedInvitation::_internal_mutable_invitee_name() {
  _has_bits_[0] |= 0x00000002u;
  return invitee_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReceivedInvitation::release_invitee_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.ReceivedInvitation.invitee_name)
  if (!_internal_has_invitee_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return invitee_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReceivedInvitation::set_allocated_invitee_name(std::string* invitee_name) {
  if (invitee_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  invitee_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.ReceivedInvitation.invitee_name)
}

// optional uint64 creation_time = 7;
inline bool ReceivedInvitation::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReceivedInvitation::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void ReceivedInvitation::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReceivedInvitation::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReceivedInvitation::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.ReceivedInvitation.creation_time)
  return _internal_creation_time();
}
inline void ReceivedInvitation::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  creation_time_ = value;
}
inline void ReceivedInvitation::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.ReceivedInvitation.creation_time)
}

// optional fixed32 program = 9;
inline bool ReceivedInvitation::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReceivedInvitation::has_program() const {
  return _internal_has_program();
}
inline void ReceivedInvitation::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReceivedInvitation::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReceivedInvitation::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.ReceivedInvitation.program)
  return _internal_program();
}
inline void ReceivedInvitation::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  program_ = value;
}
inline void ReceivedInvitation::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.ReceivedInvitation.program)
}

// -------------------------------------------------------------------

// FriendInvitation

// repeated uint32 role = 2 [packed = true];
inline int FriendInvitation::_internal_role_size() const {
  return role_.size();
}
inline int FriendInvitation::role_size() const {
  return _internal_role_size();
}
inline void FriendInvitation::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FriendInvitation::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FriendInvitation::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendInvitation.role)
  return _internal_role(index);
}
inline void FriendInvitation::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendInvitation.role)
}
inline void FriendInvitation::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void FriendInvitation::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.FriendInvitation.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FriendInvitation::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FriendInvitation::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.FriendInvitation.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FriendInvitation::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FriendInvitation::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.FriendInvitation.role)
  return _internal_mutable_role();
}

// repeated .bgs.protocol.Attribute attribute = 3;
inline int FriendInvitation::_internal_attribute_size() const {
  return attribute_.size();
}
inline int FriendInvitation::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* FriendInvitation::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.FriendInvitation.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
FriendInvitation::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.FriendInvitation.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& FriendInvitation::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& FriendInvitation::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendInvitation.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* FriendInvitation::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* FriendInvitation::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.FriendInvitation.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
FriendInvitation::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.FriendInvitation.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// SentInvitation

// optional fixed64 id = 1;
inline bool SentInvitation::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SentInvitation::has_id() const {
  return _internal_has_id();
}
inline void SentInvitation::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SentInvitation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SentInvitation::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SentInvitation.id)
  return _internal_id();
}
inline void SentInvitation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void SentInvitation::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.SentInvitation.id)
}

// optional string target_name = 2;
inline bool SentInvitation::_internal_has_target_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SentInvitation::has_target_name() const {
  return _internal_has_target_name();
}
inline void SentInvitation::clear_target_name() {
  target_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SentInvitation::target_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SentInvitation.target_name)
  return _internal_target_name();
}
inline void SentInvitation::set_target_name(const std::string& value) {
  _internal_set_target_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.SentInvitation.target_name)
}
inline std::string* SentInvitation::mutable_target_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.SentInvitation.target_name)
  return _internal_mutable_target_name();
}
inline const std::string& SentInvitation::_internal_target_name() const {
  return target_name_.GetNoArena();
}
inline void SentInvitation::_internal_set_target_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SentInvitation::set_target_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.friends.v1.SentInvitation.target_name)
}
inline void SentInvitation::set_target_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.friends.v1.SentInvitation.target_name)
}
inline void SentInvitation::set_target_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.friends.v1.SentInvitation.target_name)
}
inline std::string* SentInvitation::_internal_mutable_target_name() {
  _has_bits_[0] |= 0x00000001u;
  return target_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SentInvitation::release_target_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.SentInvitation.target_name)
  if (!_internal_has_target_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SentInvitation::set_allocated_target_name(std::string* target_name) {
  if (target_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.SentInvitation.target_name)
}

// optional uint32 role = 3;
inline bool SentInvitation::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SentInvitation::has_role() const {
  return _internal_has_role();
}
inline void SentInvitation::clear_role() {
  role_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SentInvitation::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SentInvitation::role() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SentInvitation.role)
  return _internal_role();
}
inline void SentInvitation::_internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  role_ = value;
}
inline void SentInvitation::set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.SentInvitation.role)
}

// repeated .bgs.protocol.Attribute attribute = 4;
inline int SentInvitation::_internal_attribute_size() const {
  return attribute_.size();
}
inline int SentInvitation::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* SentInvitation::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.SentInvitation.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
SentInvitation::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.SentInvitation.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& SentInvitation::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& SentInvitation::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SentInvitation.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* SentInvitation::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* SentInvitation::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.SentInvitation.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
SentInvitation::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.SentInvitation.attribute)
  return attribute_;
}

// optional uint64 creation_time = 5;
inline bool SentInvitation::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SentInvitation::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void SentInvitation::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SentInvitation::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SentInvitation::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SentInvitation.creation_time)
  return _internal_creation_time();
}
inline void SentInvitation::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  creation_time_ = value;
}
inline void SentInvitation::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.SentInvitation.creation_time)
}

// optional fixed32 program = 6;
inline bool SentInvitation::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SentInvitation::has_program() const {
  return _internal_has_program();
}
inline void SentInvitation::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SentInvitation::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SentInvitation::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SentInvitation.program)
  return _internal_program();
}
inline void SentInvitation::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  program_ = value;
}
inline void SentInvitation::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.SentInvitation.program)
}

// -------------------------------------------------------------------

// FriendInvitationParams

// optional string target_email = 1;
inline bool FriendInvitationParams::_internal_has_target_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendInvitationParams::has_target_email() const {
  return _internal_has_target_email();
}
inline void FriendInvitationParams::clear_target_email() {
  target_email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendInvitationParams::target_email() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendInvitationParams.target_email)
  return _internal_target_email();
}
inline void FriendInvitationParams::set_target_email(const std::string& value) {
  _internal_set_target_email(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendInvitationParams.target_email)
}
inline std::string* FriendInvitationParams::mutable_target_email() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.FriendInvitationParams.target_email)
  return _internal_mutable_target_email();
}
inline const std::string& FriendInvitationParams::_internal_target_email() const {
  return target_email_.GetNoArena();
}
inline void FriendInvitationParams::_internal_set_target_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendInvitationParams::set_target_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.friends.v1.FriendInvitationParams.target_email)
}
inline void FriendInvitationParams::set_target_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.friends.v1.FriendInvitationParams.target_email)
}
inline void FriendInvitationParams::set_target_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.friends.v1.FriendInvitationParams.target_email)
}
inline std::string* FriendInvitationParams::_internal_mutable_target_email() {
  _has_bits_[0] |= 0x00000001u;
  return target_email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendInvitationParams::release_target_email() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.FriendInvitationParams.target_email)
  if (!_internal_has_target_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInvitationParams::set_allocated_target_email(std::string* target_email) {
  if (target_email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_email);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.FriendInvitationParams.target_email)
}

// optional string target_battle_tag = 2;
inline bool FriendInvitationParams::_internal_has_target_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendInvitationParams::has_target_battle_tag() const {
  return _internal_has_target_battle_tag();
}
inline void FriendInvitationParams::clear_target_battle_tag() {
  target_battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendInvitationParams::target_battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag)
  return _internal_target_battle_tag();
}
inline void FriendInvitationParams::set_target_battle_tag(const std::string& value) {
  _internal_set_target_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag)
}
inline std::string* FriendInvitationParams::mutable_target_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag)
  return _internal_mutable_target_battle_tag();
}
inline const std::string& FriendInvitationParams::_internal_target_battle_tag() const {
  return target_battle_tag_.GetNoArena();
}
inline void FriendInvitationParams::_internal_set_target_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  target_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendInvitationParams::set_target_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  target_battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag)
}
inline void FriendInvitationParams::set_target_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  target_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag)
}
inline void FriendInvitationParams::set_target_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  target_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag)
}
inline std::string* FriendInvitationParams::_internal_mutable_target_battle_tag() {
  _has_bits_[0] |= 0x00000002u;
  return target_battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendInvitationParams::release_target_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag)
  if (!_internal_has_target_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return target_battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInvitationParams::set_allocated_target_battle_tag(std::string* target_battle_tag) {
  if (target_battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.FriendInvitationParams.target_battle_tag)
}

// repeated uint32 role = 6 [packed = true];
inline int FriendInvitationParams::_internal_role_size() const {
  return role_.size();
}
inline int FriendInvitationParams::role_size() const {
  return _internal_role_size();
}
inline void FriendInvitationParams::clear_role() {
  role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FriendInvitationParams::_internal_role(int index) const {
  return role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FriendInvitationParams::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendInvitationParams.role)
  return _internal_role(index);
}
inline void FriendInvitationParams::set_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendInvitationParams.role)
}
inline void FriendInvitationParams::_internal_add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  role_.Add(value);
}
inline void FriendInvitationParams::add_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.FriendInvitationParams.role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FriendInvitationParams::_internal_role() const {
  return role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FriendInvitationParams::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.FriendInvitationParams.role)
  return _internal_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FriendInvitationParams::_internal_mutable_role() {
  return &role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FriendInvitationParams::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.FriendInvitationParams.role)
  return _internal_mutable_role();
}

// repeated .bgs.protocol.Attribute attribute = 8;
inline int FriendInvitationParams::_internal_attribute_size() const {
  return attribute_.size();
}
inline int FriendInvitationParams::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* FriendInvitationParams::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.FriendInvitationParams.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
FriendInvitationParams::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.FriendInvitationParams.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& FriendInvitationParams::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& FriendInvitationParams::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendInvitationParams.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* FriendInvitationParams::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* FriendInvitationParams::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.FriendInvitationParams.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
FriendInvitationParams::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.FriendInvitationParams.attribute)
  return attribute_;
}

// optional string target_name = 9;
inline bool FriendInvitationParams::_internal_has_target_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FriendInvitationParams::has_target_name() const {
  return _internal_has_target_name();
}
inline void FriendInvitationParams::clear_target_name() {
  target_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FriendInvitationParams::target_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendInvitationParams.target_name)
  return _internal_target_name();
}
inline void FriendInvitationParams::set_target_name(const std::string& value) {
  _internal_set_target_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendInvitationParams.target_name)
}
inline std::string* FriendInvitationParams::mutable_target_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.FriendInvitationParams.target_name)
  return _internal_mutable_target_name();
}
inline const std::string& FriendInvitationParams::_internal_target_name() const {
  return target_name_.GetNoArena();
}
inline void FriendInvitationParams::_internal_set_target_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendInvitationParams::set_target_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  target_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.friends.v1.FriendInvitationParams.target_name)
}
inline void FriendInvitationParams::set_target_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.friends.v1.FriendInvitationParams.target_name)
}
inline void FriendInvitationParams::set_target_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.friends.v1.FriendInvitationParams.target_name)
}
inline std::string* FriendInvitationParams::_internal_mutable_target_name() {
  _has_bits_[0] |= 0x00000004u;
  return target_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendInvitationParams::release_target_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.friends.v1.FriendInvitationParams.target_name)
  if (!_internal_has_target_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return target_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInvitationParams::set_allocated_target_name(std::string* target_name) {
  if (target_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  target_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.friends.v1.FriendInvitationParams.target_name)
}

// optional fixed32 program = 10 [deprecated = true];
inline bool FriendInvitationParams::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FriendInvitationParams::has_program() const {
  return _internal_has_program();
}
inline void FriendInvitationParams::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FriendInvitationParams::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FriendInvitationParams::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.FriendInvitationParams.program)
  return _internal_program();
}
inline void FriendInvitationParams::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  program_ = value;
}
inline void FriendInvitationParams::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.FriendInvitationParams.program)
}

// -------------------------------------------------------------------

// SubscribeResponse

// optional uint32 max_friends = 1 [deprecated = true];
inline bool SubscribeResponse::_internal_has_max_friends() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubscribeResponse::has_max_friends() const {
  return _internal_has_max_friends();
}
inline void SubscribeResponse::clear_max_friends() {
  max_friends_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscribeResponse::_internal_max_friends() const {
  return max_friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscribeResponse::max_friends() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SubscribeResponse.max_friends)
  return _internal_max_friends();
}
inline void SubscribeResponse::_internal_set_max_friends(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  max_friends_ = value;
}
inline void SubscribeResponse::set_max_friends(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_friends(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.SubscribeResponse.max_friends)
}

// optional uint32 max_received_invitations = 2 [deprecated = true];
inline bool SubscribeResponse::_internal_has_max_received_invitations() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubscribeResponse::has_max_received_invitations() const {
  return _internal_has_max_received_invitations();
}
inline void SubscribeResponse::clear_max_received_invitations() {
  max_received_invitations_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscribeResponse::_internal_max_received_invitations() const {
  return max_received_invitations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscribeResponse::max_received_invitations() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SubscribeResponse.max_received_invitations)
  return _internal_max_received_invitations();
}
inline void SubscribeResponse::_internal_set_max_received_invitations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_received_invitations_ = value;
}
inline void SubscribeResponse::set_max_received_invitations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_received_invitations(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.SubscribeResponse.max_received_invitations)
}

// optional uint32 max_sent_invitations = 3 [deprecated = true];
inline bool SubscribeResponse::_internal_has_max_sent_invitations() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubscribeResponse::has_max_sent_invitations() const {
  return _internal_has_max_sent_invitations();
}
inline void SubscribeResponse::clear_max_sent_invitations() {
  max_sent_invitations_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscribeResponse::_internal_max_sent_invitations() const {
  return max_sent_invitations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscribeResponse::max_sent_invitations() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SubscribeResponse.max_sent_invitations)
  return _internal_max_sent_invitations();
}
inline void SubscribeResponse::_internal_set_max_sent_invitations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_sent_invitations_ = value;
}
inline void SubscribeResponse::set_max_sent_invitations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_sent_invitations(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.SubscribeResponse.max_sent_invitations)
}

// repeated .bgs.protocol.Role role = 4;
inline int SubscribeResponse::_internal_role_size() const {
  return role_.size();
}
inline int SubscribeResponse::role_size() const {
  return _internal_role_size();
}
inline ::bgs::protocol::Role* SubscribeResponse::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.SubscribeResponse.role)
  return role_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role >*
SubscribeResponse::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.SubscribeResponse.role)
  return &role_;
}
inline const ::bgs::protocol::Role& SubscribeResponse::_internal_role(int index) const {
  return role_.Get(index);
}
inline const ::bgs::protocol::Role& SubscribeResponse::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SubscribeResponse.role)
  return _internal_role(index);
}
inline ::bgs::protocol::Role* SubscribeResponse::_internal_add_role() {
  return role_.Add();
}
inline ::bgs::protocol::Role* SubscribeResponse::add_role() {
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.SubscribeResponse.role)
  return _internal_add_role();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Role >&
SubscribeResponse::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.SubscribeResponse.role)
  return role_;
}

// repeated .bgs.protocol.friends.v1.Friend friends = 5;
inline int SubscribeResponse::_internal_friends_size() const {
  return friends_.size();
}
inline int SubscribeResponse::friends_size() const {
  return _internal_friends_size();
}
inline void SubscribeResponse::clear_friends() {
  friends_.Clear();
}
inline ::bgs::protocol::friends::v1::Friend* SubscribeResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.SubscribeResponse.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::Friend >*
SubscribeResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.SubscribeResponse.friends)
  return &friends_;
}
inline const ::bgs::protocol::friends::v1::Friend& SubscribeResponse::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::bgs::protocol::friends::v1::Friend& SubscribeResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SubscribeResponse.friends)
  return _internal_friends(index);
}
inline ::bgs::protocol::friends::v1::Friend* SubscribeResponse::_internal_add_friends() {
  return friends_.Add();
}
inline ::bgs::protocol::friends::v1::Friend* SubscribeResponse::add_friends() {
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.SubscribeResponse.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::Friend >&
SubscribeResponse::friends() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.SubscribeResponse.friends)
  return friends_;
}

// repeated .bgs.protocol.friends.v1.ReceivedInvitation received_invitations = 7;
inline int SubscribeResponse::_internal_received_invitations_size() const {
  return received_invitations_.size();
}
inline int SubscribeResponse::received_invitations_size() const {
  return _internal_received_invitations_size();
}
inline void SubscribeResponse::clear_received_invitations() {
  received_invitations_.Clear();
}
inline ::bgs::protocol::friends::v1::ReceivedInvitation* SubscribeResponse::mutable_received_invitations(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.SubscribeResponse.received_invitations)
  return received_invitations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::ReceivedInvitation >*
SubscribeResponse::mutable_received_invitations() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.SubscribeResponse.received_invitations)
  return &received_invitations_;
}
inline const ::bgs::protocol::friends::v1::ReceivedInvitation& SubscribeResponse::_internal_received_invitations(int index) const {
  return received_invitations_.Get(index);
}
inline const ::bgs::protocol::friends::v1::ReceivedInvitation& SubscribeResponse::received_invitations(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SubscribeResponse.received_invitations)
  return _internal_received_invitations(index);
}
inline ::bgs::protocol::friends::v1::ReceivedInvitation* SubscribeResponse::_internal_add_received_invitations() {
  return received_invitations_.Add();
}
inline ::bgs::protocol::friends::v1::ReceivedInvitation* SubscribeResponse::add_received_invitations() {
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.SubscribeResponse.received_invitations)
  return _internal_add_received_invitations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::ReceivedInvitation >&
SubscribeResponse::received_invitations() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.SubscribeResponse.received_invitations)
  return received_invitations_;
}

// repeated .bgs.protocol.friends.v1.SentInvitation sent_invitations = 8;
inline int SubscribeResponse::_internal_sent_invitations_size() const {
  return sent_invitations_.size();
}
inline int SubscribeResponse::sent_invitations_size() const {
  return _internal_sent_invitations_size();
}
inline void SubscribeResponse::clear_sent_invitations() {
  sent_invitations_.Clear();
}
inline ::bgs::protocol::friends::v1::SentInvitation* SubscribeResponse::mutable_sent_invitations(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.friends.v1.SubscribeResponse.sent_invitations)
  return sent_invitations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::SentInvitation >*
SubscribeResponse::mutable_sent_invitations() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.friends.v1.SubscribeResponse.sent_invitations)
  return &sent_invitations_;
}
inline const ::bgs::protocol::friends::v1::SentInvitation& SubscribeResponse::_internal_sent_invitations(int index) const {
  return sent_invitations_.Get(index);
}
inline const ::bgs::protocol::friends::v1::SentInvitation& SubscribeResponse::sent_invitations(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.SubscribeResponse.sent_invitations)
  return _internal_sent_invitations(index);
}
inline ::bgs::protocol::friends::v1::SentInvitation* SubscribeResponse::_internal_add_sent_invitations() {
  return sent_invitations_.Add();
}
inline ::bgs::protocol::friends::v1::SentInvitation* SubscribeResponse::add_sent_invitations() {
  // @@protoc_insertion_point(field_add:bgs.protocol.friends.v1.SubscribeResponse.sent_invitations)
  return _internal_add_sent_invitations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::friends::v1::SentInvitation >&
SubscribeResponse::sent_invitations() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.friends.v1.SubscribeResponse.sent_invitations)
  return sent_invitations_;
}

// -------------------------------------------------------------------

// AcceptInvitationOptions

// optional uint32 role = 1;
inline bool AcceptInvitationOptions::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AcceptInvitationOptions::has_role() const {
  return _internal_has_role();
}
inline void AcceptInvitationOptions::clear_role() {
  role_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptInvitationOptions::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptInvitationOptions::role() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.AcceptInvitationOptions.role)
  return _internal_role();
}
inline void AcceptInvitationOptions::_internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  role_ = value;
}
inline void AcceptInvitationOptions::set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.AcceptInvitationOptions.role)
}

// optional fixed32 program = 2;
inline bool AcceptInvitationOptions::_internal_has_program() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AcceptInvitationOptions::has_program() const {
  return _internal_has_program();
}
inline void AcceptInvitationOptions::clear_program() {
  program_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptInvitationOptions::_internal_program() const {
  return program_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptInvitationOptions::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.friends.v1.AcceptInvitationOptions.program)
  return _internal_program();
}
inline void AcceptInvitationOptions::_internal_set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  program_ = value;
}
inline void AcceptInvitationOptions::set_program(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.friends.v1.AcceptInvitationOptions.program)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace friends
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2ffriends_5ftypes_2eproto
