// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/game_utilities_types.proto

#include "bgs/low/pb/client/game_utilities_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace game_utilities {
namespace v1 {
class PlayerVariablesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerVariables> _instance;
} _PlayerVariables_default_instance_;
class ClientInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientInfo> _instance;
} _ClientInfo_default_instance_;
}  // namespace v1
}  // namespace game_utilities
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ClientInfo_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::game_utilities::v1::_ClientInfo_default_instance_;
    new (ptr) ::bgs::protocol::game_utilities::v1::ClientInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::game_utilities::v1::ClientInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientInfo_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientInfo_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_PlayerVariables_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::game_utilities::v1::_PlayerVariables_default_instance_;
    new (ptr) ::bgs::protocol::game_utilities::v1::PlayerVariables();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::game_utilities::v1::PlayerVariables::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerVariables_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlayerVariables_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto}, {
      &scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::PlayerVariables, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::PlayerVariables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::PlayerVariables, identity_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::PlayerVariables, rating_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::PlayerVariables, attribute_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::ClientInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::ClientInfo, client_address_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::game_utilities::v1::ClientInfo, privileged_network_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::bgs::protocol::game_utilities::v1::PlayerVariables)},
  { 11, 18, sizeof(::bgs::protocol::game_utilities::v1::ClientInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::game_utilities::v1::_PlayerVariables_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::game_utilities::v1::_ClientInfo_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,bgs/low/pb/client/game_utilities_types"
  ".proto\022\036bgs.protocol.game_utilities.v1\032\'"
  "bgs/low/pb/client/attribute_types.proto\032"
  "$bgs/low/pb/client/entity_types.proto\"w\n"
  "\017PlayerVariables\022(\n\010identity\030\001 \002(\0132\026.bgs"
  ".protocol.Identity\022\016\n\006rating\030\002 \001(\001\022*\n\tat"
  "tribute\030\003 \003(\0132\027.bgs.protocol.Attribute\"@"
  "\n\nClientInfo\022\026\n\016client_address\030\001 \001(\t\022\032\n\022"
  "privileged_network\030\002 \001(\010B:\n\037bnet.protoco"
  "l.game_utilities.v1B\027GameUtilitiesTypesP"
  "roto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto_deps[2] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto_sccs[2] = {
  &scc_info_ClientInfo_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto.base,
  &scc_info_PlayerVariables_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto, "bgs/low/pb/client/game_utilities_types.proto", 404,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto, 2, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace game_utilities {
namespace v1 {

// ===================================================================

void PlayerVariables::InitAsDefaultInstance() {
  ::bgs::protocol::game_utilities::v1::_PlayerVariables_default_instance_._instance.get_mutable()->identity_ = const_cast< ::bgs::protocol::Identity*>(
      ::bgs::protocol::Identity::internal_default_instance());
}
class PlayerVariables::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerVariables>()._has_bits_);
  static const ::bgs::protocol::Identity& identity(const PlayerVariables* msg);
  static void set_has_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::Identity&
PlayerVariables::_Internal::identity(const PlayerVariables* msg) {
  return *msg->identity_;
}
void PlayerVariables::clear_identity() {
  if (identity_ != nullptr) identity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerVariables::clear_attribute() {
  attribute_.Clear();
}
PlayerVariables::PlayerVariables()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.game_utilities.v1.PlayerVariables)
}
PlayerVariables::PlayerVariables(const PlayerVariables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_identity()) {
    identity_ = new ::bgs::protocol::Identity(*from.identity_);
  } else {
    identity_ = nullptr;
  }
  rating_ = from.rating_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.game_utilities.v1.PlayerVariables)
}

void PlayerVariables::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerVariables_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto.base);
  ::memset(&identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rating_) -
      reinterpret_cast<char*>(&identity_)) + sizeof(rating_));
}

PlayerVariables::~PlayerVariables() {
  // @@protoc_insertion_point(destructor:bgs.protocol.game_utilities.v1.PlayerVariables)
  SharedDtor();
}

void PlayerVariables::SharedDtor() {
  if (this != internal_default_instance()) delete identity_;
}

void PlayerVariables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerVariables& PlayerVariables::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerVariables_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void PlayerVariables::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.game_utilities.v1.PlayerVariables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(identity_ != nullptr);
    identity_->Clear();
  }
  rating_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlayerVariables::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.Identity identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double rating = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_rating(&has_bits);
          rating_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerVariables::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.game_utilities.v1.PlayerVariables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.Identity identity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identity(this), target, stream);
  }

  // optional double rating = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rating(), target);
  }

  // repeated .bgs.protocol.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.game_utilities.v1.PlayerVariables)
  return target;
}

size_t PlayerVariables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.game_utilities.v1.PlayerVariables)
  size_t total_size = 0;

  // required .bgs.protocol.Identity identity = 1;
  if (_internal_has_identity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double rating = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerVariables::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.game_utilities.v1.PlayerVariables)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerVariables* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerVariables>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.game_utilities.v1.PlayerVariables)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.game_utilities.v1.PlayerVariables)
    MergeFrom(*source);
  }
}

void PlayerVariables::MergeFrom(const PlayerVariables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.game_utilities.v1.PlayerVariables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_identity()->::bgs::protocol::Identity::MergeFrom(from._internal_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      rating_ = from.rating_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerVariables::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.game_utilities.v1.PlayerVariables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerVariables::CopyFrom(const PlayerVariables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.game_utilities.v1.PlayerVariables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerVariables::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  if (_internal_has_identity()) {
    if (!identity_->IsInitialized()) return false;
  }
  return true;
}

void PlayerVariables::InternalSwap(PlayerVariables* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  swap(identity_, other->identity_);
  swap(rating_, other->rating_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerVariables::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientInfo::InitAsDefaultInstance() {
}
class ClientInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientInfo>()._has_bits_);
  static void set_has_client_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privileged_network(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientInfo::ClientInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.game_utilities.v1.ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_address()) {
    client_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_address_);
  }
  privileged_network_ = from.privileged_network_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.game_utilities.v1.ClientInfo)
}

void ClientInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientInfo_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto.base);
  client_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privileged_network_ = false;
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.game_utilities.v1.ClientInfo)
  SharedDtor();
}

void ClientInfo::SharedDtor() {
  client_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientInfo& ClientInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientInfo_bgs_2flow_2fpb_2fclient_2fgame_5futilities_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.game_utilities.v1.ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_address_.ClearNonDefaultToEmptyNoArena();
  }
  privileged_network_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string client_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.game_utilities.v1.ClientInfo.client_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool privileged_network = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_privileged_network(&has_bits);
          privileged_network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.game_utilities.v1.ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_address().data(), static_cast<int>(this->_internal_client_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.game_utilities.v1.ClientInfo.client_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_address(), target);
  }

  // optional bool privileged_network = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_privileged_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.game_utilities.v1.ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.game_utilities.v1.ClientInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string client_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_address());
    }

    // optional bool privileged_network = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.game_utilities.v1.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.game_utilities.v1.ClientInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.game_utilities.v1.ClientInfo)
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.game_utilities.v1.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      privileged_network_ = from.privileged_network_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.game_utilities.v1.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.game_utilities.v1.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_address_.Swap(&other->client_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(privileged_network_, other->privileged_network_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace game_utilities
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::game_utilities::v1::PlayerVariables* Arena::CreateMaybeMessage< ::bgs::protocol::game_utilities::v1::PlayerVariables >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::game_utilities::v1::PlayerVariables >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::game_utilities::v1::ClientInfo* Arena::CreateMaybeMessage< ::bgs::protocol::game_utilities::v1::ClientInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::game_utilities::v1::ClientInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
