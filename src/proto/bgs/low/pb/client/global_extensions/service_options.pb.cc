// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/global_extensions/service_options.proto

#include "bgs/low/pb/client/global_extensions/service_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BGSServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDKServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto;
namespace bgs {
namespace protocol {
class BGSServiceOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BGSServiceOptions> _instance;
} _BGSServiceOptions_default_instance_;
class SDKServiceOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDKServiceOptions> _instance;
} _SDKServiceOptions_default_instance_;
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_BGSServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_BGSServiceOptions_default_instance_;
    new (ptr) ::bgs::protocol::BGSServiceOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::BGSServiceOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BGSServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BGSServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto}, {}};

static void InitDefaultsscc_info_SDKServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_SDKServiceOptions_default_instance_;
    new (ptr) ::bgs::protocol::SDKServiceOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::SDKServiceOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDKServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SDKServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::BGSServiceOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::BGSServiceOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::BGSServiceOptions, descriptor_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::BGSServiceOptions, version_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::BGSServiceOptions, shard_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::SDKServiceOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::SDKServiceOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::SDKServiceOptions, inbound_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::SDKServiceOptions, outbound_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::SDKServiceOptions, use_client_id_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::bgs::protocol::BGSServiceOptions)},
  { 11, 19, sizeof(::bgs::protocol::SDKServiceOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_BGSServiceOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_SDKServiceOptions_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9bgs/low/pb/client/global_extensions/se"
  "rvice_options.proto\022\014bgs.protocol\032 googl"
  "e/protobuf/descriptor.proto\"Q\n\021BGSServic"
  "eOptions\022\027\n\017descriptor_name\030\001 \001(\t\022\017\n\007ver"
  "sion\030\004 \001(\r\022\022\n\nshard_name\030\005 \001(\t\"M\n\021SDKSer"
  "viceOptions\022\017\n\007inbound\030\001 \001(\010\022\020\n\010outbound"
  "\030\002 \001(\010\022\025\n\ruse_client_id\030\003 \001(\010:[\n\017service"
  "_options\022\037.google.protobuf.ServiceOption"
  "s\030\220\277\005 \001(\0132\037.bgs.protocol.BGSServiceOptio"
  "ns:_\n\023sdk_service_options\022\037.google.proto"
  "buf.ServiceOptions\030\221\277\005 \001(\0132\037.bgs.protoco"
  "l.SDKServiceOptionsB$\n\rbnet.protocolB\023Se"
  "rviceOptionsProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto_sccs[2] = {
  &scc_info_BGSServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto.base,
  &scc_info_SDKServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto, "bgs/low/pb/client/global_extensions/service_options.proto", 497,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto, 2, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto)), true);
namespace bgs {
namespace protocol {

// ===================================================================

void BGSServiceOptions::InitAsDefaultInstance() {
}
class BGSServiceOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<BGSServiceOptions>()._has_bits_);
  static void set_has_descriptor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shard_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BGSServiceOptions::BGSServiceOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.BGSServiceOptions)
}
BGSServiceOptions::BGSServiceOptions(const BGSServiceOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_descriptor_name()) {
    descriptor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
  }
  shard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shard_name()) {
    shard_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shard_name_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.BGSServiceOptions)
}

void BGSServiceOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BGSServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto.base);
  descriptor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

BGSServiceOptions::~BGSServiceOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.BGSServiceOptions)
  SharedDtor();
}

void BGSServiceOptions::SharedDtor() {
  descriptor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shard_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BGSServiceOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BGSServiceOptions& BGSServiceOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BGSServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto.base);
  return *internal_default_instance();
}


void BGSServiceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.BGSServiceOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      descriptor_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      shard_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BGSServiceOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string descriptor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_descriptor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.BGSServiceOptions.descriptor_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string shard_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_shard_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.BGSServiceOptions.shard_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BGSServiceOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.BGSServiceOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string descriptor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_descriptor_name().data(), static_cast<int>(this->_internal_descriptor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.BGSServiceOptions.descriptor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_descriptor_name(), target);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // optional string shard_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shard_name().data(), static_cast<int>(this->_internal_shard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.BGSServiceOptions.shard_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_shard_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.BGSServiceOptions)
  return target;
}

size_t BGSServiceOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.BGSServiceOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string descriptor_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_descriptor_name());
    }

    // optional string shard_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shard_name());
    }

    // optional uint32 version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BGSServiceOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.BGSServiceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BGSServiceOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BGSServiceOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.BGSServiceOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.BGSServiceOptions)
    MergeFrom(*source);
  }
}

void BGSServiceOptions::MergeFrom(const BGSServiceOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.BGSServiceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      descriptor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.descriptor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      shard_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shard_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BGSServiceOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.BGSServiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BGSServiceOptions::CopyFrom(const BGSServiceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.BGSServiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGSServiceOptions::IsInitialized() const {
  return true;
}

void BGSServiceOptions::InternalSwap(BGSServiceOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  descriptor_name_.Swap(&other->descriptor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shard_name_.Swap(&other->shard_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BGSServiceOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SDKServiceOptions::InitAsDefaultInstance() {
}
class SDKServiceOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<SDKServiceOptions>()._has_bits_);
  static void set_has_inbound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_outbound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SDKServiceOptions::SDKServiceOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.SDKServiceOptions)
}
SDKServiceOptions::SDKServiceOptions(const SDKServiceOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&inbound_, &from.inbound_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_client_id_) -
    reinterpret_cast<char*>(&inbound_)) + sizeof(use_client_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.SDKServiceOptions)
}

void SDKServiceOptions::SharedCtor() {
  ::memset(&inbound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_client_id_) -
      reinterpret_cast<char*>(&inbound_)) + sizeof(use_client_id_));
}

SDKServiceOptions::~SDKServiceOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.SDKServiceOptions)
  SharedDtor();
}

void SDKServiceOptions::SharedDtor() {
}

void SDKServiceOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDKServiceOptions& SDKServiceOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDKServiceOptions_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto.base);
  return *internal_default_instance();
}


void SDKServiceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.SDKServiceOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&inbound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_client_id_) -
      reinterpret_cast<char*>(&inbound_)) + sizeof(use_client_id_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SDKServiceOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool inbound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_inbound(&has_bits);
          inbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool outbound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_outbound(&has_bits);
          outbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_client_id(&has_bits);
          use_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDKServiceOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.SDKServiceOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool inbound = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_inbound(), target);
  }

  // optional bool outbound = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_outbound(), target);
  }

  // optional bool use_client_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.SDKServiceOptions)
  return target;
}

size_t SDKServiceOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.SDKServiceOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool inbound = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool outbound = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_client_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDKServiceOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.SDKServiceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SDKServiceOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDKServiceOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.SDKServiceOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.SDKServiceOptions)
    MergeFrom(*source);
  }
}

void SDKServiceOptions::MergeFrom(const SDKServiceOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.SDKServiceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      inbound_ = from.inbound_;
    }
    if (cached_has_bits & 0x00000002u) {
      outbound_ = from.outbound_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_client_id_ = from.use_client_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SDKServiceOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.SDKServiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDKServiceOptions::CopyFrom(const SDKServiceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.SDKServiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKServiceOptions::IsInitialized() const {
  return true;
}

void SDKServiceOptions::InternalSwap(SDKServiceOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(inbound_, other->inbound_);
  swap(outbound_, other->outbound_);
  swap(use_client_id_, other->use_client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKServiceOptions::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::bgs::protocol::BGSServiceOptions >, 11, false >
  service_options(kServiceOptionsFieldNumber, *::bgs::protocol::BGSServiceOptions::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::bgs::protocol::SDKServiceOptions >, 11, false >
  sdk_service_options(kSdkServiceOptionsFieldNumber, *::bgs::protocol::SDKServiceOptions::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::BGSServiceOptions* Arena::CreateMaybeMessage< ::bgs::protocol::BGSServiceOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::BGSServiceOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::SDKServiceOptions* Arena::CreateMaybeMessage< ::bgs::protocol::SDKServiceOptions >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::SDKServiceOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
