// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/invitation_types.proto

#include "bgs/low/pb/client/invitation_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class InvitationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Invitation> _instance;
} _Invitation_default_instance_;
class InvitationParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvitationParams> _instance;
} _InvitationParams_default_instance_;
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_Invitation_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_Invitation_default_instance_;
    new (ptr) ::bgs::protocol::Invitation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::Invitation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Invitation_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Invitation_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto}, {
      &scc_info_Identity_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_InvitationParams_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_InvitationParams_default_instance_;
    new (ptr) ::bgs::protocol::InvitationParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::InvitationParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvitationParams_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvitationParams_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, inviter_identity_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, invitee_identity_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, inviter_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, invitee_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, invitation_message_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, creation_time_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Invitation, expiration_time_),
  5,
  3,
  4,
  0,
  1,
  2,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::InvitationParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::InvitationParams, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::InvitationParams, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::InvitationParams, invitation_message_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::InvitationParams, expiration_time_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::bgs::protocol::Invitation)},
  { 21, 28, sizeof(::bgs::protocol::InvitationParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_Invitation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_InvitationParams_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(bgs/low/pb/client/invitation_types.pro"
  "to\022\014bgs.protocol\032$bgs/low/pb/client/enti"
  "ty_types.proto\"\373\001\n\nInvitation\022\n\n\002id\030\001 \002("
  "\006\0220\n\020inviter_identity\030\002 \002(\0132\026.bgs.protoc"
  "ol.Identity\0220\n\020invitee_identity\030\003 \002(\0132\026."
  "bgs.protocol.Identity\022\024\n\014inviter_name\030\004 "
  "\001(\t\022\024\n\014invitee_name\030\005 \001(\t\022\032\n\022invitation_"
  "message\030\006 \001(\t\022\025\n\rcreation_time\030\007 \001(\004\022\027\n\017"
  "expiration_time\030\010 \001(\004*\005\010d\020\221N\"R\n\020Invitati"
  "onParams\022\036\n\022invitation_message\030\001 \001(\tB\002\030\001"
  "\022\027\n\017expiration_time\030\002 \001(\004*\005\010d\020\221N*\206\002\n\027Inv"
  "itationRemovedReason\022&\n\"INVITATION_REMOV"
  "ED_REASON_ACCEPTED\020\000\022&\n\"INVITATION_REMOV"
  "ED_REASON_DECLINED\020\001\022%\n!INVITATION_REMOV"
  "ED_REASON_REVOKED\020\002\022%\n!INVITATION_REMOVE"
  "D_REASON_IGNORED\020\003\022%\n!INVITATION_REMOVED"
  "_REASON_EXPIRED\020\004\022&\n\"INVITATION_REMOVED_"
  "REASON_CANCELED\020\005*\270\001\n\027SuggestionRemovedR"
  "eason\022&\n\"SUGGESTION_REMOVED_REASON_APPRO"
  "VED\020\000\022&\n\"SUGGESTION_REMOVED_REASON_DECLI"
  "NED\020\001\022%\n!SUGGESTION_REMOVED_REASON_EXPIR"
  "ED\020\002\022&\n\"SUGGESTION_REMOVED_REASON_CANCEL"
  "ED\020\003B%\n\rbnet.protocolB\024InvitationTypesPr"
  "oto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto_deps[1] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto_sccs[2] = {
  &scc_info_Invitation_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.base,
  &scc_info_InvitationParams_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto, "bgs/low/pb/client/invitation_types.proto", 923,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto, 2, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvitationRemovedReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto[0];
}
bool InvitationRemovedReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SuggestionRemovedReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto[1];
}
bool SuggestionRemovedReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Invitation::InitAsDefaultInstance() {
  ::bgs::protocol::_Invitation_default_instance_._instance.get_mutable()->inviter_identity_ = const_cast< ::bgs::protocol::Identity*>(
      ::bgs::protocol::Identity::internal_default_instance());
  ::bgs::protocol::_Invitation_default_instance_._instance.get_mutable()->invitee_identity_ = const_cast< ::bgs::protocol::Identity*>(
      ::bgs::protocol::Identity::internal_default_instance());
}
class Invitation::_Internal {
 public:
  using HasBits = decltype(std::declval<Invitation>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::bgs::protocol::Identity& inviter_identity(const Invitation* msg);
  static void set_has_inviter_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::Identity& invitee_identity(const Invitation* msg);
  static void set_has_invitee_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inviter_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitee_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitation_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::bgs::protocol::Identity&
Invitation::_Internal::inviter_identity(const Invitation* msg) {
  return *msg->inviter_identity_;
}
const ::bgs::protocol::Identity&
Invitation::_Internal::invitee_identity(const Invitation* msg) {
  return *msg->invitee_identity_;
}
void Invitation::clear_inviter_identity() {
  if (inviter_identity_ != nullptr) inviter_identity_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Invitation::clear_invitee_identity() {
  if (invitee_identity_ != nullptr) invitee_identity_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Invitation::Invitation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.Invitation)
}
Invitation::Invitation(const Invitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  inviter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviter_name()) {
    inviter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
  }
  invitee_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitee_name()) {
    invitee_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
  }
  invitation_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitation_message()) {
    invitation_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitation_message_);
  }
  if (from._internal_has_inviter_identity()) {
    inviter_identity_ = new ::bgs::protocol::Identity(*from.inviter_identity_);
  } else {
    inviter_identity_ = nullptr;
  }
  if (from._internal_has_invitee_identity()) {
    invitee_identity_ = new ::bgs::protocol::Identity(*from.invitee_identity_);
  } else {
    invitee_identity_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(expiration_time_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.Invitation)
}

void Invitation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Invitation_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.base);
  inviter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitee_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitation_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&inviter_identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_time_) -
      reinterpret_cast<char*>(&inviter_identity_)) + sizeof(expiration_time_));
}

Invitation::~Invitation() {
  // @@protoc_insertion_point(destructor:bgs.protocol.Invitation)
  SharedDtor();
}

void Invitation::SharedDtor() {
  inviter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitee_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invitation_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inviter_identity_;
  if (this != internal_default_instance()) delete invitee_identity_;
}

void Invitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Invitation& Invitation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Invitation_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Invitation::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.Invitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      inviter_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      invitee_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      invitation_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(inviter_identity_ != nullptr);
      inviter_identity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(invitee_identity_ != nullptr);
      invitee_identity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_time_) -
        reinterpret_cast<char*>(&id_)) + sizeof(expiration_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Invitation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.Identity inviter_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviter_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.Identity invitee_identity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitee_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inviter_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_inviter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.Invitation.inviter_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string invitee_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_invitee_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.Invitation.invitee_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string invitation_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_invitation_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.Invitation.invitation_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 expiration_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 80008u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Invitation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.Invitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // required .bgs.protocol.Identity inviter_identity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inviter_identity(this), target, stream);
  }

  // required .bgs.protocol.Identity invitee_identity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::invitee_identity(this), target, stream);
  }

  // optional string inviter_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviter_name().data(), static_cast<int>(this->_internal_inviter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.Invitation.inviter_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_inviter_name(), target);
  }

  // optional string invitee_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitee_name().data(), static_cast<int>(this->_internal_invitee_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.Invitation.invitee_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_invitee_name(), target);
  }

  // optional string invitation_message = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_message().data(), static_cast<int>(this->_internal_invitation_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.Invitation.invitation_message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_invitation_message(), target);
  }

  // optional uint64 creation_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_creation_time(), target);
  }

  // optional uint64 expiration_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_expiration_time(), target);
  }

  // Extension range [100, 10001)
  target = _extensions_._InternalSerialize(
      100, 10001, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.Invitation)
  return target;
}

size_t Invitation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.Invitation)
  size_t total_size = 0;

  if (_internal_has_inviter_identity()) {
    // required .bgs.protocol.Identity inviter_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inviter_identity_);
  }

  if (_internal_has_invitee_identity()) {
    // required .bgs.protocol.Identity invitee_identity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invitee_identity_);
  }

  if (_internal_has_id()) {
    // required fixed64 id = 1;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Invitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.Invitation)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (((_has_bits_[0] & 0x00000038) ^ 0x00000038) == 0) {  // All required fields are present.
    // required .bgs.protocol.Identity inviter_identity = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inviter_identity_);

    // required .bgs.protocol.Identity invitee_identity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invitee_identity_);

    // required fixed64 id = 1;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string inviter_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inviter_name());
    }

    // optional string invitee_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitee_name());
    }

    // optional string invitation_message = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitation_message());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 creation_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

    // optional uint64 expiration_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expiration_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Invitation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.Invitation)
  GOOGLE_DCHECK_NE(&from, this);
  const Invitation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Invitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.Invitation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.Invitation)
    MergeFrom(*source);
  }
}

void Invitation::MergeFrom(const Invitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.Invitation)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      inviter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      invitee_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitee_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      invitation_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitation_message_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_inviter_identity()->::bgs::protocol::Identity::MergeFrom(from._internal_inviter_identity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_invitee_identity()->::bgs::protocol::Identity::MergeFrom(from._internal_invitee_identity());
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      expiration_time_ = from.expiration_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Invitation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invitation::CopyFrom(const Invitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitation::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000038) != 0x00000038) return false;
  if (_internal_has_inviter_identity()) {
    if (!inviter_identity_->IsInitialized()) return false;
  }
  if (_internal_has_invitee_identity()) {
    if (!invitee_identity_->IsInitialized()) return false;
  }
  return true;
}

void Invitation::InternalSwap(Invitation* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inviter_name_.Swap(&other->inviter_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invitee_name_.Swap(&other->invitee_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invitation_message_.Swap(&other->invitation_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inviter_identity_, other->inviter_identity_);
  swap(invitee_identity_, other->invitee_identity_);
  swap(id_, other->id_);
  swap(creation_time_, other->creation_time_);
  swap(expiration_time_, other->expiration_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Invitation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvitationParams::InitAsDefaultInstance() {
}
class InvitationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InvitationParams>()._has_bits_);
  static void set_has_invitation_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InvitationParams::InvitationParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.InvitationParams)
}
InvitationParams::InvitationParams(const InvitationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  invitation_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitation_message()) {
    invitation_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitation_message_);
  }
  expiration_time_ = from.expiration_time_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.InvitationParams)
}

void InvitationParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvitationParams_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.base);
  invitation_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiration_time_ = PROTOBUF_ULONGLONG(0);
}

InvitationParams::~InvitationParams() {
  // @@protoc_insertion_point(destructor:bgs.protocol.InvitationParams)
  SharedDtor();
}

void InvitationParams::SharedDtor() {
  invitation_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvitationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvitationParams& InvitationParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvitationParams_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void InvitationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.InvitationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_message_.ClearNonDefaultToEmptyNoArena();
  }
  expiration_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InvitationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string invitation_message = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invitation_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.InvitationParams.invitation_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 expiration_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 80008u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvitationParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.InvitationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_message = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_message().data(), static_cast<int>(this->_internal_invitation_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.InvitationParams.invitation_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_message(), target);
  }

  // optional uint64 expiration_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_expiration_time(), target);
  }

  // Extension range [100, 10001)
  target = _extensions_._InternalSerialize(
      100, 10001, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.InvitationParams)
  return target;
}

size_t InvitationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.InvitationParams)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invitation_message = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitation_message());
    }

    // optional uint64 expiration_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expiration_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitationParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.InvitationParams)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvitationParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.InvitationParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.InvitationParams)
    MergeFrom(*source);
  }
}

void InvitationParams::MergeFrom(const InvitationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.InvitationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      invitation_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitation_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_time_ = from.expiration_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InvitationParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.InvitationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationParams::CopyFrom(const InvitationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.InvitationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationParams::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void InvitationParams::InternalSwap(InvitationParams* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitation_message_.Swap(&other->invitation_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expiration_time_, other->expiration_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvitationParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::Invitation* Arena::CreateMaybeMessage< ::bgs::protocol::Invitation >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::Invitation >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::InvitationParams* Arena::CreateMaybeMessage< ::bgs::protocol::InvitationParams >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::InvitationParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
