// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/invitation_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/entity_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class Invitation;
class InvitationDefaultTypeInternal;
extern InvitationDefaultTypeInternal _Invitation_default_instance_;
class InvitationParams;
class InvitationParamsDefaultTypeInternal;
extern InvitationParamsDefaultTypeInternal _InvitationParams_default_instance_;
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::Invitation* Arena::CreateMaybeMessage<::bgs::protocol::Invitation>(Arena*);
template<> ::bgs::protocol::InvitationParams* Arena::CreateMaybeMessage<::bgs::protocol::InvitationParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {

enum InvitationRemovedReason : int {
  INVITATION_REMOVED_REASON_ACCEPTED = 0,
  INVITATION_REMOVED_REASON_DECLINED = 1,
  INVITATION_REMOVED_REASON_REVOKED = 2,
  INVITATION_REMOVED_REASON_IGNORED = 3,
  INVITATION_REMOVED_REASON_EXPIRED = 4,
  INVITATION_REMOVED_REASON_CANCELED = 5
};
bool InvitationRemovedReason_IsValid(int value);
constexpr InvitationRemovedReason InvitationRemovedReason_MIN = INVITATION_REMOVED_REASON_ACCEPTED;
constexpr InvitationRemovedReason InvitationRemovedReason_MAX = INVITATION_REMOVED_REASON_CANCELED;
constexpr int InvitationRemovedReason_ARRAYSIZE = InvitationRemovedReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvitationRemovedReason_descriptor();
template<typename T>
inline const std::string& InvitationRemovedReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InvitationRemovedReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InvitationRemovedReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InvitationRemovedReason_descriptor(), enum_t_value);
}
inline bool InvitationRemovedReason_Parse(
    const std::string& name, InvitationRemovedReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InvitationRemovedReason>(
    InvitationRemovedReason_descriptor(), name, value);
}
enum SuggestionRemovedReason : int {
  SUGGESTION_REMOVED_REASON_APPROVED = 0,
  SUGGESTION_REMOVED_REASON_DECLINED = 1,
  SUGGESTION_REMOVED_REASON_EXPIRED = 2,
  SUGGESTION_REMOVED_REASON_CANCELED = 3
};
bool SuggestionRemovedReason_IsValid(int value);
constexpr SuggestionRemovedReason SuggestionRemovedReason_MIN = SUGGESTION_REMOVED_REASON_APPROVED;
constexpr SuggestionRemovedReason SuggestionRemovedReason_MAX = SUGGESTION_REMOVED_REASON_CANCELED;
constexpr int SuggestionRemovedReason_ARRAYSIZE = SuggestionRemovedReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SuggestionRemovedReason_descriptor();
template<typename T>
inline const std::string& SuggestionRemovedReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SuggestionRemovedReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SuggestionRemovedReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SuggestionRemovedReason_descriptor(), enum_t_value);
}
inline bool SuggestionRemovedReason_Parse(
    const std::string& name, SuggestionRemovedReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SuggestionRemovedReason>(
    SuggestionRemovedReason_descriptor(), name, value);
}
// ===================================================================

class Invitation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.Invitation) */ {
 public:
  Invitation();
  virtual ~Invitation();

  Invitation(const Invitation& from);
  Invitation(Invitation&& from) noexcept
    : Invitation() {
    *this = ::std::move(from);
  }

  inline Invitation& operator=(const Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invitation& operator=(Invitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Invitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Invitation* internal_default_instance() {
    return reinterpret_cast<const Invitation*>(
               &_Invitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Invitation& a, Invitation& b) {
    a.Swap(&b);
  }
  inline void Swap(Invitation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invitation* New() const final {
    return CreateMaybeMessage<Invitation>(nullptr);
  }

  Invitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Invitation& from);
  void MergeFrom(const Invitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.Invitation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviterNameFieldNumber = 4,
    kInviteeNameFieldNumber = 5,
    kInvitationMessageFieldNumber = 6,
    kInviterIdentityFieldNumber = 2,
    kInviteeIdentityFieldNumber = 3,
    kIdFieldNumber = 1,
    kCreationTimeFieldNumber = 7,
    kExpirationTimeFieldNumber = 8,
  };
  // optional string inviter_name = 4;
  bool has_inviter_name() const;
  private:
  bool _internal_has_inviter_name() const;
  public:
  void clear_inviter_name();
  const std::string& inviter_name() const;
  void set_inviter_name(const std::string& value);
  void set_inviter_name(std::string&& value);
  void set_inviter_name(const char* value);
  void set_inviter_name(const char* value, size_t size);
  std::string* mutable_inviter_name();
  std::string* release_inviter_name();
  void set_allocated_inviter_name(std::string* inviter_name);
  private:
  const std::string& _internal_inviter_name() const;
  void _internal_set_inviter_name(const std::string& value);
  std::string* _internal_mutable_inviter_name();
  public:

  // optional string invitee_name = 5;
  bool has_invitee_name() const;
  private:
  bool _internal_has_invitee_name() const;
  public:
  void clear_invitee_name();
  const std::string& invitee_name() const;
  void set_invitee_name(const std::string& value);
  void set_invitee_name(std::string&& value);
  void set_invitee_name(const char* value);
  void set_invitee_name(const char* value, size_t size);
  std::string* mutable_invitee_name();
  std::string* release_invitee_name();
  void set_allocated_invitee_name(std::string* invitee_name);
  private:
  const std::string& _internal_invitee_name() const;
  void _internal_set_invitee_name(const std::string& value);
  std::string* _internal_mutable_invitee_name();
  public:

  // optional string invitation_message = 6;
  bool has_invitation_message() const;
  private:
  bool _internal_has_invitation_message() const;
  public:
  void clear_invitation_message();
  const std::string& invitation_message() const;
  void set_invitation_message(const std::string& value);
  void set_invitation_message(std::string&& value);
  void set_invitation_message(const char* value);
  void set_invitation_message(const char* value, size_t size);
  std::string* mutable_invitation_message();
  std::string* release_invitation_message();
  void set_allocated_invitation_message(std::string* invitation_message);
  private:
  const std::string& _internal_invitation_message() const;
  void _internal_set_invitation_message(const std::string& value);
  std::string* _internal_mutable_invitation_message();
  public:

  // required .bgs.protocol.Identity inviter_identity = 2;
  bool has_inviter_identity() const;
  private:
  bool _internal_has_inviter_identity() const;
  public:
  void clear_inviter_identity();
  const ::bgs::protocol::Identity& inviter_identity() const;
  ::bgs::protocol::Identity* release_inviter_identity();
  ::bgs::protocol::Identity* mutable_inviter_identity();
  void set_allocated_inviter_identity(::bgs::protocol::Identity* inviter_identity);
  private:
  const ::bgs::protocol::Identity& _internal_inviter_identity() const;
  ::bgs::protocol::Identity* _internal_mutable_inviter_identity();
  public:

  // required .bgs.protocol.Identity invitee_identity = 3;
  bool has_invitee_identity() const;
  private:
  bool _internal_has_invitee_identity() const;
  public:
  void clear_invitee_identity();
  const ::bgs::protocol::Identity& invitee_identity() const;
  ::bgs::protocol::Identity* release_invitee_identity();
  ::bgs::protocol::Identity* mutable_invitee_identity();
  void set_allocated_invitee_identity(::bgs::protocol::Identity* invitee_identity);
  private:
  const ::bgs::protocol::Identity& _internal_invitee_identity() const;
  ::bgs::protocol::Identity* _internal_mutable_invitee_identity();
  public:

  // required fixed64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 creation_time = 7;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 expiration_time = 8;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time() const;
  void set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiration_time() const;
  void _internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Invitation)
  // @@protoc_insertion_point(class_scope:bgs.protocol.Invitation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviter_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitee_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_message_;
  ::bgs::protocol::Identity* inviter_identity_;
  ::bgs::protocol::Identity* invitee_identity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class InvitationParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.InvitationParams) */ {
 public:
  InvitationParams();
  virtual ~InvitationParams();

  InvitationParams(const InvitationParams& from);
  InvitationParams(InvitationParams&& from) noexcept
    : InvitationParams() {
    *this = ::std::move(from);
  }

  inline InvitationParams& operator=(const InvitationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvitationParams& operator=(InvitationParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvitationParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvitationParams* internal_default_instance() {
    return reinterpret_cast<const InvitationParams*>(
               &_InvitationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InvitationParams& a, InvitationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InvitationParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvitationParams* New() const final {
    return CreateMaybeMessage<InvitationParams>(nullptr);
  }

  InvitationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvitationParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvitationParams& from);
  void MergeFrom(const InvitationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvitationParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.InvitationParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitationMessageFieldNumber = 1,
    kExpirationTimeFieldNumber = 2,
  };
  // optional string invitation_message = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_invitation_message() const;
  private:
  bool _internal_has_invitation_message() const;
  public:
  PROTOBUF_DEPRECATED void clear_invitation_message();
  PROTOBUF_DEPRECATED const std::string& invitation_message() const;
  PROTOBUF_DEPRECATED void set_invitation_message(const std::string& value);
  PROTOBUF_DEPRECATED void set_invitation_message(std::string&& value);
  PROTOBUF_DEPRECATED void set_invitation_message(const char* value);
  PROTOBUF_DEPRECATED void set_invitation_message(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_invitation_message();
  PROTOBUF_DEPRECATED std::string* release_invitation_message();
  PROTOBUF_DEPRECATED void set_allocated_invitation_message(std::string* invitation_message);
  private:
  const std::string& _internal_invitation_message() const;
  void _internal_set_invitation_message(const std::string& value);
  std::string* _internal_mutable_invitation_message();
  public:

  // optional uint64 expiration_time = 2;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time() const;
  void set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiration_time() const;
  void _internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(InvitationParams)
  // @@protoc_insertion_point(class_scope:bgs.protocol.InvitationParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_time_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Invitation

// required fixed64 id = 1;
inline bool Invitation::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Invitation::has_id() const {
  return _internal_has_id();
}
inline void Invitation::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invitation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invitation::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Invitation.id)
  return _internal_id();
}
inline void Invitation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
}
inline void Invitation::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Invitation.id)
}

// required .bgs.protocol.Identity inviter_identity = 2;
inline bool Invitation::_internal_has_inviter_identity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || inviter_identity_ != nullptr);
  return value;
}
inline bool Invitation::has_inviter_identity() const {
  return _internal_has_inviter_identity();
}
inline const ::bgs::protocol::Identity& Invitation::_internal_inviter_identity() const {
  const ::bgs::protocol::Identity* p = inviter_identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::Identity*>(
      &::bgs::protocol::_Identity_default_instance_);
}
inline const ::bgs::protocol::Identity& Invitation::inviter_identity() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Invitation.inviter_identity)
  return _internal_inviter_identity();
}
inline ::bgs::protocol::Identity* Invitation::release_inviter_identity() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Invitation.inviter_identity)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::Identity* temp = inviter_identity_;
  inviter_identity_ = nullptr;
  return temp;
}
inline ::bgs::protocol::Identity* Invitation::_internal_mutable_inviter_identity() {
  _has_bits_[0] |= 0x00000008u;
  if (inviter_identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::Identity>(GetArenaNoVirtual());
    inviter_identity_ = p;
  }
  return inviter_identity_;
}
inline ::bgs::protocol::Identity* Invitation::mutable_inviter_identity() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Invitation.inviter_identity)
  return _internal_mutable_inviter_identity();
}
inline void Invitation::set_allocated_inviter_identity(::bgs::protocol::Identity* inviter_identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviter_identity_);
  }
  if (inviter_identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inviter_identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviter_identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  inviter_identity_ = inviter_identity;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Invitation.inviter_identity)
}

// required .bgs.protocol.Identity invitee_identity = 3;
inline bool Invitation::_internal_has_invitee_identity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || invitee_identity_ != nullptr);
  return value;
}
inline bool Invitation::has_invitee_identity() const {
  return _internal_has_invitee_identity();
}
inline const ::bgs::protocol::Identity& Invitation::_internal_invitee_identity() const {
  const ::bgs::protocol::Identity* p = invitee_identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::Identity*>(
      &::bgs::protocol::_Identity_default_instance_);
}
inline const ::bgs::protocol::Identity& Invitation::invitee_identity() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Invitation.invitee_identity)
  return _internal_invitee_identity();
}
inline ::bgs::protocol::Identity* Invitation::release_invitee_identity() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Invitation.invitee_identity)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::Identity* temp = invitee_identity_;
  invitee_identity_ = nullptr;
  return temp;
}
inline ::bgs::protocol::Identity* Invitation::_internal_mutable_invitee_identity() {
  _has_bits_[0] |= 0x00000010u;
  if (invitee_identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::Identity>(GetArenaNoVirtual());
    invitee_identity_ = p;
  }
  return invitee_identity_;
}
inline ::bgs::protocol::Identity* Invitation::mutable_invitee_identity() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Invitation.invitee_identity)
  return _internal_mutable_invitee_identity();
}
inline void Invitation::set_allocated_invitee_identity(::bgs::protocol::Identity* invitee_identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitee_identity_);
  }
  if (invitee_identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invitee_identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitee_identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  invitee_identity_ = invitee_identity;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Invitation.invitee_identity)
}

// optional string inviter_name = 4;
inline bool Invitation::_internal_has_inviter_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Invitation::has_inviter_name() const {
  return _internal_has_inviter_name();
}
inline void Invitation::clear_inviter_name() {
  inviter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Invitation::inviter_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Invitation.inviter_name)
  return _internal_inviter_name();
}
inline void Invitation::set_inviter_name(const std::string& value) {
  _internal_set_inviter_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Invitation.inviter_name)
}
inline std::string* Invitation::mutable_inviter_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Invitation.inviter_name)
  return _internal_mutable_inviter_name();
}
inline const std::string& Invitation::_internal_inviter_name() const {
  return inviter_name_.GetNoArena();
}
inline void Invitation::_internal_set_inviter_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invitation::set_inviter_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  inviter_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.Invitation.inviter_name)
}
inline void Invitation::set_inviter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Invitation.inviter_name)
}
inline void Invitation::set_inviter_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  inviter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Invitation.inviter_name)
}
inline std::string* Invitation::_internal_mutable_inviter_name() {
  _has_bits_[0] |= 0x00000001u;
  return inviter_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invitation::release_inviter_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Invitation.inviter_name)
  if (!_internal_has_inviter_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return inviter_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invitation::set_allocated_inviter_name(std::string* inviter_name) {
  if (inviter_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inviter_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviter_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Invitation.inviter_name)
}

// optional string invitee_name = 5;
inline bool Invitation::_internal_has_invitee_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Invitation::has_invitee_name() const {
  return _internal_has_invitee_name();
}
inline void Invitation::clear_invitee_name() {
  invitee_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Invitation::invitee_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Invitation.invitee_name)
  return _internal_invitee_name();
}
inline void Invitation::set_invitee_name(const std::string& value) {
  _internal_set_invitee_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Invitation.invitee_name)
}
inline std::string* Invitation::mutable_invitee_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Invitation.invitee_name)
  return _internal_mutable_invitee_name();
}
inline const std::string& Invitation::_internal_invitee_name() const {
  return invitee_name_.GetNoArena();
}
inline void Invitation::_internal_set_invitee_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  invitee_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invitation::set_invitee_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  invitee_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.Invitation.invitee_name)
}
inline void Invitation::set_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  invitee_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Invitation.invitee_name)
}
inline void Invitation::set_invitee_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  invitee_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Invitation.invitee_name)
}
inline std::string* Invitation::_internal_mutable_invitee_name() {
  _has_bits_[0] |= 0x00000002u;
  return invitee_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invitation::release_invitee_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Invitation.invitee_name)
  if (!_internal_has_invitee_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return invitee_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invitation::set_allocated_invitee_name(std::string* invitee_name) {
  if (invitee_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  invitee_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitee_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Invitation.invitee_name)
}

// optional string invitation_message = 6;
inline bool Invitation::_internal_has_invitation_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Invitation::has_invitation_message() const {
  return _internal_has_invitation_message();
}
inline void Invitation::clear_invitation_message() {
  invitation_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Invitation::invitation_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Invitation.invitation_message)
  return _internal_invitation_message();
}
inline void Invitation::set_invitation_message(const std::string& value) {
  _internal_set_invitation_message(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Invitation.invitation_message)
}
inline std::string* Invitation::mutable_invitation_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Invitation.invitation_message)
  return _internal_mutable_invitation_message();
}
inline const std::string& Invitation::_internal_invitation_message() const {
  return invitation_message_.GetNoArena();
}
inline void Invitation::_internal_set_invitation_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  invitation_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invitation::set_invitation_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  invitation_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.Invitation.invitation_message)
}
inline void Invitation::set_invitation_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  invitation_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Invitation.invitation_message)
}
inline void Invitation::set_invitation_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  invitation_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Invitation.invitation_message)
}
inline std::string* Invitation::_internal_mutable_invitation_message() {
  _has_bits_[0] |= 0x00000004u;
  return invitation_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invitation::release_invitation_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Invitation.invitation_message)
  if (!_internal_has_invitation_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return invitation_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invitation::set_allocated_invitation_message(std::string* invitation_message) {
  if (invitation_message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  invitation_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_message);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Invitation.invitation_message)
}

// optional uint64 creation_time = 7;
inline bool Invitation::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Invitation::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void Invitation::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invitation::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invitation::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Invitation.creation_time)
  return _internal_creation_time();
}
inline void Invitation::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  creation_time_ = value;
}
inline void Invitation::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Invitation.creation_time)
}

// optional uint64 expiration_time = 8;
inline bool Invitation::_internal_has_expiration_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Invitation::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline void Invitation::clear_expiration_time() {
  expiration_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invitation::_internal_expiration_time() const {
  return expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invitation::expiration_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Invitation.expiration_time)
  return _internal_expiration_time();
}
inline void Invitation::_internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  expiration_time_ = value;
}
inline void Invitation::set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiration_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Invitation.expiration_time)
}

// -------------------------------------------------------------------

// InvitationParams

// optional string invitation_message = 1 [deprecated = true];
inline bool InvitationParams::_internal_has_invitation_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvitationParams::has_invitation_message() const {
  return _internal_has_invitation_message();
}
inline void InvitationParams::clear_invitation_message() {
  invitation_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvitationParams::invitation_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.InvitationParams.invitation_message)
  return _internal_invitation_message();
}
inline void InvitationParams::set_invitation_message(const std::string& value) {
  _internal_set_invitation_message(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.InvitationParams.invitation_message)
}
inline std::string* InvitationParams::mutable_invitation_message() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.InvitationParams.invitation_message)
  return _internal_mutable_invitation_message();
}
inline const std::string& InvitationParams::_internal_invitation_message() const {
  return invitation_message_.GetNoArena();
}
inline void InvitationParams::_internal_set_invitation_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invitation_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvitationParams::set_invitation_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  invitation_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.InvitationParams.invitation_message)
}
inline void InvitationParams::set_invitation_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  invitation_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.InvitationParams.invitation_message)
}
inline void InvitationParams::set_invitation_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  invitation_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.InvitationParams.invitation_message)
}
inline std::string* InvitationParams::_internal_mutable_invitation_message() {
  _has_bits_[0] |= 0x00000001u;
  return invitation_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvitationParams::release_invitation_message() {
  // @@protoc_insertion_point(field_release:bgs.protocol.InvitationParams.invitation_message)
  if (!_internal_has_invitation_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return invitation_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationParams::set_allocated_invitation_message(std::string* invitation_message) {
  if (invitation_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invitation_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_message);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.InvitationParams.invitation_message)
}

// optional uint64 expiration_time = 2;
inline bool InvitationParams::_internal_has_expiration_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InvitationParams::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline void InvitationParams::clear_expiration_time() {
  expiration_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvitationParams::_internal_expiration_time() const {
  return expiration_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvitationParams::expiration_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.InvitationParams.expiration_time)
  return _internal_expiration_time();
}
inline void InvitationParams::_internal_set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  expiration_time_ = value;
}
inline void InvitationParams::set_expiration_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiration_time(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.InvitationParams.expiration_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bgs::protocol::InvitationRemovedReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::InvitationRemovedReason>() {
  return ::bgs::protocol::InvitationRemovedReason_descriptor();
}
template <> struct is_proto_enum< ::bgs::protocol::SuggestionRemovedReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::SuggestionRemovedReason>() {
  return ::bgs::protocol::SuggestionRemovedReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2finvitation_5ftypes_2eproto
