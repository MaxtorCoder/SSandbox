// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/notification_types.proto

#include "bgs/low/pb/client/notification_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Target_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace notification {
namespace v1 {
class TargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Target> _instance;
} _Target_default_instance_;
class SubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subscription> _instance;
} _Subscription_default_instance_;
class NotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Notification> _instance;
} _Notification_default_instance_;
}  // namespace v1
}  // namespace notification
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_Notification_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::notification::v1::_Notification_default_instance_;
    new (ptr) ::bgs::protocol::notification::v1::Notification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::notification::v1::Notification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Notification_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Notification_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,
      &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
      &scc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Subscription_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::notification::v1::_Subscription_default_instance_;
    new (ptr) ::bgs::protocol::notification::v1::Subscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::notification::v1::Subscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Subscription_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Subscription_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto}, {
      &scc_info_Target_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base,
      &scc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Target_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::notification::v1::_Target_default_instance_;
    new (ptr) ::bgs::protocol::notification::v1::Target();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::notification::v1::Target::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Target_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Target_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto}, {
      &scc_info_Identity_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Target, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Target, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Target, identity_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Target, type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Subscription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Subscription, target_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Subscription, subscriber_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Subscription, delivery_required_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, sender_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, target_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, sender_account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, target_account_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, sender_battle_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, target_battle_tag_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, peer_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::notification::v1::Notification, forwarding_identity_),
  3,
  4,
  0,
  ~0u,
  5,
  6,
  1,
  2,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::notification::v1::Target)},
  { 9, 17, sizeof(::bgs::protocol::notification::v1::Subscription)},
  { 20, 35, sizeof(::bgs::protocol::notification::v1::Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::notification::v1::_Target_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::notification::v1::_Subscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::notification::v1::_Notification_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*bgs/low/pb/client/notification_types.p"
  "roto\022\034bgs.protocol.notification.v1\032%bgs/"
  "low/pb/client/account_types.proto\032\'bgs/l"
  "ow/pb/client/attribute_types.proto\032$bgs/"
  "low/pb/client/entity_types.proto\032!bgs/lo"
  "w/pb/client/rpc_types.proto\"K\n\006Target\0223\n"
  "\010identity\030\001 \001(\0132!.bgs.protocol.account.v"
  "1.Identity\022\014\n\004type\030\002 \001(\t\"\235\001\n\014Subscriptio"
  "n\0224\n\006target\030\001 \003(\0132$.bgs.protocol.notific"
  "ation.v1.Target\0225\n\nsubscriber\030\002 \001(\0132!.bg"
  "s.protocol.account.v1.Identity\022 \n\021delive"
  "ry_required\030\003 \001(\010:\005false\"\241\003\n\014Notificatio"
  "n\022)\n\tsender_id\030\001 \001(\0132\026.bgs.protocol.Enti"
  "tyId\022)\n\ttarget_id\030\002 \002(\0132\026.bgs.protocol.E"
  "ntityId\022\014\n\004type\030\003 \002(\t\022*\n\tattribute\030\004 \003(\013"
  "2\027.bgs.protocol.Attribute\0221\n\021sender_acco"
  "unt_id\030\005 \001(\0132\026.bgs.protocol.EntityId\0221\n\021"
  "target_account_id\030\006 \001(\0132\026.bgs.protocol.E"
  "ntityId\022\031\n\021sender_battle_tag\030\007 \001(\t\022\031\n\021ta"
  "rget_battle_tag\030\010 \001(\t\022%\n\004peer\030\t \001(\0132\027.bg"
  "s.protocol.ProcessId\022>\n\023forwarding_ident"
  "ity\030\n \001(\0132!.bgs.protocol.account.v1.Iden"
  "tity"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto_deps[4] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto_sccs[3] = {
  &scc_info_Notification_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base,
  &scc_info_Subscription_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base,
  &scc_info_Target_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto, "bgs/low/pb/client/notification_types.proto", 884,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto, 3, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace notification {
namespace v1 {

// ===================================================================

void Target::InitAsDefaultInstance() {
  ::bgs::protocol::notification::v1::_Target_default_instance_._instance.get_mutable()->identity_ = const_cast< ::bgs::protocol::account::v1::Identity*>(
      ::bgs::protocol::account::v1::Identity::internal_default_instance());
}
class Target::_Internal {
 public:
  using HasBits = decltype(std::declval<Target>()._has_bits_);
  static const ::bgs::protocol::account::v1::Identity& identity(const Target* msg);
  static void set_has_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::Identity&
Target::_Internal::identity(const Target* msg) {
  return *msg->identity_;
}
void Target::clear_identity() {
  if (identity_ != nullptr) identity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Target::Target()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.notification.v1.Target)
}
Target::Target(const Target& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from._internal_has_identity()) {
    identity_ = new ::bgs::protocol::account::v1::Identity(*from.identity_);
  } else {
    identity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.notification.v1.Target)
}

void Target::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Target_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_ = nullptr;
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:bgs.protocol.notification.v1.Target)
  SharedDtor();
}

void Target::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_;
}

void Target::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Target& Target::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Target_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.notification.v1.Target)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(identity_ != nullptr);
      identity_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Target::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.Identity identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.notification.v1.Target.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Target::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.notification.v1.Target)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.Identity identity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identity(this), target, stream);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.notification.v1.Target.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.notification.v1.Target)
  return target;
}

size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.notification.v1.Target)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional .bgs.protocol.account.v1.Identity identity = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identity_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Target::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.notification.v1.Target)
  GOOGLE_DCHECK_NE(&from, this);
  const Target* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Target>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.notification.v1.Target)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.notification.v1.Target)
    MergeFrom(*source);
  }
}

void Target::MergeFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.notification.v1.Target)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_identity()->::bgs::protocol::account::v1::Identity::MergeFrom(from._internal_identity());
    }
  }
}

void Target::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.notification.v1.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.notification.v1.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  if (_internal_has_identity()) {
    if (!identity_->IsInitialized()) return false;
  }
  return true;
}

void Target::InternalSwap(Target* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identity_, other->identity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Target::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Subscription::InitAsDefaultInstance() {
  ::bgs::protocol::notification::v1::_Subscription_default_instance_._instance.get_mutable()->subscriber_ = const_cast< ::bgs::protocol::account::v1::Identity*>(
      ::bgs::protocol::account::v1::Identity::internal_default_instance());
}
class Subscription::_Internal {
 public:
  using HasBits = decltype(std::declval<Subscription>()._has_bits_);
  static const ::bgs::protocol::account::v1::Identity& subscriber(const Subscription* msg);
  static void set_has_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delivery_required(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::Identity&
Subscription::_Internal::subscriber(const Subscription* msg) {
  return *msg->subscriber_;
}
void Subscription::clear_subscriber() {
  if (subscriber_ != nullptr) subscriber_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Subscription::Subscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.notification.v1.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_(from.target_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_subscriber()) {
    subscriber_ = new ::bgs::protocol::account::v1::Identity(*from.subscriber_);
  } else {
    subscriber_ = nullptr;
  }
  delivery_required_ = from.delivery_required_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.notification.v1.Subscription)
}

void Subscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Subscription_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base);
  ::memset(&subscriber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delivery_required_) -
      reinterpret_cast<char*>(&subscriber_)) + sizeof(delivery_required_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.notification.v1.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  if (this != internal_default_instance()) delete subscriber_;
}

void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subscription& Subscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Subscription_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.notification.v1.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(subscriber_ != nullptr);
    subscriber_->Clear();
  }
  delivery_required_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Subscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.notification.v1.Target target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.Identity subscriber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriber(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool delivery_required = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_delivery_required(&has_bits);
          delivery_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.notification.v1.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.notification.v1.Target target = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_target(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.Identity subscriber = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subscriber(this), target, stream);
  }

  // optional bool delivery_required = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delivery_required(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.notification.v1.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.notification.v1.Subscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.notification.v1.Target target = 1;
  total_size += 1UL * this->_internal_target_size();
  for (const auto& msg : this->target_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.Identity subscriber = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subscriber_);
    }

    // optional bool delivery_required = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.notification.v1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  const Subscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Subscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.notification.v1.Subscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.notification.v1.Subscription)
    MergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.notification.v1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_.MergeFrom(from.target_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_subscriber()->::bgs::protocol::account::v1::Identity::MergeFrom(from._internal_subscriber());
    }
    if (cached_has_bits & 0x00000002u) {
      delivery_required_ = from.delivery_required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Subscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.notification.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.notification.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(target_)) return false;
  if (_internal_has_subscriber()) {
    if (!subscriber_->IsInitialized()) return false;
  }
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_.InternalSwap(&other->target_);
  swap(subscriber_, other->subscriber_);
  swap(delivery_required_, other->delivery_required_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Notification::InitAsDefaultInstance() {
  ::bgs::protocol::notification::v1::_Notification_default_instance_._instance.get_mutable()->sender_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::notification::v1::_Notification_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::notification::v1::_Notification_default_instance_._instance.get_mutable()->sender_account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::notification::v1::_Notification_default_instance_._instance.get_mutable()->target_account_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::notification::v1::_Notification_default_instance_._instance.get_mutable()->peer_ = const_cast< ::bgs::protocol::ProcessId*>(
      ::bgs::protocol::ProcessId::internal_default_instance());
  ::bgs::protocol::notification::v1::_Notification_default_instance_._instance.get_mutable()->forwarding_identity_ = const_cast< ::bgs::protocol::account::v1::Identity*>(
      ::bgs::protocol::account::v1::Identity::internal_default_instance());
}
class Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<Notification>()._has_bits_);
  static const ::bgs::protocol::EntityId& sender_id(const Notification* msg);
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::bgs::protocol::EntityId& target_id(const Notification* msg);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& sender_account_id(const Notification* msg);
  static void set_has_sender_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::bgs::protocol::EntityId& target_account_id(const Notification* msg);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sender_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::ProcessId& peer(const Notification* msg);
  static void set_has_peer(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::bgs::protocol::account::v1::Identity& forwarding_identity(const Notification* msg);
  static void set_has_forwarding_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::bgs::protocol::EntityId&
Notification::_Internal::sender_id(const Notification* msg) {
  return *msg->sender_id_;
}
const ::bgs::protocol::EntityId&
Notification::_Internal::target_id(const Notification* msg) {
  return *msg->target_id_;
}
const ::bgs::protocol::EntityId&
Notification::_Internal::sender_account_id(const Notification* msg) {
  return *msg->sender_account_id_;
}
const ::bgs::protocol::EntityId&
Notification::_Internal::target_account_id(const Notification* msg) {
  return *msg->target_account_id_;
}
const ::bgs::protocol::ProcessId&
Notification::_Internal::peer(const Notification* msg) {
  return *msg->peer_;
}
const ::bgs::protocol::account::v1::Identity&
Notification::_Internal::forwarding_identity(const Notification* msg) {
  return *msg->forwarding_identity_;
}
void Notification::clear_sender_id() {
  if (sender_id_ != nullptr) sender_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Notification::clear_target_id() {
  if (target_id_ != nullptr) target_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Notification::clear_attribute() {
  attribute_.Clear();
}
void Notification::clear_sender_account_id() {
  if (sender_account_id_ != nullptr) sender_account_id_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Notification::clear_target_account_id() {
  if (target_account_id_ != nullptr) target_account_id_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Notification::clear_peer() {
  if (peer_ != nullptr) peer_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Notification::clear_forwarding_identity() {
  if (forwarding_identity_ != nullptr) forwarding_identity_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
Notification::Notification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.notification.v1.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  sender_battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sender_battle_tag()) {
    sender_battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_battle_tag_);
  }
  target_battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_battle_tag()) {
    target_battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_battle_tag_);
  }
  if (from._internal_has_sender_id()) {
    sender_id_ = new ::bgs::protocol::EntityId(*from.sender_id_);
  } else {
    sender_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::bgs::protocol::EntityId(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  if (from._internal_has_sender_account_id()) {
    sender_account_id_ = new ::bgs::protocol::EntityId(*from.sender_account_id_);
  } else {
    sender_account_id_ = nullptr;
  }
  if (from._internal_has_target_account_id()) {
    target_account_id_ = new ::bgs::protocol::EntityId(*from.target_account_id_);
  } else {
    target_account_id_ = nullptr;
  }
  if (from._internal_has_peer()) {
    peer_ = new ::bgs::protocol::ProcessId(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  if (from._internal_has_forwarding_identity()) {
    forwarding_identity_ = new ::bgs::protocol::account::v1::Identity(*from.forwarding_identity_);
  } else {
    forwarding_identity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.notification.v1.Notification)
}

void Notification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Notification_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forwarding_identity_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(forwarding_identity_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.notification.v1.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_id_;
  if (this != internal_default_instance()) delete target_id_;
  if (this != internal_default_instance()) delete sender_account_id_;
  if (this != internal_default_instance()) delete target_account_id_;
  if (this != internal_default_instance()) delete peer_;
  if (this != internal_default_instance()) delete forwarding_identity_;
}

void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Notification& Notification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Notification_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.notification.v1.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sender_battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      target_battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sender_id_ != nullptr);
      sender_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(target_id_ != nullptr);
      target_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sender_account_id_ != nullptr);
      sender_account_id_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(target_account_id_ != nullptr);
      target_account_id_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(peer_ != nullptr);
      peer_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(forwarding_identity_ != nullptr);
    forwarding_identity_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.notification.v1.Notification.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId sender_account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId target_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_account_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sender_battle_tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sender_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.notification.v1.Notification.sender_battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target_battle_tag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_target_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.notification.v1.Notification.target_battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ProcessId peer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.account.v1.Identity forwarding_identity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_forwarding_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.notification.v1.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId sender_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sender_id(this), target, stream);
  }

  // required .bgs.protocol.EntityId target_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // required string type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.notification.v1.Notification.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // repeated .bgs.protocol.Attribute attribute = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attribute(i), target, stream);
  }

  // optional .bgs.protocol.EntityId sender_account_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sender_account_id(this), target, stream);
  }

  // optional .bgs.protocol.EntityId target_account_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::target_account_id(this), target, stream);
  }

  // optional string sender_battle_tag = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_battle_tag().data(), static_cast<int>(this->_internal_sender_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.notification.v1.Notification.sender_battle_tag");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sender_battle_tag(), target);
  }

  // optional string target_battle_tag = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_battle_tag().data(), static_cast<int>(this->_internal_target_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.notification.v1.Notification.target_battle_tag");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_target_battle_tag(), target);
  }

  // optional .bgs.protocol.ProcessId peer = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::peer(this), target, stream);
  }

  // optional .bgs.protocol.account.v1.Identity forwarding_identity = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::forwarding_identity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.notification.v1.Notification)
  return target;
}

size_t Notification::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.notification.v1.Notification)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_target_id()) {
    // required .bgs.protocol.EntityId target_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  return total_size;
}
size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.notification.v1.Notification)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required .bgs.protocol.EntityId target_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 4;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string sender_battle_tag = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_battle_tag());
    }

    // optional string target_battle_tag = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_battle_tag());
    }

    // optional .bgs.protocol.EntityId sender_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sender_id_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .bgs.protocol.EntityId sender_account_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sender_account_id_);
    }

    // optional .bgs.protocol.EntityId target_account_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_account_id_);
    }

    // optional .bgs.protocol.ProcessId peer = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *peer_);
    }

  }
  // optional .bgs.protocol.account.v1.Identity forwarding_identity = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forwarding_identity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.notification.v1.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.notification.v1.Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.notification.v1.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.notification.v1.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sender_battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_battle_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      target_battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_battle_tag_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sender_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_sender_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_target_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_sender_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_sender_account_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_target_account_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_target_account_id());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_peer()->::bgs::protocol::ProcessId::MergeFrom(from._internal_peer());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_forwarding_identity()->::bgs::protocol::account::v1::Identity::MergeFrom(from._internal_forwarding_identity());
  }
}

void Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.notification.v1.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.notification.v1.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  if (_internal_has_sender_id()) {
    if (!sender_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_id()) {
    if (!target_id_->IsInitialized()) return false;
  }
  if (_internal_has_sender_account_id()) {
    if (!sender_account_id_->IsInitialized()) return false;
  }
  if (_internal_has_target_account_id()) {
    if (!target_account_id_->IsInitialized()) return false;
  }
  if (_internal_has_peer()) {
    if (!peer_->IsInitialized()) return false;
  }
  if (_internal_has_forwarding_identity()) {
    if (!forwarding_identity_->IsInitialized()) return false;
  }
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_battle_tag_.Swap(&other->sender_battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_battle_tag_.Swap(&other->target_battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_id_, other->sender_id_);
  swap(target_id_, other->target_id_);
  swap(sender_account_id_, other->sender_account_id_);
  swap(target_account_id_, other->target_account_id_);
  swap(peer_, other->peer_);
  swap(forwarding_identity_, other->forwarding_identity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace notification
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::notification::v1::Target* Arena::CreateMaybeMessage< ::bgs::protocol::notification::v1::Target >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::notification::v1::Target >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::notification::v1::Subscription* Arena::CreateMaybeMessage< ::bgs::protocol::notification::v1::Subscription >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::notification::v1::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::notification::v1::Notification* Arena::CreateMaybeMessage< ::bgs::protocol::notification::v1::Notification >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::notification::v1::Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
