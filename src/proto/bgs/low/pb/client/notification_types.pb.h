// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/notification_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/account_types.pb.h"
#include "bgs/low/pb/client/attribute_types.pb.h"
#include "bgs/low/pb/client/entity_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace notification {
namespace v1 {
class Notification;
class NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class Subscription;
class SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class Target;
class TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
}  // namespace v1
}  // namespace notification
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::notification::v1::Notification* Arena::CreateMaybeMessage<::bgs::protocol::notification::v1::Notification>(Arena*);
template<> ::bgs::protocol::notification::v1::Subscription* Arena::CreateMaybeMessage<::bgs::protocol::notification::v1::Subscription>(Arena*);
template<> ::bgs::protocol::notification::v1::Target* Arena::CreateMaybeMessage<::bgs::protocol::notification::v1::Target>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace notification {
namespace v1 {

// ===================================================================

class Target :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.notification.v1.Target) */ {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target& operator=(Target&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }
  inline void Swap(Target* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target* New() const final {
    return CreateMaybeMessage<Target>(nullptr);
  }

  Target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.notification.v1.Target";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kIdentityFieldNumber = 1,
  };
  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional .bgs.protocol.account.v1.Identity identity = 1;
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;
  public:
  void clear_identity();
  const ::bgs::protocol::account::v1::Identity& identity() const;
  ::bgs::protocol::account::v1::Identity* release_identity();
  ::bgs::protocol::account::v1::Identity* mutable_identity();
  void set_allocated_identity(::bgs::protocol::account::v1::Identity* identity);
  private:
  const ::bgs::protocol::account::v1::Identity& _internal_identity() const;
  ::bgs::protocol::account::v1::Identity* _internal_mutable_identity();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.notification.v1.Target)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::bgs::protocol::account::v1::Identity* identity_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Subscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.notification.v1.Subscription) */ {
 public:
  Subscription();
  virtual ~Subscription();

  Subscription(const Subscription& from);
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscription& operator=(Subscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Subscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscription* New() const final {
    return CreateMaybeMessage<Subscription>(nullptr);
  }

  Subscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscription& from);
  void MergeFrom(const Subscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.notification.v1.Subscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kSubscriberFieldNumber = 2,
    kDeliveryRequiredFieldNumber = 3,
  };
  // repeated .bgs.protocol.notification.v1.Target target = 1;
  int target_size() const;
  private:
  int _internal_target_size() const;
  public:
  void clear_target();
  ::bgs::protocol::notification::v1::Target* mutable_target(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::notification::v1::Target >*
      mutable_target();
  private:
  const ::bgs::protocol::notification::v1::Target& _internal_target(int index) const;
  ::bgs::protocol::notification::v1::Target* _internal_add_target();
  public:
  const ::bgs::protocol::notification::v1::Target& target(int index) const;
  ::bgs::protocol::notification::v1::Target* add_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::notification::v1::Target >&
      target() const;

  // optional .bgs.protocol.account.v1.Identity subscriber = 2;
  bool has_subscriber() const;
  private:
  bool _internal_has_subscriber() const;
  public:
  void clear_subscriber();
  const ::bgs::protocol::account::v1::Identity& subscriber() const;
  ::bgs::protocol::account::v1::Identity* release_subscriber();
  ::bgs::protocol::account::v1::Identity* mutable_subscriber();
  void set_allocated_subscriber(::bgs::protocol::account::v1::Identity* subscriber);
  private:
  const ::bgs::protocol::account::v1::Identity& _internal_subscriber() const;
  ::bgs::protocol::account::v1::Identity* _internal_mutable_subscriber();
  public:

  // optional bool delivery_required = 3 [default = false];
  bool has_delivery_required() const;
  private:
  bool _internal_has_delivery_required() const;
  public:
  void clear_delivery_required();
  bool delivery_required() const;
  void set_delivery_required(bool value);
  private:
  bool _internal_delivery_required() const;
  void _internal_set_delivery_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.notification.v1.Subscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::notification::v1::Target > target_;
  ::bgs::protocol::account::v1::Identity* subscriber_;
  bool delivery_required_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Notification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.notification.v1.Notification) */ {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notification* New() const final {
    return CreateMaybeMessage<Notification>(nullptr);
  }

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.notification.v1.Notification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 4,
    kTypeFieldNumber = 3,
    kSenderBattleTagFieldNumber = 7,
    kTargetBattleTagFieldNumber = 8,
    kSenderIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kSenderAccountIdFieldNumber = 5,
    kTargetAccountIdFieldNumber = 6,
    kPeerFieldNumber = 9,
    kForwardingIdentityFieldNumber = 10,
  };
  // repeated .bgs.protocol.Attribute attribute = 4;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  // required string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string sender_battle_tag = 7;
  bool has_sender_battle_tag() const;
  private:
  bool _internal_has_sender_battle_tag() const;
  public:
  void clear_sender_battle_tag();
  const std::string& sender_battle_tag() const;
  void set_sender_battle_tag(const std::string& value);
  void set_sender_battle_tag(std::string&& value);
  void set_sender_battle_tag(const char* value);
  void set_sender_battle_tag(const char* value, size_t size);
  std::string* mutable_sender_battle_tag();
  std::string* release_sender_battle_tag();
  void set_allocated_sender_battle_tag(std::string* sender_battle_tag);
  private:
  const std::string& _internal_sender_battle_tag() const;
  void _internal_set_sender_battle_tag(const std::string& value);
  std::string* _internal_mutable_sender_battle_tag();
  public:

  // optional string target_battle_tag = 8;
  bool has_target_battle_tag() const;
  private:
  bool _internal_has_target_battle_tag() const;
  public:
  void clear_target_battle_tag();
  const std::string& target_battle_tag() const;
  void set_target_battle_tag(const std::string& value);
  void set_target_battle_tag(std::string&& value);
  void set_target_battle_tag(const char* value);
  void set_target_battle_tag(const char* value, size_t size);
  std::string* mutable_target_battle_tag();
  std::string* release_target_battle_tag();
  void set_allocated_target_battle_tag(std::string* target_battle_tag);
  private:
  const std::string& _internal_target_battle_tag() const;
  void _internal_set_target_battle_tag(const std::string& value);
  std::string* _internal_mutable_target_battle_tag();
  public:

  // optional .bgs.protocol.EntityId sender_id = 1;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  const ::bgs::protocol::EntityId& sender_id() const;
  ::bgs::protocol::EntityId* release_sender_id();
  ::bgs::protocol::EntityId* mutable_sender_id();
  void set_allocated_sender_id(::bgs::protocol::EntityId* sender_id);
  private:
  const ::bgs::protocol::EntityId& _internal_sender_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_sender_id();
  public:

  // required .bgs.protocol.EntityId target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::bgs::protocol::EntityId& target_id() const;
  ::bgs::protocol::EntityId* release_target_id();
  ::bgs::protocol::EntityId* mutable_target_id();
  void set_allocated_target_id(::bgs::protocol::EntityId* target_id);
  private:
  const ::bgs::protocol::EntityId& _internal_target_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_target_id();
  public:

  // optional .bgs.protocol.EntityId sender_account_id = 5;
  bool has_sender_account_id() const;
  private:
  bool _internal_has_sender_account_id() const;
  public:
  void clear_sender_account_id();
  const ::bgs::protocol::EntityId& sender_account_id() const;
  ::bgs::protocol::EntityId* release_sender_account_id();
  ::bgs::protocol::EntityId* mutable_sender_account_id();
  void set_allocated_sender_account_id(::bgs::protocol::EntityId* sender_account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_sender_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_sender_account_id();
  public:

  // optional .bgs.protocol.EntityId target_account_id = 6;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  const ::bgs::protocol::EntityId& target_account_id() const;
  ::bgs::protocol::EntityId* release_target_account_id();
  ::bgs::protocol::EntityId* mutable_target_account_id();
  void set_allocated_target_account_id(::bgs::protocol::EntityId* target_account_id);
  private:
  const ::bgs::protocol::EntityId& _internal_target_account_id() const;
  ::bgs::protocol::EntityId* _internal_mutable_target_account_id();
  public:

  // optional .bgs.protocol.ProcessId peer = 9;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::bgs::protocol::ProcessId& peer() const;
  ::bgs::protocol::ProcessId* release_peer();
  ::bgs::protocol::ProcessId* mutable_peer();
  void set_allocated_peer(::bgs::protocol::ProcessId* peer);
  private:
  const ::bgs::protocol::ProcessId& _internal_peer() const;
  ::bgs::protocol::ProcessId* _internal_mutable_peer();
  public:

  // optional .bgs.protocol.account.v1.Identity forwarding_identity = 10;
  bool has_forwarding_identity() const;
  private:
  bool _internal_has_forwarding_identity() const;
  public:
  void clear_forwarding_identity();
  const ::bgs::protocol::account::v1::Identity& forwarding_identity() const;
  ::bgs::protocol::account::v1::Identity* release_forwarding_identity();
  ::bgs::protocol::account::v1::Identity* mutable_forwarding_identity();
  void set_allocated_forwarding_identity(::bgs::protocol::account::v1::Identity* forwarding_identity);
  private:
  const ::bgs::protocol::account::v1::Identity& _internal_forwarding_identity() const;
  ::bgs::protocol::account::v1::Identity* _internal_mutable_forwarding_identity();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.notification.v1.Notification)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_battle_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_battle_tag_;
  ::bgs::protocol::EntityId* sender_id_;
  ::bgs::protocol::EntityId* target_id_;
  ::bgs::protocol::EntityId* sender_account_id_;
  ::bgs::protocol::EntityId* target_account_id_;
  ::bgs::protocol::ProcessId* peer_;
  ::bgs::protocol::account::v1::Identity* forwarding_identity_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Target

// optional .bgs.protocol.account.v1.Identity identity = 1;
inline bool Target::_internal_has_identity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || identity_ != nullptr);
  return value;
}
inline bool Target::has_identity() const {
  return _internal_has_identity();
}
inline const ::bgs::protocol::account::v1::Identity& Target::_internal_identity() const {
  const ::bgs::protocol::account::v1::Identity* p = identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::Identity*>(
      &::bgs::protocol::account::v1::_Identity_default_instance_);
}
inline const ::bgs::protocol::account::v1::Identity& Target::identity() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Target.identity)
  return _internal_identity();
}
inline ::bgs::protocol::account::v1::Identity* Target::release_identity() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Target.identity)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::Identity* temp = identity_;
  identity_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::Identity* Target::_internal_mutable_identity() {
  _has_bits_[0] |= 0x00000002u;
  if (identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::Identity>(GetArenaNoVirtual());
    identity_ = p;
  }
  return identity_;
}
inline ::bgs::protocol::account::v1::Identity* Target::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Target.identity)
  return _internal_mutable_identity();
}
inline void Target::set_allocated_identity(::bgs::protocol::account::v1::Identity* identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_);
  }
  if (identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Target.identity)
}

// optional string type = 2;
inline bool Target::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Target::has_type() const {
  return _internal_has_type();
}
inline void Target::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Target::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Target.type)
  return _internal_type();
}
inline void Target::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.notification.v1.Target.type)
}
inline std::string* Target::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Target.type)
  return _internal_mutable_type();
}
inline const std::string& Target::_internal_type() const {
  return type_.GetNoArena();
}
inline void Target::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Target::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.notification.v1.Target.type)
}
inline void Target::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.notification.v1.Target.type)
}
inline void Target::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.notification.v1.Target.type)
}
inline std::string* Target::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Target::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Target.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Target.type)
}

// -------------------------------------------------------------------

// Subscription

// repeated .bgs.protocol.notification.v1.Target target = 1;
inline int Subscription::_internal_target_size() const {
  return target_.size();
}
inline int Subscription::target_size() const {
  return _internal_target_size();
}
inline void Subscription::clear_target() {
  target_.Clear();
}
inline ::bgs::protocol::notification::v1::Target* Subscription::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Subscription.target)
  return target_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::notification::v1::Target >*
Subscription::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.notification.v1.Subscription.target)
  return &target_;
}
inline const ::bgs::protocol::notification::v1::Target& Subscription::_internal_target(int index) const {
  return target_.Get(index);
}
inline const ::bgs::protocol::notification::v1::Target& Subscription::target(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Subscription.target)
  return _internal_target(index);
}
inline ::bgs::protocol::notification::v1::Target* Subscription::_internal_add_target() {
  return target_.Add();
}
inline ::bgs::protocol::notification::v1::Target* Subscription::add_target() {
  // @@protoc_insertion_point(field_add:bgs.protocol.notification.v1.Subscription.target)
  return _internal_add_target();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::notification::v1::Target >&
Subscription::target() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.notification.v1.Subscription.target)
  return target_;
}

// optional .bgs.protocol.account.v1.Identity subscriber = 2;
inline bool Subscription::_internal_has_subscriber() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || subscriber_ != nullptr);
  return value;
}
inline bool Subscription::has_subscriber() const {
  return _internal_has_subscriber();
}
inline const ::bgs::protocol::account::v1::Identity& Subscription::_internal_subscriber() const {
  const ::bgs::protocol::account::v1::Identity* p = subscriber_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::Identity*>(
      &::bgs::protocol::account::v1::_Identity_default_instance_);
}
inline const ::bgs::protocol::account::v1::Identity& Subscription::subscriber() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Subscription.subscriber)
  return _internal_subscriber();
}
inline ::bgs::protocol::account::v1::Identity* Subscription::release_subscriber() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Subscription.subscriber)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::Identity* temp = subscriber_;
  subscriber_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::Identity* Subscription::_internal_mutable_subscriber() {
  _has_bits_[0] |= 0x00000001u;
  if (subscriber_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::Identity>(GetArenaNoVirtual());
    subscriber_ = p;
  }
  return subscriber_;
}
inline ::bgs::protocol::account::v1::Identity* Subscription::mutable_subscriber() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Subscription.subscriber)
  return _internal_mutable_subscriber();
}
inline void Subscription::set_allocated_subscriber(::bgs::protocol::account::v1::Identity* subscriber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscriber_);
  }
  if (subscriber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscriber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscriber, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscriber_ = subscriber;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Subscription.subscriber)
}

// optional bool delivery_required = 3 [default = false];
inline bool Subscription::_internal_has_delivery_required() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Subscription::has_delivery_required() const {
  return _internal_has_delivery_required();
}
inline void Subscription::clear_delivery_required() {
  delivery_required_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Subscription::_internal_delivery_required() const {
  return delivery_required_;
}
inline bool Subscription::delivery_required() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Subscription.delivery_required)
  return _internal_delivery_required();
}
inline void Subscription::_internal_set_delivery_required(bool value) {
  _has_bits_[0] |= 0x00000002u;
  delivery_required_ = value;
}
inline void Subscription::set_delivery_required(bool value) {
  _internal_set_delivery_required(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.notification.v1.Subscription.delivery_required)
}

// -------------------------------------------------------------------

// Notification

// optional .bgs.protocol.EntityId sender_id = 1;
inline bool Notification::_internal_has_sender_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || sender_id_ != nullptr);
  return value;
}
inline bool Notification::has_sender_id() const {
  return _internal_has_sender_id();
}
inline const ::bgs::protocol::EntityId& Notification::_internal_sender_id() const {
  const ::bgs::protocol::EntityId* p = sender_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Notification::sender_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.sender_id)
  return _internal_sender_id();
}
inline ::bgs::protocol::EntityId* Notification::release_sender_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.sender_id)
  _has_bits_[0] &= ~0x00000008u;
  ::bgs::protocol::EntityId* temp = sender_id_;
  sender_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Notification::_internal_mutable_sender_id() {
  _has_bits_[0] |= 0x00000008u;
  if (sender_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    sender_id_ = p;
  }
  return sender_id_;
}
inline ::bgs::protocol::EntityId* Notification::mutable_sender_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.sender_id)
  return _internal_mutable_sender_id();
}
inline void Notification::set_allocated_sender_id(::bgs::protocol::EntityId* sender_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_id_);
  }
  if (sender_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sender_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sender_id_ = sender_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.sender_id)
}

// required .bgs.protocol.EntityId target_id = 2;
inline bool Notification::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || target_id_ != nullptr);
  return value;
}
inline bool Notification::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::bgs::protocol::EntityId& Notification::_internal_target_id() const {
  const ::bgs::protocol::EntityId* p = target_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Notification::target_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.target_id)
  return _internal_target_id();
}
inline ::bgs::protocol::EntityId* Notification::release_target_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.target_id)
  _has_bits_[0] &= ~0x00000010u;
  ::bgs::protocol::EntityId* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Notification::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000010u;
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    target_id_ = p;
  }
  return target_id_;
}
inline ::bgs::protocol::EntityId* Notification::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.target_id)
  return _internal_mutable_target_id();
}
inline void Notification::set_allocated_target_id(::bgs::protocol::EntityId* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.target_id)
}

// required string type = 3;
inline bool Notification::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Notification::has_type() const {
  return _internal_has_type();
}
inline void Notification::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Notification::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.type)
  return _internal_type();
}
inline void Notification::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.notification.v1.Notification.type)
}
inline std::string* Notification::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.type)
  return _internal_mutable_type();
}
inline const std::string& Notification::_internal_type() const {
  return type_.GetNoArena();
}
inline void Notification::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Notification::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.notification.v1.Notification.type)
}
inline void Notification::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.notification.v1.Notification.type)
}
inline void Notification::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.notification.v1.Notification.type)
}
inline std::string* Notification::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Notification::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.type)
}

// repeated .bgs.protocol.Attribute attribute = 4;
inline int Notification::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Notification::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* Notification::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
Notification::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.notification.v1.Notification.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& Notification::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& Notification::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* Notification::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* Notification::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.notification.v1.Notification.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
Notification::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.notification.v1.Notification.attribute)
  return attribute_;
}

// optional .bgs.protocol.EntityId sender_account_id = 5;
inline bool Notification::_internal_has_sender_account_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || sender_account_id_ != nullptr);
  return value;
}
inline bool Notification::has_sender_account_id() const {
  return _internal_has_sender_account_id();
}
inline const ::bgs::protocol::EntityId& Notification::_internal_sender_account_id() const {
  const ::bgs::protocol::EntityId* p = sender_account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Notification::sender_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.sender_account_id)
  return _internal_sender_account_id();
}
inline ::bgs::protocol::EntityId* Notification::release_sender_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.sender_account_id)
  _has_bits_[0] &= ~0x00000020u;
  ::bgs::protocol::EntityId* temp = sender_account_id_;
  sender_account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Notification::_internal_mutable_sender_account_id() {
  _has_bits_[0] |= 0x00000020u;
  if (sender_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    sender_account_id_ = p;
  }
  return sender_account_id_;
}
inline ::bgs::protocol::EntityId* Notification::mutable_sender_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.sender_account_id)
  return _internal_mutable_sender_account_id();
}
inline void Notification::set_allocated_sender_account_id(::bgs::protocol::EntityId* sender_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_account_id_);
  }
  if (sender_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sender_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  sender_account_id_ = sender_account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.sender_account_id)
}

// optional .bgs.protocol.EntityId target_account_id = 6;
inline bool Notification::_internal_has_target_account_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || target_account_id_ != nullptr);
  return value;
}
inline bool Notification::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline const ::bgs::protocol::EntityId& Notification::_internal_target_account_id() const {
  const ::bgs::protocol::EntityId* p = target_account_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Notification::target_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.target_account_id)
  return _internal_target_account_id();
}
inline ::bgs::protocol::EntityId* Notification::release_target_account_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.target_account_id)
  _has_bits_[0] &= ~0x00000040u;
  ::bgs::protocol::EntityId* temp = target_account_id_;
  target_account_id_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Notification::_internal_mutable_target_account_id() {
  _has_bits_[0] |= 0x00000040u;
  if (target_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    target_account_id_ = p;
  }
  return target_account_id_;
}
inline ::bgs::protocol::EntityId* Notification::mutable_target_account_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.target_account_id)
  return _internal_mutable_target_account_id();
}
inline void Notification::set_allocated_target_account_id(::bgs::protocol::EntityId* target_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_account_id_);
  }
  if (target_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_account_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  target_account_id_ = target_account_id;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.target_account_id)
}

// optional string sender_battle_tag = 7;
inline bool Notification::_internal_has_sender_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Notification::has_sender_battle_tag() const {
  return _internal_has_sender_battle_tag();
}
inline void Notification::clear_sender_battle_tag() {
  sender_battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Notification::sender_battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.sender_battle_tag)
  return _internal_sender_battle_tag();
}
inline void Notification::set_sender_battle_tag(const std::string& value) {
  _internal_set_sender_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.notification.v1.Notification.sender_battle_tag)
}
inline std::string* Notification::mutable_sender_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.sender_battle_tag)
  return _internal_mutable_sender_battle_tag();
}
inline const std::string& Notification::_internal_sender_battle_tag() const {
  return sender_battle_tag_.GetNoArena();
}
inline void Notification::_internal_set_sender_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Notification::set_sender_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.notification.v1.Notification.sender_battle_tag)
}
inline void Notification::set_sender_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.notification.v1.Notification.sender_battle_tag)
}
inline void Notification::set_sender_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.notification.v1.Notification.sender_battle_tag)
}
inline std::string* Notification::_internal_mutable_sender_battle_tag() {
  _has_bits_[0] |= 0x00000002u;
  return sender_battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Notification::release_sender_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.sender_battle_tag)
  if (!_internal_has_sender_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_sender_battle_tag(std::string* sender_battle_tag) {
  if (sender_battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.sender_battle_tag)
}

// optional string target_battle_tag = 8;
inline bool Notification::_internal_has_target_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Notification::has_target_battle_tag() const {
  return _internal_has_target_battle_tag();
}
inline void Notification::clear_target_battle_tag() {
  target_battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Notification::target_battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.target_battle_tag)
  return _internal_target_battle_tag();
}
inline void Notification::set_target_battle_tag(const std::string& value) {
  _internal_set_target_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.notification.v1.Notification.target_battle_tag)
}
inline std::string* Notification::mutable_target_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.target_battle_tag)
  return _internal_mutable_target_battle_tag();
}
inline const std::string& Notification::_internal_target_battle_tag() const {
  return target_battle_tag_.GetNoArena();
}
inline void Notification::_internal_set_target_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  target_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Notification::set_target_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  target_battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.notification.v1.Notification.target_battle_tag)
}
inline void Notification::set_target_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  target_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.notification.v1.Notification.target_battle_tag)
}
inline void Notification::set_target_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  target_battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.notification.v1.Notification.target_battle_tag)
}
inline std::string* Notification::_internal_mutable_target_battle_tag() {
  _has_bits_[0] |= 0x00000004u;
  return target_battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Notification::release_target_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.target_battle_tag)
  if (!_internal_has_target_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return target_battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_target_battle_tag(std::string* target_battle_tag) {
  if (target_battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  target_battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.target_battle_tag)
}

// optional .bgs.protocol.ProcessId peer = 9;
inline bool Notification::_internal_has_peer() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || peer_ != nullptr);
  return value;
}
inline bool Notification::has_peer() const {
  return _internal_has_peer();
}
inline const ::bgs::protocol::ProcessId& Notification::_internal_peer() const {
  const ::bgs::protocol::ProcessId* p = peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ProcessId*>(
      &::bgs::protocol::_ProcessId_default_instance_);
}
inline const ::bgs::protocol::ProcessId& Notification::peer() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.peer)
  return _internal_peer();
}
inline ::bgs::protocol::ProcessId* Notification::release_peer() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.peer)
  _has_bits_[0] &= ~0x00000080u;
  ::bgs::protocol::ProcessId* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ProcessId* Notification::_internal_mutable_peer() {
  _has_bits_[0] |= 0x00000080u;
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ProcessId>(GetArenaNoVirtual());
    peer_ = p;
  }
  return peer_;
}
inline ::bgs::protocol::ProcessId* Notification::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.peer)
  return _internal_mutable_peer();
}
inline void Notification::set_allocated_peer(::bgs::protocol::ProcessId* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.peer)
}

// optional .bgs.protocol.account.v1.Identity forwarding_identity = 10;
inline bool Notification::_internal_has_forwarding_identity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || forwarding_identity_ != nullptr);
  return value;
}
inline bool Notification::has_forwarding_identity() const {
  return _internal_has_forwarding_identity();
}
inline const ::bgs::protocol::account::v1::Identity& Notification::_internal_forwarding_identity() const {
  const ::bgs::protocol::account::v1::Identity* p = forwarding_identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::Identity*>(
      &::bgs::protocol::account::v1::_Identity_default_instance_);
}
inline const ::bgs::protocol::account::v1::Identity& Notification::forwarding_identity() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.Notification.forwarding_identity)
  return _internal_forwarding_identity();
}
inline ::bgs::protocol::account::v1::Identity* Notification::release_forwarding_identity() {
  // @@protoc_insertion_point(field_release:bgs.protocol.notification.v1.Notification.forwarding_identity)
  _has_bits_[0] &= ~0x00000100u;
  ::bgs::protocol::account::v1::Identity* temp = forwarding_identity_;
  forwarding_identity_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::Identity* Notification::_internal_mutable_forwarding_identity() {
  _has_bits_[0] |= 0x00000100u;
  if (forwarding_identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::Identity>(GetArenaNoVirtual());
    forwarding_identity_ = p;
  }
  return forwarding_identity_;
}
inline ::bgs::protocol::account::v1::Identity* Notification::mutable_forwarding_identity() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.Notification.forwarding_identity)
  return _internal_mutable_forwarding_identity();
}
inline void Notification::set_allocated_forwarding_identity(::bgs::protocol::account::v1::Identity* forwarding_identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forwarding_identity_);
  }
  if (forwarding_identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forwarding_identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forwarding_identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  forwarding_identity_ = forwarding_identity;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.Notification.forwarding_identity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace notification
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fnotification_5ftypes_2eproto
