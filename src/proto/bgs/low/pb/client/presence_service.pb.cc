// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/presence_service.proto

#include "bgs/low/pb/client/presence_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeResult_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto;
namespace bgs {
namespace protocol {
namespace presence {
namespace v1 {
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
} _SubscribeRequest_default_instance_;
class SubscribeNotificationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeNotificationRequest> _instance;
} _SubscribeNotificationRequest_default_instance_;
class UnsubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeRequest> _instance;
} _UnsubscribeRequest_default_instance_;
class UpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateRequest> _instance;
} _UpdateRequest_default_instance_;
class QueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryRequest> _instance;
} _QueryRequest_default_instance_;
class QueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponse> _instance;
} _QueryResponse_default_instance_;
class OwnershipRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OwnershipRequest> _instance;
} _OwnershipRequest_default_instance_;
class BatchSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchSubscribeRequest> _instance;
} _BatchSubscribeRequest_default_instance_;
class SubscribeResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeResult> _instance;
} _SubscribeResult_default_instance_;
class BatchSubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchSubscribeResponse> _instance;
} _BatchSubscribeResponse_default_instance_;
class BatchUnsubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchUnsubscribeRequest> _instance;
} _BatchUnsubscribeRequest_default_instance_;
}  // namespace v1
}  // namespace presence
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_BatchSubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_BatchSubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::BatchSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::BatchSubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchSubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BatchSubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_BatchSubscribeResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_BatchSubscribeResponse_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::BatchSubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::BatchSubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchSubscribeResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatchSubscribeResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_SubscribeResult_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_BatchUnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_BatchUnsubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::BatchUnsubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::BatchUnsubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchUnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatchUnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_OwnershipRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_OwnershipRequest_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::OwnershipRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::OwnershipRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OwnershipRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OwnershipRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_QueryRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_QueryRequest_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::QueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::QueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_QueryResponse_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::QueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::QueryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeNotificationRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_SubscribeNotificationRequest_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::SubscribeNotificationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::SubscribeNotificationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeNotificationRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeNotificationRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_SubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeResult_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_SubscribeResult_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::SubscribeResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::SubscribeResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeResult_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeResult_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_UnsubscribeRequest_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::UnsubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::UnsubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UpdateRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_UpdateRequest_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::UpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::UpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeRequest, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeRequest, key_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeNotificationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeNotificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeNotificationRequest, entity_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UnsubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UnsubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UnsubscribeRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UnsubscribeRequest, object_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UpdateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UpdateRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UpdateRequest, field_operation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UpdateRequest, no_create_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::UpdateRequest, agent_id_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::QueryRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::QueryRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::QueryRequest, key_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::QueryRequest, agent_id_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::QueryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::QueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::QueryResponse, field_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::OwnershipRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::OwnershipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::OwnershipRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::OwnershipRequest, release_ownership_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeRequest, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeRequest, key_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeRequest, object_id_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeResult, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::SubscribeResult, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchSubscribeResponse, subscribe_failed_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchUnsubscribeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchUnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchUnsubscribeRequest, agent_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchUnsubscribeRequest, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::BatchUnsubscribeRequest, object_id_),
  0,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::bgs::protocol::presence::v1::SubscribeRequest)},
  { 15, 21, sizeof(::bgs::protocol::presence::v1::SubscribeNotificationRequest)},
  { 22, 30, sizeof(::bgs::protocol::presence::v1::UnsubscribeRequest)},
  { 33, 42, sizeof(::bgs::protocol::presence::v1::UpdateRequest)},
  { 46, 54, sizeof(::bgs::protocol::presence::v1::QueryRequest)},
  { 57, 63, sizeof(::bgs::protocol::presence::v1::QueryResponse)},
  { 64, 71, sizeof(::bgs::protocol::presence::v1::OwnershipRequest)},
  { 73, 83, sizeof(::bgs::protocol::presence::v1::BatchSubscribeRequest)},
  { 88, 95, sizeof(::bgs::protocol::presence::v1::SubscribeResult)},
  { 97, 103, sizeof(::bgs::protocol::presence::v1::BatchSubscribeResponse)},
  { 104, 112, sizeof(::bgs::protocol::presence::v1::BatchUnsubscribeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_SubscribeNotificationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_UnsubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_UpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_QueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_QueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_OwnershipRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_BatchSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_SubscribeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_BatchSubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_BatchUnsubscribeRequest_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(bgs/low/pb/client/presence_service.pro"
  "to\022\030bgs.protocol.presence.v1\032$bgs/low/pb"
  "/client/entity_types.proto\032&bgs/low/pb/c"
  "lient/presence_types.proto\032!bgs/low/pb/c"
  "lient/rpc_types.proto\"\351\001\n\020SubscribeReque"
  "st\022(\n\010agent_id\030\001 \001(\0132\026.bgs.protocol.Enti"
  "tyId\022)\n\tentity_id\030\002 \002(\0132\026.bgs.protocol.E"
  "ntityId\022\021\n\tobject_id\030\003 \002(\004\022%\n\007program\030\004 "
  "\003(\007B\024\212\371+\006*\004\n\002\010\001\212\371+\006*\004\n\002\020d\022F\n\003key\030\006 \003(\0132\""
  ".bgs.protocol.presence.v1.FieldKeyB\025\212\371+\006"
  "*\004\n\002\010\001\212\371+\007*\005\n\003\020\364\003\"I\n\034SubscribeNotificati"
  "onRequest\022)\n\tentity_id\030\001 \002(\0132\026.bgs.proto"
  "col.EntityId\"|\n\022UnsubscribeRequest\022(\n\010ag"
  "ent_id\030\001 \001(\0132\026.bgs.protocol.EntityId\022)\n\t"
  "entity_id\030\002 \002(\0132\026.bgs.protocol.EntityId\022"
  "\021\n\tobject_id\030\003 \001(\004\"\272\001\n\rUpdateRequest\022)\n\t"
  "entity_id\030\001 \002(\0132\026.bgs.protocol.EntityId\022"
  "A\n\017field_operation\030\002 \003(\0132(.bgs.protocol."
  "presence.v1.FieldOperation\022\021\n\tno_create\030"
  "\003 \001(\010\022(\n\010agent_id\030\004 \001(\0132\026.bgs.protocol.E"
  "ntityId\"\224\001\n\014QueryRequest\022)\n\tentity_id\030\001 "
  "\002(\0132\026.bgs.protocol.EntityId\022/\n\003key\030\002 \003(\013"
  "2\".bgs.protocol.presence.v1.FieldKey\022(\n\010"
  "agent_id\030\003 \001(\0132\026.bgs.protocol.EntityId\"\?"
  "\n\rQueryResponse\022.\n\005field\030\002 \003(\0132\037.bgs.pro"
  "tocol.presence.v1.Field\"X\n\020OwnershipRequ"
  "est\022)\n\tentity_id\030\001 \002(\0132\026.bgs.protocol.En"
  "tityId\022\031\n\021release_ownership\030\002 \001(\010\"\205\002\n\025Ba"
  "tchSubscribeRequest\022(\n\010agent_id\030\001 \001(\0132\026."
  "bgs.protocol.EntityId\022@\n\tentity_id\030\002 \003(\013"
  "2\026.bgs.protocol.EntityIdB\025\212\371+\006*\004\n\002\010\001\212\371+\007"
  "*\005\n\003\020\372\001\022%\n\007program\030\003 \003(\007B\024\212\371+\006*\004\n\002\010\001\212\371+\006"
  "*\004\n\002\020d\022F\n\003key\030\004 \003(\0132\".bgs.protocol.prese"
  "nce.v1.FieldKeyB\025\212\371+\006*\004\n\002\010\001\212\371+\007*\005\n\003\020\364\003\022\021"
  "\n\tobject_id\030\005 \001(\004\"L\n\017SubscribeResult\022)\n\t"
  "entity_id\030\001 \001(\0132\026.bgs.protocol.EntityId\022"
  "\016\n\006result\030\002 \001(\r\"]\n\026BatchSubscribeRespons"
  "e\022C\n\020subscribe_failed\030\001 \003(\0132).bgs.protoc"
  "ol.presence.v1.SubscribeResult\"\230\001\n\027Batch"
  "UnsubscribeRequest\022(\n\010agent_id\030\001 \001(\0132\026.b"
  "gs.protocol.EntityId\022@\n\tentity_id\030\002 \003(\0132"
  "\026.bgs.protocol.EntityIdB\025\212\371+\006*\004\n\002\010\001\212\371+\007*"
  "\005\n\003\020\372\001\022\021\n\tobject_id\030\003 \001(\0042\340\006\n\017PresenceSe"
  "rvice\022U\n\tSubscribe\022*.bgs.protocol.presen"
  "ce.v1.SubscribeRequest\032\024.bgs.protocol.No"
  "Data\"\006\202\371+\002\010\001\022Y\n\013Unsubscribe\022,.bgs.protoc"
  "ol.presence.v1.UnsubscribeRequest\032\024.bgs."
  "protocol.NoData\"\006\202\371+\002\010\002\022O\n\006Update\022\'.bgs."
  "protocol.presence.v1.UpdateRequest\032\024.bgs"
  ".protocol.NoData\"\006\202\371+\002\010\003\022`\n\005Query\022&.bgs."
  "protocol.presence.v1.QueryRequest\032\'.bgs."
  "protocol.presence.v1.QueryResponse\"\006\202\371+\002"
  "\010\004\022U\n\tOwnership\022*.bgs.protocol.presence."
  "v1.OwnershipRequest\032\024.bgs.protocol.NoDat"
  "a\"\006\202\371+\002\010\005\022m\n\025SubscribeNotification\0226.bgs"
  ".protocol.presence.v1.SubscribeNotificat"
  "ionRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010\007"
  "\022{\n\016BatchSubscribe\022/.bgs.protocol.presen"
  "ce.v1.BatchSubscribeRequest\0320.bgs.protoc"
  "ol.presence.v1.BatchSubscribeResponse\"\006\202"
  "\371+\002\010\010\022c\n\020BatchUnsubscribe\0221.bgs.protocol"
  ".presence.v1.BatchUnsubscribeRequest\032\024.b"
  "gs.protocol.NoData\"\006\202\371+\002\010\t\032@\202\371+(\n&bnet.p"
  "rotocol.presence.PresenceService\202\371+\n*\010pr"
  "esence\212\371+\002\020\001B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto_deps[3] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto_sccs[11] = {
  &scc_info_BatchSubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_BatchSubscribeResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_BatchUnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_OwnershipRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_QueryRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_QueryResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_SubscribeNotificationRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_SubscribeResult_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
  &scc_info_UpdateRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto, "bgs/low/pb/client/presence_service.proto", 2577,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto_deps, 11, 3,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto, 11, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto)), true);
namespace bgs {
namespace protocol {
namespace presence {
namespace v1 {

// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_SubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::presence::v1::_SubscribeRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const SubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& entity_id(const SubscribeRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::EntityId&
SubscribeRequest::_Internal::agent_id(const SubscribeRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::EntityId&
SubscribeRequest::_Internal::entity_id(const SubscribeRequest* msg) {
  return *msg->entity_id_;
}
void SubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SubscribeRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SubscribeRequest::clear_key() {
  key_.Clear();
}
SubscribeRequest::SubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      program_(from.program_),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(object_id_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete entity_id_;
}

void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  program_.Clear();
  key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entity_id_ != nullptr);
      entity_id_->Clear();
    }
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 program = 4 [(.bgs.protocol.valid) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_program(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_program(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.presence.v1.FieldKey key = 6 [(.bgs.protocol.valid) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required .bgs.protocol.EntityId entity_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_id(this), target, stream);
  }

  // required uint64 object_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_object_id(), target);
  }

  // repeated fixed32 program = 4 [(.bgs.protocol.valid) = {
  for (int i = 0, n = this->_internal_program_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_program(i), target);
  }

  // repeated .bgs.protocol.presence.v1.FieldKey key = 6 [(.bgs.protocol.valid) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_key(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.presence.v1.SubscribeRequest)
  size_t total_size = 0;

  if (_internal_has_entity_id()) {
    // required .bgs.protocol.EntityId entity_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  if (_internal_has_object_id()) {
    // required uint64 object_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  return total_size;
}
size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.SubscribeRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .bgs.protocol.EntityId entity_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);

    // required uint64 object_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 program = 4 [(.bgs.protocol.valid) = {
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_program_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_program_size());
    total_size += data_size;
  }

  // repeated .bgs.protocol.presence.v1.FieldKey key = 6 [(.bgs.protocol.valid) = {
  total_size += 1UL * this->_internal_key_size();
  for (const auto& msg : this->key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  program_.MergeFrom(from.program_);
  key_.MergeFrom(from.key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000004u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(key_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  program_.InternalSwap(&other->program_);
  key_.InternalSwap(&other->key_);
  swap(agent_id_, other->agent_id_);
  swap(entity_id_, other->entity_id_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeNotificationRequest::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_SubscribeNotificationRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class SubscribeNotificationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeNotificationRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const SubscribeNotificationRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::EntityId&
SubscribeNotificationRequest::_Internal::entity_id(const SubscribeNotificationRequest* msg) {
  return *msg->entity_id_;
}
void SubscribeNotificationRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubscribeNotificationRequest::SubscribeNotificationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.SubscribeNotificationRequest)
}
SubscribeNotificationRequest::SubscribeNotificationRequest(const SubscribeNotificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.SubscribeNotificationRequest)
}

void SubscribeNotificationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeNotificationRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  entity_id_ = nullptr;
}

SubscribeNotificationRequest::~SubscribeNotificationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  SharedDtor();
}

void SubscribeNotificationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void SubscribeNotificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeNotificationRequest& SubscribeNotificationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeNotificationRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscribeNotificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_id_ != nullptr);
    entity_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeNotificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeNotificationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  return target;
}

size_t SubscribeNotificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId entity_id = 1;
  if (_internal_has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeNotificationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeNotificationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeNotificationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.SubscribeNotificationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.SubscribeNotificationRequest)
    MergeFrom(*source);
  }
}

void SubscribeNotificationRequest::MergeFrom(const SubscribeNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entity_id()) {
    _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
  }
}

void SubscribeNotificationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeNotificationRequest::CopyFrom(const SubscribeNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.SubscribeNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeNotificationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeNotificationRequest::InternalSwap(SubscribeNotificationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_id_, other->entity_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeNotificationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_UnsubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::presence::v1::_UnsubscribeRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class UnsubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const UnsubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& entity_id(const UnsubscribeRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::bgs::protocol::EntityId&
UnsubscribeRequest::_Internal::agent_id(const UnsubscribeRequest* msg) {
  return *msg->agent_id_;
}
const ::bgs::protocol::EntityId&
UnsubscribeRequest::_Internal::entity_id(const UnsubscribeRequest* msg) {
  return *msg->entity_id_;
}
void UnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UnsubscribeRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UnsubscribeRequest::UnsubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.UnsubscribeRequest)
}
UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(object_id_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
  if (this != internal_default_instance()) delete entity_id_;
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entity_id_ != nullptr);
      entity_id_->Clear();
    }
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnsubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.EntityId entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.UnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // required .bgs.protocol.EntityId entity_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_id(this), target, stream);
  }

  // optional uint64 object_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.UnsubscribeRequest)
  return target;
}

size_t UnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.UnsubscribeRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId entity_id = 2;
  if (_internal_has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.EntityId agent_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  // optional uint64 object_id = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.UnsubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.UnsubscribeRequest)
    MergeFrom(*source);
  }
}

void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000004u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeRequest::InternalSwap(UnsubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_id_, other->agent_id_);
  swap(entity_id_, other->entity_id_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateRequest::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_UpdateRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::presence::v1::_UpdateRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class UpdateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const UpdateRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_no_create(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::bgs::protocol::EntityId& agent_id(const UpdateRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
UpdateRequest::_Internal::entity_id(const UpdateRequest* msg) {
  return *msg->entity_id_;
}
const ::bgs::protocol::EntityId&
UpdateRequest::_Internal::agent_id(const UpdateRequest* msg) {
  return *msg->agent_id_;
}
void UpdateRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateRequest::clear_field_operation() {
  field_operation_.Clear();
}
void UpdateRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UpdateRequest::UpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_operation_(from.field_operation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  no_create_ = from.no_create_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.UpdateRequest)
}

void UpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_create_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(no_create_));
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.UpdateRequest)
  SharedDtor();
}

void UpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
  if (this != internal_default_instance()) delete agent_id_;
}

void UpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRequest& UpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.UpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_operation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(entity_id_ != nullptr);
      entity_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
  }
  no_create_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_operation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool no_create = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_no_create(&has_bits);
          no_create_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId agent_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.UpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_operation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_field_operation(i), target, stream);
  }

  // optional bool no_create = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_no_create(), target);
  }

  // optional .bgs.protocol.EntityId agent_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::agent_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.UpdateRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId entity_id = 1;
  if (_internal_has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
  total_size += 1UL * this->_internal_field_operation_size();
  for (const auto& msg : this->field_operation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .bgs.protocol.EntityId agent_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional bool no_create = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.UpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.UpdateRequest)
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_operation_.MergeFrom(from.field_operation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000004u) {
      no_create_ = from.no_create_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(field_operation_)) return false;
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_operation_.InternalSwap(&other->field_operation_);
  swap(entity_id_, other->entity_id_);
  swap(agent_id_, other->agent_id_);
  swap(no_create_, other->no_create_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryRequest::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_QueryRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::presence::v1::_QueryRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class QueryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const QueryRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::EntityId& agent_id(const QueryRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
QueryRequest::_Internal::entity_id(const QueryRequest* msg) {
  return *msg->entity_id_;
}
const ::bgs::protocol::EntityId&
QueryRequest::_Internal::agent_id(const QueryRequest* msg) {
  return *msg->agent_id_;
}
void QueryRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void QueryRequest::clear_key() {
  key_.Clear();
}
void QueryRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
QueryRequest::QueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.QueryRequest)
}

void QueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_id_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(agent_id_));
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.QueryRequest)
  SharedDtor();
}

void QueryRequest::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
  if (this != internal_default_instance()) delete agent_id_;
}

void QueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRequest& QueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(entity_id_ != nullptr);
      entity_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(agent_id_ != nullptr);
      agent_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.presence.v1.FieldKey key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId agent_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // repeated .bgs.protocol.presence.v1.FieldKey key = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_key(i), target, stream);
  }

  // optional .bgs.protocol.EntityId agent_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::agent_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.QueryRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId entity_id = 1;
  if (_internal_has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.presence.v1.FieldKey key = 2;
  total_size += 1UL * this->_internal_key_size();
  for (const auto& msg : this->key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .bgs.protocol.EntityId agent_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.QueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.QueryRequest)
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
  }
}

void QueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(key_)) return false;
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.InternalSwap(&other->key_);
  swap(entity_id_, other->entity_id_);
  swap(agent_id_, other->agent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponse::InitAsDefaultInstance() {
}
class QueryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryResponse>()._has_bits_);
};

void QueryResponse::clear_field() {
  field_.Clear();
}
QueryResponse::QueryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.QueryResponse)
}
QueryResponse::QueryResponse(const QueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.QueryResponse)
}

void QueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.QueryResponse)
  SharedDtor();
}

void QueryResponse::SharedDtor() {
}

void QueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponse& QueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.presence.v1.Field field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.presence.v1.Field field = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_field(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.QueryResponse)
  return target;
}

size_t QueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.QueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.presence.v1.Field field = 2;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.QueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.QueryResponse)
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void QueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(field_)) return false;
  return true;
}

void QueryResponse::InternalSwap(QueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OwnershipRequest::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_OwnershipRequest_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class OwnershipRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnershipRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const OwnershipRequest* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_release_ownership(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
OwnershipRequest::_Internal::entity_id(const OwnershipRequest* msg) {
  return *msg->entity_id_;
}
void OwnershipRequest::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OwnershipRequest::OwnershipRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.OwnershipRequest)
}
OwnershipRequest::OwnershipRequest(const OwnershipRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  release_ownership_ = from.release_ownership_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.OwnershipRequest)
}

void OwnershipRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OwnershipRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&release_ownership_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(release_ownership_));
}

OwnershipRequest::~OwnershipRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.OwnershipRequest)
  SharedDtor();
}

void OwnershipRequest::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void OwnershipRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OwnershipRequest& OwnershipRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OwnershipRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void OwnershipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.OwnershipRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_id_ != nullptr);
    entity_id_->Clear();
  }
  release_ownership_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OwnershipRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool release_ownership = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_release_ownership(&has_bits);
          release_ownership_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OwnershipRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.OwnershipRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // optional bool release_ownership = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_release_ownership(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.OwnershipRequest)
  return target;
}

size_t OwnershipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.OwnershipRequest)
  size_t total_size = 0;

  // required .bgs.protocol.EntityId entity_id = 1;
  if (_internal_has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool release_ownership = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OwnershipRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.OwnershipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OwnershipRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OwnershipRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.OwnershipRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.OwnershipRequest)
    MergeFrom(*source);
  }
}

void OwnershipRequest::MergeFrom(const OwnershipRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.OwnershipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      release_ownership_ = from.release_ownership_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OwnershipRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.OwnershipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnershipRequest::CopyFrom(const OwnershipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.OwnershipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnershipRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void OwnershipRequest::InternalSwap(OwnershipRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_id_, other->entity_id_);
  swap(release_ownership_, other->release_ownership_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnershipRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchSubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_BatchSubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class BatchSubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchSubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const BatchSubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
BatchSubscribeRequest::_Internal::agent_id(const BatchSubscribeRequest* msg) {
  return *msg->agent_id_;
}
void BatchSubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BatchSubscribeRequest::clear_entity_id() {
  entity_id_.Clear();
}
void BatchSubscribeRequest::clear_key() {
  key_.Clear();
}
BatchSubscribeRequest::BatchSubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.BatchSubscribeRequest)
}
BatchSubscribeRequest::BatchSubscribeRequest(const BatchSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entity_id_(from.entity_id_),
      program_(from.program_),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.BatchSubscribeRequest)
}

void BatchSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchSubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(object_id_));
}

BatchSubscribeRequest::~BatchSubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.BatchSubscribeRequest)
  SharedDtor();
}

void BatchSubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void BatchSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchSubscribeRequest& BatchSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchSubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BatchSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.BatchSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_id_.Clear();
  program_.Clear();
  key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BatchSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.EntityId entity_id = 2 [(.bgs.protocol.valid) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated fixed32 program = 3 [(.bgs.protocol.valid) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_program(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_program(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.presence.v1.FieldKey key = 4 [(.bgs.protocol.valid) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 object_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.BatchSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // repeated .bgs.protocol.EntityId entity_id = 2 [(.bgs.protocol.valid) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entity_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entity_id(i), target, stream);
  }

  // repeated fixed32 program = 3 [(.bgs.protocol.valid) = {
  for (int i = 0, n = this->_internal_program_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_program(i), target);
  }

  // repeated .bgs.protocol.presence.v1.FieldKey key = 4 [(.bgs.protocol.valid) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_key(i), target, stream);
  }

  // optional uint64 object_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.BatchSubscribeRequest)
  return target;
}

size_t BatchSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.BatchSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.EntityId entity_id = 2 [(.bgs.protocol.valid) = {
  total_size += 1UL * this->_internal_entity_id_size();
  for (const auto& msg : this->entity_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed32 program = 3 [(.bgs.protocol.valid) = {
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_program_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_program_size());
    total_size += data_size;
  }

  // repeated .bgs.protocol.presence.v1.FieldKey key = 4 [(.bgs.protocol.valid) = {
  total_size += 1UL * this->_internal_key_size();
  for (const auto& msg : this->key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 object_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_object_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.BatchSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.BatchSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.BatchSubscribeRequest)
    MergeFrom(*source);
  }
}

void BatchSubscribeRequest::MergeFrom(const BatchSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.BatchSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_id_.MergeFrom(from.entity_id_);
  program_.MergeFrom(from.program_);
  key_.MergeFrom(from.key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.BatchSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchSubscribeRequest::CopyFrom(const BatchSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.BatchSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchSubscribeRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entity_id_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(key_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void BatchSubscribeRequest::InternalSwap(BatchSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_id_.InternalSwap(&other->entity_id_);
  program_.InternalSwap(&other->program_);
  key_.InternalSwap(&other->key_);
  swap(agent_id_, other->agent_id_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeResult::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_SubscribeResult_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class SubscribeResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeResult>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const SubscribeResult* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
SubscribeResult::_Internal::entity_id(const SubscribeResult* msg) {
  return *msg->entity_id_;
}
void SubscribeResult::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubscribeResult::SubscribeResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.SubscribeResult)
}
SubscribeResult::SubscribeResult(const SubscribeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.SubscribeResult)
}

void SubscribeResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeResult_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(result_));
}

SubscribeResult::~SubscribeResult() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.SubscribeResult)
  SharedDtor();
}

void SubscribeResult::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void SubscribeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeResult& SubscribeResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeResult_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SubscribeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.SubscribeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_id_ != nullptr);
    entity_id_->Clear();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubscribeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.SubscribeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.SubscribeResult)
  return target;
}

size_t SubscribeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.SubscribeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId entity_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_id_);
    }

    // optional uint32 result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.SubscribeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.SubscribeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.SubscribeResult)
    MergeFrom(*source);
  }
}

void SubscribeResult::MergeFrom(const SubscribeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.SubscribeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.SubscribeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResult::CopyFrom(const SubscribeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.SubscribeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResult::IsInitialized() const {
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeResult::InternalSwap(SubscribeResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_id_, other->entity_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchSubscribeResponse::InitAsDefaultInstance() {
}
class BatchSubscribeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchSubscribeResponse>()._has_bits_);
};

BatchSubscribeResponse::BatchSubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.BatchSubscribeResponse)
}
BatchSubscribeResponse::BatchSubscribeResponse(const BatchSubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      subscribe_failed_(from.subscribe_failed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.BatchSubscribeResponse)
}

void BatchSubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchSubscribeResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
}

BatchSubscribeResponse::~BatchSubscribeResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.BatchSubscribeResponse)
  SharedDtor();
}

void BatchSubscribeResponse::SharedDtor() {
}

void BatchSubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchSubscribeResponse& BatchSubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchSubscribeResponse_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BatchSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.BatchSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscribe_failed_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BatchSubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.presence.v1.SubscribeResult subscribe_failed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribe_failed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchSubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.BatchSubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.presence.v1.SubscribeResult subscribe_failed = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscribe_failed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subscribe_failed(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.BatchSubscribeResponse)
  return target;
}

size_t BatchSubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.BatchSubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.presence.v1.SubscribeResult subscribe_failed = 1;
  total_size += 1UL * this->_internal_subscribe_failed_size();
  for (const auto& msg : this->subscribe_failed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchSubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.BatchSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchSubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchSubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.BatchSubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.BatchSubscribeResponse)
    MergeFrom(*source);
  }
}

void BatchSubscribeResponse::MergeFrom(const BatchSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.BatchSubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscribe_failed_.MergeFrom(from.subscribe_failed_);
}

void BatchSubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.BatchSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchSubscribeResponse::CopyFrom(const BatchSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.BatchSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchSubscribeResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(subscribe_failed_)) return false;
  return true;
}

void BatchSubscribeResponse::InternalSwap(BatchSubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscribe_failed_.InternalSwap(&other->subscribe_failed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchSubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchUnsubscribeRequest::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_BatchUnsubscribeRequest_default_instance_._instance.get_mutable()->agent_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class BatchUnsubscribeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchUnsubscribeRequest>()._has_bits_);
  static const ::bgs::protocol::EntityId& agent_id(const BatchUnsubscribeRequest* msg);
  static void set_has_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
BatchUnsubscribeRequest::_Internal::agent_id(const BatchUnsubscribeRequest* msg) {
  return *msg->agent_id_;
}
void BatchUnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != nullptr) agent_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BatchUnsubscribeRequest::clear_entity_id() {
  entity_id_.Clear();
}
BatchUnsubscribeRequest::BatchUnsubscribeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
}
BatchUnsubscribeRequest::BatchUnsubscribeRequest(const BatchUnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entity_id_(from.entity_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_agent_id()) {
    agent_id_ = new ::bgs::protocol::EntityId(*from.agent_id_);
  } else {
    agent_id_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
}

void BatchUnsubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchUnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  ::memset(&agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&agent_id_)) + sizeof(object_id_));
}

BatchUnsubscribeRequest::~BatchUnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  SharedDtor();
}

void BatchUnsubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete agent_id_;
}

void BatchUnsubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchUnsubscribeRequest& BatchUnsubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchUnsubscribeRequest_bgs_2flow_2fpb_2fclient_2fpresence_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BatchUnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_id_ != nullptr);
    agent_id_->Clear();
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BatchUnsubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.EntityId entity_id = 2 [(.bgs.protocol.valid) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchUnsubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_id(this), target, stream);
  }

  // repeated .bgs.protocol.EntityId entity_id = 2 [(.bgs.protocol.valid) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entity_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entity_id(i), target, stream);
  }

  // optional uint64 object_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  return target;
}

size_t BatchUnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.EntityId entity_id = 2 [(.bgs.protocol.valid) = {
  total_size += 1UL * this->_internal_entity_id_size();
  for (const auto& msg : this->entity_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId agent_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agent_id_);
    }

    // optional uint64 object_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_object_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchUnsubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchUnsubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchUnsubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
    MergeFrom(*source);
  }
}

void BatchUnsubscribeRequest::MergeFrom(const BatchUnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_id_.MergeFrom(from.entity_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_agent_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_agent_id());
    }
    if (cached_has_bits & 0x00000002u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchUnsubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchUnsubscribeRequest::CopyFrom(const BatchUnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.BatchUnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchUnsubscribeRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entity_id_)) return false;
  if (_internal_has_agent_id()) {
    if (!agent_id_->IsInitialized()) return false;
  }
  return true;
}

void BatchUnsubscribeRequest::InternalSwap(BatchUnsubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_id_.InternalSwap(&other->entity_id_);
  swap(agent_id_, other->agent_id_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchUnsubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace presence
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::SubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::SubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::SubscribeNotificationRequest* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::SubscribeNotificationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::SubscribeNotificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::UnsubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::UnsubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::UnsubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::UpdateRequest* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::UpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::QueryRequest* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::QueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::QueryResponse* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::QueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::QueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::OwnershipRequest* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::OwnershipRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::OwnershipRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::BatchSubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::BatchSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::BatchSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::SubscribeResult* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::SubscribeResult >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::SubscribeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::BatchSubscribeResponse* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::BatchSubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::BatchSubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::BatchUnsubscribeRequest* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::BatchUnsubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::BatchUnsubscribeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
