// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/presence_types.proto

#include "bgs/low/pb/client/presence_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Variant_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace presence {
namespace v1 {
class RichPresenceLocalizationKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RichPresenceLocalizationKey> _instance;
} _RichPresenceLocalizationKey_default_instance_;
class FieldKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldKey> _instance;
} _FieldKey_default_instance_;
class FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Field> _instance;
} _Field_default_instance_;
class FieldOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldOperation> _instance;
} _FieldOperation_default_instance_;
class PresenceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PresenceState> _instance;
} _PresenceState_default_instance_;
class ChannelStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelState> _instance;
} _ChannelState_default_instance_;
}  // namespace v1
}  // namespace presence
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_ChannelState_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::ChannelState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::ChannelState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_Field_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::Field::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto}, {
      &scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,
      &scc_info_Variant_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_FieldKey_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::FieldKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::FieldKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_FieldOperation_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::FieldOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::FieldOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto}, {
      &scc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_PresenceState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_PresenceState_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::PresenceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::PresenceState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PresenceState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PresenceState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto}, {
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,
      &scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RichPresenceLocalizationKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::presence::v1::_RichPresenceLocalizationKey_default_instance_;
    new (ptr) ::bgs::protocol::presence::v1::RichPresenceLocalizationKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::presence::v1::RichPresenceLocalizationKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RichPresenceLocalizationKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RichPresenceLocalizationKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::RichPresenceLocalizationKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::RichPresenceLocalizationKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::RichPresenceLocalizationKey, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::RichPresenceLocalizationKey, stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::RichPresenceLocalizationKey, localization_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldKey, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldKey, group_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldKey, field_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldKey, unique_id_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::Field, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::Field, key_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::Field, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldOperation, field_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::FieldOperation, operation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::PresenceState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::PresenceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::PresenceState, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::PresenceState, field_operation_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::ChannelState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::ChannelState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::ChannelState, entity_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::ChannelState, field_operation_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::presence::v1::ChannelState, healing_),
  0,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::bgs::protocol::presence::v1::RichPresenceLocalizationKey)},
  { 11, 20, sizeof(::bgs::protocol::presence::v1::FieldKey)},
  { 24, 31, sizeof(::bgs::protocol::presence::v1::Field)},
  { 33, 40, sizeof(::bgs::protocol::presence::v1::FieldOperation)},
  { 42, 49, sizeof(::bgs::protocol::presence::v1::PresenceState)},
  { 51, 59, sizeof(::bgs::protocol::presence::v1::ChannelState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_RichPresenceLocalizationKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_FieldKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_FieldOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_PresenceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::presence::v1::_ChannelState_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&bgs/low/pb/client/presence_types.proto"
  "\022\030bgs.protocol.presence.v1\032\'bgs/low/pb/c"
  "lient/attribute_types.proto\032$bgs/low/pb/"
  "client/entity_types.proto\032%bgs/low/pb/cl"
  "ient/channel_types.proto\"W\n\033RichPresence"
  "LocalizationKey\022\017\n\007program\030\001 \002(\007\022\016\n\006stre"
  "am\030\002 \002(\007\022\027\n\017localization_id\030\003 \002(\r\"O\n\010Fie"
  "ldKey\022\017\n\007program\030\001 \002(\r\022\r\n\005group\030\002 \002(\r\022\r\n"
  "\005field\030\003 \002(\r\022\024\n\tunique_id\030\004 \001(\004:\0010\"^\n\005Fi"
  "eld\022/\n\003key\030\001 \002(\0132\".bgs.protocol.presence"
  ".v1.FieldKey\022$\n\005value\030\002 \002(\0132\025.bgs.protoc"
  "ol.Variant\"\265\001\n\016FieldOperation\022.\n\005field\030\001"
  " \002(\0132\037.bgs.protocol.presence.v1.Field\022N\n"
  "\toperation\030\002 \001(\01626.bgs.protocol.presence"
  ".v1.FieldOperation.OperationType:\003SET\"#\n"
  "\rOperationType\022\007\n\003SET\020\000\022\t\n\005CLEAR\020\001\"}\n\rPr"
  "esenceState\022)\n\tentity_id\030\001 \001(\0132\026.bgs.pro"
  "tocol.EntityId\022A\n\017field_operation\030\002 \003(\0132"
  "(.bgs.protocol.presence.v1.FieldOperatio"
  "n\"\365\001\n\014ChannelState\022)\n\tentity_id\030\001 \001(\0132\026."
  "bgs.protocol.EntityId\022A\n\017field_operation"
  "\030\002 \003(\0132(.bgs.protocol.presence.v1.FieldO"
  "peration\022\026\n\007healing\030\003 \001(\010:\005false2_\n\010pres"
  "ence\022%.bgs.protocol.channel.v1.ChannelSt"
  "ate\030e \001(\0132&.bgs.protocol.presence.v1.Cha"
  "nnelState"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto_deps[3] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fchannel_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto_sccs[6] = {
  &scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,
  &scc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,
  &scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,
  &scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,
  &scc_info_PresenceState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,
  &scc_info_RichPresenceLocalizationKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto, "bgs/low/pb/client/presence_types.proto", 1009,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto, 6, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace presence {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldOperation_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto[0];
}
bool FieldOperation_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FieldOperation_OperationType FieldOperation::SET;
constexpr FieldOperation_OperationType FieldOperation::CLEAR;
constexpr FieldOperation_OperationType FieldOperation::OperationType_MIN;
constexpr FieldOperation_OperationType FieldOperation::OperationType_MAX;
constexpr int FieldOperation::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RichPresenceLocalizationKey::InitAsDefaultInstance() {
}
class RichPresenceLocalizationKey::_Internal {
 public:
  using HasBits = decltype(std::declval<RichPresenceLocalizationKey>()._has_bits_);
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localization_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RichPresenceLocalizationKey::RichPresenceLocalizationKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
}
RichPresenceLocalizationKey::RichPresenceLocalizationKey(const RichPresenceLocalizationKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&program_, &from.program_,
    static_cast<size_t>(reinterpret_cast<char*>(&localization_id_) -
    reinterpret_cast<char*>(&program_)) + sizeof(localization_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
}

void RichPresenceLocalizationKey::SharedCtor() {
  ::memset(&program_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_id_) -
      reinterpret_cast<char*>(&program_)) + sizeof(localization_id_));
}

RichPresenceLocalizationKey::~RichPresenceLocalizationKey() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  SharedDtor();
}

void RichPresenceLocalizationKey::SharedDtor() {
}

void RichPresenceLocalizationKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RichPresenceLocalizationKey& RichPresenceLocalizationKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RichPresenceLocalizationKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void RichPresenceLocalizationKey::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&program_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&localization_id_) -
        reinterpret_cast<char*>(&program_)) + sizeof(localization_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RichPresenceLocalizationKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 program = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required fixed32 stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_stream(&has_bits);
          stream_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required uint32 localization_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_localization_id(&has_bits);
          localization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RichPresenceLocalizationKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 program = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_program(), target);
  }

  // required fixed32 stream = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_stream(), target);
  }

  // required uint32 localization_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_localization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  return target;
}

size_t RichPresenceLocalizationKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  size_t total_size = 0;

  if (_internal_has_program()) {
    // required fixed32 program = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_stream()) {
    // required fixed32 stream = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_localization_id()) {
    // required uint32 localization_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_localization_id());
  }

  return total_size;
}
size_t RichPresenceLocalizationKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed32 program = 1;
    total_size += 1 + 4;

    // required fixed32 stream = 2;
    total_size += 1 + 4;

    // required uint32 localization_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_localization_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RichPresenceLocalizationKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RichPresenceLocalizationKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RichPresenceLocalizationKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
    MergeFrom(*source);
  }
}

void RichPresenceLocalizationKey::MergeFrom(const RichPresenceLocalizationKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_ = from.stream_;
    }
    if (cached_has_bits & 0x00000004u) {
      localization_id_ = from.localization_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RichPresenceLocalizationKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RichPresenceLocalizationKey::CopyFrom(const RichPresenceLocalizationKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.RichPresenceLocalizationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichPresenceLocalizationKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RichPresenceLocalizationKey::InternalSwap(RichPresenceLocalizationKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(program_, other->program_);
  swap(stream_, other->stream_);
  swap(localization_id_, other->localization_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RichPresenceLocalizationKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldKey::InitAsDefaultInstance() {
}
class FieldKey::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldKey>()._has_bits_);
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FieldKey::FieldKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.FieldKey)
}
FieldKey::FieldKey(const FieldKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&program_, &from.program_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_) -
    reinterpret_cast<char*>(&program_)) + sizeof(field_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.FieldKey)
}

void FieldKey::SharedCtor() {
  ::memset(&program_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&program_)) + sizeof(field_));
}

FieldKey::~FieldKey() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.FieldKey)
  SharedDtor();
}

void FieldKey::SharedDtor() {
}

void FieldKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldKey& FieldKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldKey_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void FieldKey::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.FieldKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&program_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_) -
        reinterpret_cast<char*>(&program_)) + sizeof(field_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FieldKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 program = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_group(&has_bits);
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_field(&has_bits);
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unique_id = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_unique_id(&has_bits);
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.FieldKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 program = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_program(), target);
  }

  // required uint32 group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group(), target);
  }

  // required uint32 field = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_field(), target);
  }

  // optional uint64 unique_id = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.FieldKey)
  return target;
}

size_t FieldKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.presence.v1.FieldKey)
  size_t total_size = 0;

  if (_internal_has_program()) {
    // required uint32 program = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_program());
  }

  if (_internal_has_group()) {
    // required uint32 group = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());
  }

  if (_internal_has_field()) {
    // required uint32 field = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field());
  }

  return total_size;
}
size_t FieldKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.FieldKey)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint32 program = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_program());

    // required uint32 group = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());

    // required uint32 field = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 unique_id = 4 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unique_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.FieldKey)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.FieldKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.FieldKey)
    MergeFrom(*source);
  }
}

void FieldKey::MergeFrom(const FieldKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.FieldKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000002u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00000004u) {
      unique_id_ = from.unique_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      field_ = from.field_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.FieldKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldKey::CopyFrom(const FieldKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.FieldKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void FieldKey::InternalSwap(FieldKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(program_, other->program_);
  swap(group_, other->group_);
  swap(unique_id_, other->unique_id_);
  swap(field_, other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Field::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_Field_default_instance_._instance.get_mutable()->key_ = const_cast< ::bgs::protocol::presence::v1::FieldKey*>(
      ::bgs::protocol::presence::v1::FieldKey::internal_default_instance());
  ::bgs::protocol::presence::v1::_Field_default_instance_._instance.get_mutable()->value_ = const_cast< ::bgs::protocol::Variant*>(
      ::bgs::protocol::Variant::internal_default_instance());
}
class Field::_Internal {
 public:
  using HasBits = decltype(std::declval<Field>()._has_bits_);
  static const ::bgs::protocol::presence::v1::FieldKey& key(const Field* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::Variant& value(const Field* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::presence::v1::FieldKey&
Field::_Internal::key(const Field* msg) {
  return *msg->key_;
}
const ::bgs::protocol::Variant&
Field::_Internal::value(const Field* msg) {
  return *msg->value_;
}
void Field::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Field::Field()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.Field)
}
Field::Field(const Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::bgs::protocol::presence::v1::FieldKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::bgs::protocol::Variant(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.Field)
}

void Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
}

void Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Field& Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Field_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.presence.v1.FieldKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .bgs.protocol.Variant value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Field::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.presence.v1.FieldKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // required .bgs.protocol.Variant value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.Field)
  return target;
}

size_t Field::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.presence.v1.Field)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required .bgs.protocol.presence.v1.FieldKey key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (_internal_has_value()) {
    // required .bgs.protocol.Variant value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.Field)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .bgs.protocol.presence.v1.FieldKey key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);

    // required .bgs.protocol.Variant value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Field::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Field* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Field>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.Field)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_key()->::bgs::protocol::presence::v1::FieldKey::MergeFrom(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::bgs::protocol::Variant::MergeFrom(from._internal_value());
    }
  }
}

void Field::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_key()) {
    if (!key_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void Field::InternalSwap(Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_, other->key_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Field::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldOperation::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_FieldOperation_default_instance_._instance.get_mutable()->field_ = const_cast< ::bgs::protocol::presence::v1::Field*>(
      ::bgs::protocol::presence::v1::Field::internal_default_instance());
}
class FieldOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldOperation>()._has_bits_);
  static const ::bgs::protocol::presence::v1::Field& field(const FieldOperation* msg);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::presence::v1::Field&
FieldOperation::_Internal::field(const FieldOperation* msg) {
  return *msg->field_;
}
FieldOperation::FieldOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.FieldOperation)
}
FieldOperation::FieldOperation(const FieldOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_field()) {
    field_ = new ::bgs::protocol::presence::v1::Field(*from.field_);
  } else {
    field_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.FieldOperation)
}

void FieldOperation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&field_)) + sizeof(operation_));
}

FieldOperation::~FieldOperation() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.FieldOperation)
  SharedDtor();
}

void FieldOperation::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void FieldOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldOperation& FieldOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldOperation_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void FieldOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.FieldOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field_ != nullptr);
    field_->Clear();
  }
  operation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FieldOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.presence.v1.Field field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.presence.v1.FieldOperation.OperationType operation = 2 [default = SET];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::presence::v1::FieldOperation_OperationType_IsValid(val))) {
            _internal_set_operation(static_cast<::bgs::protocol::presence::v1::FieldOperation_OperationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.FieldOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.presence.v1.Field field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::field(this), target, stream);
  }

  // optional .bgs.protocol.presence.v1.FieldOperation.OperationType operation = 2 [default = SET];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.FieldOperation)
  return target;
}

size_t FieldOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.FieldOperation)
  size_t total_size = 0;

  // required .bgs.protocol.presence.v1.Field field = 1;
  if (_internal_has_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.presence.v1.FieldOperation.OperationType operation = 2 [default = SET];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.FieldOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.FieldOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.FieldOperation)
    MergeFrom(*source);
  }
}

void FieldOperation::MergeFrom(const FieldOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.FieldOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_field()->::bgs::protocol::presence::v1::Field::MergeFrom(from._internal_field());
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.FieldOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldOperation::CopyFrom(const FieldOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.FieldOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_field()) {
    if (!field_->IsInitialized()) return false;
  }
  return true;
}

void FieldOperation::InternalSwap(FieldOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field_, other->field_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PresenceState::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_PresenceState_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class PresenceState::_Internal {
 public:
  using HasBits = decltype(std::declval<PresenceState>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const PresenceState* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::EntityId&
PresenceState::_Internal::entity_id(const PresenceState* msg) {
  return *msg->entity_id_;
}
void PresenceState::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PresenceState::PresenceState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.PresenceState)
}
PresenceState::PresenceState(const PresenceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_operation_(from.field_operation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.PresenceState)
}

void PresenceState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PresenceState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  entity_id_ = nullptr;
}

PresenceState::~PresenceState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.PresenceState)
  SharedDtor();
}

void PresenceState::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void PresenceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PresenceState& PresenceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PresenceState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void PresenceState::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.PresenceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_operation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_id_ != nullptr);
    entity_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PresenceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_operation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PresenceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.PresenceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_operation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_field_operation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.PresenceState)
  return target;
}

size_t PresenceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.PresenceState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
  total_size += 1UL * this->_internal_field_operation_size();
  for (const auto& msg : this->field_operation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .bgs.protocol.EntityId entity_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PresenceState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.PresenceState)
  GOOGLE_DCHECK_NE(&from, this);
  const PresenceState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PresenceState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.PresenceState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.PresenceState)
    MergeFrom(*source);
  }
}

void PresenceState::MergeFrom(const PresenceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.PresenceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_operation_.MergeFrom(from.field_operation_);
  if (from._internal_has_entity_id()) {
    _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
  }
}

void PresenceState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.PresenceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresenceState::CopyFrom(const PresenceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.PresenceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenceState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(field_operation_)) return false;
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void PresenceState::InternalSwap(PresenceState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_operation_.InternalSwap(&other->field_operation_);
  swap(entity_id_, other->entity_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PresenceState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelState::InitAsDefaultInstance() {
  ::bgs::protocol::presence::v1::_ChannelState_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class ChannelState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelState>()._has_bits_);
  static const ::bgs::protocol::EntityId& entity_id(const ChannelState* msg);
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::EntityId&
ChannelState::_Internal::entity_id(const ChannelState* msg) {
  return *msg->entity_id_;
}
void ChannelState::clear_entity_id() {
  if (entity_id_ != nullptr) entity_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChannelState::ChannelState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.ChannelState)
}
ChannelState::ChannelState(const ChannelState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_operation_(from.field_operation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::bgs::protocol::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  healing_ = from.healing_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.ChannelState)
}

void ChannelState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&healing_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(healing_));
}

ChannelState::~ChannelState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.ChannelState)
  SharedDtor();
}

void ChannelState::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void ChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelState& ChannelState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelState_bgs_2flow_2fpb_2fclient_2fpresence_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.presence.v1.ChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_operation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_id_ != nullptr);
    entity_id_->Clear();
  }
  healing_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_operation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool healing = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_healing(&has_bits);
          healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.ChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.EntityId entity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_operation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_field_operation(i), target, stream);
  }

  // optional bool healing = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_healing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.ChannelState)
  return target;
}

size_t ChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.presence.v1.ChannelState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.presence.v1.FieldOperation field_operation = 2;
  total_size += 1UL * this->_internal_field_operation_size();
  for (const auto& msg : this->field_operation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.EntityId entity_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_id_);
    }

    // optional bool healing = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.presence.v1.ChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.presence.v1.ChannelState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.presence.v1.ChannelState)
    MergeFrom(*source);
  }
}

void ChannelState::MergeFrom(const ChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.presence.v1.ChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_operation_.MergeFrom(from.field_operation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_id()->::bgs::protocol::EntityId::MergeFrom(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      healing_ = from.healing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.presence.v1.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelState::CopyFrom(const ChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.presence.v1.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(field_operation_)) return false;
  if (_internal_has_entity_id()) {
    if (!entity_id_->IsInitialized()) return false;
  }
  return true;
}

void ChannelState::InternalSwap(ChannelState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_operation_.InternalSwap(&other->field_operation_);
  swap(entity_id_, other->entity_id_);
  swap(healing_, other->healing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelState::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelState::kPresenceFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::bgs::protocol::channel::v1::ChannelState,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::bgs::protocol::presence::v1::ChannelState >, 11, false >
  ChannelState::presence(kPresenceFieldNumber, *::bgs::protocol::presence::v1::ChannelState::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace presence
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::RichPresenceLocalizationKey* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::RichPresenceLocalizationKey >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::RichPresenceLocalizationKey >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::FieldKey* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::FieldKey >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::FieldKey >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::Field* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::Field >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::Field >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::FieldOperation* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::FieldOperation >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::FieldOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::PresenceState* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::PresenceState >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::PresenceState >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::presence::v1::ChannelState* Arena::CreateMaybeMessage< ::bgs::protocol::presence::v1::ChannelState >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::presence::v1::ChannelState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
