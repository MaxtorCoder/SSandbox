// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/profanity_filter_config.proto

#include "bgs/low/pb/client/profanity_filter_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WordFilter_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto;
namespace bgs {
namespace protocol {
namespace profanity {
namespace v1 {
class WordFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WordFilter> _instance;
} _WordFilter_default_instance_;
class WordFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WordFilters> _instance;
} _WordFilters_default_instance_;
}  // namespace v1
}  // namespace profanity
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_WordFilter_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::profanity::v1::_WordFilter_default_instance_;
    new (ptr) ::bgs::protocol::profanity::v1::WordFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::profanity::v1::WordFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WordFilter_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WordFilter_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_WordFilters_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::profanity::v1::_WordFilters_default_instance_;
    new (ptr) ::bgs::protocol::profanity::v1::WordFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::profanity::v1::WordFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WordFilters_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WordFilters_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto}, {
      &scc_info_WordFilter_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::profanity::v1::WordFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::profanity::v1::WordFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::profanity::v1::WordFilter, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::profanity::v1::WordFilter, regex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::profanity::v1::WordFilters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::profanity::v1::WordFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::profanity::v1::WordFilters, filters_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::bgs::protocol::profanity::v1::WordFilter)},
  { 9, 15, sizeof(::bgs::protocol::profanity::v1::WordFilters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::profanity::v1::_WordFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::profanity::v1::_WordFilters_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/bgs/low/pb/client/profanity_filter_con"
  "fig.proto\022\031bgs.protocol.profanity.v1\")\n\n"
  "WordFilter\022\014\n\004type\030\001 \002(\t\022\r\n\005regex\030\002 \002(\t\""
  "E\n\013WordFilters\0226\n\007filters\030\001 \003(\0132%.bgs.pr"
  "otocol.profanity.v1.WordFilter"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto_sccs[2] = {
  &scc_info_WordFilter_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.base,
  &scc_info_WordFilters_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto, "bgs/low/pb/client/profanity_filter_config.proto", 190,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto, 2, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto)), true);
namespace bgs {
namespace protocol {
namespace profanity {
namespace v1 {

// ===================================================================

void WordFilter::InitAsDefaultInstance() {
}
class WordFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<WordFilter>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WordFilter::WordFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.profanity.v1.WordFilter)
}
WordFilter::WordFilter(const WordFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_regex()) {
    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.profanity.v1.WordFilter)
}

void WordFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WordFilter_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WordFilter::~WordFilter() {
  // @@protoc_insertion_point(destructor:bgs.protocol.profanity.v1.WordFilter)
  SharedDtor();
}

void WordFilter::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WordFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WordFilter& WordFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WordFilter_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void WordFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.profanity.v1.WordFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      regex_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WordFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.profanity.v1.WordFilter.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.profanity.v1.WordFilter.regex");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WordFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.profanity.v1.WordFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.profanity.v1.WordFilter.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // required string regex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.profanity.v1.WordFilter.regex");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.profanity.v1.WordFilter)
  return target;
}

size_t WordFilter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.profanity.v1.WordFilter)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_regex()) {
    // required string regex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  return total_size;
}
size_t WordFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.profanity.v1.WordFilter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required string regex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WordFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.profanity.v1.WordFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const WordFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WordFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.profanity.v1.WordFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.profanity.v1.WordFilter)
    MergeFrom(*source);
  }
}

void WordFilter::MergeFrom(const WordFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.profanity.v1.WordFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
    }
  }
}

void WordFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.profanity.v1.WordFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordFilter::CopyFrom(const WordFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.profanity.v1.WordFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WordFilter::InternalSwap(WordFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WordFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WordFilters::InitAsDefaultInstance() {
}
class WordFilters::_Internal {
 public:
  using HasBits = decltype(std::declval<WordFilters>()._has_bits_);
};

WordFilters::WordFilters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.profanity.v1.WordFilters)
}
WordFilters::WordFilters(const WordFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.profanity.v1.WordFilters)
}

void WordFilters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WordFilters_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.base);
}

WordFilters::~WordFilters() {
  // @@protoc_insertion_point(destructor:bgs.protocol.profanity.v1.WordFilters)
  SharedDtor();
}

void WordFilters::SharedDtor() {
}

void WordFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WordFilters& WordFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WordFilters_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void WordFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.profanity.v1.WordFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WordFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.profanity.v1.WordFilter filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WordFilters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.profanity.v1.WordFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.profanity.v1.WordFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.profanity.v1.WordFilters)
  return target;
}

size_t WordFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.profanity.v1.WordFilters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.profanity.v1.WordFilter filters = 1;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WordFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.profanity.v1.WordFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const WordFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WordFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.profanity.v1.WordFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.profanity.v1.WordFilters)
    MergeFrom(*source);
  }
}

void WordFilters::MergeFrom(const WordFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.profanity.v1.WordFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void WordFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.profanity.v1.WordFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordFilters::CopyFrom(const WordFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.profanity.v1.WordFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordFilters::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(filters_)) return false;
  return true;
}

void WordFilters::InternalSwap(WordFilters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filters_.InternalSwap(&other->filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WordFilters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace profanity
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::profanity::v1::WordFilter* Arena::CreateMaybeMessage< ::bgs::protocol::profanity::v1::WordFilter >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::profanity::v1::WordFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::profanity::v1::WordFilters* Arena::CreateMaybeMessage< ::bgs::protocol::profanity::v1::WordFilters >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::profanity::v1::WordFilters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
