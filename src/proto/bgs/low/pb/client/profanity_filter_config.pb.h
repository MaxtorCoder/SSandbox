// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/profanity_filter_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto;
namespace bgs {
namespace protocol {
namespace profanity {
namespace v1 {
class WordFilter;
class WordFilterDefaultTypeInternal;
extern WordFilterDefaultTypeInternal _WordFilter_default_instance_;
class WordFilters;
class WordFiltersDefaultTypeInternal;
extern WordFiltersDefaultTypeInternal _WordFilters_default_instance_;
}  // namespace v1
}  // namespace profanity
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::profanity::v1::WordFilter* Arena::CreateMaybeMessage<::bgs::protocol::profanity::v1::WordFilter>(Arena*);
template<> ::bgs::protocol::profanity::v1::WordFilters* Arena::CreateMaybeMessage<::bgs::protocol::profanity::v1::WordFilters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace profanity {
namespace v1 {

// ===================================================================

class WordFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.profanity.v1.WordFilter) */ {
 public:
  WordFilter();
  virtual ~WordFilter();

  WordFilter(const WordFilter& from);
  WordFilter(WordFilter&& from) noexcept
    : WordFilter() {
    *this = ::std::move(from);
  }

  inline WordFilter& operator=(const WordFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordFilter& operator=(WordFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WordFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WordFilter* internal_default_instance() {
    return reinterpret_cast<const WordFilter*>(
               &_WordFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WordFilter& a, WordFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(WordFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WordFilter* New() const final {
    return CreateMaybeMessage<WordFilter>(nullptr);
  }

  WordFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WordFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WordFilter& from);
  void MergeFrom(const WordFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WordFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.profanity.v1.WordFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRegexFieldNumber = 2,
  };
  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required string regex = 2;
  bool has_regex() const;
  private:
  bool _internal_has_regex() const;
  public:
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.profanity.v1.WordFilter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class WordFilters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.profanity.v1.WordFilters) */ {
 public:
  WordFilters();
  virtual ~WordFilters();

  WordFilters(const WordFilters& from);
  WordFilters(WordFilters&& from) noexcept
    : WordFilters() {
    *this = ::std::move(from);
  }

  inline WordFilters& operator=(const WordFilters& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordFilters& operator=(WordFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WordFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WordFilters* internal_default_instance() {
    return reinterpret_cast<const WordFilters*>(
               &_WordFilters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WordFilters& a, WordFilters& b) {
    a.Swap(&b);
  }
  inline void Swap(WordFilters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WordFilters* New() const final {
    return CreateMaybeMessage<WordFilters>(nullptr);
  }

  WordFilters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WordFilters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WordFilters& from);
  void MergeFrom(const WordFilters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WordFilters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.profanity.v1.WordFilters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 1,
  };
  // repeated .bgs.protocol.profanity.v1.WordFilter filters = 1;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::bgs::protocol::profanity::v1::WordFilter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::profanity::v1::WordFilter >*
      mutable_filters();
  private:
  const ::bgs::protocol::profanity::v1::WordFilter& _internal_filters(int index) const;
  ::bgs::protocol::profanity::v1::WordFilter* _internal_add_filters();
  public:
  const ::bgs::protocol::profanity::v1::WordFilter& filters(int index) const;
  ::bgs::protocol::profanity::v1::WordFilter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::profanity::v1::WordFilter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.profanity.v1.WordFilters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::profanity::v1::WordFilter > filters_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WordFilter

// required string type = 1;
inline bool WordFilter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WordFilter::has_type() const {
  return _internal_has_type();
}
inline void WordFilter::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WordFilter::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.profanity.v1.WordFilter.type)
  return _internal_type();
}
inline void WordFilter::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.profanity.v1.WordFilter.type)
}
inline std::string* WordFilter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.profanity.v1.WordFilter.type)
  return _internal_mutable_type();
}
inline const std::string& WordFilter::_internal_type() const {
  return type_.GetNoArena();
}
inline void WordFilter::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WordFilter::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.profanity.v1.WordFilter.type)
}
inline void WordFilter::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.profanity.v1.WordFilter.type)
}
inline void WordFilter::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.profanity.v1.WordFilter.type)
}
inline std::string* WordFilter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WordFilter::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.profanity.v1.WordFilter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WordFilter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.profanity.v1.WordFilter.type)
}

// required string regex = 2;
inline bool WordFilter::_internal_has_regex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WordFilter::has_regex() const {
  return _internal_has_regex();
}
inline void WordFilter::clear_regex() {
  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WordFilter::regex() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.profanity.v1.WordFilter.regex)
  return _internal_regex();
}
inline void WordFilter::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.profanity.v1.WordFilter.regex)
}
inline std::string* WordFilter::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.profanity.v1.WordFilter.regex)
  return _internal_mutable_regex();
}
inline const std::string& WordFilter::_internal_regex() const {
  return regex_.GetNoArena();
}
inline void WordFilter::_internal_set_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WordFilter::set_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.profanity.v1.WordFilter.regex)
}
inline void WordFilter::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.profanity.v1.WordFilter.regex)
}
inline void WordFilter::set_regex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.profanity.v1.WordFilter.regex)
}
inline std::string* WordFilter::_internal_mutable_regex() {
  _has_bits_[0] |= 0x00000002u;
  return regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WordFilter::release_regex() {
  // @@protoc_insertion_point(field_release:bgs.protocol.profanity.v1.WordFilter.regex)
  if (!_internal_has_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return regex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WordFilter::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.profanity.v1.WordFilter.regex)
}

// -------------------------------------------------------------------

// WordFilters

// repeated .bgs.protocol.profanity.v1.WordFilter filters = 1;
inline int WordFilters::_internal_filters_size() const {
  return filters_.size();
}
inline int WordFilters::filters_size() const {
  return _internal_filters_size();
}
inline void WordFilters::clear_filters() {
  filters_.Clear();
}
inline ::bgs::protocol::profanity::v1::WordFilter* WordFilters::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.profanity.v1.WordFilters.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::profanity::v1::WordFilter >*
WordFilters::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.profanity.v1.WordFilters.filters)
  return &filters_;
}
inline const ::bgs::protocol::profanity::v1::WordFilter& WordFilters::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::bgs::protocol::profanity::v1::WordFilter& WordFilters::filters(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.profanity.v1.WordFilters.filters)
  return _internal_filters(index);
}
inline ::bgs::protocol::profanity::v1::WordFilter* WordFilters::_internal_add_filters() {
  return filters_.Add();
}
inline ::bgs::protocol::profanity::v1::WordFilter* WordFilters::add_filters() {
  // @@protoc_insertion_point(field_add:bgs.protocol.profanity.v1.WordFilters.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::profanity::v1::WordFilter >&
WordFilters::filters() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.profanity.v1.WordFilters.filters)
  return filters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace profanity
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2fprofanity_5ffilter_5fconfig_2eproto
