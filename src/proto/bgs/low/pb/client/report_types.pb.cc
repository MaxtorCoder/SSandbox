// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/report_types.proto

#include "bgs/low/pb/client/report_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BottingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HackingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HarassmentReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InappropriateBattleTagReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RealLifeThreatReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpamReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace report {
namespace v1 {
class ReportTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportType> _instance;
  const ::bgs::protocol::report::v1::CustomReport* custom_report_;
  const ::bgs::protocol::report::v1::SpamReport* spam_report_;
  const ::bgs::protocol::report::v1::HarassmentReport* harassment_report_;
  const ::bgs::protocol::report::v1::RealLifeThreatReport* real_life_threat_report_;
  const ::bgs::protocol::report::v1::InappropriateBattleTagReport* inappropriate_battle_tag_report_;
  const ::bgs::protocol::report::v1::HackingReport* hacking_report_;
  const ::bgs::protocol::report::v1::BottingReport* botting_report_;
} _ReportType_default_instance_;
class CustomReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomReport> _instance;
} _CustomReport_default_instance_;
class SpamReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpamReport> _instance;
} _SpamReport_default_instance_;
class HarassmentReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HarassmentReport> _instance;
} _HarassmentReport_default_instance_;
class RealLifeThreatReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RealLifeThreatReport> _instance;
} _RealLifeThreatReport_default_instance_;
class InappropriateBattleTagReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InappropriateBattleTagReport> _instance;
} _InappropriateBattleTagReport_default_instance_;
class HackingReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HackingReport> _instance;
} _HackingReport_default_instance_;
class BottingReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BottingReport> _instance;
} _BottingReport_default_instance_;
class ReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Report> _instance;
} _Report_default_instance_;
}  // namespace v1
}  // namespace report
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_BottingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_BottingReport_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::BottingReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::BottingReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BottingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BottingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_CustomReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_CustomReport_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::CustomReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::CustomReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CustomReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_HackingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_HackingReport_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::HackingReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::HackingReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HackingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HackingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_HarassmentReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_HarassmentReport_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::HarassmentReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::HarassmentReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HarassmentReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HarassmentReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_InappropriateBattleTagReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_InappropriateBattleTagReport_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::InappropriateBattleTagReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::InappropriateBattleTagReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InappropriateBattleTagReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InappropriateBattleTagReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_RealLifeThreatReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_RealLifeThreatReport_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::RealLifeThreatReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::RealLifeThreatReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RealLifeThreatReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RealLifeThreatReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Report_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_Report_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::Report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::Report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Report_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Report_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_Attribute_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto.base,
      &scc_info_EntityId_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ReportType_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_ReportType_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::ReportType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::ReportType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ReportType_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ReportType_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_CustomReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
      &scc_info_SpamReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
      &scc_info_HarassmentReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
      &scc_info_RealLifeThreatReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
      &scc_info_InappropriateBattleTagReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
      &scc_info_HackingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
      &scc_info_BottingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SpamReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::report::v1::_SpamReport_default_instance_;
    new (ptr) ::bgs::protocol::report::v1::SpamReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::report::v1::SpamReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpamReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpamReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto}, {
      &scc_info_GameAccountHandle_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::ReportType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::ReportType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::ReportType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::ReportType, user_description_),
  offsetof(::bgs::protocol::report::v1::ReportTypeDefaultTypeInternal, custom_report_),
  offsetof(::bgs::protocol::report::v1::ReportTypeDefaultTypeInternal, spam_report_),
  offsetof(::bgs::protocol::report::v1::ReportTypeDefaultTypeInternal, harassment_report_),
  offsetof(::bgs::protocol::report::v1::ReportTypeDefaultTypeInternal, real_life_threat_report_),
  offsetof(::bgs::protocol::report::v1::ReportTypeDefaultTypeInternal, inappropriate_battle_tag_report_),
  offsetof(::bgs::protocol::report::v1::ReportTypeDefaultTypeInternal, hacking_report_),
  offsetof(::bgs::protocol::report::v1::ReportTypeDefaultTypeInternal, botting_report_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::ReportType, type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::CustomReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::CustomReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::CustomReport, type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::CustomReport, program_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::CustomReport, attribute_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::SpamReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::SpamReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::SpamReport, target_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::SpamReport, source_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::HarassmentReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::HarassmentReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::HarassmentReport, target_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::HarassmentReport, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::RealLifeThreatReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::RealLifeThreatReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::RealLifeThreatReport, target_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::RealLifeThreatReport, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::InappropriateBattleTagReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::InappropriateBattleTagReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::InappropriateBattleTagReport, target_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::InappropriateBattleTagReport, battle_tag_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::HackingReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::HackingReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::HackingReport, target_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::BottingReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::BottingReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::BottingReport, target_),
  0,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::Report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::Report, report_type_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::Report, attribute_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::Report, report_qos_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::Report, reporting_account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::Report, reporting_game_account_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::report::v1::Report, report_timestamp_),
  0,
  ~0u,
  4,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::bgs::protocol::report::v1::ReportType)},
  { 22, 30, sizeof(::bgs::protocol::report::v1::CustomReport)},
  { 33, 40, sizeof(::bgs::protocol::report::v1::SpamReport)},
  { 42, 49, sizeof(::bgs::protocol::report::v1::HarassmentReport)},
  { 51, 58, sizeof(::bgs::protocol::report::v1::RealLifeThreatReport)},
  { 60, 67, sizeof(::bgs::protocol::report::v1::InappropriateBattleTagReport)},
  { 69, 75, sizeof(::bgs::protocol::report::v1::HackingReport)},
  { 76, 82, sizeof(::bgs::protocol::report::v1::BottingReport)},
  { 83, 94, sizeof(::bgs::protocol::report::v1::Report)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_ReportType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_CustomReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_SpamReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_HarassmentReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_RealLifeThreatReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_InappropriateBattleTagReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_HackingReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_BottingReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::report::v1::_Report_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$bgs/low/pb/client/report_types.proto\022\026"
  "bgs.protocol.report.v1\032%bgs/low/pb/clien"
  "t/account_types.proto\032\'bgs/low/pb/client"
  "/attribute_types.proto\032$bgs/low/pb/clien"
  "t/entity_types.proto\032!bgs/low/pb/client/"
  "rpc_types.proto\"\243\004\n\nReportType\022\030\n\020user_d"
  "escription\030\001 \001(\t\022=\n\rcustom_report\030\n \001(\0132"
  "$.bgs.protocol.report.v1.CustomReportH\000\022"
  "9\n\013spam_report\030\013 \001(\0132\".bgs.protocol.repo"
  "rt.v1.SpamReportH\000\022E\n\021harassment_report\030"
  "\014 \001(\0132(.bgs.protocol.report.v1.Harassmen"
  "tReportH\000\022O\n\027real_life_threat_report\030\r \001"
  "(\0132,.bgs.protocol.report.v1.RealLifeThre"
  "atReportH\000\022_\n\037inappropriate_battle_tag_r"
  "eport\030\016 \001(\01324.bgs.protocol.report.v1.Ina"
  "ppropriateBattleTagReportH\000\022\?\n\016hacking_r"
  "eport\030\017 \001(\0132%.bgs.protocol.report.v1.Hac"
  "kingReportH\000\022\?\n\016botting_report\030\020 \001(\0132%.b"
  "gs.protocol.report.v1.BottingReportH\000B\006\n"
  "\004type\"`\n\014CustomReport\022\014\n\004type\030\001 \001(\t\022\026\n\np"
  "rogram_id\030\002 \001(\tB\002\030\001\022*\n\tattribute\030\003 \003(\0132\027"
  ".bgs.protocol.Attribute\"\325\001\n\nSpamReport\022:"
  "\n\006target\030\001 \001(\0132*.bgs.protocol.account.v1"
  ".GameAccountHandle\022D\n\006source\030\002 \001(\0162-.bgs"
  ".protocol.report.v1.SpamReport.SpamSourc"
  "e:\005OTHER\"E\n\nSpamSource\022\t\n\005OTHER\020\001\022\025\n\021FRI"
  "END_INVITATION\020\002\022\013\n\007WHISPER\020\003\022\010\n\004CHAT\020\004\""
  "\\\n\020HarassmentReport\022:\n\006target\030\001 \001(\0132*.bg"
  "s.protocol.account.v1.GameAccountHandle\022"
  "\014\n\004text\030\002 \001(\t\"`\n\024RealLifeThreatReport\022:\n"
  "\006target\030\001 \001(\0132*.bgs.protocol.account.v1."
  "GameAccountHandle\022\014\n\004text\030\002 \001(\t\"n\n\034Inapp"
  "ropriateBattleTagReport\022:\n\006target\030\001 \001(\0132"
  "*.bgs.protocol.account.v1.GameAccountHan"
  "dle\022\022\n\nbattle_tag\030\002 \001(\t\"K\n\rHackingReport"
  "\022:\n\006target\030\001 \001(\0132*.bgs.protocol.account."
  "v1.GameAccountHandle\"K\n\rBottingReport\022:\n"
  "\006target\030\001 \001(\0132*.bgs.protocol.account.v1."
  "GameAccountHandle\"\345\001\n\006Report\022\023\n\013report_t"
  "ype\030\001 \002(\t\022*\n\tattribute\030\002 \003(\0132\027.bgs.proto"
  "col.Attribute\022\025\n\nreport_qos\030\003 \001(\005:\0010\0221\n\021"
  "reporting_account\030\004 \001(\0132\026.bgs.protocol.E"
  "ntityId\0226\n\026reporting_game_account\030\005 \001(\0132"
  "\026.bgs.protocol.EntityId\022\030\n\020report_timest"
  "amp\030\006 \001(\006B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto_deps[4] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2faccount_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fattribute_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fentity_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto_sccs[9] = {
  &scc_info_BottingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
  &scc_info_CustomReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
  &scc_info_HackingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
  &scc_info_HarassmentReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
  &scc_info_InappropriateBattleTagReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
  &scc_info_RealLifeThreatReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
  &scc_info_Report_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
  &scc_info_ReportType_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
  &scc_info_SpamReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto, "bgs/low/pb/client/report_types.proto", 1774,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto_deps, 9, 4,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto, 9, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {
namespace report {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpamReport_SpamSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
  return file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto[0];
}
bool SpamReport_SpamSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpamReport_SpamSource SpamReport::OTHER;
constexpr SpamReport_SpamSource SpamReport::FRIEND_INVITATION;
constexpr SpamReport_SpamSource SpamReport::WHISPER;
constexpr SpamReport_SpamSource SpamReport::CHAT;
constexpr SpamReport_SpamSource SpamReport::SpamSource_MIN;
constexpr SpamReport_SpamSource SpamReport::SpamSource_MAX;
constexpr int SpamReport::SpamSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ReportType::InitAsDefaultInstance() {
  ::bgs::protocol::report::v1::_ReportType_default_instance_.custom_report_ = const_cast< ::bgs::protocol::report::v1::CustomReport*>(
      ::bgs::protocol::report::v1::CustomReport::internal_default_instance());
  ::bgs::protocol::report::v1::_ReportType_default_instance_.spam_report_ = const_cast< ::bgs::protocol::report::v1::SpamReport*>(
      ::bgs::protocol::report::v1::SpamReport::internal_default_instance());
  ::bgs::protocol::report::v1::_ReportType_default_instance_.harassment_report_ = const_cast< ::bgs::protocol::report::v1::HarassmentReport*>(
      ::bgs::protocol::report::v1::HarassmentReport::internal_default_instance());
  ::bgs::protocol::report::v1::_ReportType_default_instance_.real_life_threat_report_ = const_cast< ::bgs::protocol::report::v1::RealLifeThreatReport*>(
      ::bgs::protocol::report::v1::RealLifeThreatReport::internal_default_instance());
  ::bgs::protocol::report::v1::_ReportType_default_instance_.inappropriate_battle_tag_report_ = const_cast< ::bgs::protocol::report::v1::InappropriateBattleTagReport*>(
      ::bgs::protocol::report::v1::InappropriateBattleTagReport::internal_default_instance());
  ::bgs::protocol::report::v1::_ReportType_default_instance_.hacking_report_ = const_cast< ::bgs::protocol::report::v1::HackingReport*>(
      ::bgs::protocol::report::v1::HackingReport::internal_default_instance());
  ::bgs::protocol::report::v1::_ReportType_default_instance_.botting_report_ = const_cast< ::bgs::protocol::report::v1::BottingReport*>(
      ::bgs::protocol::report::v1::BottingReport::internal_default_instance());
}
class ReportType::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportType>()._has_bits_);
  static void set_has_user_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::bgs::protocol::report::v1::CustomReport& custom_report(const ReportType* msg);
  static const ::bgs::protocol::report::v1::SpamReport& spam_report(const ReportType* msg);
  static const ::bgs::protocol::report::v1::HarassmentReport& harassment_report(const ReportType* msg);
  static const ::bgs::protocol::report::v1::RealLifeThreatReport& real_life_threat_report(const ReportType* msg);
  static const ::bgs::protocol::report::v1::InappropriateBattleTagReport& inappropriate_battle_tag_report(const ReportType* msg);
  static const ::bgs::protocol::report::v1::HackingReport& hacking_report(const ReportType* msg);
  static const ::bgs::protocol::report::v1::BottingReport& botting_report(const ReportType* msg);
};

const ::bgs::protocol::report::v1::CustomReport&
ReportType::_Internal::custom_report(const ReportType* msg) {
  return *msg->type_.custom_report_;
}
const ::bgs::protocol::report::v1::SpamReport&
ReportType::_Internal::spam_report(const ReportType* msg) {
  return *msg->type_.spam_report_;
}
const ::bgs::protocol::report::v1::HarassmentReport&
ReportType::_Internal::harassment_report(const ReportType* msg) {
  return *msg->type_.harassment_report_;
}
const ::bgs::protocol::report::v1::RealLifeThreatReport&
ReportType::_Internal::real_life_threat_report(const ReportType* msg) {
  return *msg->type_.real_life_threat_report_;
}
const ::bgs::protocol::report::v1::InappropriateBattleTagReport&
ReportType::_Internal::inappropriate_battle_tag_report(const ReportType* msg) {
  return *msg->type_.inappropriate_battle_tag_report_;
}
const ::bgs::protocol::report::v1::HackingReport&
ReportType::_Internal::hacking_report(const ReportType* msg) {
  return *msg->type_.hacking_report_;
}
const ::bgs::protocol::report::v1::BottingReport&
ReportType::_Internal::botting_report(const ReportType* msg) {
  return *msg->type_.botting_report_;
}
void ReportType::set_allocated_custom_report(::bgs::protocol::report::v1::CustomReport* custom_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (custom_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_report, submessage_arena);
    }
    set_has_custom_report();
    type_.custom_report_ = custom_report;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.ReportType.custom_report)
}
void ReportType::set_allocated_spam_report(::bgs::protocol::report::v1::SpamReport* spam_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (spam_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spam_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spam_report, submessage_arena);
    }
    set_has_spam_report();
    type_.spam_report_ = spam_report;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.ReportType.spam_report)
}
void ReportType::set_allocated_harassment_report(::bgs::protocol::report::v1::HarassmentReport* harassment_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (harassment_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      harassment_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, harassment_report, submessage_arena);
    }
    set_has_harassment_report();
    type_.harassment_report_ = harassment_report;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.ReportType.harassment_report)
}
void ReportType::set_allocated_real_life_threat_report(::bgs::protocol::report::v1::RealLifeThreatReport* real_life_threat_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (real_life_threat_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      real_life_threat_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, real_life_threat_report, submessage_arena);
    }
    set_has_real_life_threat_report();
    type_.real_life_threat_report_ = real_life_threat_report;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.ReportType.real_life_threat_report)
}
void ReportType::set_allocated_inappropriate_battle_tag_report(::bgs::protocol::report::v1::InappropriateBattleTagReport* inappropriate_battle_tag_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (inappropriate_battle_tag_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inappropriate_battle_tag_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inappropriate_battle_tag_report, submessage_arena);
    }
    set_has_inappropriate_battle_tag_report();
    type_.inappropriate_battle_tag_report_ = inappropriate_battle_tag_report;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.ReportType.inappropriate_battle_tag_report)
}
void ReportType::set_allocated_hacking_report(::bgs::protocol::report::v1::HackingReport* hacking_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (hacking_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hacking_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hacking_report, submessage_arena);
    }
    set_has_hacking_report();
    type_.hacking_report_ = hacking_report;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.ReportType.hacking_report)
}
void ReportType::set_allocated_botting_report(::bgs::protocol::report::v1::BottingReport* botting_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (botting_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      botting_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, botting_report, submessage_arena);
    }
    set_has_botting_report();
    type_.botting_report_ = botting_report;
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.ReportType.botting_report)
}
ReportType::ReportType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.ReportType)
}
ReportType::ReportType(const ReportType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_description()) {
    user_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_description_);
  }
  clear_has_type();
  switch (from.type_case()) {
    case kCustomReport: {
      _internal_mutable_custom_report()->::bgs::protocol::report::v1::CustomReport::MergeFrom(from._internal_custom_report());
      break;
    }
    case kSpamReport: {
      _internal_mutable_spam_report()->::bgs::protocol::report::v1::SpamReport::MergeFrom(from._internal_spam_report());
      break;
    }
    case kHarassmentReport: {
      _internal_mutable_harassment_report()->::bgs::protocol::report::v1::HarassmentReport::MergeFrom(from._internal_harassment_report());
      break;
    }
    case kRealLifeThreatReport: {
      _internal_mutable_real_life_threat_report()->::bgs::protocol::report::v1::RealLifeThreatReport::MergeFrom(from._internal_real_life_threat_report());
      break;
    }
    case kInappropriateBattleTagReport: {
      _internal_mutable_inappropriate_battle_tag_report()->::bgs::protocol::report::v1::InappropriateBattleTagReport::MergeFrom(from._internal_inappropriate_battle_tag_report());
      break;
    }
    case kHackingReport: {
      _internal_mutable_hacking_report()->::bgs::protocol::report::v1::HackingReport::MergeFrom(from._internal_hacking_report());
      break;
    }
    case kBottingReport: {
      _internal_mutable_botting_report()->::bgs::protocol::report::v1::BottingReport::MergeFrom(from._internal_botting_report());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.ReportType)
}

void ReportType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportType_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  user_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}

ReportType::~ReportType() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.ReportType)
  SharedDtor();
}

void ReportType::SharedDtor() {
  user_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
}

void ReportType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportType& ReportType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportType_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ReportType::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:bgs.protocol.report.v1.ReportType)
  switch (type_case()) {
    case kCustomReport: {
      delete type_.custom_report_;
      break;
    }
    case kSpamReport: {
      delete type_.spam_report_;
      break;
    }
    case kHarassmentReport: {
      delete type_.harassment_report_;
      break;
    }
    case kRealLifeThreatReport: {
      delete type_.real_life_threat_report_;
      break;
    }
    case kInappropriateBattleTagReport: {
      delete type_.inappropriate_battle_tag_report_;
      break;
    }
    case kHackingReport: {
      delete type_.hacking_report_;
      break;
    }
    case kBottingReport: {
      delete type_.botting_report_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ReportType::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.ReportType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_description_.ClearNonDefaultToEmptyNoArena();
  }
  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReportType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.report.v1.ReportType.user_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v1.CustomReport custom_report = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v1.SpamReport spam_report = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_spam_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v1.HarassmentReport harassment_report = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_harassment_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v1.RealLifeThreatReport real_life_threat_report = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_real_life_threat_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v1.InappropriateBattleTagReport inappropriate_battle_tag_report = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_inappropriate_battle_tag_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v1.HackingReport hacking_report = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_hacking_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v1.BottingReport botting_report = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_botting_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.ReportType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_description().data(), static_cast<int>(this->_internal_user_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.report.v1.ReportType.user_description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_description(), target);
  }

  switch (type_case()) {
    case kCustomReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::custom_report(this), target, stream);
      break;
    }
    case kSpamReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::spam_report(this), target, stream);
      break;
    }
    case kHarassmentReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::harassment_report(this), target, stream);
      break;
    }
    case kRealLifeThreatReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::real_life_threat_report(this), target, stream);
      break;
    }
    case kInappropriateBattleTagReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          14, _Internal::inappropriate_battle_tag_report(this), target, stream);
      break;
    }
    case kHackingReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          15, _Internal::hacking_report(this), target, stream);
      break;
    }
    case kBottingReport: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          16, _Internal::botting_report(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.ReportType)
  return target;
}

size_t ReportType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.ReportType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string user_description = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_description());
  }

  switch (type_case()) {
    // optional .bgs.protocol.report.v1.CustomReport custom_report = 10;
    case kCustomReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.custom_report_);
      break;
    }
    // optional .bgs.protocol.report.v1.SpamReport spam_report = 11;
    case kSpamReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.spam_report_);
      break;
    }
    // optional .bgs.protocol.report.v1.HarassmentReport harassment_report = 12;
    case kHarassmentReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.harassment_report_);
      break;
    }
    // optional .bgs.protocol.report.v1.RealLifeThreatReport real_life_threat_report = 13;
    case kRealLifeThreatReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.real_life_threat_report_);
      break;
    }
    // optional .bgs.protocol.report.v1.InappropriateBattleTagReport inappropriate_battle_tag_report = 14;
    case kInappropriateBattleTagReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.inappropriate_battle_tag_report_);
      break;
    }
    // optional .bgs.protocol.report.v1.HackingReport hacking_report = 15;
    case kHackingReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.hacking_report_);
      break;
    }
    // optional .bgs.protocol.report.v1.BottingReport botting_report = 16;
    case kBottingReport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.botting_report_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.ReportType)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.ReportType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.ReportType)
    MergeFrom(*source);
  }
}

void ReportType::MergeFrom(const ReportType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.ReportType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_description()) {
    _has_bits_[0] |= 0x00000001u;
    user_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_description_);
  }
  switch (from.type_case()) {
    case kCustomReport: {
      _internal_mutable_custom_report()->::bgs::protocol::report::v1::CustomReport::MergeFrom(from._internal_custom_report());
      break;
    }
    case kSpamReport: {
      _internal_mutable_spam_report()->::bgs::protocol::report::v1::SpamReport::MergeFrom(from._internal_spam_report());
      break;
    }
    case kHarassmentReport: {
      _internal_mutable_harassment_report()->::bgs::protocol::report::v1::HarassmentReport::MergeFrom(from._internal_harassment_report());
      break;
    }
    case kRealLifeThreatReport: {
      _internal_mutable_real_life_threat_report()->::bgs::protocol::report::v1::RealLifeThreatReport::MergeFrom(from._internal_real_life_threat_report());
      break;
    }
    case kInappropriateBattleTagReport: {
      _internal_mutable_inappropriate_battle_tag_report()->::bgs::protocol::report::v1::InappropriateBattleTagReport::MergeFrom(from._internal_inappropriate_battle_tag_report());
      break;
    }
    case kHackingReport: {
      _internal_mutable_hacking_report()->::bgs::protocol::report::v1::HackingReport::MergeFrom(from._internal_hacking_report());
      break;
    }
    case kBottingReport: {
      _internal_mutable_botting_report()->::bgs::protocol::report::v1::BottingReport::MergeFrom(from._internal_botting_report());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void ReportType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.ReportType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportType::CopyFrom(const ReportType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.ReportType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportType::IsInitialized() const {
  switch (type_case()) {
    case kCustomReport: {
      if (has_custom_report()) {
        if (!this->custom_report().IsInitialized()) return false;
      }
      break;
    }
    case kSpamReport: {
      if (has_spam_report()) {
        if (!this->spam_report().IsInitialized()) return false;
      }
      break;
    }
    case kHarassmentReport: {
      if (has_harassment_report()) {
        if (!this->harassment_report().IsInitialized()) return false;
      }
      break;
    }
    case kRealLifeThreatReport: {
      if (has_real_life_threat_report()) {
        if (!this->real_life_threat_report().IsInitialized()) return false;
      }
      break;
    }
    case kInappropriateBattleTagReport: {
      if (has_inappropriate_battle_tag_report()) {
        if (!this->inappropriate_battle_tag_report().IsInitialized()) return false;
      }
      break;
    }
    case kHackingReport: {
      if (has_hacking_report()) {
        if (!this->hacking_report().IsInitialized()) return false;
      }
      break;
    }
    case kBottingReport: {
      if (has_botting_report()) {
        if (!this->botting_report().IsInitialized()) return false;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void ReportType::InternalSwap(ReportType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_description_.Swap(&other->user_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomReport::InitAsDefaultInstance() {
}
class CustomReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomReport>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_program_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CustomReport::clear_attribute() {
  attribute_.Clear();
}
CustomReport::CustomReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.CustomReport)
}
CustomReport::CustomReport(const CustomReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  program_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_program_id()) {
    program_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_id_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.CustomReport)
}

void CustomReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CustomReport::~CustomReport() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.CustomReport)
  SharedDtor();
}

void CustomReport::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomReport& CustomReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void CustomReport::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.CustomReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      program_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CustomReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.report.v1.CustomReport.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string program_id = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_program_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.report.v1.CustomReport.program_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.CustomReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.report.v1.CustomReport.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string program_id = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_program_id().data(), static_cast<int>(this->_internal_program_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.report.v1.CustomReport.program_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_program_id(), target);
  }

  // repeated .bgs.protocol.Attribute attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.CustomReport)
  return target;
}

size_t CustomReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.CustomReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string program_id = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_program_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.CustomReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.CustomReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.CustomReport)
    MergeFrom(*source);
  }
}

void CustomReport::MergeFrom(const CustomReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.CustomReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      program_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_id_);
    }
  }
}

void CustomReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.CustomReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomReport::CopyFrom(const CustomReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.CustomReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomReport::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  return true;
}

void CustomReport::InternalSwap(CustomReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_id_.Swap(&other->program_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpamReport::InitAsDefaultInstance() {
  ::bgs::protocol::report::v1::_SpamReport_default_instance_._instance.get_mutable()->target_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class SpamReport::_Internal {
 public:
  using HasBits = decltype(std::declval<SpamReport>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& target(const SpamReport* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
SpamReport::_Internal::target(const SpamReport* msg) {
  return *msg->target_;
}
void SpamReport::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpamReport::SpamReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.SpamReport)
}
SpamReport::SpamReport(const SpamReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.target_);
  } else {
    target_ = nullptr;
  }
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.SpamReport)
}

void SpamReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpamReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  target_ = nullptr;
  source_ = 1;
}

SpamReport::~SpamReport() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.SpamReport)
  SharedDtor();
}

void SpamReport::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void SpamReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpamReport& SpamReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpamReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void SpamReport::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.SpamReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
    source_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SpamReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.report.v1.SpamReport.SpamSource source = 2 [default = OTHER];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::bgs::protocol::report::v1::SpamReport_SpamSource_IsValid(val))) {
            _internal_set_source(static_cast<::bgs::protocol::report::v1::SpamReport_SpamSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpamReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.SpamReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional .bgs.protocol.report.v1.SpamReport.SpamSource source = 2 [default = OTHER];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.SpamReport)
  return target;
}

size_t SpamReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.SpamReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

    // optional .bgs.protocol.report.v1.SpamReport.SpamSource source = 2 [default = OTHER];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpamReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.SpamReport)
  GOOGLE_DCHECK_NE(&from, this);
  const SpamReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpamReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.SpamReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.SpamReport)
    MergeFrom(*source);
  }
}

void SpamReport::MergeFrom(const SpamReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.SpamReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpamReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.SpamReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpamReport::CopyFrom(const SpamReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.SpamReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpamReport::IsInitialized() const {
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  return true;
}

void SpamReport::InternalSwap(SpamReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpamReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HarassmentReport::InitAsDefaultInstance() {
  ::bgs::protocol::report::v1::_HarassmentReport_default_instance_._instance.get_mutable()->target_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class HarassmentReport::_Internal {
 public:
  using HasBits = decltype(std::declval<HarassmentReport>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& target(const HarassmentReport* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
HarassmentReport::_Internal::target(const HarassmentReport* msg) {
  return *msg->target_;
}
void HarassmentReport::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
HarassmentReport::HarassmentReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.HarassmentReport)
}
HarassmentReport::HarassmentReport(const HarassmentReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from._internal_has_target()) {
    target_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.HarassmentReport)
}

void HarassmentReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HarassmentReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ = nullptr;
}

HarassmentReport::~HarassmentReport() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.HarassmentReport)
  SharedDtor();
}

void HarassmentReport::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_;
}

void HarassmentReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HarassmentReport& HarassmentReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HarassmentReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void HarassmentReport::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.HarassmentReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HarassmentReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.report.v1.HarassmentReport.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HarassmentReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.HarassmentReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.report.v1.HarassmentReport.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.HarassmentReport)
  return target;
}

size_t HarassmentReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.HarassmentReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarassmentReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.HarassmentReport)
  GOOGLE_DCHECK_NE(&from, this);
  const HarassmentReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HarassmentReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.HarassmentReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.HarassmentReport)
    MergeFrom(*source);
  }
}

void HarassmentReport::MergeFrom(const HarassmentReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.HarassmentReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_target());
    }
  }
}

void HarassmentReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.HarassmentReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarassmentReport::CopyFrom(const HarassmentReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.HarassmentReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarassmentReport::IsInitialized() const {
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  return true;
}

void HarassmentReport::InternalSwap(HarassmentReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HarassmentReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RealLifeThreatReport::InitAsDefaultInstance() {
  ::bgs::protocol::report::v1::_RealLifeThreatReport_default_instance_._instance.get_mutable()->target_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class RealLifeThreatReport::_Internal {
 public:
  using HasBits = decltype(std::declval<RealLifeThreatReport>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& target(const RealLifeThreatReport* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
RealLifeThreatReport::_Internal::target(const RealLifeThreatReport* msg) {
  return *msg->target_;
}
void RealLifeThreatReport::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RealLifeThreatReport::RealLifeThreatReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.RealLifeThreatReport)
}
RealLifeThreatReport::RealLifeThreatReport(const RealLifeThreatReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from._internal_has_target()) {
    target_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.RealLifeThreatReport)
}

void RealLifeThreatReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RealLifeThreatReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ = nullptr;
}

RealLifeThreatReport::~RealLifeThreatReport() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.RealLifeThreatReport)
  SharedDtor();
}

void RealLifeThreatReport::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_;
}

void RealLifeThreatReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealLifeThreatReport& RealLifeThreatReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RealLifeThreatReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void RealLifeThreatReport::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.RealLifeThreatReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RealLifeThreatReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.report.v1.RealLifeThreatReport.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RealLifeThreatReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.RealLifeThreatReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.report.v1.RealLifeThreatReport.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.RealLifeThreatReport)
  return target;
}

size_t RealLifeThreatReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.RealLifeThreatReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealLifeThreatReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.RealLifeThreatReport)
  GOOGLE_DCHECK_NE(&from, this);
  const RealLifeThreatReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealLifeThreatReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.RealLifeThreatReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.RealLifeThreatReport)
    MergeFrom(*source);
  }
}

void RealLifeThreatReport::MergeFrom(const RealLifeThreatReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.RealLifeThreatReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_target());
    }
  }
}

void RealLifeThreatReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.RealLifeThreatReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealLifeThreatReport::CopyFrom(const RealLifeThreatReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.RealLifeThreatReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealLifeThreatReport::IsInitialized() const {
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  return true;
}

void RealLifeThreatReport::InternalSwap(RealLifeThreatReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RealLifeThreatReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InappropriateBattleTagReport::InitAsDefaultInstance() {
  ::bgs::protocol::report::v1::_InappropriateBattleTagReport_default_instance_._instance.get_mutable()->target_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class InappropriateBattleTagReport::_Internal {
 public:
  using HasBits = decltype(std::declval<InappropriateBattleTagReport>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& target(const InappropriateBattleTagReport* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battle_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
InappropriateBattleTagReport::_Internal::target(const InappropriateBattleTagReport* msg) {
  return *msg->target_;
}
void InappropriateBattleTagReport::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
InappropriateBattleTagReport::InappropriateBattleTagReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.InappropriateBattleTagReport)
}
InappropriateBattleTagReport::InappropriateBattleTagReport(const InappropriateBattleTagReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_battle_tag()) {
    battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
  }
  if (from._internal_has_target()) {
    target_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.InappropriateBattleTagReport)
}

void InappropriateBattleTagReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InappropriateBattleTagReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  battle_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ = nullptr;
}

InappropriateBattleTagReport::~InappropriateBattleTagReport() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.InappropriateBattleTagReport)
  SharedDtor();
}

void InappropriateBattleTagReport::SharedDtor() {
  battle_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_;
}

void InappropriateBattleTagReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InappropriateBattleTagReport& InappropriateBattleTagReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InappropriateBattleTagReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void InappropriateBattleTagReport::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.InappropriateBattleTagReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      battle_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InappropriateBattleTagReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string battle_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InappropriateBattleTagReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.InappropriateBattleTagReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional string battle_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_battle_tag().data(), static_cast<int>(this->_internal_battle_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_battle_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.InappropriateBattleTagReport)
  return target;
}

size_t InappropriateBattleTagReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.InappropriateBattleTagReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string battle_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_battle_tag());
    }

    // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InappropriateBattleTagReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.InappropriateBattleTagReport)
  GOOGLE_DCHECK_NE(&from, this);
  const InappropriateBattleTagReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InappropriateBattleTagReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.InappropriateBattleTagReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.InappropriateBattleTagReport)
    MergeFrom(*source);
  }
}

void InappropriateBattleTagReport::MergeFrom(const InappropriateBattleTagReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.InappropriateBattleTagReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      battle_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.battle_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_target());
    }
  }
}

void InappropriateBattleTagReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.InappropriateBattleTagReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InappropriateBattleTagReport::CopyFrom(const InappropriateBattleTagReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.InappropriateBattleTagReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InappropriateBattleTagReport::IsInitialized() const {
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  return true;
}

void InappropriateBattleTagReport::InternalSwap(InappropriateBattleTagReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  battle_tag_.Swap(&other->battle_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InappropriateBattleTagReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HackingReport::InitAsDefaultInstance() {
  ::bgs::protocol::report::v1::_HackingReport_default_instance_._instance.get_mutable()->target_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class HackingReport::_Internal {
 public:
  using HasBits = decltype(std::declval<HackingReport>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& target(const HackingReport* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
HackingReport::_Internal::target(const HackingReport* msg) {
  return *msg->target_;
}
void HackingReport::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HackingReport::HackingReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.HackingReport)
}
HackingReport::HackingReport(const HackingReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.HackingReport)
}

void HackingReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HackingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  target_ = nullptr;
}

HackingReport::~HackingReport() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.HackingReport)
  SharedDtor();
}

void HackingReport::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void HackingReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HackingReport& HackingReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HackingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void HackingReport::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.HackingReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HackingReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HackingReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.HackingReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.HackingReport)
  return target;
}

size_t HackingReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.HackingReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HackingReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.HackingReport)
  GOOGLE_DCHECK_NE(&from, this);
  const HackingReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HackingReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.HackingReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.HackingReport)
    MergeFrom(*source);
  }
}

void HackingReport::MergeFrom(const HackingReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.HackingReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target()) {
    _internal_mutable_target()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_target());
  }
}

void HackingReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.HackingReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HackingReport::CopyFrom(const HackingReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.HackingReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HackingReport::IsInitialized() const {
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  return true;
}

void HackingReport::InternalSwap(HackingReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HackingReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BottingReport::InitAsDefaultInstance() {
  ::bgs::protocol::report::v1::_BottingReport_default_instance_._instance.get_mutable()->target_ = const_cast< ::bgs::protocol::account::v1::GameAccountHandle*>(
      ::bgs::protocol::account::v1::GameAccountHandle::internal_default_instance());
}
class BottingReport::_Internal {
 public:
  using HasBits = decltype(std::declval<BottingReport>()._has_bits_);
  static const ::bgs::protocol::account::v1::GameAccountHandle& target(const BottingReport* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::bgs::protocol::account::v1::GameAccountHandle&
BottingReport::_Internal::target(const BottingReport* msg) {
  return *msg->target_;
}
void BottingReport::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BottingReport::BottingReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.BottingReport)
}
BottingReport::BottingReport(const BottingReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::bgs::protocol::account::v1::GameAccountHandle(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.BottingReport)
}

void BottingReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BottingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  target_ = nullptr;
}

BottingReport::~BottingReport() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.BottingReport)
  SharedDtor();
}

void BottingReport::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void BottingReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BottingReport& BottingReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BottingReport_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void BottingReport::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.BottingReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BottingReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BottingReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.BottingReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.BottingReport)
  return target;
}

size_t BottingReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.BottingReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BottingReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.BottingReport)
  GOOGLE_DCHECK_NE(&from, this);
  const BottingReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BottingReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.BottingReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.BottingReport)
    MergeFrom(*source);
  }
}

void BottingReport::MergeFrom(const BottingReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.BottingReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target()) {
    _internal_mutable_target()->::bgs::protocol::account::v1::GameAccountHandle::MergeFrom(from._internal_target());
  }
}

void BottingReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.BottingReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BottingReport::CopyFrom(const BottingReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.BottingReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BottingReport::IsInitialized() const {
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  return true;
}

void BottingReport::InternalSwap(BottingReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BottingReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Report::InitAsDefaultInstance() {
  ::bgs::protocol::report::v1::_Report_default_instance_._instance.get_mutable()->reporting_account_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
  ::bgs::protocol::report::v1::_Report_default_instance_._instance.get_mutable()->reporting_game_account_ = const_cast< ::bgs::protocol::EntityId*>(
      ::bgs::protocol::EntityId::internal_default_instance());
}
class Report::_Internal {
 public:
  using HasBits = decltype(std::declval<Report>()._has_bits_);
  static void set_has_report_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_report_qos(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::bgs::protocol::EntityId& reporting_account(const Report* msg);
  static void set_has_reporting_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::bgs::protocol::EntityId& reporting_game_account(const Report* msg);
  static void set_has_reporting_game_account(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::EntityId&
Report::_Internal::reporting_account(const Report* msg) {
  return *msg->reporting_account_;
}
const ::bgs::protocol::EntityId&
Report::_Internal::reporting_game_account(const Report* msg) {
  return *msg->reporting_game_account_;
}
void Report::clear_attribute() {
  attribute_.Clear();
}
void Report::clear_reporting_account() {
  if (reporting_account_ != nullptr) reporting_account_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Report::clear_reporting_game_account() {
  if (reporting_game_account_ != nullptr) reporting_game_account_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Report::Report()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v1.Report)
}
Report::Report(const Report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  report_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_report_type()) {
    report_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.report_type_);
  }
  if (from._internal_has_reporting_account()) {
    reporting_account_ = new ::bgs::protocol::EntityId(*from.reporting_account_);
  } else {
    reporting_account_ = nullptr;
  }
  if (from._internal_has_reporting_game_account()) {
    reporting_game_account_ = new ::bgs::protocol::EntityId(*from.reporting_game_account_);
  } else {
    reporting_game_account_ = nullptr;
  }
  ::memcpy(&report_timestamp_, &from.report_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_qos_) -
    reinterpret_cast<char*>(&report_timestamp_)) + sizeof(report_qos_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v1.Report)
}

void Report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Report_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  report_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reporting_account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_qos_) -
      reinterpret_cast<char*>(&reporting_account_)) + sizeof(report_qos_));
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v1.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  report_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reporting_account_;
  if (this != internal_default_instance()) delete reporting_game_account_;
}

void Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Report& Report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Report_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.report.v1.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      report_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reporting_account_ != nullptr);
      reporting_account_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reporting_game_account_ != nullptr);
      reporting_game_account_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&report_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_qos_) -
        reinterpret_cast<char*>(&report_timestamp_)) + sizeof(report_qos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string report_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_report_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.report.v1.Report.report_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.Attribute attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 report_qos = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_report_qos(&has_bits);
          report_qos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId reporting_account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reporting_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.EntityId reporting_game_account = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reporting_game_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 report_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_report_timestamp(&has_bits);
          report_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v1.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string report_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_report_type().data(), static_cast<int>(this->_internal_report_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.report.v1.Report.report_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_report_type(), target);
  }

  // repeated .bgs.protocol.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attribute(i), target, stream);
  }

  // optional int32 report_qos = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_report_qos(), target);
  }

  // optional .bgs.protocol.EntityId reporting_account = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reporting_account(this), target, stream);
  }

  // optional .bgs.protocol.EntityId reporting_game_account = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reporting_game_account(this), target, stream);
  }

  // optional fixed64 report_timestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_report_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v1.Report)
  return target;
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.report.v1.Report)
  size_t total_size = 0;

  // required string report_type = 1;
  if (_internal_has_report_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.Attribute attribute = 2;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .bgs.protocol.EntityId reporting_account = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reporting_account_);
    }

    // optional .bgs.protocol.EntityId reporting_game_account = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reporting_game_account_);
    }

    // optional fixed64 report_timestamp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 report_qos = 3 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_report_qos());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.report.v1.Report)
  GOOGLE_DCHECK_NE(&from, this);
  const Report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.report.v1.Report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.report.v1.Report)
    MergeFrom(*source);
  }
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.report.v1.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      report_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.report_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_reporting_account()->::bgs::protocol::EntityId::MergeFrom(from._internal_reporting_account());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reporting_game_account()->::bgs::protocol::EntityId::MergeFrom(from._internal_reporting_game_account());
    }
    if (cached_has_bits & 0x00000008u) {
      report_timestamp_ = from.report_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_qos_ = from.report_qos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.report.v1.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.report.v1.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  if (_internal_has_reporting_account()) {
    if (!reporting_account_->IsInitialized()) return false;
  }
  if (_internal_has_reporting_game_account()) {
    if (!reporting_game_account_->IsInitialized()) return false;
  }
  return true;
}

void Report::InternalSwap(Report* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  report_type_.Swap(&other->report_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reporting_account_, other->reporting_account_);
  swap(reporting_game_account_, other->reporting_game_account_);
  swap(report_timestamp_, other->report_timestamp_);
  swap(report_qos_, other->report_qos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Report::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace report
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::ReportType* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::ReportType >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::ReportType >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::CustomReport* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::CustomReport >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::CustomReport >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::SpamReport* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::SpamReport >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::SpamReport >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::HarassmentReport* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::HarassmentReport >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::HarassmentReport >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::RealLifeThreatReport* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::RealLifeThreatReport >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::RealLifeThreatReport >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::InappropriateBattleTagReport* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::InappropriateBattleTagReport >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::InappropriateBattleTagReport >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::HackingReport* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::HackingReport >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::HackingReport >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::BottingReport* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::BottingReport >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::BottingReport >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::report::v1::Report* Arena::CreateMaybeMessage< ::bgs::protocol::report::v1::Report >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::report::v1::Report >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
