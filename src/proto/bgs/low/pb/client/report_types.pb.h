// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/report_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/account_types.pb.h"
#include "bgs/low/pb/client/attribute_types.pb.h"
#include "bgs/low/pb/client/entity_types.pb.h"
#include "bgs/low/pb/client/rpc_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
namespace bgs {
namespace protocol {
namespace report {
namespace v1 {
class BottingReport;
class BottingReportDefaultTypeInternal;
extern BottingReportDefaultTypeInternal _BottingReport_default_instance_;
class CustomReport;
class CustomReportDefaultTypeInternal;
extern CustomReportDefaultTypeInternal _CustomReport_default_instance_;
class HackingReport;
class HackingReportDefaultTypeInternal;
extern HackingReportDefaultTypeInternal _HackingReport_default_instance_;
class HarassmentReport;
class HarassmentReportDefaultTypeInternal;
extern HarassmentReportDefaultTypeInternal _HarassmentReport_default_instance_;
class InappropriateBattleTagReport;
class InappropriateBattleTagReportDefaultTypeInternal;
extern InappropriateBattleTagReportDefaultTypeInternal _InappropriateBattleTagReport_default_instance_;
class RealLifeThreatReport;
class RealLifeThreatReportDefaultTypeInternal;
extern RealLifeThreatReportDefaultTypeInternal _RealLifeThreatReport_default_instance_;
class Report;
class ReportDefaultTypeInternal;
extern ReportDefaultTypeInternal _Report_default_instance_;
class ReportType;
class ReportTypeDefaultTypeInternal;
extern ReportTypeDefaultTypeInternal _ReportType_default_instance_;
class SpamReport;
class SpamReportDefaultTypeInternal;
extern SpamReportDefaultTypeInternal _SpamReport_default_instance_;
}  // namespace v1
}  // namespace report
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::report::v1::BottingReport* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::BottingReport>(Arena*);
template<> ::bgs::protocol::report::v1::CustomReport* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::CustomReport>(Arena*);
template<> ::bgs::protocol::report::v1::HackingReport* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::HackingReport>(Arena*);
template<> ::bgs::protocol::report::v1::HarassmentReport* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::HarassmentReport>(Arena*);
template<> ::bgs::protocol::report::v1::InappropriateBattleTagReport* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::InappropriateBattleTagReport>(Arena*);
template<> ::bgs::protocol::report::v1::RealLifeThreatReport* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::RealLifeThreatReport>(Arena*);
template<> ::bgs::protocol::report::v1::Report* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::Report>(Arena*);
template<> ::bgs::protocol::report::v1::ReportType* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::ReportType>(Arena*);
template<> ::bgs::protocol::report::v1::SpamReport* Arena::CreateMaybeMessage<::bgs::protocol::report::v1::SpamReport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace report {
namespace v1 {

enum SpamReport_SpamSource : int {
  SpamReport_SpamSource_OTHER = 1,
  SpamReport_SpamSource_FRIEND_INVITATION = 2,
  SpamReport_SpamSource_WHISPER = 3,
  SpamReport_SpamSource_CHAT = 4
};
bool SpamReport_SpamSource_IsValid(int value);
constexpr SpamReport_SpamSource SpamReport_SpamSource_SpamSource_MIN = SpamReport_SpamSource_OTHER;
constexpr SpamReport_SpamSource SpamReport_SpamSource_SpamSource_MAX = SpamReport_SpamSource_CHAT;
constexpr int SpamReport_SpamSource_SpamSource_ARRAYSIZE = SpamReport_SpamSource_SpamSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpamReport_SpamSource_descriptor();
template<typename T>
inline const std::string& SpamReport_SpamSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpamReport_SpamSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpamReport_SpamSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpamReport_SpamSource_descriptor(), enum_t_value);
}
inline bool SpamReport_SpamSource_Parse(
    const std::string& name, SpamReport_SpamSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpamReport_SpamSource>(
    SpamReport_SpamSource_descriptor(), name, value);
}
// ===================================================================

class ReportType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.ReportType) */ {
 public:
  ReportType();
  virtual ~ReportType();

  ReportType(const ReportType& from);
  ReportType(ReportType&& from) noexcept
    : ReportType() {
    *this = ::std::move(from);
  }

  inline ReportType& operator=(const ReportType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportType& operator=(ReportType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportType& default_instance();

  enum TypeCase {
    kCustomReport = 10,
    kSpamReport = 11,
    kHarassmentReport = 12,
    kRealLifeThreatReport = 13,
    kInappropriateBattleTagReport = 14,
    kHackingReport = 15,
    kBottingReport = 16,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportType* internal_default_instance() {
    return reinterpret_cast<const ReportType*>(
               &_ReportType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReportType& a, ReportType& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportType* New() const final {
    return CreateMaybeMessage<ReportType>(nullptr);
  }

  ReportType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportType& from);
  void MergeFrom(const ReportType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.ReportType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDescriptionFieldNumber = 1,
    kCustomReportFieldNumber = 10,
    kSpamReportFieldNumber = 11,
    kHarassmentReportFieldNumber = 12,
    kRealLifeThreatReportFieldNumber = 13,
    kInappropriateBattleTagReportFieldNumber = 14,
    kHackingReportFieldNumber = 15,
    kBottingReportFieldNumber = 16,
  };
  // optional string user_description = 1;
  bool has_user_description() const;
  private:
  bool _internal_has_user_description() const;
  public:
  void clear_user_description();
  const std::string& user_description() const;
  void set_user_description(const std::string& value);
  void set_user_description(std::string&& value);
  void set_user_description(const char* value);
  void set_user_description(const char* value, size_t size);
  std::string* mutable_user_description();
  std::string* release_user_description();
  void set_allocated_user_description(std::string* user_description);
  private:
  const std::string& _internal_user_description() const;
  void _internal_set_user_description(const std::string& value);
  std::string* _internal_mutable_user_description();
  public:

  // optional .bgs.protocol.report.v1.CustomReport custom_report = 10;
  bool has_custom_report() const;
  private:
  bool _internal_has_custom_report() const;
  public:
  void clear_custom_report();
  const ::bgs::protocol::report::v1::CustomReport& custom_report() const;
  ::bgs::protocol::report::v1::CustomReport* release_custom_report();
  ::bgs::protocol::report::v1::CustomReport* mutable_custom_report();
  void set_allocated_custom_report(::bgs::protocol::report::v1::CustomReport* custom_report);
  private:
  const ::bgs::protocol::report::v1::CustomReport& _internal_custom_report() const;
  ::bgs::protocol::report::v1::CustomReport* _internal_mutable_custom_report();
  public:

  // optional .bgs.protocol.report.v1.SpamReport spam_report = 11;
  bool has_spam_report() const;
  private:
  bool _internal_has_spam_report() const;
  public:
  void clear_spam_report();
  const ::bgs::protocol::report::v1::SpamReport& spam_report() const;
  ::bgs::protocol::report::v1::SpamReport* release_spam_report();
  ::bgs::protocol::report::v1::SpamReport* mutable_spam_report();
  void set_allocated_spam_report(::bgs::protocol::report::v1::SpamReport* spam_report);
  private:
  const ::bgs::protocol::report::v1::SpamReport& _internal_spam_report() const;
  ::bgs::protocol::report::v1::SpamReport* _internal_mutable_spam_report();
  public:

  // optional .bgs.protocol.report.v1.HarassmentReport harassment_report = 12;
  bool has_harassment_report() const;
  private:
  bool _internal_has_harassment_report() const;
  public:
  void clear_harassment_report();
  const ::bgs::protocol::report::v1::HarassmentReport& harassment_report() const;
  ::bgs::protocol::report::v1::HarassmentReport* release_harassment_report();
  ::bgs::protocol::report::v1::HarassmentReport* mutable_harassment_report();
  void set_allocated_harassment_report(::bgs::protocol::report::v1::HarassmentReport* harassment_report);
  private:
  const ::bgs::protocol::report::v1::HarassmentReport& _internal_harassment_report() const;
  ::bgs::protocol::report::v1::HarassmentReport* _internal_mutable_harassment_report();
  public:

  // optional .bgs.protocol.report.v1.RealLifeThreatReport real_life_threat_report = 13;
  bool has_real_life_threat_report() const;
  private:
  bool _internal_has_real_life_threat_report() const;
  public:
  void clear_real_life_threat_report();
  const ::bgs::protocol::report::v1::RealLifeThreatReport& real_life_threat_report() const;
  ::bgs::protocol::report::v1::RealLifeThreatReport* release_real_life_threat_report();
  ::bgs::protocol::report::v1::RealLifeThreatReport* mutable_real_life_threat_report();
  void set_allocated_real_life_threat_report(::bgs::protocol::report::v1::RealLifeThreatReport* real_life_threat_report);
  private:
  const ::bgs::protocol::report::v1::RealLifeThreatReport& _internal_real_life_threat_report() const;
  ::bgs::protocol::report::v1::RealLifeThreatReport* _internal_mutable_real_life_threat_report();
  public:

  // optional .bgs.protocol.report.v1.InappropriateBattleTagReport inappropriate_battle_tag_report = 14;
  bool has_inappropriate_battle_tag_report() const;
  private:
  bool _internal_has_inappropriate_battle_tag_report() const;
  public:
  void clear_inappropriate_battle_tag_report();
  const ::bgs::protocol::report::v1::InappropriateBattleTagReport& inappropriate_battle_tag_report() const;
  ::bgs::protocol::report::v1::InappropriateBattleTagReport* release_inappropriate_battle_tag_report();
  ::bgs::protocol::report::v1::InappropriateBattleTagReport* mutable_inappropriate_battle_tag_report();
  void set_allocated_inappropriate_battle_tag_report(::bgs::protocol::report::v1::InappropriateBattleTagReport* inappropriate_battle_tag_report);
  private:
  const ::bgs::protocol::report::v1::InappropriateBattleTagReport& _internal_inappropriate_battle_tag_report() const;
  ::bgs::protocol::report::v1::InappropriateBattleTagReport* _internal_mutable_inappropriate_battle_tag_report();
  public:

  // optional .bgs.protocol.report.v1.HackingReport hacking_report = 15;
  bool has_hacking_report() const;
  private:
  bool _internal_has_hacking_report() const;
  public:
  void clear_hacking_report();
  const ::bgs::protocol::report::v1::HackingReport& hacking_report() const;
  ::bgs::protocol::report::v1::HackingReport* release_hacking_report();
  ::bgs::protocol::report::v1::HackingReport* mutable_hacking_report();
  void set_allocated_hacking_report(::bgs::protocol::report::v1::HackingReport* hacking_report);
  private:
  const ::bgs::protocol::report::v1::HackingReport& _internal_hacking_report() const;
  ::bgs::protocol::report::v1::HackingReport* _internal_mutable_hacking_report();
  public:

  // optional .bgs.protocol.report.v1.BottingReport botting_report = 16;
  bool has_botting_report() const;
  private:
  bool _internal_has_botting_report() const;
  public:
  void clear_botting_report();
  const ::bgs::protocol::report::v1::BottingReport& botting_report() const;
  ::bgs::protocol::report::v1::BottingReport* release_botting_report();
  ::bgs::protocol::report::v1::BottingReport* mutable_botting_report();
  void set_allocated_botting_report(::bgs::protocol::report::v1::BottingReport* botting_report);
  private:
  const ::bgs::protocol::report::v1::BottingReport& _internal_botting_report() const;
  ::bgs::protocol::report::v1::BottingReport* _internal_mutable_botting_report();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.ReportType)
 private:
  class _Internal;
  void set_has_custom_report();
  void set_has_spam_report();
  void set_has_harassment_report();
  void set_has_real_life_threat_report();
  void set_has_inappropriate_battle_tag_report();
  void set_has_hacking_report();
  void set_has_botting_report();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_description_;
  union TypeUnion {
    TypeUnion() {}
    ::bgs::protocol::report::v1::CustomReport* custom_report_;
    ::bgs::protocol::report::v1::SpamReport* spam_report_;
    ::bgs::protocol::report::v1::HarassmentReport* harassment_report_;
    ::bgs::protocol::report::v1::RealLifeThreatReport* real_life_threat_report_;
    ::bgs::protocol::report::v1::InappropriateBattleTagReport* inappropriate_battle_tag_report_;
    ::bgs::protocol::report::v1::HackingReport* hacking_report_;
    ::bgs::protocol::report::v1::BottingReport* botting_report_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class CustomReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.CustomReport) */ {
 public:
  CustomReport();
  virtual ~CustomReport();

  CustomReport(const CustomReport& from);
  CustomReport(CustomReport&& from) noexcept
    : CustomReport() {
    *this = ::std::move(from);
  }

  inline CustomReport& operator=(const CustomReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomReport& operator=(CustomReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomReport* internal_default_instance() {
    return reinterpret_cast<const CustomReport*>(
               &_CustomReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomReport& a, CustomReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomReport* New() const final {
    return CreateMaybeMessage<CustomReport>(nullptr);
  }

  CustomReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomReport& from);
  void MergeFrom(const CustomReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.CustomReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 3,
    kTypeFieldNumber = 1,
    kProgramIdFieldNumber = 2,
  };
  // repeated .bgs.protocol.Attribute attribute = 3;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string program_id = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_program_id() const;
  private:
  bool _internal_has_program_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_program_id();
  PROTOBUF_DEPRECATED const std::string& program_id() const;
  PROTOBUF_DEPRECATED void set_program_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_program_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_program_id(const char* value);
  PROTOBUF_DEPRECATED void set_program_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_program_id();
  PROTOBUF_DEPRECATED std::string* release_program_id();
  PROTOBUF_DEPRECATED void set_allocated_program_id(std::string* program_id);
  private:
  const std::string& _internal_program_id() const;
  void _internal_set_program_id(const std::string& value);
  std::string* _internal_mutable_program_id();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.CustomReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SpamReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.SpamReport) */ {
 public:
  SpamReport();
  virtual ~SpamReport();

  SpamReport(const SpamReport& from);
  SpamReport(SpamReport&& from) noexcept
    : SpamReport() {
    *this = ::std::move(from);
  }

  inline SpamReport& operator=(const SpamReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpamReport& operator=(SpamReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpamReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpamReport* internal_default_instance() {
    return reinterpret_cast<const SpamReport*>(
               &_SpamReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpamReport& a, SpamReport& b) {
    a.Swap(&b);
  }
  inline void Swap(SpamReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpamReport* New() const final {
    return CreateMaybeMessage<SpamReport>(nullptr);
  }

  SpamReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpamReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpamReport& from);
  void MergeFrom(const SpamReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpamReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.SpamReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SpamReport_SpamSource SpamSource;
  static constexpr SpamSource OTHER =
    SpamReport_SpamSource_OTHER;
  static constexpr SpamSource FRIEND_INVITATION =
    SpamReport_SpamSource_FRIEND_INVITATION;
  static constexpr SpamSource WHISPER =
    SpamReport_SpamSource_WHISPER;
  static constexpr SpamSource CHAT =
    SpamReport_SpamSource_CHAT;
  static inline bool SpamSource_IsValid(int value) {
    return SpamReport_SpamSource_IsValid(value);
  }
  static constexpr SpamSource SpamSource_MIN =
    SpamReport_SpamSource_SpamSource_MIN;
  static constexpr SpamSource SpamSource_MAX =
    SpamReport_SpamSource_SpamSource_MAX;
  static constexpr int SpamSource_ARRAYSIZE =
    SpamReport_SpamSource_SpamSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpamSource_descriptor() {
    return SpamReport_SpamSource_descriptor();
  }
  template<typename T>
  static inline const std::string& SpamSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpamSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpamSource_Name.");
    return SpamReport_SpamSource_Name(enum_t_value);
  }
  static inline bool SpamSource_Parse(const std::string& name,
      SpamSource* value) {
    return SpamReport_SpamSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kSourceFieldNumber = 2,
  };
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::bgs::protocol::account::v1::GameAccountHandle& target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_target();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_target();
  void set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_target();
  public:

  // optional .bgs.protocol.report.v1.SpamReport.SpamSource source = 2 [default = OTHER];
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::bgs::protocol::report::v1::SpamReport_SpamSource source() const;
  void set_source(::bgs::protocol::report::v1::SpamReport_SpamSource value);
  private:
  ::bgs::protocol::report::v1::SpamReport_SpamSource _internal_source() const;
  void _internal_set_source(::bgs::protocol::report::v1::SpamReport_SpamSource value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.SpamReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameAccountHandle* target_;
  int source_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class HarassmentReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.HarassmentReport) */ {
 public:
  HarassmentReport();
  virtual ~HarassmentReport();

  HarassmentReport(const HarassmentReport& from);
  HarassmentReport(HarassmentReport&& from) noexcept
    : HarassmentReport() {
    *this = ::std::move(from);
  }

  inline HarassmentReport& operator=(const HarassmentReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline HarassmentReport& operator=(HarassmentReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HarassmentReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HarassmentReport* internal_default_instance() {
    return reinterpret_cast<const HarassmentReport*>(
               &_HarassmentReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HarassmentReport& a, HarassmentReport& b) {
    a.Swap(&b);
  }
  inline void Swap(HarassmentReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HarassmentReport* New() const final {
    return CreateMaybeMessage<HarassmentReport>(nullptr);
  }

  HarassmentReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HarassmentReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HarassmentReport& from);
  void MergeFrom(const HarassmentReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HarassmentReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.HarassmentReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTargetFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::bgs::protocol::account::v1::GameAccountHandle& target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_target();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_target();
  void set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.HarassmentReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::bgs::protocol::account::v1::GameAccountHandle* target_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class RealLifeThreatReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.RealLifeThreatReport) */ {
 public:
  RealLifeThreatReport();
  virtual ~RealLifeThreatReport();

  RealLifeThreatReport(const RealLifeThreatReport& from);
  RealLifeThreatReport(RealLifeThreatReport&& from) noexcept
    : RealLifeThreatReport() {
    *this = ::std::move(from);
  }

  inline RealLifeThreatReport& operator=(const RealLifeThreatReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealLifeThreatReport& operator=(RealLifeThreatReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealLifeThreatReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealLifeThreatReport* internal_default_instance() {
    return reinterpret_cast<const RealLifeThreatReport*>(
               &_RealLifeThreatReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RealLifeThreatReport& a, RealLifeThreatReport& b) {
    a.Swap(&b);
  }
  inline void Swap(RealLifeThreatReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealLifeThreatReport* New() const final {
    return CreateMaybeMessage<RealLifeThreatReport>(nullptr);
  }

  RealLifeThreatReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealLifeThreatReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealLifeThreatReport& from);
  void MergeFrom(const RealLifeThreatReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealLifeThreatReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.RealLifeThreatReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTargetFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::bgs::protocol::account::v1::GameAccountHandle& target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_target();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_target();
  void set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.RealLifeThreatReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::bgs::protocol::account::v1::GameAccountHandle* target_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class InappropriateBattleTagReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.InappropriateBattleTagReport) */ {
 public:
  InappropriateBattleTagReport();
  virtual ~InappropriateBattleTagReport();

  InappropriateBattleTagReport(const InappropriateBattleTagReport& from);
  InappropriateBattleTagReport(InappropriateBattleTagReport&& from) noexcept
    : InappropriateBattleTagReport() {
    *this = ::std::move(from);
  }

  inline InappropriateBattleTagReport& operator=(const InappropriateBattleTagReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline InappropriateBattleTagReport& operator=(InappropriateBattleTagReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InappropriateBattleTagReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InappropriateBattleTagReport* internal_default_instance() {
    return reinterpret_cast<const InappropriateBattleTagReport*>(
               &_InappropriateBattleTagReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InappropriateBattleTagReport& a, InappropriateBattleTagReport& b) {
    a.Swap(&b);
  }
  inline void Swap(InappropriateBattleTagReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InappropriateBattleTagReport* New() const final {
    return CreateMaybeMessage<InappropriateBattleTagReport>(nullptr);
  }

  InappropriateBattleTagReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InappropriateBattleTagReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InappropriateBattleTagReport& from);
  void MergeFrom(const InappropriateBattleTagReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InappropriateBattleTagReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.InappropriateBattleTagReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleTagFieldNumber = 2,
    kTargetFieldNumber = 1,
  };
  // optional string battle_tag = 2;
  bool has_battle_tag() const;
  private:
  bool _internal_has_battle_tag() const;
  public:
  void clear_battle_tag();
  const std::string& battle_tag() const;
  void set_battle_tag(const std::string& value);
  void set_battle_tag(std::string&& value);
  void set_battle_tag(const char* value);
  void set_battle_tag(const char* value, size_t size);
  std::string* mutable_battle_tag();
  std::string* release_battle_tag();
  void set_allocated_battle_tag(std::string* battle_tag);
  private:
  const std::string& _internal_battle_tag() const;
  void _internal_set_battle_tag(const std::string& value);
  std::string* _internal_mutable_battle_tag();
  public:

  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::bgs::protocol::account::v1::GameAccountHandle& target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_target();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_target();
  void set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.InappropriateBattleTagReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_tag_;
  ::bgs::protocol::account::v1::GameAccountHandle* target_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class HackingReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.HackingReport) */ {
 public:
  HackingReport();
  virtual ~HackingReport();

  HackingReport(const HackingReport& from);
  HackingReport(HackingReport&& from) noexcept
    : HackingReport() {
    *this = ::std::move(from);
  }

  inline HackingReport& operator=(const HackingReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline HackingReport& operator=(HackingReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HackingReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HackingReport* internal_default_instance() {
    return reinterpret_cast<const HackingReport*>(
               &_HackingReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HackingReport& a, HackingReport& b) {
    a.Swap(&b);
  }
  inline void Swap(HackingReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HackingReport* New() const final {
    return CreateMaybeMessage<HackingReport>(nullptr);
  }

  HackingReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HackingReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HackingReport& from);
  void MergeFrom(const HackingReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HackingReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.HackingReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::bgs::protocol::account::v1::GameAccountHandle& target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_target();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_target();
  void set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.HackingReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameAccountHandle* target_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class BottingReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.BottingReport) */ {
 public:
  BottingReport();
  virtual ~BottingReport();

  BottingReport(const BottingReport& from);
  BottingReport(BottingReport&& from) noexcept
    : BottingReport() {
    *this = ::std::move(from);
  }

  inline BottingReport& operator=(const BottingReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline BottingReport& operator=(BottingReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BottingReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BottingReport* internal_default_instance() {
    return reinterpret_cast<const BottingReport*>(
               &_BottingReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BottingReport& a, BottingReport& b) {
    a.Swap(&b);
  }
  inline void Swap(BottingReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BottingReport* New() const final {
    return CreateMaybeMessage<BottingReport>(nullptr);
  }

  BottingReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BottingReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BottingReport& from);
  void MergeFrom(const BottingReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BottingReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.BottingReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::bgs::protocol::account::v1::GameAccountHandle& target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* release_target();
  ::bgs::protocol::account::v1::GameAccountHandle* mutable_target();
  void set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target);
  private:
  const ::bgs::protocol::account::v1::GameAccountHandle& _internal_target() const;
  ::bgs::protocol::account::v1::GameAccountHandle* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.BottingReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::account::v1::GameAccountHandle* target_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Report :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.report.v1.Report) */ {
 public:
  Report();
  virtual ~Report();

  Report(const Report& from);
  Report(Report&& from) noexcept
    : Report() {
    *this = ::std::move(from);
  }

  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline Report& operator=(Report&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Report* internal_default_instance() {
    return reinterpret_cast<const Report*>(
               &_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Report& a, Report& b) {
    a.Swap(&b);
  }
  inline void Swap(Report* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Report* New() const final {
    return CreateMaybeMessage<Report>(nullptr);
  }

  Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Report>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Report& from);
  void MergeFrom(const Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.report.v1.Report";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kReportTypeFieldNumber = 1,
    kReportingAccountFieldNumber = 4,
    kReportingGameAccountFieldNumber = 5,
    kReportTimestampFieldNumber = 6,
    kReportQosFieldNumber = 3,
  };
  // repeated .bgs.protocol.Attribute attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::bgs::protocol::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attribute();
  private:
  const ::bgs::protocol::Attribute& _internal_attribute(int index) const;
  ::bgs::protocol::Attribute* _internal_add_attribute();
  public:
  const ::bgs::protocol::Attribute& attribute(int index) const;
  ::bgs::protocol::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attribute() const;

  // required string report_type = 1;
  bool has_report_type() const;
  private:
  bool _internal_has_report_type() const;
  public:
  void clear_report_type();
  const std::string& report_type() const;
  void set_report_type(const std::string& value);
  void set_report_type(std::string&& value);
  void set_report_type(const char* value);
  void set_report_type(const char* value, size_t size);
  std::string* mutable_report_type();
  std::string* release_report_type();
  void set_allocated_report_type(std::string* report_type);
  private:
  const std::string& _internal_report_type() const;
  void _internal_set_report_type(const std::string& value);
  std::string* _internal_mutable_report_type();
  public:

  // optional .bgs.protocol.EntityId reporting_account = 4;
  bool has_reporting_account() const;
  private:
  bool _internal_has_reporting_account() const;
  public:
  void clear_reporting_account();
  const ::bgs::protocol::EntityId& reporting_account() const;
  ::bgs::protocol::EntityId* release_reporting_account();
  ::bgs::protocol::EntityId* mutable_reporting_account();
  void set_allocated_reporting_account(::bgs::protocol::EntityId* reporting_account);
  private:
  const ::bgs::protocol::EntityId& _internal_reporting_account() const;
  ::bgs::protocol::EntityId* _internal_mutable_reporting_account();
  public:

  // optional .bgs.protocol.EntityId reporting_game_account = 5;
  bool has_reporting_game_account() const;
  private:
  bool _internal_has_reporting_game_account() const;
  public:
  void clear_reporting_game_account();
  const ::bgs::protocol::EntityId& reporting_game_account() const;
  ::bgs::protocol::EntityId* release_reporting_game_account();
  ::bgs::protocol::EntityId* mutable_reporting_game_account();
  void set_allocated_reporting_game_account(::bgs::protocol::EntityId* reporting_game_account);
  private:
  const ::bgs::protocol::EntityId& _internal_reporting_game_account() const;
  ::bgs::protocol::EntityId* _internal_mutable_reporting_game_account();
  public:

  // optional fixed64 report_timestamp = 6;
  bool has_report_timestamp() const;
  private:
  bool _internal_has_report_timestamp() const;
  public:
  void clear_report_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 report_timestamp() const;
  void set_report_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_report_timestamp() const;
  void _internal_set_report_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 report_qos = 3 [default = 0];
  bool has_report_qos() const;
  private:
  bool _internal_has_report_qos() const;
  public:
  void clear_report_qos();
  ::PROTOBUF_NAMESPACE_ID::int32 report_qos() const;
  void set_report_qos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_report_qos() const;
  void _internal_set_report_qos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.report.v1.Report)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_type_;
  ::bgs::protocol::EntityId* reporting_account_;
  ::bgs::protocol::EntityId* reporting_game_account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 report_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 report_qos_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportType

// optional string user_description = 1;
inline bool ReportType::_internal_has_user_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReportType::has_user_description() const {
  return _internal_has_user_description();
}
inline void ReportType::clear_user_description() {
  user_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReportType::user_description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.ReportType.user_description)
  return _internal_user_description();
}
inline void ReportType::set_user_description(const std::string& value) {
  _internal_set_user_description(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.ReportType.user_description)
}
inline std::string* ReportType::mutable_user_description() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.ReportType.user_description)
  return _internal_mutable_user_description();
}
inline const std::string& ReportType::_internal_user_description() const {
  return user_description_.GetNoArena();
}
inline void ReportType::_internal_set_user_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReportType::set_user_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.report.v1.ReportType.user_description)
}
inline void ReportType::set_user_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.report.v1.ReportType.user_description)
}
inline void ReportType::set_user_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.report.v1.ReportType.user_description)
}
inline std::string* ReportType::_internal_mutable_user_description() {
  _has_bits_[0] |= 0x00000001u;
  return user_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReportType::release_user_description() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.ReportType.user_description)
  if (!_internal_has_user_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReportType::set_allocated_user_description(std::string* user_description) {
  if (user_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_description);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.ReportType.user_description)
}

// optional .bgs.protocol.report.v1.CustomReport custom_report = 10;
inline bool ReportType::_internal_has_custom_report() const {
  return type_case() == kCustomReport;
}
inline bool ReportType::has_custom_report() const {
  return _internal_has_custom_report();
}
inline void ReportType::set_has_custom_report() {
  _oneof_case_[0] = kCustomReport;
}
inline void ReportType::clear_custom_report() {
  if (_internal_has_custom_report()) {
    delete type_.custom_report_;
    clear_has_type();
  }
}
inline ::bgs::protocol::report::v1::CustomReport* ReportType::release_custom_report() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.ReportType.custom_report)
  if (_internal_has_custom_report()) {
    clear_has_type();
      ::bgs::protocol::report::v1::CustomReport* temp = type_.custom_report_;
    type_.custom_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v1::CustomReport& ReportType::_internal_custom_report() const {
  return _internal_has_custom_report()
      ? *type_.custom_report_
      : *reinterpret_cast< ::bgs::protocol::report::v1::CustomReport*>(&::bgs::protocol::report::v1::_CustomReport_default_instance_);
}
inline const ::bgs::protocol::report::v1::CustomReport& ReportType::custom_report() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.ReportType.custom_report)
  return _internal_custom_report();
}
inline ::bgs::protocol::report::v1::CustomReport* ReportType::_internal_mutable_custom_report() {
  if (!_internal_has_custom_report()) {
    clear_type();
    set_has_custom_report();
    type_.custom_report_ = CreateMaybeMessage< ::bgs::protocol::report::v1::CustomReport >(
        GetArenaNoVirtual());
  }
  return type_.custom_report_;
}
inline ::bgs::protocol::report::v1::CustomReport* ReportType::mutable_custom_report() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.ReportType.custom_report)
  return _internal_mutable_custom_report();
}

// optional .bgs.protocol.report.v1.SpamReport spam_report = 11;
inline bool ReportType::_internal_has_spam_report() const {
  return type_case() == kSpamReport;
}
inline bool ReportType::has_spam_report() const {
  return _internal_has_spam_report();
}
inline void ReportType::set_has_spam_report() {
  _oneof_case_[0] = kSpamReport;
}
inline void ReportType::clear_spam_report() {
  if (_internal_has_spam_report()) {
    delete type_.spam_report_;
    clear_has_type();
  }
}
inline ::bgs::protocol::report::v1::SpamReport* ReportType::release_spam_report() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.ReportType.spam_report)
  if (_internal_has_spam_report()) {
    clear_has_type();
      ::bgs::protocol::report::v1::SpamReport* temp = type_.spam_report_;
    type_.spam_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v1::SpamReport& ReportType::_internal_spam_report() const {
  return _internal_has_spam_report()
      ? *type_.spam_report_
      : *reinterpret_cast< ::bgs::protocol::report::v1::SpamReport*>(&::bgs::protocol::report::v1::_SpamReport_default_instance_);
}
inline const ::bgs::protocol::report::v1::SpamReport& ReportType::spam_report() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.ReportType.spam_report)
  return _internal_spam_report();
}
inline ::bgs::protocol::report::v1::SpamReport* ReportType::_internal_mutable_spam_report() {
  if (!_internal_has_spam_report()) {
    clear_type();
    set_has_spam_report();
    type_.spam_report_ = CreateMaybeMessage< ::bgs::protocol::report::v1::SpamReport >(
        GetArenaNoVirtual());
  }
  return type_.spam_report_;
}
inline ::bgs::protocol::report::v1::SpamReport* ReportType::mutable_spam_report() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.ReportType.spam_report)
  return _internal_mutable_spam_report();
}

// optional .bgs.protocol.report.v1.HarassmentReport harassment_report = 12;
inline bool ReportType::_internal_has_harassment_report() const {
  return type_case() == kHarassmentReport;
}
inline bool ReportType::has_harassment_report() const {
  return _internal_has_harassment_report();
}
inline void ReportType::set_has_harassment_report() {
  _oneof_case_[0] = kHarassmentReport;
}
inline void ReportType::clear_harassment_report() {
  if (_internal_has_harassment_report()) {
    delete type_.harassment_report_;
    clear_has_type();
  }
}
inline ::bgs::protocol::report::v1::HarassmentReport* ReportType::release_harassment_report() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.ReportType.harassment_report)
  if (_internal_has_harassment_report()) {
    clear_has_type();
      ::bgs::protocol::report::v1::HarassmentReport* temp = type_.harassment_report_;
    type_.harassment_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v1::HarassmentReport& ReportType::_internal_harassment_report() const {
  return _internal_has_harassment_report()
      ? *type_.harassment_report_
      : *reinterpret_cast< ::bgs::protocol::report::v1::HarassmentReport*>(&::bgs::protocol::report::v1::_HarassmentReport_default_instance_);
}
inline const ::bgs::protocol::report::v1::HarassmentReport& ReportType::harassment_report() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.ReportType.harassment_report)
  return _internal_harassment_report();
}
inline ::bgs::protocol::report::v1::HarassmentReport* ReportType::_internal_mutable_harassment_report() {
  if (!_internal_has_harassment_report()) {
    clear_type();
    set_has_harassment_report();
    type_.harassment_report_ = CreateMaybeMessage< ::bgs::protocol::report::v1::HarassmentReport >(
        GetArenaNoVirtual());
  }
  return type_.harassment_report_;
}
inline ::bgs::protocol::report::v1::HarassmentReport* ReportType::mutable_harassment_report() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.ReportType.harassment_report)
  return _internal_mutable_harassment_report();
}

// optional .bgs.protocol.report.v1.RealLifeThreatReport real_life_threat_report = 13;
inline bool ReportType::_internal_has_real_life_threat_report() const {
  return type_case() == kRealLifeThreatReport;
}
inline bool ReportType::has_real_life_threat_report() const {
  return _internal_has_real_life_threat_report();
}
inline void ReportType::set_has_real_life_threat_report() {
  _oneof_case_[0] = kRealLifeThreatReport;
}
inline void ReportType::clear_real_life_threat_report() {
  if (_internal_has_real_life_threat_report()) {
    delete type_.real_life_threat_report_;
    clear_has_type();
  }
}
inline ::bgs::protocol::report::v1::RealLifeThreatReport* ReportType::release_real_life_threat_report() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.ReportType.real_life_threat_report)
  if (_internal_has_real_life_threat_report()) {
    clear_has_type();
      ::bgs::protocol::report::v1::RealLifeThreatReport* temp = type_.real_life_threat_report_;
    type_.real_life_threat_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v1::RealLifeThreatReport& ReportType::_internal_real_life_threat_report() const {
  return _internal_has_real_life_threat_report()
      ? *type_.real_life_threat_report_
      : *reinterpret_cast< ::bgs::protocol::report::v1::RealLifeThreatReport*>(&::bgs::protocol::report::v1::_RealLifeThreatReport_default_instance_);
}
inline const ::bgs::protocol::report::v1::RealLifeThreatReport& ReportType::real_life_threat_report() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.ReportType.real_life_threat_report)
  return _internal_real_life_threat_report();
}
inline ::bgs::protocol::report::v1::RealLifeThreatReport* ReportType::_internal_mutable_real_life_threat_report() {
  if (!_internal_has_real_life_threat_report()) {
    clear_type();
    set_has_real_life_threat_report();
    type_.real_life_threat_report_ = CreateMaybeMessage< ::bgs::protocol::report::v1::RealLifeThreatReport >(
        GetArenaNoVirtual());
  }
  return type_.real_life_threat_report_;
}
inline ::bgs::protocol::report::v1::RealLifeThreatReport* ReportType::mutable_real_life_threat_report() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.ReportType.real_life_threat_report)
  return _internal_mutable_real_life_threat_report();
}

// optional .bgs.protocol.report.v1.InappropriateBattleTagReport inappropriate_battle_tag_report = 14;
inline bool ReportType::_internal_has_inappropriate_battle_tag_report() const {
  return type_case() == kInappropriateBattleTagReport;
}
inline bool ReportType::has_inappropriate_battle_tag_report() const {
  return _internal_has_inappropriate_battle_tag_report();
}
inline void ReportType::set_has_inappropriate_battle_tag_report() {
  _oneof_case_[0] = kInappropriateBattleTagReport;
}
inline void ReportType::clear_inappropriate_battle_tag_report() {
  if (_internal_has_inappropriate_battle_tag_report()) {
    delete type_.inappropriate_battle_tag_report_;
    clear_has_type();
  }
}
inline ::bgs::protocol::report::v1::InappropriateBattleTagReport* ReportType::release_inappropriate_battle_tag_report() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.ReportType.inappropriate_battle_tag_report)
  if (_internal_has_inappropriate_battle_tag_report()) {
    clear_has_type();
      ::bgs::protocol::report::v1::InappropriateBattleTagReport* temp = type_.inappropriate_battle_tag_report_;
    type_.inappropriate_battle_tag_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v1::InappropriateBattleTagReport& ReportType::_internal_inappropriate_battle_tag_report() const {
  return _internal_has_inappropriate_battle_tag_report()
      ? *type_.inappropriate_battle_tag_report_
      : *reinterpret_cast< ::bgs::protocol::report::v1::InappropriateBattleTagReport*>(&::bgs::protocol::report::v1::_InappropriateBattleTagReport_default_instance_);
}
inline const ::bgs::protocol::report::v1::InappropriateBattleTagReport& ReportType::inappropriate_battle_tag_report() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.ReportType.inappropriate_battle_tag_report)
  return _internal_inappropriate_battle_tag_report();
}
inline ::bgs::protocol::report::v1::InappropriateBattleTagReport* ReportType::_internal_mutable_inappropriate_battle_tag_report() {
  if (!_internal_has_inappropriate_battle_tag_report()) {
    clear_type();
    set_has_inappropriate_battle_tag_report();
    type_.inappropriate_battle_tag_report_ = CreateMaybeMessage< ::bgs::protocol::report::v1::InappropriateBattleTagReport >(
        GetArenaNoVirtual());
  }
  return type_.inappropriate_battle_tag_report_;
}
inline ::bgs::protocol::report::v1::InappropriateBattleTagReport* ReportType::mutable_inappropriate_battle_tag_report() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.ReportType.inappropriate_battle_tag_report)
  return _internal_mutable_inappropriate_battle_tag_report();
}

// optional .bgs.protocol.report.v1.HackingReport hacking_report = 15;
inline bool ReportType::_internal_has_hacking_report() const {
  return type_case() == kHackingReport;
}
inline bool ReportType::has_hacking_report() const {
  return _internal_has_hacking_report();
}
inline void ReportType::set_has_hacking_report() {
  _oneof_case_[0] = kHackingReport;
}
inline void ReportType::clear_hacking_report() {
  if (_internal_has_hacking_report()) {
    delete type_.hacking_report_;
    clear_has_type();
  }
}
inline ::bgs::protocol::report::v1::HackingReport* ReportType::release_hacking_report() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.ReportType.hacking_report)
  if (_internal_has_hacking_report()) {
    clear_has_type();
      ::bgs::protocol::report::v1::HackingReport* temp = type_.hacking_report_;
    type_.hacking_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v1::HackingReport& ReportType::_internal_hacking_report() const {
  return _internal_has_hacking_report()
      ? *type_.hacking_report_
      : *reinterpret_cast< ::bgs::protocol::report::v1::HackingReport*>(&::bgs::protocol::report::v1::_HackingReport_default_instance_);
}
inline const ::bgs::protocol::report::v1::HackingReport& ReportType::hacking_report() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.ReportType.hacking_report)
  return _internal_hacking_report();
}
inline ::bgs::protocol::report::v1::HackingReport* ReportType::_internal_mutable_hacking_report() {
  if (!_internal_has_hacking_report()) {
    clear_type();
    set_has_hacking_report();
    type_.hacking_report_ = CreateMaybeMessage< ::bgs::protocol::report::v1::HackingReport >(
        GetArenaNoVirtual());
  }
  return type_.hacking_report_;
}
inline ::bgs::protocol::report::v1::HackingReport* ReportType::mutable_hacking_report() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.ReportType.hacking_report)
  return _internal_mutable_hacking_report();
}

// optional .bgs.protocol.report.v1.BottingReport botting_report = 16;
inline bool ReportType::_internal_has_botting_report() const {
  return type_case() == kBottingReport;
}
inline bool ReportType::has_botting_report() const {
  return _internal_has_botting_report();
}
inline void ReportType::set_has_botting_report() {
  _oneof_case_[0] = kBottingReport;
}
inline void ReportType::clear_botting_report() {
  if (_internal_has_botting_report()) {
    delete type_.botting_report_;
    clear_has_type();
  }
}
inline ::bgs::protocol::report::v1::BottingReport* ReportType::release_botting_report() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.ReportType.botting_report)
  if (_internal_has_botting_report()) {
    clear_has_type();
      ::bgs::protocol::report::v1::BottingReport* temp = type_.botting_report_;
    type_.botting_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bgs::protocol::report::v1::BottingReport& ReportType::_internal_botting_report() const {
  return _internal_has_botting_report()
      ? *type_.botting_report_
      : *reinterpret_cast< ::bgs::protocol::report::v1::BottingReport*>(&::bgs::protocol::report::v1::_BottingReport_default_instance_);
}
inline const ::bgs::protocol::report::v1::BottingReport& ReportType::botting_report() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.ReportType.botting_report)
  return _internal_botting_report();
}
inline ::bgs::protocol::report::v1::BottingReport* ReportType::_internal_mutable_botting_report() {
  if (!_internal_has_botting_report()) {
    clear_type();
    set_has_botting_report();
    type_.botting_report_ = CreateMaybeMessage< ::bgs::protocol::report::v1::BottingReport >(
        GetArenaNoVirtual());
  }
  return type_.botting_report_;
}
inline ::bgs::protocol::report::v1::BottingReport* ReportType::mutable_botting_report() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.ReportType.botting_report)
  return _internal_mutable_botting_report();
}

inline bool ReportType::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void ReportType::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ReportType::TypeCase ReportType::type_case() const {
  return ReportType::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomReport

// optional string type = 1;
inline bool CustomReport::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomReport::has_type() const {
  return _internal_has_type();
}
inline void CustomReport::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomReport::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.CustomReport.type)
  return _internal_type();
}
inline void CustomReport::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.CustomReport.type)
}
inline std::string* CustomReport::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.CustomReport.type)
  return _internal_mutable_type();
}
inline const std::string& CustomReport::_internal_type() const {
  return type_.GetNoArena();
}
inline void CustomReport::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CustomReport::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.report.v1.CustomReport.type)
}
inline void CustomReport::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.report.v1.CustomReport.type)
}
inline void CustomReport::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.report.v1.CustomReport.type)
}
inline std::string* CustomReport::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomReport::release_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.CustomReport.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomReport::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.CustomReport.type)
}

// optional string program_id = 2 [deprecated = true];
inline bool CustomReport::_internal_has_program_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomReport::has_program_id() const {
  return _internal_has_program_id();
}
inline void CustomReport::clear_program_id() {
  program_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomReport::program_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.CustomReport.program_id)
  return _internal_program_id();
}
inline void CustomReport::set_program_id(const std::string& value) {
  _internal_set_program_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.CustomReport.program_id)
}
inline std::string* CustomReport::mutable_program_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.CustomReport.program_id)
  return _internal_mutable_program_id();
}
inline const std::string& CustomReport::_internal_program_id() const {
  return program_id_.GetNoArena();
}
inline void CustomReport::_internal_set_program_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CustomReport::set_program_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  program_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.report.v1.CustomReport.program_id)
}
inline void CustomReport::set_program_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.report.v1.CustomReport.program_id)
}
inline void CustomReport::set_program_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.report.v1.CustomReport.program_id)
}
inline std::string* CustomReport::_internal_mutable_program_id() {
  _has_bits_[0] |= 0x00000002u;
  return program_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomReport::release_program_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.CustomReport.program_id)
  if (!_internal_has_program_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return program_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomReport::set_allocated_program_id(std::string* program_id) {
  if (program_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  program_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.CustomReport.program_id)
}

// repeated .bgs.protocol.Attribute attribute = 3;
inline int CustomReport::_internal_attribute_size() const {
  return attribute_.size();
}
inline int CustomReport::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* CustomReport::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.CustomReport.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
CustomReport::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.report.v1.CustomReport.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& CustomReport::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& CustomReport::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.CustomReport.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* CustomReport::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* CustomReport::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.report.v1.CustomReport.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
CustomReport::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.report.v1.CustomReport.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// SpamReport

// optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
inline bool SpamReport::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool SpamReport::has_target() const {
  return _internal_has_target();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& SpamReport::_internal_target() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& SpamReport::target() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.SpamReport.target)
  return _internal_target();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* SpamReport::release_target() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.SpamReport.target)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* SpamReport::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000001u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    target_ = p;
  }
  return target_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* SpamReport::mutable_target() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.SpamReport.target)
  return _internal_mutable_target();
}
inline void SpamReport::set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.SpamReport.target)
}

// optional .bgs.protocol.report.v1.SpamReport.SpamSource source = 2 [default = OTHER];
inline bool SpamReport::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpamReport::has_source() const {
  return _internal_has_source();
}
inline void SpamReport::clear_source() {
  source_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::bgs::protocol::report::v1::SpamReport_SpamSource SpamReport::_internal_source() const {
  return static_cast< ::bgs::protocol::report::v1::SpamReport_SpamSource >(source_);
}
inline ::bgs::protocol::report::v1::SpamReport_SpamSource SpamReport::source() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.SpamReport.source)
  return _internal_source();
}
inline void SpamReport::_internal_set_source(::bgs::protocol::report::v1::SpamReport_SpamSource value) {
  assert(::bgs::protocol::report::v1::SpamReport_SpamSource_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  source_ = value;
}
inline void SpamReport::set_source(::bgs::protocol::report::v1::SpamReport_SpamSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.SpamReport.source)
}

// -------------------------------------------------------------------

// HarassmentReport

// optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
inline bool HarassmentReport::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool HarassmentReport::has_target() const {
  return _internal_has_target();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& HarassmentReport::_internal_target() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& HarassmentReport::target() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.HarassmentReport.target)
  return _internal_target();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* HarassmentReport::release_target() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.HarassmentReport.target)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* HarassmentReport::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000002u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    target_ = p;
  }
  return target_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* HarassmentReport::mutable_target() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.HarassmentReport.target)
  return _internal_mutable_target();
}
inline void HarassmentReport::set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.HarassmentReport.target)
}

// optional string text = 2;
inline bool HarassmentReport::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HarassmentReport::has_text() const {
  return _internal_has_text();
}
inline void HarassmentReport::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HarassmentReport::text() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.HarassmentReport.text)
  return _internal_text();
}
inline void HarassmentReport::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.HarassmentReport.text)
}
inline std::string* HarassmentReport::mutable_text() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.HarassmentReport.text)
  return _internal_mutable_text();
}
inline const std::string& HarassmentReport::_internal_text() const {
  return text_.GetNoArena();
}
inline void HarassmentReport::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HarassmentReport::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.report.v1.HarassmentReport.text)
}
inline void HarassmentReport::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.report.v1.HarassmentReport.text)
}
inline void HarassmentReport::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.report.v1.HarassmentReport.text)
}
inline std::string* HarassmentReport::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HarassmentReport::release_text() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.HarassmentReport.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HarassmentReport::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.HarassmentReport.text)
}

// -------------------------------------------------------------------

// RealLifeThreatReport

// optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
inline bool RealLifeThreatReport::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool RealLifeThreatReport::has_target() const {
  return _internal_has_target();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& RealLifeThreatReport::_internal_target() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& RealLifeThreatReport::target() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.RealLifeThreatReport.target)
  return _internal_target();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* RealLifeThreatReport::release_target() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.RealLifeThreatReport.target)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* RealLifeThreatReport::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000002u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    target_ = p;
  }
  return target_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* RealLifeThreatReport::mutable_target() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.RealLifeThreatReport.target)
  return _internal_mutable_target();
}
inline void RealLifeThreatReport::set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.RealLifeThreatReport.target)
}

// optional string text = 2;
inline bool RealLifeThreatReport::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RealLifeThreatReport::has_text() const {
  return _internal_has_text();
}
inline void RealLifeThreatReport::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RealLifeThreatReport::text() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.RealLifeThreatReport.text)
  return _internal_text();
}
inline void RealLifeThreatReport::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.RealLifeThreatReport.text)
}
inline std::string* RealLifeThreatReport::mutable_text() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.RealLifeThreatReport.text)
  return _internal_mutable_text();
}
inline const std::string& RealLifeThreatReport::_internal_text() const {
  return text_.GetNoArena();
}
inline void RealLifeThreatReport::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RealLifeThreatReport::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.report.v1.RealLifeThreatReport.text)
}
inline void RealLifeThreatReport::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.report.v1.RealLifeThreatReport.text)
}
inline void RealLifeThreatReport::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.report.v1.RealLifeThreatReport.text)
}
inline std::string* RealLifeThreatReport::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RealLifeThreatReport::release_text() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.RealLifeThreatReport.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RealLifeThreatReport::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.RealLifeThreatReport.text)
}

// -------------------------------------------------------------------

// InappropriateBattleTagReport

// optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
inline bool InappropriateBattleTagReport::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool InappropriateBattleTagReport::has_target() const {
  return _internal_has_target();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& InappropriateBattleTagReport::_internal_target() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& InappropriateBattleTagReport::target() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.InappropriateBattleTagReport.target)
  return _internal_target();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* InappropriateBattleTagReport::release_target() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.InappropriateBattleTagReport.target)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* InappropriateBattleTagReport::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000002u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    target_ = p;
  }
  return target_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* InappropriateBattleTagReport::mutable_target() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.InappropriateBattleTagReport.target)
  return _internal_mutable_target();
}
inline void InappropriateBattleTagReport::set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.InappropriateBattleTagReport.target)
}

// optional string battle_tag = 2;
inline bool InappropriateBattleTagReport::_internal_has_battle_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InappropriateBattleTagReport::has_battle_tag() const {
  return _internal_has_battle_tag();
}
inline void InappropriateBattleTagReport::clear_battle_tag() {
  battle_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InappropriateBattleTagReport::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag)
  return _internal_battle_tag();
}
inline void InappropriateBattleTagReport::set_battle_tag(const std::string& value) {
  _internal_set_battle_tag(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag)
}
inline std::string* InappropriateBattleTagReport::mutable_battle_tag() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag)
  return _internal_mutable_battle_tag();
}
inline const std::string& InappropriateBattleTagReport::_internal_battle_tag() const {
  return battle_tag_.GetNoArena();
}
inline void InappropriateBattleTagReport::_internal_set_battle_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InappropriateBattleTagReport::set_battle_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag)
}
inline void InappropriateBattleTagReport::set_battle_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag)
}
inline void InappropriateBattleTagReport::set_battle_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  battle_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag)
}
inline std::string* InappropriateBattleTagReport::_internal_mutable_battle_tag() {
  _has_bits_[0] |= 0x00000001u;
  return battle_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InappropriateBattleTagReport::release_battle_tag() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag)
  if (!_internal_has_battle_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return battle_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InappropriateBattleTagReport::set_allocated_battle_tag(std::string* battle_tag) {
  if (battle_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  battle_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_tag);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.InappropriateBattleTagReport.battle_tag)
}

// -------------------------------------------------------------------

// HackingReport

// optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
inline bool HackingReport::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool HackingReport::has_target() const {
  return _internal_has_target();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& HackingReport::_internal_target() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& HackingReport::target() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.HackingReport.target)
  return _internal_target();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* HackingReport::release_target() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.HackingReport.target)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* HackingReport::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000001u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    target_ = p;
  }
  return target_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* HackingReport::mutable_target() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.HackingReport.target)
  return _internal_mutable_target();
}
inline void HackingReport::set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.HackingReport.target)
}

// -------------------------------------------------------------------

// BottingReport

// optional .bgs.protocol.account.v1.GameAccountHandle target = 1;
inline bool BottingReport::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool BottingReport::has_target() const {
  return _internal_has_target();
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& BottingReport::_internal_target() const {
  const ::bgs::protocol::account::v1::GameAccountHandle* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::account::v1::GameAccountHandle*>(
      &::bgs::protocol::account::v1::_GameAccountHandle_default_instance_);
}
inline const ::bgs::protocol::account::v1::GameAccountHandle& BottingReport::target() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.BottingReport.target)
  return _internal_target();
}
inline ::bgs::protocol::account::v1::GameAccountHandle* BottingReport::release_target() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.BottingReport.target)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::account::v1::GameAccountHandle* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* BottingReport::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000001u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::account::v1::GameAccountHandle>(GetArenaNoVirtual());
    target_ = p;
  }
  return target_;
}
inline ::bgs::protocol::account::v1::GameAccountHandle* BottingReport::mutable_target() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.BottingReport.target)
  return _internal_mutable_target();
}
inline void BottingReport::set_allocated_target(::bgs::protocol::account::v1::GameAccountHandle* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.BottingReport.target)
}

// -------------------------------------------------------------------

// Report

// required string report_type = 1;
inline bool Report::_internal_has_report_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Report::has_report_type() const {
  return _internal_has_report_type();
}
inline void Report::clear_report_type() {
  report_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Report::report_type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.Report.report_type)
  return _internal_report_type();
}
inline void Report::set_report_type(const std::string& value) {
  _internal_set_report_type(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.Report.report_type)
}
inline std::string* Report::mutable_report_type() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.Report.report_type)
  return _internal_mutable_report_type();
}
inline const std::string& Report::_internal_report_type() const {
  return report_type_.GetNoArena();
}
inline void Report::_internal_set_report_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  report_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Report::set_report_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  report_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.report.v1.Report.report_type)
}
inline void Report::set_report_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  report_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.report.v1.Report.report_type)
}
inline void Report::set_report_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  report_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.report.v1.Report.report_type)
}
inline std::string* Report::_internal_mutable_report_type() {
  _has_bits_[0] |= 0x00000001u;
  return report_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Report::release_report_type() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.Report.report_type)
  if (!_internal_has_report_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return report_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_allocated_report_type(std::string* report_type) {
  if (report_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  report_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_type);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.Report.report_type)
}

// repeated .bgs.protocol.Attribute attribute = 2;
inline int Report::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Report::attribute_size() const {
  return _internal_attribute_size();
}
inline ::bgs::protocol::Attribute* Report::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.Report.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >*
Report::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.report.v1.Report.attribute)
  return &attribute_;
}
inline const ::bgs::protocol::Attribute& Report::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::bgs::protocol::Attribute& Report::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.Report.attribute)
  return _internal_attribute(index);
}
inline ::bgs::protocol::Attribute* Report::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::bgs::protocol::Attribute* Report::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.report.v1.Report.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::Attribute >&
Report::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.report.v1.Report.attribute)
  return attribute_;
}

// optional int32 report_qos = 3 [default = 0];
inline bool Report::_internal_has_report_qos() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Report::has_report_qos() const {
  return _internal_has_report_qos();
}
inline void Report::clear_report_qos() {
  report_qos_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Report::_internal_report_qos() const {
  return report_qos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Report::report_qos() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.Report.report_qos)
  return _internal_report_qos();
}
inline void Report::_internal_set_report_qos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  report_qos_ = value;
}
inline void Report::set_report_qos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_report_qos(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.Report.report_qos)
}

// optional .bgs.protocol.EntityId reporting_account = 4;
inline bool Report::_internal_has_reporting_account() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || reporting_account_ != nullptr);
  return value;
}
inline bool Report::has_reporting_account() const {
  return _internal_has_reporting_account();
}
inline const ::bgs::protocol::EntityId& Report::_internal_reporting_account() const {
  const ::bgs::protocol::EntityId* p = reporting_account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Report::reporting_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.Report.reporting_account)
  return _internal_reporting_account();
}
inline ::bgs::protocol::EntityId* Report::release_reporting_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.Report.reporting_account)
  _has_bits_[0] &= ~0x00000002u;
  ::bgs::protocol::EntityId* temp = reporting_account_;
  reporting_account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Report::_internal_mutable_reporting_account() {
  _has_bits_[0] |= 0x00000002u;
  if (reporting_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    reporting_account_ = p;
  }
  return reporting_account_;
}
inline ::bgs::protocol::EntityId* Report::mutable_reporting_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.Report.reporting_account)
  return _internal_mutable_reporting_account();
}
inline void Report::set_allocated_reporting_account(::bgs::protocol::EntityId* reporting_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reporting_account_);
  }
  if (reporting_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reporting_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reporting_account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reporting_account_ = reporting_account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.Report.reporting_account)
}

// optional .bgs.protocol.EntityId reporting_game_account = 5;
inline bool Report::_internal_has_reporting_game_account() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reporting_game_account_ != nullptr);
  return value;
}
inline bool Report::has_reporting_game_account() const {
  return _internal_has_reporting_game_account();
}
inline const ::bgs::protocol::EntityId& Report::_internal_reporting_game_account() const {
  const ::bgs::protocol::EntityId* p = reporting_game_account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::EntityId*>(
      &::bgs::protocol::_EntityId_default_instance_);
}
inline const ::bgs::protocol::EntityId& Report::reporting_game_account() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.Report.reporting_game_account)
  return _internal_reporting_game_account();
}
inline ::bgs::protocol::EntityId* Report::release_reporting_game_account() {
  // @@protoc_insertion_point(field_release:bgs.protocol.report.v1.Report.reporting_game_account)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::EntityId* temp = reporting_game_account_;
  reporting_game_account_ = nullptr;
  return temp;
}
inline ::bgs::protocol::EntityId* Report::_internal_mutable_reporting_game_account() {
  _has_bits_[0] |= 0x00000004u;
  if (reporting_game_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::EntityId>(GetArenaNoVirtual());
    reporting_game_account_ = p;
  }
  return reporting_game_account_;
}
inline ::bgs::protocol::EntityId* Report::mutable_reporting_game_account() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.report.v1.Report.reporting_game_account)
  return _internal_mutable_reporting_game_account();
}
inline void Report::set_allocated_reporting_game_account(::bgs::protocol::EntityId* reporting_game_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reporting_game_account_);
  }
  if (reporting_game_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reporting_game_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reporting_game_account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reporting_game_account_ = reporting_game_account;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.report.v1.Report.reporting_game_account)
}

// optional fixed64 report_timestamp = 6;
inline bool Report::_internal_has_report_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Report::has_report_timestamp() const {
  return _internal_has_report_timestamp();
}
inline void Report::clear_report_timestamp() {
  report_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Report::_internal_report_timestamp() const {
  return report_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Report::report_timestamp() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.report.v1.Report.report_timestamp)
  return _internal_report_timestamp();
}
inline void Report::_internal_set_report_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  report_timestamp_ = value;
}
inline void Report::set_report_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_report_timestamp(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.report.v1.Report.report_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace report
}  // namespace protocol
}  // namespace bgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bgs::protocol::report::v1::SpamReport_SpamSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bgs::protocol::report::v1::SpamReport_SpamSource>() {
  return ::bgs::protocol::report::v1::SpamReport_SpamSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2freport_5ftypes_2eproto
