// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/resource_service.proto

#include "bgs/low/pb/client/resource_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace bgs {
namespace protocol {
namespace resources {
namespace v1 {
class ContentHandleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContentHandleRequest> _instance;
} _ContentHandleRequest_default_instance_;
}  // namespace v1
}  // namespace resources
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ContentHandleRequest_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::resources::v1::_ContentHandleRequest_default_instance_;
    new (ptr) ::bgs::protocol::resources::v1::ContentHandleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::resources::v1::ContentHandleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContentHandleRequest_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContentHandleRequest_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::resources::v1::ContentHandleRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::resources::v1::ContentHandleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::resources::v1::ContentHandleRequest, program_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::resources::v1::ContentHandleRequest, stream_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::resources::v1::ContentHandleRequest, version_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::bgs::protocol::resources::v1::ContentHandleRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::resources::v1::_ContentHandleRequest_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(bgs/low/pb/client/resource_service.pro"
  "to\022\031bgs.protocol.resources.v1\032,bgs/low/p"
  "b/client/content_handle_types.proto\032!bgs"
  "/low/pb/client/rpc_types.proto\"\\\n\024Conten"
  "tHandleRequest\022\017\n\007program\030\001 \002(\007\022\016\n\006strea"
  "m\030\002 \002(\007\022\033\n\007version\030\003 \001(\007:\n1701729619:\006\202\371"
  "+\002\020\0012\272\001\n\020ResourcesService\022h\n\020GetContentH"
  "andle\022/.bgs.protocol.resources.v1.Conten"
  "tHandleRequest\032\033.bgs.protocol.ContentHan"
  "dle\"\006\202\371+\002\010\001\032<\202\371+#\n!bnet.protocol.resourc"
  "es.Resources\202\371+\013*\tresources\212\371+\002\020\001B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto_deps[2] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fcontent_5fhandle_5ftypes_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto_sccs[1] = {
  &scc_info_ContentHandleRequest_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto, "bgs/low/pb/client/resource_service.proto", 438,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto, 1, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto)), true);
namespace bgs {
namespace protocol {
namespace resources {
namespace v1 {

// ===================================================================

void ContentHandleRequest::InitAsDefaultInstance() {
}
class ContentHandleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentHandleRequest>()._has_bits_);
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContentHandleRequest::ContentHandleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.resources.v1.ContentHandleRequest)
}
ContentHandleRequest::ContentHandleRequest(const ContentHandleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&program_, &from.program_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&program_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.resources.v1.ContentHandleRequest)
}

void ContentHandleRequest::SharedCtor() {
  ::memset(&program_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_) -
      reinterpret_cast<char*>(&program_)) + sizeof(stream_));
  version_ = 1701729619u;
}

ContentHandleRequest::~ContentHandleRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.resources.v1.ContentHandleRequest)
  SharedDtor();
}

void ContentHandleRequest::SharedDtor() {
}

void ContentHandleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentHandleRequest& ContentHandleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContentHandleRequest_bgs_2flow_2fpb_2fclient_2fresource_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ContentHandleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.resources.v1.ContentHandleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&program_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_) -
        reinterpret_cast<char*>(&program_)) + sizeof(stream_));
    version_ = 1701729619u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContentHandleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 program = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_program(&has_bits);
          program_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required fixed32 stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_stream(&has_bits);
          stream_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 version = 3 [default = 1701729619];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContentHandleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.resources.v1.ContentHandleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 program = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_program(), target);
  }

  // required fixed32 stream = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_stream(), target);
  }

  // optional fixed32 version = 3 [default = 1701729619];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.resources.v1.ContentHandleRequest)
  return target;
}

size_t ContentHandleRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.resources.v1.ContentHandleRequest)
  size_t total_size = 0;

  if (_internal_has_program()) {
    // required fixed32 program = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_stream()) {
    // required fixed32 stream = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ContentHandleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.resources.v1.ContentHandleRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed32 program = 1;
    total_size += 1 + 4;

    // required fixed32 stream = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed32 version = 3 [default = 1701729619];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentHandleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.resources.v1.ContentHandleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentHandleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContentHandleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.resources.v1.ContentHandleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.resources.v1.ContentHandleRequest)
    MergeFrom(*source);
  }
}

void ContentHandleRequest::MergeFrom(const ContentHandleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.resources.v1.ContentHandleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      program_ = from.program_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_ = from.stream_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentHandleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.resources.v1.ContentHandleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentHandleRequest::CopyFrom(const ContentHandleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.resources.v1.ContentHandleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentHandleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ContentHandleRequest::InternalSwap(ContentHandleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(program_, other->program_);
  swap(stream_, other->stream_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentHandleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace resources
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::resources::v1::ContentHandleRequest* Arena::CreateMaybeMessage< ::bgs::protocol::resources::v1::ContentHandleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::resources::v1::ContentHandleRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
