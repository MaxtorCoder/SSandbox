// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/role_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class RoleState;
class RoleStateDefaultTypeInternal;
extern RoleStateDefaultTypeInternal _RoleState_default_instance_;
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::Role* Arena::CreateMaybeMessage<::bgs::protocol::Role>(Arena*);
template<> ::bgs::protocol::RoleState* Arena::CreateMaybeMessage<::bgs::protocol::RoleState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {

// ===================================================================

class Role :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.Role";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeFieldNumber = 3,
    kAssignableRoleFieldNumber = 4,
    kKickableRoleFieldNumber = 9,
    kRemovableRoleFieldNumber = 10,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kRequiredFieldNumber = 5,
    kUniqueFieldNumber = 6,
    kRelegationRoleFieldNumber = 7,
  };
  // repeated string privilege = 3;
  int privilege_size() const;
  private:
  int _internal_privilege_size() const;
  public:
  void clear_privilege();
  const std::string& privilege(int index) const;
  std::string* mutable_privilege(int index);
  void set_privilege(int index, const std::string& value);
  void set_privilege(int index, std::string&& value);
  void set_privilege(int index, const char* value);
  void set_privilege(int index, const char* value, size_t size);
  std::string* add_privilege();
  void add_privilege(const std::string& value);
  void add_privilege(std::string&& value);
  void add_privilege(const char* value);
  void add_privilege(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& privilege() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_privilege();
  private:
  const std::string& _internal_privilege(int index) const;
  std::string* _internal_add_privilege();
  public:

  // repeated uint32 assignable_role = 4 [packed = true];
  int assignable_role_size() const;
  private:
  int _internal_assignable_role_size() const;
  public:
  void clear_assignable_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assignable_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_assignable_role() const;
  void _internal_add_assignable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_assignable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 assignable_role(int index) const;
  void set_assignable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_assignable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      assignable_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_assignable_role();

  // repeated uint32 kickable_role = 9 [packed = true];
  int kickable_role_size() const;
  private:
  int _internal_kickable_role_size() const;
  public:
  void clear_kickable_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kickable_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_kickable_role() const;
  void _internal_add_kickable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_kickable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 kickable_role(int index) const;
  void set_kickable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_kickable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      kickable_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_kickable_role();

  // repeated uint32 removable_role = 10 [packed = true];
  int removable_role_size() const;
  private:
  int _internal_removable_role_size() const;
  public:
  void clear_removable_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_removable_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_removable_role() const;
  void _internal_add_removable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_removable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 removable_role(int index) const;
  void set_removable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_removable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      removable_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_removable_role();

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool required = 5;
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // optional bool unique = 6;
  bool has_unique() const;
  private:
  bool _internal_has_unique() const;
  public:
  void clear_unique();
  bool unique() const;
  void set_unique(bool value);
  private:
  bool _internal_unique() const;
  void _internal_set_unique(bool value);
  public:

  // optional uint32 relegation_role = 7;
  bool has_relegation_role() const;
  private:
  bool _internal_has_relegation_role() const;
  public:
  void clear_relegation_role();
  ::PROTOBUF_NAMESPACE_ID::uint32 relegation_role() const;
  void set_relegation_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_relegation_role() const;
  void _internal_set_relegation_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.Role)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> privilege_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > assignable_role_;
  mutable std::atomic<int> _assignable_role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > kickable_role_;
  mutable std::atomic<int> _kickable_role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > removable_role_;
  mutable std::atomic<int> _removable_role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool required_;
  bool unique_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relegation_role_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class RoleState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.RoleState) */ {
 public:
  RoleState();
  virtual ~RoleState();

  RoleState(const RoleState& from);
  RoleState(RoleState&& from) noexcept
    : RoleState() {
    *this = ::std::move(from);
  }

  inline RoleState& operator=(const RoleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleState& operator=(RoleState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleState* internal_default_instance() {
    return reinterpret_cast<const RoleState*>(
               &_RoleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoleState& a, RoleState& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleState* New() const final {
    return CreateMaybeMessage<RoleState>(nullptr);
  }

  RoleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleState& from);
  void MergeFrom(const RoleState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.RoleState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignableRoleFieldNumber = 4,
    kKickableRoleFieldNumber = 9,
    kRemovableRoleFieldNumber = 10,
    kMentionableRoleFieldNumber = 11,
    kNameFieldNumber = 2,
    kRequiredFieldNumber = 5,
    kUniqueFieldNumber = 6,
    kRelegationRoleFieldNumber = 7,
  };
  // repeated uint32 assignable_role = 4 [packed = true];
  int assignable_role_size() const;
  private:
  int _internal_assignable_role_size() const;
  public:
  void clear_assignable_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assignable_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_assignable_role() const;
  void _internal_add_assignable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_assignable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 assignable_role(int index) const;
  void set_assignable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_assignable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      assignable_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_assignable_role();

  // repeated uint32 kickable_role = 9 [packed = true];
  int kickable_role_size() const;
  private:
  int _internal_kickable_role_size() const;
  public:
  void clear_kickable_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kickable_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_kickable_role() const;
  void _internal_add_kickable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_kickable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 kickable_role(int index) const;
  void set_kickable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_kickable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      kickable_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_kickable_role();

  // repeated uint32 removable_role = 10 [packed = true];
  int removable_role_size() const;
  private:
  int _internal_removable_role_size() const;
  public:
  void clear_removable_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_removable_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_removable_role() const;
  void _internal_add_removable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_removable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 removable_role(int index) const;
  void set_removable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_removable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      removable_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_removable_role();

  // repeated uint32 mentionable_role = 11 [packed = true];
  int mentionable_role_size() const;
  private:
  int _internal_mentionable_role_size() const;
  public:
  void clear_mentionable_role();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mentionable_role(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_mentionable_role() const;
  void _internal_add_mentionable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_mentionable_role();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 mentionable_role(int index) const;
  void set_mentionable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_mentionable_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      mentionable_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_mentionable_role();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool required = 5;
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // optional bool unique = 6;
  bool has_unique() const;
  private:
  bool _internal_has_unique() const;
  public:
  void clear_unique();
  bool unique() const;
  void set_unique(bool value);
  private:
  bool _internal_unique() const;
  void _internal_set_unique(bool value);
  public:

  // optional uint32 relegation_role = 7;
  bool has_relegation_role() const;
  private:
  bool _internal_has_relegation_role() const;
  public:
  void clear_relegation_role();
  ::PROTOBUF_NAMESPACE_ID::uint32 relegation_role() const;
  void set_relegation_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_relegation_role() const;
  void _internal_set_relegation_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.RoleState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > assignable_role_;
  mutable std::atomic<int> _assignable_role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > kickable_role_;
  mutable std::atomic<int> _kickable_role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > removable_role_;
  mutable std::atomic<int> _removable_role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > mentionable_role_;
  mutable std::atomic<int> _mentionable_role_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool required_;
  bool unique_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relegation_role_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Role

// required uint32 id = 1;
inline bool Role::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Role::has_id() const {
  return _internal_has_id();
}
inline void Role::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.id)
  return _internal_id();
}
inline void Role::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Role::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.id)
}

// required string name = 2;
inline bool Role::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Role::has_name() const {
  return _internal_has_name();
}
inline void Role::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.name)
  return _internal_name();
}
inline void Role::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.name)
}
inline std::string* Role::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Role.name)
  return _internal_mutable_name();
}
inline const std::string& Role::_internal_name() const {
  return name_.GetNoArena();
}
inline void Role::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.Role.name)
}
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Role.name)
}
inline std::string* Role::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Role.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Role.name)
}

// repeated string privilege = 3;
inline int Role::_internal_privilege_size() const {
  return privilege_.size();
}
inline int Role::privilege_size() const {
  return _internal_privilege_size();
}
inline void Role::clear_privilege() {
  privilege_.Clear();
}
inline std::string* Role::add_privilege() {
  // @@protoc_insertion_point(field_add_mutable:bgs.protocol.Role.privilege)
  return _internal_add_privilege();
}
inline const std::string& Role::_internal_privilege(int index) const {
  return privilege_.Get(index);
}
inline const std::string& Role::privilege(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.privilege)
  return _internal_privilege(index);
}
inline std::string* Role::mutable_privilege(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Role.privilege)
  return privilege_.Mutable(index);
}
inline void Role::set_privilege(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.privilege)
  privilege_.Mutable(index)->assign(value);
}
inline void Role::set_privilege(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.privilege)
  privilege_.Mutable(index)->assign(std::move(value));
}
inline void Role::set_privilege(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  privilege_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Role.privilege)
}
inline void Role::set_privilege(int index, const char* value, size_t size) {
  privilege_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Role.privilege)
}
inline std::string* Role::_internal_add_privilege() {
  return privilege_.Add();
}
inline void Role::add_privilege(const std::string& value) {
  privilege_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.Role.privilege)
}
inline void Role::add_privilege(std::string&& value) {
  privilege_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bgs.protocol.Role.privilege)
}
inline void Role::add_privilege(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  privilege_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bgs.protocol.Role.privilege)
}
inline void Role::add_privilege(const char* value, size_t size) {
  privilege_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bgs.protocol.Role.privilege)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Role::privilege() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.Role.privilege)
  return privilege_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Role::mutable_privilege() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.Role.privilege)
  return &privilege_;
}

// repeated uint32 assignable_role = 4 [packed = true];
inline int Role::_internal_assignable_role_size() const {
  return assignable_role_.size();
}
inline int Role::assignable_role_size() const {
  return _internal_assignable_role_size();
}
inline void Role::clear_assignable_role() {
  assignable_role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_assignable_role(int index) const {
  return assignable_role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::assignable_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.assignable_role)
  return _internal_assignable_role(index);
}
inline void Role::set_assignable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  assignable_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.assignable_role)
}
inline void Role::_internal_add_assignable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  assignable_role_.Add(value);
}
inline void Role::add_assignable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_assignable_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.Role.assignable_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Role::_internal_assignable_role() const {
  return assignable_role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Role::assignable_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.Role.assignable_role)
  return _internal_assignable_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Role::_internal_mutable_assignable_role() {
  return &assignable_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Role::mutable_assignable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.Role.assignable_role)
  return _internal_mutable_assignable_role();
}

// optional bool required = 5;
inline bool Role::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Role::has_required() const {
  return _internal_has_required();
}
inline void Role::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Role::_internal_required() const {
  return required_;
}
inline bool Role::required() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.required)
  return _internal_required();
}
inline void Role::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000004u;
  required_ = value;
}
inline void Role::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.required)
}

// optional bool unique = 6;
inline bool Role::_internal_has_unique() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Role::has_unique() const {
  return _internal_has_unique();
}
inline void Role::clear_unique() {
  unique_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Role::_internal_unique() const {
  return unique_;
}
inline bool Role::unique() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.unique)
  return _internal_unique();
}
inline void Role::_internal_set_unique(bool value) {
  _has_bits_[0] |= 0x00000008u;
  unique_ = value;
}
inline void Role::set_unique(bool value) {
  _internal_set_unique(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.unique)
}

// optional uint32 relegation_role = 7;
inline bool Role::_internal_has_relegation_role() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Role::has_relegation_role() const {
  return _internal_has_relegation_role();
}
inline void Role::clear_relegation_role() {
  relegation_role_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_relegation_role() const {
  return relegation_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::relegation_role() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.relegation_role)
  return _internal_relegation_role();
}
inline void Role::_internal_set_relegation_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  relegation_role_ = value;
}
inline void Role::set_relegation_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_relegation_role(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.relegation_role)
}

// repeated uint32 kickable_role = 9 [packed = true];
inline int Role::_internal_kickable_role_size() const {
  return kickable_role_.size();
}
inline int Role::kickable_role_size() const {
  return _internal_kickable_role_size();
}
inline void Role::clear_kickable_role() {
  kickable_role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_kickable_role(int index) const {
  return kickable_role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::kickable_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.kickable_role)
  return _internal_kickable_role(index);
}
inline void Role::set_kickable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  kickable_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.kickable_role)
}
inline void Role::_internal_add_kickable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  kickable_role_.Add(value);
}
inline void Role::add_kickable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_kickable_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.Role.kickable_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Role::_internal_kickable_role() const {
  return kickable_role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Role::kickable_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.Role.kickable_role)
  return _internal_kickable_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Role::_internal_mutable_kickable_role() {
  return &kickable_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Role::mutable_kickable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.Role.kickable_role)
  return _internal_mutable_kickable_role();
}

// repeated uint32 removable_role = 10 [packed = true];
inline int Role::_internal_removable_role_size() const {
  return removable_role_.size();
}
inline int Role::removable_role_size() const {
  return _internal_removable_role_size();
}
inline void Role::clear_removable_role() {
  removable_role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_removable_role(int index) const {
  return removable_role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::removable_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Role.removable_role)
  return _internal_removable_role(index);
}
inline void Role::set_removable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  removable_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Role.removable_role)
}
inline void Role::_internal_add_removable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  removable_role_.Add(value);
}
inline void Role::add_removable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_removable_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.Role.removable_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Role::_internal_removable_role() const {
  return removable_role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Role::removable_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.Role.removable_role)
  return _internal_removable_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Role::_internal_mutable_removable_role() {
  return &removable_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Role::mutable_removable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.Role.removable_role)
  return _internal_mutable_removable_role();
}

// -------------------------------------------------------------------

// RoleState

// optional string name = 2;
inline bool RoleState::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleState::has_name() const {
  return _internal_has_name();
}
inline void RoleState::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleState::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.RoleState.name)
  return _internal_name();
}
inline void RoleState::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.RoleState.name)
}
inline std::string* RoleState::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.RoleState.name)
  return _internal_mutable_name();
}
inline const std::string& RoleState::_internal_name() const {
  return name_.GetNoArena();
}
inline void RoleState::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleState::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.RoleState.name)
}
inline void RoleState::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.RoleState.name)
}
inline void RoleState::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.RoleState.name)
}
inline std::string* RoleState::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleState::release_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.RoleState.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.RoleState.name)
}

// repeated uint32 assignable_role = 4 [packed = true];
inline int RoleState::_internal_assignable_role_size() const {
  return assignable_role_.size();
}
inline int RoleState::assignable_role_size() const {
  return _internal_assignable_role_size();
}
inline void RoleState::clear_assignable_role() {
  assignable_role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::_internal_assignable_role(int index) const {
  return assignable_role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::assignable_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.RoleState.assignable_role)
  return _internal_assignable_role(index);
}
inline void RoleState::set_assignable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  assignable_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.RoleState.assignable_role)
}
inline void RoleState::_internal_add_assignable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  assignable_role_.Add(value);
}
inline void RoleState::add_assignable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_assignable_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.RoleState.assignable_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleState::_internal_assignable_role() const {
  return assignable_role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleState::assignable_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.RoleState.assignable_role)
  return _internal_assignable_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleState::_internal_mutable_assignable_role() {
  return &assignable_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleState::mutable_assignable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.RoleState.assignable_role)
  return _internal_mutable_assignable_role();
}

// optional bool required = 5;
inline bool RoleState::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoleState::has_required() const {
  return _internal_has_required();
}
inline void RoleState::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RoleState::_internal_required() const {
  return required_;
}
inline bool RoleState::required() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.RoleState.required)
  return _internal_required();
}
inline void RoleState::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000002u;
  required_ = value;
}
inline void RoleState::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.RoleState.required)
}

// optional bool unique = 6;
inline bool RoleState::_internal_has_unique() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoleState::has_unique() const {
  return _internal_has_unique();
}
inline void RoleState::clear_unique() {
  unique_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RoleState::_internal_unique() const {
  return unique_;
}
inline bool RoleState::unique() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.RoleState.unique)
  return _internal_unique();
}
inline void RoleState::_internal_set_unique(bool value) {
  _has_bits_[0] |= 0x00000004u;
  unique_ = value;
}
inline void RoleState::set_unique(bool value) {
  _internal_set_unique(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.RoleState.unique)
}

// optional uint32 relegation_role = 7;
inline bool RoleState::_internal_has_relegation_role() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoleState::has_relegation_role() const {
  return _internal_has_relegation_role();
}
inline void RoleState::clear_relegation_role() {
  relegation_role_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::_internal_relegation_role() const {
  return relegation_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::relegation_role() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.RoleState.relegation_role)
  return _internal_relegation_role();
}
inline void RoleState::_internal_set_relegation_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  relegation_role_ = value;
}
inline void RoleState::set_relegation_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_relegation_role(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.RoleState.relegation_role)
}

// repeated uint32 kickable_role = 9 [packed = true];
inline int RoleState::_internal_kickable_role_size() const {
  return kickable_role_.size();
}
inline int RoleState::kickable_role_size() const {
  return _internal_kickable_role_size();
}
inline void RoleState::clear_kickable_role() {
  kickable_role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::_internal_kickable_role(int index) const {
  return kickable_role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::kickable_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.RoleState.kickable_role)
  return _internal_kickable_role(index);
}
inline void RoleState::set_kickable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  kickable_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.RoleState.kickable_role)
}
inline void RoleState::_internal_add_kickable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  kickable_role_.Add(value);
}
inline void RoleState::add_kickable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_kickable_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.RoleState.kickable_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleState::_internal_kickable_role() const {
  return kickable_role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleState::kickable_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.RoleState.kickable_role)
  return _internal_kickable_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleState::_internal_mutable_kickable_role() {
  return &kickable_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleState::mutable_kickable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.RoleState.kickable_role)
  return _internal_mutable_kickable_role();
}

// repeated uint32 removable_role = 10 [packed = true];
inline int RoleState::_internal_removable_role_size() const {
  return removable_role_.size();
}
inline int RoleState::removable_role_size() const {
  return _internal_removable_role_size();
}
inline void RoleState::clear_removable_role() {
  removable_role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::_internal_removable_role(int index) const {
  return removable_role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::removable_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.RoleState.removable_role)
  return _internal_removable_role(index);
}
inline void RoleState::set_removable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  removable_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.RoleState.removable_role)
}
inline void RoleState::_internal_add_removable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  removable_role_.Add(value);
}
inline void RoleState::add_removable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_removable_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.RoleState.removable_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleState::_internal_removable_role() const {
  return removable_role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleState::removable_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.RoleState.removable_role)
  return _internal_removable_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleState::_internal_mutable_removable_role() {
  return &removable_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleState::mutable_removable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.RoleState.removable_role)
  return _internal_mutable_removable_role();
}

// repeated uint32 mentionable_role = 11 [packed = true];
inline int RoleState::_internal_mentionable_role_size() const {
  return mentionable_role_.size();
}
inline int RoleState::mentionable_role_size() const {
  return _internal_mentionable_role_size();
}
inline void RoleState::clear_mentionable_role() {
  mentionable_role_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::_internal_mentionable_role(int index) const {
  return mentionable_role_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleState::mentionable_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.RoleState.mentionable_role)
  return _internal_mentionable_role(index);
}
inline void RoleState::set_mentionable_role(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mentionable_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.RoleState.mentionable_role)
}
inline void RoleState::_internal_add_mentionable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mentionable_role_.Add(value);
}
inline void RoleState::add_mentionable_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_mentionable_role(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.RoleState.mentionable_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleState::_internal_mentionable_role() const {
  return mentionable_role_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RoleState::mentionable_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.RoleState.mentionable_role)
  return _internal_mentionable_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleState::_internal_mutable_mentionable_role() {
  return &mentionable_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RoleState::mutable_mentionable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.RoleState.mentionable_role)
  return _internal_mutable_mentionable_role();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frole_5ftypes_2eproto
