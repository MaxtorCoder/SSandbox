// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/rpc_config.proto

#include "bgs/low/pb/client/rpc_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolAlias_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPCMethodConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto;
namespace bgs {
namespace protocol {
namespace config {
class RPCMethodConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPCMethodConfig> _instance;
} _RPCMethodConfig_default_instance_;
class RPCMeterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPCMeterConfig> _instance;
} _RPCMeterConfig_default_instance_;
class ProtocolAliasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolAlias> _instance;
} _ProtocolAlias_default_instance_;
class ServiceAliasesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceAliases> _instance;
} _ServiceAliases_default_instance_;
}  // namespace config
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_ProtocolAlias_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::config::_ProtocolAlias_default_instance_;
    new (ptr) ::bgs::protocol::config::ProtocolAlias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::config::ProtocolAlias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolAlias_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtocolAlias_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_RPCMeterConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::config::_RPCMeterConfig_default_instance_;
    new (ptr) ::bgs::protocol::config::RPCMeterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::config::RPCMeterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RPCMeterConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RPCMeterConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto}, {
      &scc_info_RPCMethodConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_RPCMethodConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::config::_RPCMethodConfig_default_instance_;
    new (ptr) ::bgs::protocol::config::RPCMethodConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::config::RPCMethodConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPCMethodConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPCMethodConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ServiceAliases_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::config::_ServiceAliases_default_instance_;
    new (ptr) ::bgs::protocol::config::ServiceAliases();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::config::ServiceAliases::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceAliases_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceAliases_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto}, {
      &scc_info_ProtocolAlias_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, service_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, method_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, fixed_call_cost_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, fixed_packet_size_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, variable_multiplier_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, multiplier_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, rate_limit_count_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, rate_limit_seconds_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, max_packet_size_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, max_encoded_size_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, timeout_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, cap_balance_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, income_per_second_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, service_hash_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMethodConfig, method_id_),
  0,
  1,
  13,
  2,
  3,
  14,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMeterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMeterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMeterConfig, method_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMeterConfig, income_per_second_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMeterConfig, initial_balance_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMeterConfig, cap_balance_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::RPCMeterConfig, startup_period_),
  ~0u,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::ProtocolAlias, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::ProtocolAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::ProtocolAlias, server_service_name_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::ProtocolAlias, client_service_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::ServiceAliases, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::ServiceAliases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::config::ServiceAliases, protocol_alias_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::bgs::protocol::config::RPCMethodConfig)},
  { 35, 45, sizeof(::bgs::protocol::config::RPCMeterConfig)},
  { 50, 57, sizeof(::bgs::protocol::config::ProtocolAlias)},
  { 59, 65, sizeof(::bgs::protocol::config::ServiceAliases)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::config::_RPCMethodConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::config::_RPCMeterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::config::_ProtocolAlias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::config::_ServiceAliases_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"bgs/low/pb/client/rpc_config.proto\022\023bg"
  "s.protocol.config\"\213\003\n\017RPCMethodConfig\022\030\n"
  "\014service_name\030\001 \001(\tB\002\030\001\022\027\n\013method_name\030\002"
  " \001(\tB\002\030\001\022\032\n\017fixed_call_cost\030\003 \001(\r:\0011\022\034\n\021"
  "fixed_packet_size\030\004 \001(\r:\0010\022\036\n\023variable_m"
  "ultiplier\030\005 \001(\002:\0010\022\025\n\nmultiplier\030\006 \001(\002:\001"
  "1\022\030\n\020rate_limit_count\030\007 \001(\r\022\032\n\022rate_limi"
  "t_seconds\030\010 \001(\r\022\027\n\017max_packet_size\030\t \001(\r"
  "\022\030\n\020max_encoded_size\030\n \001(\r\022\017\n\007timeout\030\013 "
  "\001(\002\022\023\n\013cap_balance\030\014 \001(\r\022\034\n\021income_per_s"
  "econd\030\r \001(\002:\0010\022\024\n\014service_hash\030\016 \001(\r\022\021\n\t"
  "method_id\030\017 \001(\r\"\255\001\n\016RPCMeterConfig\0224\n\006me"
  "thod\030\001 \003(\0132$.bgs.protocol.config.RPCMeth"
  "odConfig\022\034\n\021income_per_second\030\002 \001(\r:\0011\022\027"
  "\n\017initial_balance\030\003 \001(\r\022\023\n\013cap_balance\030\004"
  " \001(\r\022\031\n\016startup_period\030\005 \001(\002:\0010\"I\n\rProto"
  "colAlias\022\033\n\023server_service_name\030\001 \002(\t\022\033\n"
  "\023client_service_name\030\002 \002(\t\"L\n\016ServiceAli"
  "ases\022:\n\016protocol_alias\030\001 \003(\0132\".bgs.proto"
  "col.config.ProtocolAlias"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto_sccs[4] = {
  &scc_info_ProtocolAlias_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base,
  &scc_info_RPCMeterConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base,
  &scc_info_RPCMethodConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base,
  &scc_info_ServiceAliases_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto, "bgs/low/pb/client/rpc_config.proto", 784,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto, 4, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto)), true);
namespace bgs {
namespace protocol {
namespace config {

// ===================================================================

void RPCMethodConfig::InitAsDefaultInstance() {
}
class RPCMethodConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCMethodConfig>()._has_bits_);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fixed_call_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_fixed_packet_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_variable_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_rate_limit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rate_limit_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_packet_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_encoded_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cap_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_income_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_service_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_method_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

RPCMethodConfig::RPCMethodConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.config.RPCMethodConfig)
}
RPCMethodConfig::RPCMethodConfig(const RPCMethodConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_service_name()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_method_name()) {
    method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  ::memcpy(&fixed_packet_size_, &from.fixed_packet_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiplier_) -
    reinterpret_cast<char*>(&fixed_packet_size_)) + sizeof(multiplier_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.config.RPCMethodConfig)
}

void RPCMethodConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPCMethodConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fixed_packet_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_id_) -
      reinterpret_cast<char*>(&fixed_packet_size_)) + sizeof(method_id_));
  fixed_call_cost_ = 1u;
  multiplier_ = 1;
}

RPCMethodConfig::~RPCMethodConfig() {
  // @@protoc_insertion_point(destructor:bgs.protocol.config.RPCMethodConfig)
  SharedDtor();
}

void RPCMethodConfig::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCMethodConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPCMethodConfig& RPCMethodConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPCMethodConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RPCMethodConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.config.RPCMethodConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      service_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      method_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&fixed_packet_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_encoded_size_) -
        reinterpret_cast<char*>(&fixed_packet_size_)) + sizeof(max_encoded_size_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_id_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(method_id_));
    fixed_call_cost_ = 1u;
    multiplier_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RPCMethodConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string service_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.config.RPCMethodConfig.service_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string method_name = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.config.RPCMethodConfig.method_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fixed_call_cost = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fixed_call_cost(&has_bits);
          fixed_call_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fixed_packet_size = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fixed_packet_size(&has_bits);
          fixed_packet_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float variable_multiplier = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_variable_multiplier(&has_bits);
          variable_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float multiplier = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_multiplier(&has_bits);
          multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 rate_limit_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rate_limit_count(&has_bits);
          rate_limit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rate_limit_seconds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rate_limit_seconds(&has_bits);
          rate_limit_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_packet_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_packet_size(&has_bits);
          max_packet_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_encoded_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_encoded_size(&has_bits);
          max_encoded_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float timeout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 cap_balance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cap_balance(&has_bits);
          cap_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float income_per_second = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_income_per_second(&has_bits);
          income_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_hash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_service_hash(&has_bits);
          service_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 method_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_method_id(&has_bits);
          method_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPCMethodConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.config.RPCMethodConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string service_name = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.config.RPCMethodConfig.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // optional string method_name = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.config.RPCMethodConfig.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // optional uint32 fixed_call_cost = 3 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fixed_call_cost(), target);
  }

  // optional uint32 fixed_packet_size = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fixed_packet_size(), target);
  }

  // optional float variable_multiplier = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_variable_multiplier(), target);
  }

  // optional float multiplier = 6 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_multiplier(), target);
  }

  // optional uint32 rate_limit_count = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rate_limit_count(), target);
  }

  // optional uint32 rate_limit_seconds = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rate_limit_seconds(), target);
  }

  // optional uint32 max_packet_size = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_max_packet_size(), target);
  }

  // optional uint32 max_encoded_size = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_max_encoded_size(), target);
  }

  // optional float timeout = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_timeout(), target);
  }

  // optional uint32 cap_balance = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cap_balance(), target);
  }

  // optional float income_per_second = 13 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_income_per_second(), target);
  }

  // optional uint32 service_hash = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_service_hash(), target);
  }

  // optional uint32 method_id = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_method_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.config.RPCMethodConfig)
  return target;
}

size_t RPCMethodConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.config.RPCMethodConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string service_name = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service_name());
    }

    // optional string method_name = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional uint32 fixed_packet_size = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fixed_packet_size());
    }

    // optional float variable_multiplier = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 rate_limit_count = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rate_limit_count());
    }

    // optional uint32 rate_limit_seconds = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rate_limit_seconds());
    }

    // optional uint32 max_packet_size = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_packet_size());
    }

    // optional uint32 max_encoded_size = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_encoded_size());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float timeout = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 cap_balance = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cap_balance());
    }

    // optional float income_per_second = 13 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 service_hash = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_hash());
    }

    // optional uint32 method_id = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_method_id());
    }

    // optional uint32 fixed_call_cost = 3 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fixed_call_cost());
    }

    // optional float multiplier = 6 [default = 1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCMethodConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.config.RPCMethodConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCMethodConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPCMethodConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.config.RPCMethodConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.config.RPCMethodConfig)
    MergeFrom(*source);
  }
}

void RPCMethodConfig::MergeFrom(const RPCMethodConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.config.RPCMethodConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      fixed_packet_size_ = from.fixed_packet_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      variable_multiplier_ = from.variable_multiplier_;
    }
    if (cached_has_bits & 0x00000010u) {
      rate_limit_count_ = from.rate_limit_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      rate_limit_seconds_ = from.rate_limit_seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_packet_size_ = from.max_packet_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_encoded_size_ = from.max_encoded_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000200u) {
      cap_balance_ = from.cap_balance_;
    }
    if (cached_has_bits & 0x00000400u) {
      income_per_second_ = from.income_per_second_;
    }
    if (cached_has_bits & 0x00000800u) {
      service_hash_ = from.service_hash_;
    }
    if (cached_has_bits & 0x00001000u) {
      method_id_ = from.method_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      fixed_call_cost_ = from.fixed_call_cost_;
    }
    if (cached_has_bits & 0x00004000u) {
      multiplier_ = from.multiplier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RPCMethodConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.config.RPCMethodConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCMethodConfig::CopyFrom(const RPCMethodConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.config.RPCMethodConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCMethodConfig::IsInitialized() const {
  return true;
}

void RPCMethodConfig::InternalSwap(RPCMethodConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_name_.Swap(&other->method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fixed_packet_size_, other->fixed_packet_size_);
  swap(variable_multiplier_, other->variable_multiplier_);
  swap(rate_limit_count_, other->rate_limit_count_);
  swap(rate_limit_seconds_, other->rate_limit_seconds_);
  swap(max_packet_size_, other->max_packet_size_);
  swap(max_encoded_size_, other->max_encoded_size_);
  swap(timeout_, other->timeout_);
  swap(cap_balance_, other->cap_balance_);
  swap(income_per_second_, other->income_per_second_);
  swap(service_hash_, other->service_hash_);
  swap(method_id_, other->method_id_);
  swap(fixed_call_cost_, other->fixed_call_cost_);
  swap(multiplier_, other->multiplier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCMethodConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPCMeterConfig::InitAsDefaultInstance() {
}
class RPCMeterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCMeterConfig>()._has_bits_);
  static void set_has_income_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cap_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_startup_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RPCMeterConfig::RPCMeterConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.config.RPCMeterConfig)
}
RPCMeterConfig::RPCMeterConfig(const RPCMeterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      method_(from.method_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&initial_balance_, &from.initial_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&income_per_second_) -
    reinterpret_cast<char*>(&initial_balance_)) + sizeof(income_per_second_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.config.RPCMeterConfig)
}

void RPCMeterConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPCMeterConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base);
  ::memset(&initial_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startup_period_) -
      reinterpret_cast<char*>(&initial_balance_)) + sizeof(startup_period_));
  income_per_second_ = 1u;
}

RPCMeterConfig::~RPCMeterConfig() {
  // @@protoc_insertion_point(destructor:bgs.protocol.config.RPCMeterConfig)
  SharedDtor();
}

void RPCMeterConfig::SharedDtor() {
}

void RPCMeterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPCMeterConfig& RPCMeterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPCMeterConfig_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RPCMeterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.config.RPCMeterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&initial_balance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startup_period_) -
        reinterpret_cast<char*>(&initial_balance_)) + sizeof(startup_period_));
    income_per_second_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RPCMeterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.config.RPCMethodConfig method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_method(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 income_per_second = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_income_per_second(&has_bits);
          income_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_initial_balance(&has_bits);
          initial_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cap_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cap_balance(&has_bits);
          cap_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float startup_period = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_startup_period(&has_bits);
          startup_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPCMeterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.config.RPCMeterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.config.RPCMethodConfig method = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_method_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_method(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 income_per_second = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_income_per_second(), target);
  }

  // optional uint32 initial_balance = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_initial_balance(), target);
  }

  // optional uint32 cap_balance = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cap_balance(), target);
  }

  // optional float startup_period = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_startup_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.config.RPCMeterConfig)
  return target;
}

size_t RPCMeterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.config.RPCMeterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.config.RPCMethodConfig method = 1;
  total_size += 1UL * this->_internal_method_size();
  for (const auto& msg : this->method_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 initial_balance = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_balance());
    }

    // optional uint32 cap_balance = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cap_balance());
    }

    // optional float startup_period = 5 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 income_per_second = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_income_per_second());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCMeterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.config.RPCMeterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCMeterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPCMeterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.config.RPCMeterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.config.RPCMeterConfig)
    MergeFrom(*source);
  }
}

void RPCMeterConfig::MergeFrom(const RPCMeterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.config.RPCMeterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  method_.MergeFrom(from.method_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      initial_balance_ = from.initial_balance_;
    }
    if (cached_has_bits & 0x00000002u) {
      cap_balance_ = from.cap_balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      startup_period_ = from.startup_period_;
    }
    if (cached_has_bits & 0x00000008u) {
      income_per_second_ = from.income_per_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RPCMeterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.config.RPCMeterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCMeterConfig::CopyFrom(const RPCMeterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.config.RPCMeterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCMeterConfig::IsInitialized() const {
  return true;
}

void RPCMeterConfig::InternalSwap(RPCMeterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  method_.InternalSwap(&other->method_);
  swap(initial_balance_, other->initial_balance_);
  swap(cap_balance_, other->cap_balance_);
  swap(startup_period_, other->startup_period_);
  swap(income_per_second_, other->income_per_second_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCMeterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProtocolAlias::InitAsDefaultInstance() {
}
class ProtocolAlias::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtocolAlias>()._has_bits_);
  static void set_has_server_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProtocolAlias::ProtocolAlias()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.config.ProtocolAlias)
}
ProtocolAlias::ProtocolAlias(const ProtocolAlias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_service_name()) {
    server_service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_service_name_);
  }
  client_service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_service_name()) {
    client_service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_service_name_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.config.ProtocolAlias)
}

void ProtocolAlias::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtocolAlias_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base);
  server_service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProtocolAlias::~ProtocolAlias() {
  // @@protoc_insertion_point(destructor:bgs.protocol.config.ProtocolAlias)
  SharedDtor();
}

void ProtocolAlias::SharedDtor() {
  server_service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtocolAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolAlias& ProtocolAlias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolAlias_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ProtocolAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.config.ProtocolAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_service_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      client_service_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ProtocolAlias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string server_service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_server_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.config.ProtocolAlias.server_service_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string client_service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.config.ProtocolAlias.client_service_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolAlias::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.config.ProtocolAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string server_service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_service_name().data(), static_cast<int>(this->_internal_server_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.config.ProtocolAlias.server_service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_service_name(), target);
  }

  // required string client_service_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_service_name().data(), static_cast<int>(this->_internal_client_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.config.ProtocolAlias.client_service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.config.ProtocolAlias)
  return target;
}

size_t ProtocolAlias::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.config.ProtocolAlias)
  size_t total_size = 0;

  if (_internal_has_server_service_name()) {
    // required string server_service_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_service_name());
  }

  if (_internal_has_client_service_name()) {
    // required string client_service_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_service_name());
  }

  return total_size;
}
size_t ProtocolAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.config.ProtocolAlias)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string server_service_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_service_name());

    // required string client_service_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_service_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolAlias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.config.ProtocolAlias)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolAlias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolAlias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.config.ProtocolAlias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.config.ProtocolAlias)
    MergeFrom(*source);
  }
}

void ProtocolAlias::MergeFrom(const ProtocolAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.config.ProtocolAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      server_service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_service_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      client_service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_service_name_);
    }
  }
}

void ProtocolAlias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.config.ProtocolAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolAlias::CopyFrom(const ProtocolAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.config.ProtocolAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolAlias::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProtocolAlias::InternalSwap(ProtocolAlias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_service_name_.Swap(&other->server_service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_service_name_.Swap(&other->client_service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolAlias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceAliases::InitAsDefaultInstance() {
}
class ServiceAliases::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceAliases>()._has_bits_);
};

ServiceAliases::ServiceAliases()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.config.ServiceAliases)
}
ServiceAliases::ServiceAliases(const ServiceAliases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      protocol_alias_(from.protocol_alias_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.config.ServiceAliases)
}

void ServiceAliases::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceAliases_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base);
}

ServiceAliases::~ServiceAliases() {
  // @@protoc_insertion_point(destructor:bgs.protocol.config.ServiceAliases)
  SharedDtor();
}

void ServiceAliases::SharedDtor() {
}

void ServiceAliases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceAliases& ServiceAliases::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceAliases_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServiceAliases::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.config.ServiceAliases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_alias_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ServiceAliases::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bgs.protocol.config.ProtocolAlias protocol_alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_protocol_alias(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceAliases::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.config.ServiceAliases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bgs.protocol.config.ProtocolAlias protocol_alias = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_protocol_alias_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_protocol_alias(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.config.ServiceAliases)
  return target;
}

size_t ServiceAliases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.config.ServiceAliases)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.config.ProtocolAlias protocol_alias = 1;
  total_size += 1UL * this->_internal_protocol_alias_size();
  for (const auto& msg : this->protocol_alias_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceAliases::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.config.ServiceAliases)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceAliases* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceAliases>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.config.ServiceAliases)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.config.ServiceAliases)
    MergeFrom(*source);
  }
}

void ServiceAliases::MergeFrom(const ServiceAliases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.config.ServiceAliases)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protocol_alias_.MergeFrom(from.protocol_alias_);
}

void ServiceAliases::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.config.ServiceAliases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAliases::CopyFrom(const ServiceAliases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.config.ServiceAliases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceAliases::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(protocol_alias_)) return false;
  return true;
}

void ServiceAliases::InternalSwap(ServiceAliases* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  protocol_alias_.InternalSwap(&other->protocol_alias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceAliases::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::config::RPCMethodConfig* Arena::CreateMaybeMessage< ::bgs::protocol::config::RPCMethodConfig >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::config::RPCMethodConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::config::RPCMeterConfig* Arena::CreateMaybeMessage< ::bgs::protocol::config::RPCMeterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::config::RPCMeterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::config::ProtocolAlias* Arena::CreateMaybeMessage< ::bgs::protocol::config::ProtocolAlias >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::config::ProtocolAlias >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::config::ServiceAliases* Arena::CreateMaybeMessage< ::bgs::protocol::config::ServiceAliases >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::config::ServiceAliases >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
