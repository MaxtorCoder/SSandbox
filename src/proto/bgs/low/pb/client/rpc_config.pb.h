// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/rpc_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto;
namespace bgs {
namespace protocol {
namespace config {
class ProtocolAlias;
class ProtocolAliasDefaultTypeInternal;
extern ProtocolAliasDefaultTypeInternal _ProtocolAlias_default_instance_;
class RPCMeterConfig;
class RPCMeterConfigDefaultTypeInternal;
extern RPCMeterConfigDefaultTypeInternal _RPCMeterConfig_default_instance_;
class RPCMethodConfig;
class RPCMethodConfigDefaultTypeInternal;
extern RPCMethodConfigDefaultTypeInternal _RPCMethodConfig_default_instance_;
class ServiceAliases;
class ServiceAliasesDefaultTypeInternal;
extern ServiceAliasesDefaultTypeInternal _ServiceAliases_default_instance_;
}  // namespace config
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::config::ProtocolAlias* Arena::CreateMaybeMessage<::bgs::protocol::config::ProtocolAlias>(Arena*);
template<> ::bgs::protocol::config::RPCMeterConfig* Arena::CreateMaybeMessage<::bgs::protocol::config::RPCMeterConfig>(Arena*);
template<> ::bgs::protocol::config::RPCMethodConfig* Arena::CreateMaybeMessage<::bgs::protocol::config::RPCMethodConfig>(Arena*);
template<> ::bgs::protocol::config::ServiceAliases* Arena::CreateMaybeMessage<::bgs::protocol::config::ServiceAliases>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {
namespace config {

// ===================================================================

class RPCMethodConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.config.RPCMethodConfig) */ {
 public:
  RPCMethodConfig();
  virtual ~RPCMethodConfig();

  RPCMethodConfig(const RPCMethodConfig& from);
  RPCMethodConfig(RPCMethodConfig&& from) noexcept
    : RPCMethodConfig() {
    *this = ::std::move(from);
  }

  inline RPCMethodConfig& operator=(const RPCMethodConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCMethodConfig& operator=(RPCMethodConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPCMethodConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCMethodConfig* internal_default_instance() {
    return reinterpret_cast<const RPCMethodConfig*>(
               &_RPCMethodConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RPCMethodConfig& a, RPCMethodConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCMethodConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPCMethodConfig* New() const final {
    return CreateMaybeMessage<RPCMethodConfig>(nullptr);
  }

  RPCMethodConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPCMethodConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPCMethodConfig& from);
  void MergeFrom(const RPCMethodConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCMethodConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.config.RPCMethodConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kFixedPacketSizeFieldNumber = 4,
    kVariableMultiplierFieldNumber = 5,
    kRateLimitCountFieldNumber = 7,
    kRateLimitSecondsFieldNumber = 8,
    kMaxPacketSizeFieldNumber = 9,
    kMaxEncodedSizeFieldNumber = 10,
    kTimeoutFieldNumber = 11,
    kCapBalanceFieldNumber = 12,
    kIncomePerSecondFieldNumber = 13,
    kServiceHashFieldNumber = 14,
    kMethodIdFieldNumber = 15,
    kFixedCallCostFieldNumber = 3,
    kMultiplierFieldNumber = 6,
  };
  // optional string service_name = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  PROTOBUF_DEPRECATED void clear_service_name();
  PROTOBUF_DEPRECATED const std::string& service_name() const;
  PROTOBUF_DEPRECATED void set_service_name(const std::string& value);
  PROTOBUF_DEPRECATED void set_service_name(std::string&& value);
  PROTOBUF_DEPRECATED void set_service_name(const char* value);
  PROTOBUF_DEPRECATED void set_service_name(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_service_name();
  PROTOBUF_DEPRECATED std::string* release_service_name();
  PROTOBUF_DEPRECATED void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // optional string method_name = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_method_name() const;
  private:
  bool _internal_has_method_name() const;
  public:
  PROTOBUF_DEPRECATED void clear_method_name();
  PROTOBUF_DEPRECATED const std::string& method_name() const;
  PROTOBUF_DEPRECATED void set_method_name(const std::string& value);
  PROTOBUF_DEPRECATED void set_method_name(std::string&& value);
  PROTOBUF_DEPRECATED void set_method_name(const char* value);
  PROTOBUF_DEPRECATED void set_method_name(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_method_name();
  PROTOBUF_DEPRECATED std::string* release_method_name();
  PROTOBUF_DEPRECATED void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // optional uint32 fixed_packet_size = 4 [default = 0];
  bool has_fixed_packet_size() const;
  private:
  bool _internal_has_fixed_packet_size() const;
  public:
  void clear_fixed_packet_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed_packet_size() const;
  void set_fixed_packet_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed_packet_size() const;
  void _internal_set_fixed_packet_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float variable_multiplier = 5 [default = 0];
  bool has_variable_multiplier() const;
  private:
  bool _internal_has_variable_multiplier() const;
  public:
  void clear_variable_multiplier();
  float variable_multiplier() const;
  void set_variable_multiplier(float value);
  private:
  float _internal_variable_multiplier() const;
  void _internal_set_variable_multiplier(float value);
  public:

  // optional uint32 rate_limit_count = 7;
  bool has_rate_limit_count() const;
  private:
  bool _internal_has_rate_limit_count() const;
  public:
  void clear_rate_limit_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 rate_limit_count() const;
  void set_rate_limit_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rate_limit_count() const;
  void _internal_set_rate_limit_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rate_limit_seconds = 8;
  bool has_rate_limit_seconds() const;
  private:
  bool _internal_has_rate_limit_seconds() const;
  public:
  void clear_rate_limit_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 rate_limit_seconds() const;
  void set_rate_limit_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rate_limit_seconds() const;
  void _internal_set_rate_limit_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_packet_size = 9;
  bool has_max_packet_size() const;
  private:
  bool _internal_has_max_packet_size() const;
  public:
  void clear_max_packet_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_packet_size() const;
  void set_max_packet_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_packet_size() const;
  void _internal_set_max_packet_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_encoded_size = 10;
  bool has_max_encoded_size() const;
  private:
  bool _internal_has_max_encoded_size() const;
  public:
  void clear_max_encoded_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_encoded_size() const;
  void set_max_encoded_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_encoded_size() const;
  void _internal_set_max_encoded_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float timeout = 11;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  float timeout() const;
  void set_timeout(float value);
  private:
  float _internal_timeout() const;
  void _internal_set_timeout(float value);
  public:

  // optional uint32 cap_balance = 12;
  bool has_cap_balance() const;
  private:
  bool _internal_has_cap_balance() const;
  public:
  void clear_cap_balance();
  ::PROTOBUF_NAMESPACE_ID::uint32 cap_balance() const;
  void set_cap_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cap_balance() const;
  void _internal_set_cap_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float income_per_second = 13 [default = 0];
  bool has_income_per_second() const;
  private:
  bool _internal_has_income_per_second() const;
  public:
  void clear_income_per_second();
  float income_per_second() const;
  void set_income_per_second(float value);
  private:
  float _internal_income_per_second() const;
  void _internal_set_income_per_second(float value);
  public:

  // optional uint32 service_hash = 14;
  bool has_service_hash() const;
  private:
  bool _internal_has_service_hash() const;
  public:
  void clear_service_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash() const;
  void set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_hash() const;
  void _internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 method_id = 15;
  bool has_method_id() const;
  private:
  bool _internal_has_method_id() const;
  public:
  void clear_method_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id() const;
  void set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_method_id() const;
  void _internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fixed_call_cost = 3 [default = 1];
  bool has_fixed_call_cost() const;
  private:
  bool _internal_has_fixed_call_cost() const;
  public:
  void clear_fixed_call_cost();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed_call_cost() const;
  void set_fixed_call_cost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed_call_cost() const;
  void _internal_set_fixed_call_cost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float multiplier = 6 [default = 1];
  bool has_multiplier() const;
  private:
  bool _internal_has_multiplier() const;
  public:
  void clear_multiplier();
  float multiplier() const;
  void set_multiplier(float value);
  private:
  float _internal_multiplier() const;
  void _internal_set_multiplier(float value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.config.RPCMethodConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed_packet_size_;
  float variable_multiplier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rate_limit_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rate_limit_seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_packet_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_encoded_size_;
  float timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cap_balance_;
  float income_per_second_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed_call_cost_;
  float multiplier_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RPCMeterConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.config.RPCMeterConfig) */ {
 public:
  RPCMeterConfig();
  virtual ~RPCMeterConfig();

  RPCMeterConfig(const RPCMeterConfig& from);
  RPCMeterConfig(RPCMeterConfig&& from) noexcept
    : RPCMeterConfig() {
    *this = ::std::move(from);
  }

  inline RPCMeterConfig& operator=(const RPCMeterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCMeterConfig& operator=(RPCMeterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPCMeterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCMeterConfig* internal_default_instance() {
    return reinterpret_cast<const RPCMeterConfig*>(
               &_RPCMeterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RPCMeterConfig& a, RPCMeterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCMeterConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPCMeterConfig* New() const final {
    return CreateMaybeMessage<RPCMeterConfig>(nullptr);
  }

  RPCMeterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPCMeterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPCMeterConfig& from);
  void MergeFrom(const RPCMeterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCMeterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.config.RPCMeterConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kInitialBalanceFieldNumber = 3,
    kCapBalanceFieldNumber = 4,
    kStartupPeriodFieldNumber = 5,
    kIncomePerSecondFieldNumber = 2,
  };
  // repeated .bgs.protocol.config.RPCMethodConfig method = 1;
  int method_size() const;
  private:
  int _internal_method_size() const;
  public:
  void clear_method();
  ::bgs::protocol::config::RPCMethodConfig* mutable_method(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig >*
      mutable_method();
  private:
  const ::bgs::protocol::config::RPCMethodConfig& _internal_method(int index) const;
  ::bgs::protocol::config::RPCMethodConfig* _internal_add_method();
  public:
  const ::bgs::protocol::config::RPCMethodConfig& method(int index) const;
  ::bgs::protocol::config::RPCMethodConfig* add_method();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig >&
      method() const;

  // optional uint32 initial_balance = 3;
  bool has_initial_balance() const;
  private:
  bool _internal_has_initial_balance() const;
  public:
  void clear_initial_balance();
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_balance() const;
  void set_initial_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_initial_balance() const;
  void _internal_set_initial_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cap_balance = 4;
  bool has_cap_balance() const;
  private:
  bool _internal_has_cap_balance() const;
  public:
  void clear_cap_balance();
  ::PROTOBUF_NAMESPACE_ID::uint32 cap_balance() const;
  void set_cap_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cap_balance() const;
  void _internal_set_cap_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float startup_period = 5 [default = 0];
  bool has_startup_period() const;
  private:
  bool _internal_has_startup_period() const;
  public:
  void clear_startup_period();
  float startup_period() const;
  void set_startup_period(float value);
  private:
  float _internal_startup_period() const;
  void _internal_set_startup_period(float value);
  public:

  // optional uint32 income_per_second = 2 [default = 1];
  bool has_income_per_second() const;
  private:
  bool _internal_has_income_per_second() const;
  public:
  void clear_income_per_second();
  ::PROTOBUF_NAMESPACE_ID::uint32 income_per_second() const;
  void set_income_per_second(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_income_per_second() const;
  void _internal_set_income_per_second(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.config.RPCMeterConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig > method_;
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_balance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cap_balance_;
  float startup_period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 income_per_second_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ProtocolAlias :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.config.ProtocolAlias) */ {
 public:
  ProtocolAlias();
  virtual ~ProtocolAlias();

  ProtocolAlias(const ProtocolAlias& from);
  ProtocolAlias(ProtocolAlias&& from) noexcept
    : ProtocolAlias() {
    *this = ::std::move(from);
  }

  inline ProtocolAlias& operator=(const ProtocolAlias& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolAlias& operator=(ProtocolAlias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolAlias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtocolAlias* internal_default_instance() {
    return reinterpret_cast<const ProtocolAlias*>(
               &_ProtocolAlias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtocolAlias& a, ProtocolAlias& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolAlias* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolAlias* New() const final {
    return CreateMaybeMessage<ProtocolAlias>(nullptr);
  }

  ProtocolAlias* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolAlias>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolAlias& from);
  void MergeFrom(const ProtocolAlias& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolAlias* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.config.ProtocolAlias";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerServiceNameFieldNumber = 1,
    kClientServiceNameFieldNumber = 2,
  };
  // required string server_service_name = 1;
  bool has_server_service_name() const;
  private:
  bool _internal_has_server_service_name() const;
  public:
  void clear_server_service_name();
  const std::string& server_service_name() const;
  void set_server_service_name(const std::string& value);
  void set_server_service_name(std::string&& value);
  void set_server_service_name(const char* value);
  void set_server_service_name(const char* value, size_t size);
  std::string* mutable_server_service_name();
  std::string* release_server_service_name();
  void set_allocated_server_service_name(std::string* server_service_name);
  private:
  const std::string& _internal_server_service_name() const;
  void _internal_set_server_service_name(const std::string& value);
  std::string* _internal_mutable_server_service_name();
  public:

  // required string client_service_name = 2;
  bool has_client_service_name() const;
  private:
  bool _internal_has_client_service_name() const;
  public:
  void clear_client_service_name();
  const std::string& client_service_name() const;
  void set_client_service_name(const std::string& value);
  void set_client_service_name(std::string&& value);
  void set_client_service_name(const char* value);
  void set_client_service_name(const char* value, size_t size);
  std::string* mutable_client_service_name();
  std::string* release_client_service_name();
  void set_allocated_client_service_name(std::string* client_service_name);
  private:
  const std::string& _internal_client_service_name() const;
  void _internal_set_client_service_name(const std::string& value);
  std::string* _internal_mutable_client_service_name();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.config.ProtocolAlias)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_service_name_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServiceAliases :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.config.ServiceAliases) */ {
 public:
  ServiceAliases();
  virtual ~ServiceAliases();

  ServiceAliases(const ServiceAliases& from);
  ServiceAliases(ServiceAliases&& from) noexcept
    : ServiceAliases() {
    *this = ::std::move(from);
  }

  inline ServiceAliases& operator=(const ServiceAliases& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceAliases& operator=(ServiceAliases&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceAliases& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceAliases* internal_default_instance() {
    return reinterpret_cast<const ServiceAliases*>(
               &_ServiceAliases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceAliases& a, ServiceAliases& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceAliases* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceAliases* New() const final {
    return CreateMaybeMessage<ServiceAliases>(nullptr);
  }

  ServiceAliases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceAliases>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceAliases& from);
  void MergeFrom(const ServiceAliases& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceAliases* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.config.ServiceAliases";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolAliasFieldNumber = 1,
  };
  // repeated .bgs.protocol.config.ProtocolAlias protocol_alias = 1;
  int protocol_alias_size() const;
  private:
  int _internal_protocol_alias_size() const;
  public:
  void clear_protocol_alias();
  ::bgs::protocol::config::ProtocolAlias* mutable_protocol_alias(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias >*
      mutable_protocol_alias();
  private:
  const ::bgs::protocol::config::ProtocolAlias& _internal_protocol_alias(int index) const;
  ::bgs::protocol::config::ProtocolAlias* _internal_add_protocol_alias();
  public:
  const ::bgs::protocol::config::ProtocolAlias& protocol_alias(int index) const;
  ::bgs::protocol::config::ProtocolAlias* add_protocol_alias();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias >&
      protocol_alias() const;

  // @@protoc_insertion_point(class_scope:bgs.protocol.config.ServiceAliases)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias > protocol_alias_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCMethodConfig

// optional string service_name = 1 [deprecated = true];
inline bool RPCMethodConfig::_internal_has_service_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_service_name() const {
  return _internal_has_service_name();
}
inline void RPCMethodConfig::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCMethodConfig::service_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.service_name)
  return _internal_service_name();
}
inline void RPCMethodConfig::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.service_name)
}
inline std::string* RPCMethodConfig::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.RPCMethodConfig.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& RPCMethodConfig::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void RPCMethodConfig::_internal_set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCMethodConfig::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.config.RPCMethodConfig.service_name)
}
inline void RPCMethodConfig::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.config.RPCMethodConfig.service_name)
}
inline void RPCMethodConfig::set_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.config.RPCMethodConfig.service_name)
}
inline std::string* RPCMethodConfig::_internal_mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCMethodConfig::release_service_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.config.RPCMethodConfig.service_name)
  if (!_internal_has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCMethodConfig::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.config.RPCMethodConfig.service_name)
}

// optional string method_name = 2 [deprecated = true];
inline bool RPCMethodConfig::_internal_has_method_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_method_name() const {
  return _internal_has_method_name();
}
inline void RPCMethodConfig::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RPCMethodConfig::method_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.method_name)
  return _internal_method_name();
}
inline void RPCMethodConfig::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.method_name)
}
inline std::string* RPCMethodConfig::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.RPCMethodConfig.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& RPCMethodConfig::_internal_method_name() const {
  return method_name_.GetNoArena();
}
inline void RPCMethodConfig::_internal_set_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCMethodConfig::set_method_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.config.RPCMethodConfig.method_name)
}
inline void RPCMethodConfig::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.config.RPCMethodConfig.method_name)
}
inline void RPCMethodConfig::set_method_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.config.RPCMethodConfig.method_name)
}
inline std::string* RPCMethodConfig::_internal_mutable_method_name() {
  _has_bits_[0] |= 0x00000002u;
  return method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCMethodConfig::release_method_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.config.RPCMethodConfig.method_name)
  if (!_internal_has_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return method_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCMethodConfig::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.config.RPCMethodConfig.method_name)
}

// optional uint32 fixed_call_cost = 3 [default = 1];
inline bool RPCMethodConfig::_internal_has_fixed_call_cost() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_fixed_call_cost() const {
  return _internal_has_fixed_call_cost();
}
inline void RPCMethodConfig::clear_fixed_call_cost() {
  fixed_call_cost_ = 1u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_fixed_call_cost() const {
  return fixed_call_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::fixed_call_cost() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.fixed_call_cost)
  return _internal_fixed_call_cost();
}
inline void RPCMethodConfig::_internal_set_fixed_call_cost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  fixed_call_cost_ = value;
}
inline void RPCMethodConfig::set_fixed_call_cost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed_call_cost(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.fixed_call_cost)
}

// optional uint32 fixed_packet_size = 4 [default = 0];
inline bool RPCMethodConfig::_internal_has_fixed_packet_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_fixed_packet_size() const {
  return _internal_has_fixed_packet_size();
}
inline void RPCMethodConfig::clear_fixed_packet_size() {
  fixed_packet_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_fixed_packet_size() const {
  return fixed_packet_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::fixed_packet_size() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.fixed_packet_size)
  return _internal_fixed_packet_size();
}
inline void RPCMethodConfig::_internal_set_fixed_packet_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fixed_packet_size_ = value;
}
inline void RPCMethodConfig::set_fixed_packet_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed_packet_size(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.fixed_packet_size)
}

// optional float variable_multiplier = 5 [default = 0];
inline bool RPCMethodConfig::_internal_has_variable_multiplier() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_variable_multiplier() const {
  return _internal_has_variable_multiplier();
}
inline void RPCMethodConfig::clear_variable_multiplier() {
  variable_multiplier_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RPCMethodConfig::_internal_variable_multiplier() const {
  return variable_multiplier_;
}
inline float RPCMethodConfig::variable_multiplier() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.variable_multiplier)
  return _internal_variable_multiplier();
}
inline void RPCMethodConfig::_internal_set_variable_multiplier(float value) {
  _has_bits_[0] |= 0x00000008u;
  variable_multiplier_ = value;
}
inline void RPCMethodConfig::set_variable_multiplier(float value) {
  _internal_set_variable_multiplier(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.variable_multiplier)
}

// optional float multiplier = 6 [default = 1];
inline bool RPCMethodConfig::_internal_has_multiplier() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_multiplier() const {
  return _internal_has_multiplier();
}
inline void RPCMethodConfig::clear_multiplier() {
  multiplier_ = 1;
  _has_bits_[0] &= ~0x00004000u;
}
inline float RPCMethodConfig::_internal_multiplier() const {
  return multiplier_;
}
inline float RPCMethodConfig::multiplier() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.multiplier)
  return _internal_multiplier();
}
inline void RPCMethodConfig::_internal_set_multiplier(float value) {
  _has_bits_[0] |= 0x00004000u;
  multiplier_ = value;
}
inline void RPCMethodConfig::set_multiplier(float value) {
  _internal_set_multiplier(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.multiplier)
}

// optional uint32 rate_limit_count = 7;
inline bool RPCMethodConfig::_internal_has_rate_limit_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_rate_limit_count() const {
  return _internal_has_rate_limit_count();
}
inline void RPCMethodConfig::clear_rate_limit_count() {
  rate_limit_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_rate_limit_count() const {
  return rate_limit_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::rate_limit_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.rate_limit_count)
  return _internal_rate_limit_count();
}
inline void RPCMethodConfig::_internal_set_rate_limit_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rate_limit_count_ = value;
}
inline void RPCMethodConfig::set_rate_limit_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rate_limit_count(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.rate_limit_count)
}

// optional uint32 rate_limit_seconds = 8;
inline bool RPCMethodConfig::_internal_has_rate_limit_seconds() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_rate_limit_seconds() const {
  return _internal_has_rate_limit_seconds();
}
inline void RPCMethodConfig::clear_rate_limit_seconds() {
  rate_limit_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_rate_limit_seconds() const {
  return rate_limit_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::rate_limit_seconds() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.rate_limit_seconds)
  return _internal_rate_limit_seconds();
}
inline void RPCMethodConfig::_internal_set_rate_limit_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rate_limit_seconds_ = value;
}
inline void RPCMethodConfig::set_rate_limit_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rate_limit_seconds(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.rate_limit_seconds)
}

// optional uint32 max_packet_size = 9;
inline bool RPCMethodConfig::_internal_has_max_packet_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_max_packet_size() const {
  return _internal_has_max_packet_size();
}
inline void RPCMethodConfig::clear_max_packet_size() {
  max_packet_size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_max_packet_size() const {
  return max_packet_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::max_packet_size() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.max_packet_size)
  return _internal_max_packet_size();
}
inline void RPCMethodConfig::_internal_set_max_packet_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_packet_size_ = value;
}
inline void RPCMethodConfig::set_max_packet_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_packet_size(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.max_packet_size)
}

// optional uint32 max_encoded_size = 10;
inline bool RPCMethodConfig::_internal_has_max_encoded_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_max_encoded_size() const {
  return _internal_has_max_encoded_size();
}
inline void RPCMethodConfig::clear_max_encoded_size() {
  max_encoded_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_max_encoded_size() const {
  return max_encoded_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::max_encoded_size() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.max_encoded_size)
  return _internal_max_encoded_size();
}
inline void RPCMethodConfig::_internal_set_max_encoded_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_encoded_size_ = value;
}
inline void RPCMethodConfig::set_max_encoded_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_encoded_size(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.max_encoded_size)
}

// optional float timeout = 11;
inline bool RPCMethodConfig::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_timeout() const {
  return _internal_has_timeout();
}
inline void RPCMethodConfig::clear_timeout() {
  timeout_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float RPCMethodConfig::_internal_timeout() const {
  return timeout_;
}
inline float RPCMethodConfig::timeout() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.timeout)
  return _internal_timeout();
}
inline void RPCMethodConfig::_internal_set_timeout(float value) {
  _has_bits_[0] |= 0x00000100u;
  timeout_ = value;
}
inline void RPCMethodConfig::set_timeout(float value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.timeout)
}

// optional uint32 cap_balance = 12;
inline bool RPCMethodConfig::_internal_has_cap_balance() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_cap_balance() const {
  return _internal_has_cap_balance();
}
inline void RPCMethodConfig::clear_cap_balance() {
  cap_balance_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_cap_balance() const {
  return cap_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::cap_balance() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.cap_balance)
  return _internal_cap_balance();
}
inline void RPCMethodConfig::_internal_set_cap_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  cap_balance_ = value;
}
inline void RPCMethodConfig::set_cap_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cap_balance(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.cap_balance)
}

// optional float income_per_second = 13 [default = 0];
inline bool RPCMethodConfig::_internal_has_income_per_second() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_income_per_second() const {
  return _internal_has_income_per_second();
}
inline void RPCMethodConfig::clear_income_per_second() {
  income_per_second_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float RPCMethodConfig::_internal_income_per_second() const {
  return income_per_second_;
}
inline float RPCMethodConfig::income_per_second() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.income_per_second)
  return _internal_income_per_second();
}
inline void RPCMethodConfig::_internal_set_income_per_second(float value) {
  _has_bits_[0] |= 0x00000400u;
  income_per_second_ = value;
}
inline void RPCMethodConfig::set_income_per_second(float value) {
  _internal_set_income_per_second(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.income_per_second)
}

// optional uint32 service_hash = 14;
inline bool RPCMethodConfig::_internal_has_service_hash() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_service_hash() const {
  return _internal_has_service_hash();
}
inline void RPCMethodConfig::clear_service_hash() {
  service_hash_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_service_hash() const {
  return service_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::service_hash() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.service_hash)
  return _internal_service_hash();
}
inline void RPCMethodConfig::_internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  service_hash_ = value;
}
inline void RPCMethodConfig::set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_hash(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.service_hash)
}

// optional uint32 method_id = 15;
inline bool RPCMethodConfig::_internal_has_method_id() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RPCMethodConfig::has_method_id() const {
  return _internal_has_method_id();
}
inline void RPCMethodConfig::clear_method_id() {
  method_id_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::_internal_method_id() const {
  return method_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMethodConfig::method_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.method_id)
  return _internal_method_id();
}
inline void RPCMethodConfig::_internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  method_id_ = value;
}
inline void RPCMethodConfig::set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_method_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.method_id)
}

// -------------------------------------------------------------------

// RPCMeterConfig

// repeated .bgs.protocol.config.RPCMethodConfig method = 1;
inline int RPCMeterConfig::_internal_method_size() const {
  return method_.size();
}
inline int RPCMeterConfig::method_size() const {
  return _internal_method_size();
}
inline void RPCMeterConfig::clear_method() {
  method_.Clear();
}
inline ::bgs::protocol::config::RPCMethodConfig* RPCMeterConfig::mutable_method(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.RPCMeterConfig.method)
  return method_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig >*
RPCMeterConfig::mutable_method() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.config.RPCMeterConfig.method)
  return &method_;
}
inline const ::bgs::protocol::config::RPCMethodConfig& RPCMeterConfig::_internal_method(int index) const {
  return method_.Get(index);
}
inline const ::bgs::protocol::config::RPCMethodConfig& RPCMeterConfig::method(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.method)
  return _internal_method(index);
}
inline ::bgs::protocol::config::RPCMethodConfig* RPCMeterConfig::_internal_add_method() {
  return method_.Add();
}
inline ::bgs::protocol::config::RPCMethodConfig* RPCMeterConfig::add_method() {
  // @@protoc_insertion_point(field_add:bgs.protocol.config.RPCMeterConfig.method)
  return _internal_add_method();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig >&
RPCMeterConfig::method() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.config.RPCMeterConfig.method)
  return method_;
}

// optional uint32 income_per_second = 2 [default = 1];
inline bool RPCMeterConfig::_internal_has_income_per_second() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RPCMeterConfig::has_income_per_second() const {
  return _internal_has_income_per_second();
}
inline void RPCMeterConfig::clear_income_per_second() {
  income_per_second_ = 1u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMeterConfig::_internal_income_per_second() const {
  return income_per_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMeterConfig::income_per_second() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.income_per_second)
  return _internal_income_per_second();
}
inline void RPCMeterConfig::_internal_set_income_per_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  income_per_second_ = value;
}
inline void RPCMeterConfig::set_income_per_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_income_per_second(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMeterConfig.income_per_second)
}

// optional uint32 initial_balance = 3;
inline bool RPCMeterConfig::_internal_has_initial_balance() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCMeterConfig::has_initial_balance() const {
  return _internal_has_initial_balance();
}
inline void RPCMeterConfig::clear_initial_balance() {
  initial_balance_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMeterConfig::_internal_initial_balance() const {
  return initial_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMeterConfig::initial_balance() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.initial_balance)
  return _internal_initial_balance();
}
inline void RPCMeterConfig::_internal_set_initial_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  initial_balance_ = value;
}
inline void RPCMeterConfig::set_initial_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_initial_balance(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMeterConfig.initial_balance)
}

// optional uint32 cap_balance = 4;
inline bool RPCMeterConfig::_internal_has_cap_balance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCMeterConfig::has_cap_balance() const {
  return _internal_has_cap_balance();
}
inline void RPCMeterConfig::clear_cap_balance() {
  cap_balance_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMeterConfig::_internal_cap_balance() const {
  return cap_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCMeterConfig::cap_balance() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.cap_balance)
  return _internal_cap_balance();
}
inline void RPCMeterConfig::_internal_set_cap_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cap_balance_ = value;
}
inline void RPCMeterConfig::set_cap_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cap_balance(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMeterConfig.cap_balance)
}

// optional float startup_period = 5 [default = 0];
inline bool RPCMeterConfig::_internal_has_startup_period() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RPCMeterConfig::has_startup_period() const {
  return _internal_has_startup_period();
}
inline void RPCMeterConfig::clear_startup_period() {
  startup_period_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RPCMeterConfig::_internal_startup_period() const {
  return startup_period_;
}
inline float RPCMeterConfig::startup_period() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.startup_period)
  return _internal_startup_period();
}
inline void RPCMeterConfig::_internal_set_startup_period(float value) {
  _has_bits_[0] |= 0x00000004u;
  startup_period_ = value;
}
inline void RPCMeterConfig::set_startup_period(float value) {
  _internal_set_startup_period(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMeterConfig.startup_period)
}

// -------------------------------------------------------------------

// ProtocolAlias

// required string server_service_name = 1;
inline bool ProtocolAlias::_internal_has_server_service_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtocolAlias::has_server_service_name() const {
  return _internal_has_server_service_name();
}
inline void ProtocolAlias::clear_server_service_name() {
  server_service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtocolAlias::server_service_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.ProtocolAlias.server_service_name)
  return _internal_server_service_name();
}
inline void ProtocolAlias::set_server_service_name(const std::string& value) {
  _internal_set_server_service_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.ProtocolAlias.server_service_name)
}
inline std::string* ProtocolAlias::mutable_server_service_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.ProtocolAlias.server_service_name)
  return _internal_mutable_server_service_name();
}
inline const std::string& ProtocolAlias::_internal_server_service_name() const {
  return server_service_name_.GetNoArena();
}
inline void ProtocolAlias::_internal_set_server_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  server_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtocolAlias::set_server_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  server_service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.config.ProtocolAlias.server_service_name)
}
inline void ProtocolAlias::set_server_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  server_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.config.ProtocolAlias.server_service_name)
}
inline void ProtocolAlias::set_server_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  server_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.config.ProtocolAlias.server_service_name)
}
inline std::string* ProtocolAlias::_internal_mutable_server_service_name() {
  _has_bits_[0] |= 0x00000001u;
  return server_service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtocolAlias::release_server_service_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.config.ProtocolAlias.server_service_name)
  if (!_internal_has_server_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return server_service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolAlias::set_allocated_server_service_name(std::string* server_service_name) {
  if (server_service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_service_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.config.ProtocolAlias.server_service_name)
}

// required string client_service_name = 2;
inline bool ProtocolAlias::_internal_has_client_service_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtocolAlias::has_client_service_name() const {
  return _internal_has_client_service_name();
}
inline void ProtocolAlias::clear_client_service_name() {
  client_service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProtocolAlias::client_service_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.ProtocolAlias.client_service_name)
  return _internal_client_service_name();
}
inline void ProtocolAlias::set_client_service_name(const std::string& value) {
  _internal_set_client_service_name(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.ProtocolAlias.client_service_name)
}
inline std::string* ProtocolAlias::mutable_client_service_name() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.ProtocolAlias.client_service_name)
  return _internal_mutable_client_service_name();
}
inline const std::string& ProtocolAlias::_internal_client_service_name() const {
  return client_service_name_.GetNoArena();
}
inline void ProtocolAlias::_internal_set_client_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtocolAlias::set_client_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  client_service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.config.ProtocolAlias.client_service_name)
}
inline void ProtocolAlias::set_client_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  client_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.config.ProtocolAlias.client_service_name)
}
inline void ProtocolAlias::set_client_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  client_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.config.ProtocolAlias.client_service_name)
}
inline std::string* ProtocolAlias::_internal_mutable_client_service_name() {
  _has_bits_[0] |= 0x00000002u;
  return client_service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtocolAlias::release_client_service_name() {
  // @@protoc_insertion_point(field_release:bgs.protocol.config.ProtocolAlias.client_service_name)
  if (!_internal_has_client_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return client_service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolAlias::set_allocated_client_service_name(std::string* client_service_name) {
  if (client_service_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_service_name);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.config.ProtocolAlias.client_service_name)
}

// -------------------------------------------------------------------

// ServiceAliases

// repeated .bgs.protocol.config.ProtocolAlias protocol_alias = 1;
inline int ServiceAliases::_internal_protocol_alias_size() const {
  return protocol_alias_.size();
}
inline int ServiceAliases::protocol_alias_size() const {
  return _internal_protocol_alias_size();
}
inline void ServiceAliases::clear_protocol_alias() {
  protocol_alias_.Clear();
}
inline ::bgs::protocol::config::ProtocolAlias* ServiceAliases::mutable_protocol_alias(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.ServiceAliases.protocol_alias)
  return protocol_alias_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias >*
ServiceAliases::mutable_protocol_alias() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.config.ServiceAliases.protocol_alias)
  return &protocol_alias_;
}
inline const ::bgs::protocol::config::ProtocolAlias& ServiceAliases::_internal_protocol_alias(int index) const {
  return protocol_alias_.Get(index);
}
inline const ::bgs::protocol::config::ProtocolAlias& ServiceAliases::protocol_alias(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.ServiceAliases.protocol_alias)
  return _internal_protocol_alias(index);
}
inline ::bgs::protocol::config::ProtocolAlias* ServiceAliases::_internal_add_protocol_alias() {
  return protocol_alias_.Add();
}
inline ::bgs::protocol::config::ProtocolAlias* ServiceAliases::add_protocol_alias() {
  // @@protoc_insertion_point(field_add:bgs.protocol.config.ServiceAliases.protocol_alias)
  return _internal_add_protocol_alias();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias >&
ServiceAliases::protocol_alias() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.config.ServiceAliases.protocol_alias)
  return protocol_alias_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frpc_5fconfig_2eproto
