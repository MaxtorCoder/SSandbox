// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/rpc_types.proto

#include "bgs/low/pb/client/rpc_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ErrorInfo_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FanoutTarget_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class NO_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NO_RESPONSE> _instance;
} _NO_RESPONSE_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
class ProcessIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessId> _instance;
} _ProcessId_default_instance_;
class ObjectAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectAddress> _instance;
} _ObjectAddress_default_instance_;
class NoDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoData> _instance;
} _NoData_default_instance_;
class ErrorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorInfo> _instance;
} _ErrorInfo_default_instance_;
class FanoutTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FanoutTarget> _instance;
} _FanoutTarget_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class KafkaHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KafkaHeader> _instance;
} _KafkaHeader_default_instance_;
}  // namespace protocol
}  // namespace bgs
static void InitDefaultsscc_info_Address_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_Address_default_instance_;
    new (ptr) ::bgs::protocol::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Address_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Address_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ErrorInfo_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_ErrorInfo_default_instance_;
    new (ptr) ::bgs::protocol::ErrorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::ErrorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ErrorInfo_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ErrorInfo_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {
      &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_FanoutTarget_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_FanoutTarget_default_instance_;
    new (ptr) ::bgs::protocol::FanoutTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::FanoutTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FanoutTarget_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FanoutTarget_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_Header_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_Header_default_instance_;
    new (ptr) ::bgs::protocol::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Header_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {
      &scc_info_ErrorInfo_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
      &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
      &scc_info_FanoutTarget_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_KafkaHeader_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_KafkaHeader_default_instance_;
    new (ptr) ::bgs::protocol::KafkaHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::KafkaHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KafkaHeader_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KafkaHeader_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {
      &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_NO_RESPONSE_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_NO_RESPONSE_default_instance_;
    new (ptr) ::bgs::protocol::NO_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::NO_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NO_RESPONSE_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NO_RESPONSE_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_NoData_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_NoData_default_instance_;
    new (ptr) ::bgs::protocol::NoData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::NoData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoData_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoData_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_ObjectAddress_default_instance_;
    new (ptr) ::bgs::protocol::ObjectAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::ObjectAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {
      &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bgs::protocol::_ProcessId_default_instance_;
    new (ptr) ::bgs::protocol::ProcessId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bgs::protocol::ProcessId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::NO_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::NO_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Address, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Address, address_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Address, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ProcessId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ProcessId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ProcessId, label_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ProcessId, epoch_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ObjectAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ObjectAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ObjectAddress, host_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ObjectAddress, object_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::NoData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::NoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ErrorInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ErrorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ErrorInfo, object_address_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ErrorInfo, status_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ErrorInfo, service_hash_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::ErrorInfo, method_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::FanoutTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::FanoutTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::FanoutTarget, client_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::FanoutTarget, key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, service_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, method_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, token_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, object_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, size_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, status_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, error_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, timeout_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, is_response_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, forward_targets_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, service_hash_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, client_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, fanout_target_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::Header, client_id_fanout_target_),
  1,
  2,
  4,
  3,
  5,
  6,
  ~0u,
  8,
  7,
  ~0u,
  9,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, service_hash_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, method_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, token_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, object_id_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, size_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, status_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, timeout_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, forward_target_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, return_topic_),
  PROTOBUF_FIELD_OFFSET(::bgs::protocol::KafkaHeader, client_id_),
  3,
  4,
  6,
  5,
  7,
  9,
  8,
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::bgs::protocol::NO_RESPONSE)},
  { 5, 12, sizeof(::bgs::protocol::Address)},
  { 14, 21, sizeof(::bgs::protocol::ProcessId)},
  { 23, 30, sizeof(::bgs::protocol::ObjectAddress)},
  { 32, 37, sizeof(::bgs::protocol::NoData)},
  { 37, 46, sizeof(::bgs::protocol::ErrorInfo)},
  { 50, 57, sizeof(::bgs::protocol::FanoutTarget)},
  { 59, 78, sizeof(::bgs::protocol::Header)},
  { 92, 107, sizeof(::bgs::protocol::KafkaHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_NO_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_ProcessId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_ObjectAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_NoData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_ErrorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_FanoutTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bgs::protocol::_KafkaHeader_default_instance_),
};

const char descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!bgs/low/pb/client/rpc_types.proto\022\014bgs"
  ".protocol\0327bgs/low/pb/client/global_exte"
  "nsions/field_options.proto\0328bgs/low/pb/c"
  "lient/global_extensions/method_options.p"
  "roto\0329bgs/low/pb/client/global_extension"
  "s/message_options.proto\0329bgs/low/pb/clie"
  "nt/global_extensions/service_options.pro"
  "to\"\r\n\013NO_RESPONSE\"(\n\007Address\022\017\n\007address\030"
  "\001 \002(\t\022\014\n\004port\030\002 \001(\r\"3\n\tProcessId\022\027\n\005labe"
  "l\030\001 \002(\rB\010\212\371+\004\022\002\020\000\022\r\n\005epoch\030\002 \002(\r\"L\n\rObje"
  "ctAddress\022%\n\004host\030\001 \002(\0132\027.bgs.protocol.P"
  "rocessId\022\024\n\tobject_id\030\002 \001(\004:\0010\"\010\n\006NoData"
  "\"y\n\tErrorInfo\0223\n\016object_address\030\001 \002(\0132\033."
  "bgs.protocol.ObjectAddress\022\016\n\006status\030\002 \002"
  "(\r\022\024\n\014service_hash\030\003 \002(\r\022\021\n\tmethod_id\030\004 "
  "\002(\r\".\n\014FanoutTarget\022\021\n\tclient_id\030\001 \001(\t\022\013"
  "\n\003key\030\002 \001(\014\"\365\002\n\006Header\022\022\n\nservice_id\030\001 \002"
  "(\r\022\021\n\tmethod_id\030\002 \001(\r\022\r\n\005token\030\003 \002(\r\022\024\n\t"
  "object_id\030\004 \001(\004:\0010\022\017\n\004size\030\005 \001(\r:\0010\022\021\n\006s"
  "tatus\030\006 \001(\r:\0010\022&\n\005error\030\007 \003(\0132\027.bgs.prot"
  "ocol.ErrorInfo\022\017\n\007timeout\030\010 \001(\004\022\023\n\013is_re"
  "sponse\030\t \001(\010\0220\n\017forward_targets\030\n \003(\0132\027."
  "bgs.protocol.ProcessId\022\024\n\014service_hash\030\013"
  " \001(\007\022\021\n\tclient_id\030\r \001(\t\0221\n\rfanout_target"
  "\030\016 \003(\0132\032.bgs.protocol.FanoutTarget\022\037\n\027cl"
  "ient_id_fanout_target\030\017 \003(\t\"\352\001\n\013KafkaHea"
  "der\022\024\n\014service_hash\030\001 \001(\007\022\021\n\tmethod_id\030\002"
  " \001(\r\022\r\n\005token\030\003 \001(\r\022\024\n\tobject_id\030\004 \001(\004:\001"
  "0\022\017\n\004size\030\005 \001(\r:\0010\022\021\n\006status\030\006 \001(\r:\0010\022\017\n"
  "\007timeout\030\007 \001(\004\022/\n\016forward_target\030\010 \001(\0132\027"
  ".bgs.protocol.ProcessId\022\024\n\014return_topic\030"
  "\t \001(\t\022\021\n\tclient_id\030\013 \001(\tB\031\n\rbnet.protoco"
  "lB\010RpcProtoP\000P\001P\002P\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto_deps[4] = {
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2ffield_5foptions_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fmessage_5foptions_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fmethod_5foptions_2eproto,
  &::descriptor_table_bgs_2flow_2fpb_2fclient_2fglobal_5fextensions_2fservice_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto_sccs[9] = {
  &scc_info_Address_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
  &scc_info_ErrorInfo_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
  &scc_info_FanoutTarget_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
  &scc_info_Header_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
  &scc_info_KafkaHeader_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
  &scc_info_NO_RESPONSE_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
  &scc_info_NoData_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
  &scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
  &scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto_once;
static bool descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto = {
  &descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto_initialized, descriptor_table_protodef_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto, "bgs/low/pb/client/rpc_types.proto", 1299,
  &descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto_once, descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto_sccs, descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto_deps, 9, 4,
  schemas, file_default_instances, TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto::offsets,
  file_level_metadata_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto, 9, file_level_enum_descriptors_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto, file_level_service_descriptors_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto)), true);
namespace bgs {
namespace protocol {

// ===================================================================

void NO_RESPONSE::InitAsDefaultInstance() {
}
class NO_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<NO_RESPONSE>()._has_bits_);
};

NO_RESPONSE::NO_RESPONSE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.NO_RESPONSE)
}
NO_RESPONSE::NO_RESPONSE(const NO_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.NO_RESPONSE)
}

void NO_RESPONSE::SharedCtor() {
}

NO_RESPONSE::~NO_RESPONSE() {
  // @@protoc_insertion_point(destructor:bgs.protocol.NO_RESPONSE)
  SharedDtor();
}

void NO_RESPONSE::SharedDtor() {
}

void NO_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NO_RESPONSE& NO_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NO_RESPONSE_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void NO_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.NO_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NO_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NO_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.NO_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.NO_RESPONSE)
  return target;
}

size_t NO_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.NO_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NO_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.NO_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const NO_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NO_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.NO_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.NO_RESPONSE)
    MergeFrom(*source);
  }
}

void NO_RESPONSE::MergeFrom(const NO_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.NO_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NO_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.NO_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NO_RESPONSE::CopyFrom(const NO_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.NO_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NO_RESPONSE::IsInitialized() const {
  return true;
}

void NO_RESPONSE::InternalSwap(NO_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NO_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Address::InitAsDefaultInstance() {
}
class Address::_Internal {
 public:
  using HasBits = decltype(std::declval<Address>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Address::Address()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:bgs.protocol.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.Address.address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.Address.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.Address)
  size_t total_size = 0;

  // required string address = 1;
  if (_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 port = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessId::InitAsDefaultInstance() {
}
class ProcessId::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessId>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProcessId::ProcessId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.ProcessId)
}
ProcessId::ProcessId(const ProcessId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&label_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.ProcessId)
}

void ProcessId::SharedCtor() {
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&label_)) + sizeof(epoch_));
}

ProcessId::~ProcessId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.ProcessId)
  SharedDtor();
}

void ProcessId::SharedDtor() {
}

void ProcessId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessId& ProcessId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessId_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ProcessId::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.ProcessId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&label_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&epoch_) -
        reinterpret_cast<char*>(&label_)) + sizeof(epoch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ProcessId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 label = 1 [(.bgs.protocol.valid) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_epoch(&has_bits);
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.ProcessId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 label = 1 [(.bgs.protocol.valid) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_label(), target);
  }

  // required uint32 epoch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.ProcessId)
  return target;
}

size_t ProcessId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.ProcessId)
  size_t total_size = 0;

  if (_internal_has_label()) {
    // required uint32 label = 1 [(.bgs.protocol.valid) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (_internal_has_epoch()) {
    // required uint32 epoch = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());
  }

  return total_size;
}
size_t ProcessId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.ProcessId)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 label = 1 [(.bgs.protocol.valid) = {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());

    // required uint32 epoch = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.ProcessId)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.ProcessId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.ProcessId)
    MergeFrom(*source);
  }
}

void ProcessId::MergeFrom(const ProcessId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.ProcessId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000002u) {
      epoch_ = from.epoch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.ProcessId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessId::CopyFrom(const ProcessId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.ProcessId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProcessId::InternalSwap(ProcessId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(label_, other->label_);
  swap(epoch_, other->epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectAddress::InitAsDefaultInstance() {
  ::bgs::protocol::_ObjectAddress_default_instance_._instance.get_mutable()->host_ = const_cast< ::bgs::protocol::ProcessId*>(
      ::bgs::protocol::ProcessId::internal_default_instance());
}
class ObjectAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectAddress>()._has_bits_);
  static const ::bgs::protocol::ProcessId& host(const ObjectAddress* msg);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::ProcessId&
ObjectAddress::_Internal::host(const ObjectAddress* msg) {
  return *msg->host_;
}
ObjectAddress::ObjectAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.ObjectAddress)
}
ObjectAddress::ObjectAddress(const ObjectAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_host()) {
    host_ = new ::bgs::protocol::ProcessId(*from.host_);
  } else {
    host_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.ObjectAddress)
}

void ObjectAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  ::memset(&host_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&host_)) + sizeof(object_id_));
}

ObjectAddress::~ObjectAddress() {
  // @@protoc_insertion_point(destructor:bgs.protocol.ObjectAddress)
  SharedDtor();
}

void ObjectAddress::SharedDtor() {
  if (this != internal_default_instance()) delete host_;
}

void ObjectAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectAddress& ObjectAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectAddress_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ObjectAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.ObjectAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(host_ != nullptr);
    host_->Clear();
  }
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.ProcessId host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 object_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.ObjectAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.ProcessId host = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::host(this), target, stream);
  }

  // optional uint64 object_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.ObjectAddress)
  return target;
}

size_t ObjectAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.ObjectAddress)
  size_t total_size = 0;

  // required .bgs.protocol.ProcessId host = 1;
  if (_internal_has_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 object_id = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.ObjectAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.ObjectAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.ObjectAddress)
    MergeFrom(*source);
  }
}

void ObjectAddress::MergeFrom(const ObjectAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.ObjectAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_host()->::bgs::protocol::ProcessId::MergeFrom(from._internal_host());
    }
    if (cached_has_bits & 0x00000002u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.ObjectAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAddress::CopyFrom(const ObjectAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.ObjectAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_host()) {
    if (!host_->IsInitialized()) return false;
  }
  return true;
}

void ObjectAddress::InternalSwap(ObjectAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(host_, other->host_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoData::InitAsDefaultInstance() {
}
class NoData::_Internal {
 public:
  using HasBits = decltype(std::declval<NoData>()._has_bits_);
};

NoData::NoData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.NoData)
}
NoData::NoData(const NoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.NoData)
}

void NoData::SharedCtor() {
}

NoData::~NoData() {
  // @@protoc_insertion_point(destructor:bgs.protocol.NoData)
  SharedDtor();
}

void NoData::SharedDtor() {
}

void NoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoData& NoData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoData_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void NoData::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.NoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.NoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.NoData)
  return target;
}

size_t NoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.NoData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.NoData)
  GOOGLE_DCHECK_NE(&from, this);
  const NoData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.NoData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.NoData)
    MergeFrom(*source);
  }
}

void NoData::MergeFrom(const NoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.NoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NoData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.NoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoData::CopyFrom(const NoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.NoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoData::IsInitialized() const {
  return true;
}

void NoData::InternalSwap(NoData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorInfo::InitAsDefaultInstance() {
  ::bgs::protocol::_ErrorInfo_default_instance_._instance.get_mutable()->object_address_ = const_cast< ::bgs::protocol::ObjectAddress*>(
      ::bgs::protocol::ObjectAddress::internal_default_instance());
}
class ErrorInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorInfo>()._has_bits_);
  static const ::bgs::protocol::ObjectAddress& object_address(const ErrorInfo* msg);
  static void set_has_object_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_service_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_method_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::bgs::protocol::ObjectAddress&
ErrorInfo::_Internal::object_address(const ErrorInfo* msg) {
  return *msg->object_address_;
}
ErrorInfo::ErrorInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.ErrorInfo)
}
ErrorInfo::ErrorInfo(const ErrorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_object_address()) {
    object_address_ = new ::bgs::protocol::ObjectAddress(*from.object_address_);
  } else {
    object_address_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(method_id_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.ErrorInfo)
}

void ErrorInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorInfo_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  ::memset(&object_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_id_) -
      reinterpret_cast<char*>(&object_address_)) + sizeof(method_id_));
}

ErrorInfo::~ErrorInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.ErrorInfo)
  SharedDtor();
}

void ErrorInfo::SharedDtor() {
  if (this != internal_default_instance()) delete object_address_;
}

void ErrorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorInfo& ErrorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorInfo_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void ErrorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.ErrorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(object_address_ != nullptr);
    object_address_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_id_) -
        reinterpret_cast<char*>(&status_)) + sizeof(method_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ErrorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .bgs.protocol.ObjectAddress object_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 service_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_service_hash(&has_bits);
          service_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 method_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_method_id(&has_bits);
          method_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.ErrorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .bgs.protocol.ObjectAddress object_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object_address(this), target, stream);
  }

  // required uint32 status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status(), target);
  }

  // required uint32 service_hash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_service_hash(), target);
  }

  // required uint32 method_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_method_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.ErrorInfo)
  return target;
}

size_t ErrorInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.ErrorInfo)
  size_t total_size = 0;

  if (_internal_has_object_address()) {
    // required .bgs.protocol.ObjectAddress object_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_address_);
  }

  if (_internal_has_status()) {
    // required uint32 status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (_internal_has_service_hash()) {
    // required uint32 service_hash = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_hash());
  }

  if (_internal_has_method_id()) {
    // required uint32 method_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_method_id());
  }

  return total_size;
}
size_t ErrorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.ErrorInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .bgs.protocol.ObjectAddress object_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_address_);

    // required uint32 status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

    // required uint32 service_hash = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_hash());

    // required uint32 method_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_method_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.ErrorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.ErrorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.ErrorInfo)
    MergeFrom(*source);
  }
}

void ErrorInfo::MergeFrom(const ErrorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.ErrorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_object_address()->::bgs::protocol::ObjectAddress::MergeFrom(from._internal_object_address());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_hash_ = from.service_hash_;
    }
    if (cached_has_bits & 0x00000008u) {
      method_id_ = from.method_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ErrorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.ErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorInfo::CopyFrom(const ErrorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.ErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (_internal_has_object_address()) {
    if (!object_address_->IsInitialized()) return false;
  }
  return true;
}

void ErrorInfo::InternalSwap(ErrorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(object_address_, other->object_address_);
  swap(status_, other->status_);
  swap(service_hash_, other->service_hash_);
  swap(method_id_, other->method_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FanoutTarget::InitAsDefaultInstance() {
}
class FanoutTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<FanoutTarget>()._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FanoutTarget::FanoutTarget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.FanoutTarget)
}
FanoutTarget::FanoutTarget(const FanoutTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_id()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.FanoutTarget)
}

void FanoutTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FanoutTarget_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FanoutTarget::~FanoutTarget() {
  // @@protoc_insertion_point(destructor:bgs.protocol.FanoutTarget)
  SharedDtor();
}

void FanoutTarget::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FanoutTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FanoutTarget& FanoutTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FanoutTarget_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void FanoutTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.FanoutTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FanoutTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.FanoutTarget.client_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FanoutTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.FanoutTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.FanoutTarget.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.FanoutTarget)
  return target;
}

size_t FanoutTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.FanoutTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_id());
    }

    // optional bytes key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FanoutTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.FanoutTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const FanoutTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FanoutTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.FanoutTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.FanoutTarget)
    MergeFrom(*source);
  }
}

void FanoutTarget::MergeFrom(const FanoutTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.FanoutTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
}

void FanoutTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.FanoutTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FanoutTarget::CopyFrom(const FanoutTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.FanoutTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanoutTarget::IsInitialized() const {
  return true;
}

void FanoutTarget::InternalSwap(FanoutTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FanoutTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_response(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_service_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Header::Header()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      error_(from.error_),
      forward_targets_(from.forward_targets_),
      fanout_target_(from.fanout_target_),
      client_id_fanout_target_(from.client_id_fanout_target_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_id()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  ::memcpy(&service_id_, &from.service_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_hash_) -
    reinterpret_cast<char*>(&service_id_)) + sizeof(service_hash_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_hash_) -
      reinterpret_cast<char*>(&service_id_)) + sizeof(service_hash_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:bgs.protocol.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.Clear();
  forward_targets_.Clear();
  fanout_target_.Clear();
  client_id_fanout_target_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&service_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_response_) -
        reinterpret_cast<char*>(&service_id_)) + sizeof(is_response_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_hash_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(service_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 method_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_method_id(&has_bits);
          method_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 object_id = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.ErrorInfo error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 timeout = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_response(&has_bits);
          is_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.ProcessId forward_targets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forward_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed32 service_hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_service_hash(&has_bits);
          service_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string client_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.Header.client_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bgs.protocol.FanoutTarget fanout_target = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fanout_target(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string client_id_fanout_target = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_client_id_fanout_target();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.Header.client_id_fanout_target");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_service_id(), target);
  }

  // optional uint32 method_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_method_id(), target);
  }

  // required uint32 token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_token(), target);
  }

  // optional uint64 object_id = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_object_id(), target);
  }

  // optional uint32 size = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_size(), target);
  }

  // optional uint32 status = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  // repeated .bgs.protocol.ErrorInfo error = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_error(i), target, stream);
  }

  // optional uint64 timeout = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timeout(), target);
  }

  // optional bool is_response = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_response(), target);
  }

  // repeated .bgs.protocol.ProcessId forward_targets = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_forward_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_forward_targets(i), target, stream);
  }

  // optional fixed32 service_hash = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_service_hash(), target);
  }

  // optional string client_id = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.Header.client_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_client_id(), target);
  }

  // repeated .bgs.protocol.FanoutTarget fanout_target = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fanout_target_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_fanout_target(i), target, stream);
  }

  // repeated string client_id_fanout_target = 15;
  for (int i = 0, n = this->_internal_client_id_fanout_target_size(); i < n; i++) {
    const auto& s = this->_internal_client_id_fanout_target(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.Header.client_id_fanout_target");
    target = stream->WriteString(15, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.Header)
  return target;
}

size_t Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bgs.protocol.Header)
  size_t total_size = 0;

  if (_internal_has_service_id()) {
    // required uint32 service_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_id());
  }

  if (_internal_has_token()) {
    // required uint32 token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_token());
  }

  return total_size;
}
size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.Header)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000012) ^ 0x00000012) == 0) {  // All required fields are present.
    // required uint32 service_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_id());

    // required uint32 token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bgs.protocol.ErrorInfo error = 7;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.ProcessId forward_targets = 10;
  total_size += 1UL * this->_internal_forward_targets_size();
  for (const auto& msg : this->forward_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bgs.protocol.FanoutTarget fanout_target = 14;
  total_size += 1UL * this->_internal_fanout_target_size();
  for (const auto& msg : this->fanout_target_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string client_id_fanout_target = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(client_id_fanout_target_.size());
  for (int i = 0, n = client_id_fanout_target_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      client_id_fanout_target_.Get(i));
  }

  // optional string client_id = 13;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 method_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_method_id());
    }

    // optional uint64 object_id = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_object_id());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional uint32 size = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size());
    }

    // optional uint32 status = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

    // optional bool is_response = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 timeout = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timeout());
    }

    // optional fixed32 service_hash = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_.MergeFrom(from.error_);
  forward_targets_.MergeFrom(from.forward_targets_);
  fanout_target_.MergeFrom(from.fanout_target_);
  client_id_fanout_target_.MergeFrom(from.client_id_fanout_target_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_id_ = from.method_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      object_id_ = from.object_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_response_ = from.is_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000200u) {
      service_hash_ = from.service_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000012) != 0x00000012) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(forward_targets_)) return false;
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_.InternalSwap(&other->error_);
  forward_targets_.InternalSwap(&other->forward_targets_);
  fanout_target_.InternalSwap(&other->fanout_target_);
  client_id_fanout_target_.InternalSwap(&other->client_id_fanout_target_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(service_id_, other->service_id_);
  swap(method_id_, other->method_id_);
  swap(object_id_, other->object_id_);
  swap(token_, other->token_);
  swap(size_, other->size_);
  swap(status_, other->status_);
  swap(is_response_, other->is_response_);
  swap(timeout_, other->timeout_);
  swap(service_hash_, other->service_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KafkaHeader::InitAsDefaultInstance() {
  ::bgs::protocol::_KafkaHeader_default_instance_._instance.get_mutable()->forward_target_ = const_cast< ::bgs::protocol::ProcessId*>(
      ::bgs::protocol::ProcessId::internal_default_instance());
}
class KafkaHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<KafkaHeader>()._has_bits_);
  static void set_has_service_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_method_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::bgs::protocol::ProcessId& forward_target(const KafkaHeader* msg);
  static void set_has_forward_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_return_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::bgs::protocol::ProcessId&
KafkaHeader::_Internal::forward_target(const KafkaHeader* msg) {
  return *msg->forward_target_;
}
KafkaHeader::KafkaHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.KafkaHeader)
}
KafkaHeader::KafkaHeader(const KafkaHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  return_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_return_topic()) {
    return_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.return_topic_);
  }
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_id()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from._internal_has_forward_target()) {
    forward_target_ = new ::bgs::protocol::ProcessId(*from.forward_target_);
  } else {
    forward_target_ = nullptr;
  }
  ::memcpy(&service_hash_, &from.service_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&service_hash_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.KafkaHeader)
}

void KafkaHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KafkaHeader_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&forward_target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&forward_target_)) + sizeof(status_));
}

KafkaHeader::~KafkaHeader() {
  // @@protoc_insertion_point(destructor:bgs.protocol.KafkaHeader)
  SharedDtor();
}

void KafkaHeader::SharedDtor() {
  return_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete forward_target_;
}

void KafkaHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KafkaHeader& KafkaHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KafkaHeader_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void KafkaHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:bgs.protocol.KafkaHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      return_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(forward_target_ != nullptr);
      forward_target_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&service_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&service_hash_)) + sizeof(size_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* KafkaHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 service_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_service_hash(&has_bits);
          service_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 method_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_method_id(&has_bits);
          method_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 object_id = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .bgs.protocol.ProcessId forward_target = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string return_topic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_return_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.KafkaHeader.return_topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string client_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bgs.protocol.KafkaHeader.client_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KafkaHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.KafkaHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 service_hash = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_service_hash(), target);
  }

  // optional uint32 method_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_method_id(), target);
  }

  // optional uint32 token = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_token(), target);
  }

  // optional uint64 object_id = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_object_id(), target);
  }

  // optional uint32 size = 5 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_size(), target);
  }

  // optional uint32 status = 6 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  // optional uint64 timeout = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timeout(), target);
  }

  // optional .bgs.protocol.ProcessId forward_target = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::forward_target(this), target, stream);
  }

  // optional string return_topic = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_return_topic().data(), static_cast<int>(this->_internal_return_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.KafkaHeader.return_topic");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_return_topic(), target);
  }

  // optional string client_id = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "bgs.protocol.KafkaHeader.client_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.KafkaHeader)
  return target;
}

size_t KafkaHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bgs.protocol.KafkaHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string return_topic = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_return_topic());
    }

    // optional string client_id = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_id());
    }

    // optional .bgs.protocol.ProcessId forward_target = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_target_);
    }

    // optional fixed32 service_hash = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 method_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_method_id());
    }

    // optional uint64 object_id = 4 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_object_id());
    }

    // optional uint32 token = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_token());
    }

    // optional uint32 size = 5 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 timeout = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timeout());
    }

    // optional uint32 status = 6 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KafkaHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bgs.protocol.KafkaHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const KafkaHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KafkaHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bgs.protocol.KafkaHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bgs.protocol.KafkaHeader)
    MergeFrom(*source);
  }
}

void KafkaHeader::MergeFrom(const KafkaHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bgs.protocol.KafkaHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      return_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.return_topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_forward_target()->::bgs::protocol::ProcessId::MergeFrom(from._internal_forward_target());
    }
    if (cached_has_bits & 0x00000008u) {
      service_hash_ = from.service_hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      method_id_ = from.method_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      object_id_ = from.object_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000200u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KafkaHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bgs.protocol.KafkaHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KafkaHeader::CopyFrom(const KafkaHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bgs.protocol.KafkaHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KafkaHeader::IsInitialized() const {
  if (_internal_has_forward_target()) {
    if (!forward_target_->IsInitialized()) return false;
  }
  return true;
}

void KafkaHeader::InternalSwap(KafkaHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  return_topic_.Swap(&other->return_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(forward_target_, other->forward_target_);
  swap(service_hash_, other->service_hash_);
  swap(method_id_, other->method_id_);
  swap(object_id_, other->object_id_);
  swap(token_, other->token_);
  swap(size_, other->size_);
  swap(timeout_, other->timeout_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KafkaHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bgs::protocol::NO_RESPONSE* Arena::CreateMaybeMessage< ::bgs::protocol::NO_RESPONSE >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::NO_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::Address* Arena::CreateMaybeMessage< ::bgs::protocol::Address >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::ProcessId* Arena::CreateMaybeMessage< ::bgs::protocol::ProcessId >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::ProcessId >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::ObjectAddress* Arena::CreateMaybeMessage< ::bgs::protocol::ObjectAddress >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::ObjectAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::NoData* Arena::CreateMaybeMessage< ::bgs::protocol::NoData >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::NoData >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::ErrorInfo* Arena::CreateMaybeMessage< ::bgs::protocol::ErrorInfo >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::ErrorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::FanoutTarget* Arena::CreateMaybeMessage< ::bgs::protocol::FanoutTarget >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::FanoutTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::Header* Arena::CreateMaybeMessage< ::bgs::protocol::Header >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::bgs::protocol::KafkaHeader* Arena::CreateMaybeMessage< ::bgs::protocol::KafkaHeader >(Arena* arena) {
  return Arena::CreateInternal< ::bgs::protocol::KafkaHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
