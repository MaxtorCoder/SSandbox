// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgs/low/pb/client/rpc_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bgs/low/pb/client/global_extensions/field_options.pb.h"
#include "bgs/low/pb/client/global_extensions/method_options.pb.h"
#include "bgs/low/pb/client/global_extensions/message_options.pb.h"
#include "bgs/low/pb/client/global_extensions/service_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
namespace bgs {
namespace protocol {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class ErrorInfo;
class ErrorInfoDefaultTypeInternal;
extern ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
class FanoutTarget;
class FanoutTargetDefaultTypeInternal;
extern FanoutTargetDefaultTypeInternal _FanoutTarget_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class KafkaHeader;
class KafkaHeaderDefaultTypeInternal;
extern KafkaHeaderDefaultTypeInternal _KafkaHeader_default_instance_;
class NO_RESPONSE;
class NO_RESPONSEDefaultTypeInternal;
extern NO_RESPONSEDefaultTypeInternal _NO_RESPONSE_default_instance_;
class NoData;
class NoDataDefaultTypeInternal;
extern NoDataDefaultTypeInternal _NoData_default_instance_;
class ObjectAddress;
class ObjectAddressDefaultTypeInternal;
extern ObjectAddressDefaultTypeInternal _ObjectAddress_default_instance_;
class ProcessId;
class ProcessIdDefaultTypeInternal;
extern ProcessIdDefaultTypeInternal _ProcessId_default_instance_;
}  // namespace protocol
}  // namespace bgs
PROTOBUF_NAMESPACE_OPEN
template<> ::bgs::protocol::Address* Arena::CreateMaybeMessage<::bgs::protocol::Address>(Arena*);
template<> ::bgs::protocol::ErrorInfo* Arena::CreateMaybeMessage<::bgs::protocol::ErrorInfo>(Arena*);
template<> ::bgs::protocol::FanoutTarget* Arena::CreateMaybeMessage<::bgs::protocol::FanoutTarget>(Arena*);
template<> ::bgs::protocol::Header* Arena::CreateMaybeMessage<::bgs::protocol::Header>(Arena*);
template<> ::bgs::protocol::KafkaHeader* Arena::CreateMaybeMessage<::bgs::protocol::KafkaHeader>(Arena*);
template<> ::bgs::protocol::NO_RESPONSE* Arena::CreateMaybeMessage<::bgs::protocol::NO_RESPONSE>(Arena*);
template<> ::bgs::protocol::NoData* Arena::CreateMaybeMessage<::bgs::protocol::NoData>(Arena*);
template<> ::bgs::protocol::ObjectAddress* Arena::CreateMaybeMessage<::bgs::protocol::ObjectAddress>(Arena*);
template<> ::bgs::protocol::ProcessId* Arena::CreateMaybeMessage<::bgs::protocol::ProcessId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bgs {
namespace protocol {

// ===================================================================

class NO_RESPONSE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.NO_RESPONSE) */ {
 public:
  NO_RESPONSE();
  virtual ~NO_RESPONSE();

  NO_RESPONSE(const NO_RESPONSE& from);
  NO_RESPONSE(NO_RESPONSE&& from) noexcept
    : NO_RESPONSE() {
    *this = ::std::move(from);
  }

  inline NO_RESPONSE& operator=(const NO_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline NO_RESPONSE& operator=(NO_RESPONSE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NO_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NO_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const NO_RESPONSE*>(
               &_NO_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NO_RESPONSE& a, NO_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(NO_RESPONSE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NO_RESPONSE* New() const final {
    return CreateMaybeMessage<NO_RESPONSE>(nullptr);
  }

  NO_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NO_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NO_RESPONSE& from);
  void MergeFrom(const NO_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NO_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.NO_RESPONSE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bgs.protocol.NO_RESPONSE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Address :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // required string address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.Address)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ProcessId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.ProcessId) */ {
 public:
  ProcessId();
  virtual ~ProcessId();

  ProcessId(const ProcessId& from);
  ProcessId(ProcessId&& from) noexcept
    : ProcessId() {
    *this = ::std::move(from);
  }

  inline ProcessId& operator=(const ProcessId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessId& operator=(ProcessId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessId* internal_default_instance() {
    return reinterpret_cast<const ProcessId*>(
               &_ProcessId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessId& a, ProcessId& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessId* New() const final {
    return CreateMaybeMessage<ProcessId>(nullptr);
  }

  ProcessId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessId& from);
  void MergeFrom(const ProcessId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.ProcessId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kEpochFieldNumber = 2,
  };
  // required uint32 label = 1 [(.bgs.protocol.valid) = {
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 epoch = 2;
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.ProcessId)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ObjectAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.ObjectAddress) */ {
 public:
  ObjectAddress();
  virtual ~ObjectAddress();

  ObjectAddress(const ObjectAddress& from);
  ObjectAddress(ObjectAddress&& from) noexcept
    : ObjectAddress() {
    *this = ::std::move(from);
  }

  inline ObjectAddress& operator=(const ObjectAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAddress& operator=(ObjectAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectAddress* internal_default_instance() {
    return reinterpret_cast<const ObjectAddress*>(
               &_ObjectAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectAddress& a, ObjectAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectAddress* New() const final {
    return CreateMaybeMessage<ObjectAddress>(nullptr);
  }

  ObjectAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectAddress& from);
  void MergeFrom(const ObjectAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.ObjectAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // required .bgs.protocol.ProcessId host = 1;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::bgs::protocol::ProcessId& host() const;
  ::bgs::protocol::ProcessId* release_host();
  ::bgs::protocol::ProcessId* mutable_host();
  void set_allocated_host(::bgs::protocol::ProcessId* host);
  private:
  const ::bgs::protocol::ProcessId& _internal_host() const;
  ::bgs::protocol::ProcessId* _internal_mutable_host();
  public:

  // optional uint64 object_id = 2 [default = 0];
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.ObjectAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::ProcessId* host_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class NoData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.NoData) */ {
 public:
  NoData();
  virtual ~NoData();

  NoData(const NoData& from);
  NoData(NoData&& from) noexcept
    : NoData() {
    *this = ::std::move(from);
  }

  inline NoData& operator=(const NoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoData& operator=(NoData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoData* internal_default_instance() {
    return reinterpret_cast<const NoData*>(
               &_NoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NoData& a, NoData& b) {
    a.Swap(&b);
  }
  inline void Swap(NoData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoData* New() const final {
    return CreateMaybeMessage<NoData>(nullptr);
  }

  NoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoData& from);
  void MergeFrom(const NoData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.NoData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bgs.protocol.NoData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ErrorInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.ErrorInfo) */ {
 public:
  ErrorInfo();
  virtual ~ErrorInfo();

  ErrorInfo(const ErrorInfo& from);
  ErrorInfo(ErrorInfo&& from) noexcept
    : ErrorInfo() {
    *this = ::std::move(from);
  }

  inline ErrorInfo& operator=(const ErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorInfo& operator=(ErrorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorInfo* internal_default_instance() {
    return reinterpret_cast<const ErrorInfo*>(
               &_ErrorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ErrorInfo& a, ErrorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorInfo* New() const final {
    return CreateMaybeMessage<ErrorInfo>(nullptr);
  }

  ErrorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorInfo& from);
  void MergeFrom(const ErrorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.ErrorInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectAddressFieldNumber = 1,
    kStatusFieldNumber = 2,
    kServiceHashFieldNumber = 3,
    kMethodIdFieldNumber = 4,
  };
  // required .bgs.protocol.ObjectAddress object_address = 1;
  bool has_object_address() const;
  private:
  bool _internal_has_object_address() const;
  public:
  void clear_object_address();
  const ::bgs::protocol::ObjectAddress& object_address() const;
  ::bgs::protocol::ObjectAddress* release_object_address();
  ::bgs::protocol::ObjectAddress* mutable_object_address();
  void set_allocated_object_address(::bgs::protocol::ObjectAddress* object_address);
  private:
  const ::bgs::protocol::ObjectAddress& _internal_object_address() const;
  ::bgs::protocol::ObjectAddress* _internal_mutable_object_address();
  public:

  // required uint32 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 service_hash = 3;
  bool has_service_hash() const;
  private:
  bool _internal_has_service_hash() const;
  public:
  void clear_service_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash() const;
  void set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_hash() const;
  void _internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 method_id = 4;
  bool has_method_id() const;
  private:
  bool _internal_has_method_id() const;
  public:
  void clear_method_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id() const;
  void set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_method_id() const;
  void _internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.ErrorInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bgs::protocol::ObjectAddress* object_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class FanoutTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.FanoutTarget) */ {
 public:
  FanoutTarget();
  virtual ~FanoutTarget();

  FanoutTarget(const FanoutTarget& from);
  FanoutTarget(FanoutTarget&& from) noexcept
    : FanoutTarget() {
    *this = ::std::move(from);
  }

  inline FanoutTarget& operator=(const FanoutTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline FanoutTarget& operator=(FanoutTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FanoutTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FanoutTarget* internal_default_instance() {
    return reinterpret_cast<const FanoutTarget*>(
               &_FanoutTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FanoutTarget& a, FanoutTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(FanoutTarget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FanoutTarget* New() const final {
    return CreateMaybeMessage<FanoutTarget>(nullptr);
  }

  FanoutTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FanoutTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FanoutTarget& from);
  void MergeFrom(const FanoutTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FanoutTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.FanoutTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // optional string client_id = 1;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // optional bytes key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.FanoutTarget)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 7,
    kForwardTargetsFieldNumber = 10,
    kFanoutTargetFieldNumber = 14,
    kClientIdFanoutTargetFieldNumber = 15,
    kClientIdFieldNumber = 13,
    kServiceIdFieldNumber = 1,
    kMethodIdFieldNumber = 2,
    kObjectIdFieldNumber = 4,
    kTokenFieldNumber = 3,
    kSizeFieldNumber = 5,
    kStatusFieldNumber = 6,
    kIsResponseFieldNumber = 9,
    kTimeoutFieldNumber = 8,
    kServiceHashFieldNumber = 11,
  };
  // repeated .bgs.protocol.ErrorInfo error = 7;
  int error_size() const;
  private:
  int _internal_error_size() const;
  public:
  void clear_error();
  ::bgs::protocol::ErrorInfo* mutable_error(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ErrorInfo >*
      mutable_error();
  private:
  const ::bgs::protocol::ErrorInfo& _internal_error(int index) const;
  ::bgs::protocol::ErrorInfo* _internal_add_error();
  public:
  const ::bgs::protocol::ErrorInfo& error(int index) const;
  ::bgs::protocol::ErrorInfo* add_error();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ErrorInfo >&
      error() const;

  // repeated .bgs.protocol.ProcessId forward_targets = 10;
  int forward_targets_size() const;
  private:
  int _internal_forward_targets_size() const;
  public:
  void clear_forward_targets();
  ::bgs::protocol::ProcessId* mutable_forward_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ProcessId >*
      mutable_forward_targets();
  private:
  const ::bgs::protocol::ProcessId& _internal_forward_targets(int index) const;
  ::bgs::protocol::ProcessId* _internal_add_forward_targets();
  public:
  const ::bgs::protocol::ProcessId& forward_targets(int index) const;
  ::bgs::protocol::ProcessId* add_forward_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ProcessId >&
      forward_targets() const;

  // repeated .bgs.protocol.FanoutTarget fanout_target = 14;
  int fanout_target_size() const;
  private:
  int _internal_fanout_target_size() const;
  public:
  void clear_fanout_target();
  ::bgs::protocol::FanoutTarget* mutable_fanout_target(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::FanoutTarget >*
      mutable_fanout_target();
  private:
  const ::bgs::protocol::FanoutTarget& _internal_fanout_target(int index) const;
  ::bgs::protocol::FanoutTarget* _internal_add_fanout_target();
  public:
  const ::bgs::protocol::FanoutTarget& fanout_target(int index) const;
  ::bgs::protocol::FanoutTarget* add_fanout_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::FanoutTarget >&
      fanout_target() const;

  // repeated string client_id_fanout_target = 15;
  int client_id_fanout_target_size() const;
  private:
  int _internal_client_id_fanout_target_size() const;
  public:
  void clear_client_id_fanout_target();
  const std::string& client_id_fanout_target(int index) const;
  std::string* mutable_client_id_fanout_target(int index);
  void set_client_id_fanout_target(int index, const std::string& value);
  void set_client_id_fanout_target(int index, std::string&& value);
  void set_client_id_fanout_target(int index, const char* value);
  void set_client_id_fanout_target(int index, const char* value, size_t size);
  std::string* add_client_id_fanout_target();
  void add_client_id_fanout_target(const std::string& value);
  void add_client_id_fanout_target(std::string&& value);
  void add_client_id_fanout_target(const char* value);
  void add_client_id_fanout_target(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& client_id_fanout_target() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_client_id_fanout_target();
  private:
  const std::string& _internal_client_id_fanout_target(int index) const;
  std::string* _internal_add_client_id_fanout_target();
  public:

  // optional string client_id = 13;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // required uint32 service_id = 1;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 method_id = 2;
  bool has_method_id() const;
  private:
  bool _internal_has_method_id() const;
  public:
  void clear_method_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id() const;
  void set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_method_id() const;
  void _internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 object_id = 4 [default = 0];
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 size = 5 [default = 0];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 status = 6 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_response = 9;
  bool has_is_response() const;
  private:
  bool _internal_has_is_response() const;
  public:
  void clear_is_response();
  bool is_response() const;
  void set_is_response(bool value);
  private:
  bool _internal_is_response() const;
  void _internal_set_is_response(bool value);
  public:

  // optional uint64 timeout = 8;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 service_hash = 11;
  bool has_service_hash() const;
  private:
  bool _internal_has_service_hash() const;
  public:
  void clear_service_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash() const;
  void set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_hash() const;
  void _internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.Header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ErrorInfo > error_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ProcessId > forward_targets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::FanoutTarget > fanout_target_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> client_id_fanout_target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  bool is_response_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KafkaHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bgs.protocol.KafkaHeader) */ {
 public:
  KafkaHeader();
  virtual ~KafkaHeader();

  KafkaHeader(const KafkaHeader& from);
  KafkaHeader(KafkaHeader&& from) noexcept
    : KafkaHeader() {
    *this = ::std::move(from);
  }

  inline KafkaHeader& operator=(const KafkaHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline KafkaHeader& operator=(KafkaHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KafkaHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KafkaHeader* internal_default_instance() {
    return reinterpret_cast<const KafkaHeader*>(
               &_KafkaHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KafkaHeader& a, KafkaHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(KafkaHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KafkaHeader* New() const final {
    return CreateMaybeMessage<KafkaHeader>(nullptr);
  }

  KafkaHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KafkaHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KafkaHeader& from);
  void MergeFrom(const KafkaHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KafkaHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bgs.protocol.KafkaHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto);
    return ::descriptor_table_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnTopicFieldNumber = 9,
    kClientIdFieldNumber = 11,
    kForwardTargetFieldNumber = 8,
    kServiceHashFieldNumber = 1,
    kMethodIdFieldNumber = 2,
    kObjectIdFieldNumber = 4,
    kTokenFieldNumber = 3,
    kSizeFieldNumber = 5,
    kTimeoutFieldNumber = 7,
    kStatusFieldNumber = 6,
  };
  // optional string return_topic = 9;
  bool has_return_topic() const;
  private:
  bool _internal_has_return_topic() const;
  public:
  void clear_return_topic();
  const std::string& return_topic() const;
  void set_return_topic(const std::string& value);
  void set_return_topic(std::string&& value);
  void set_return_topic(const char* value);
  void set_return_topic(const char* value, size_t size);
  std::string* mutable_return_topic();
  std::string* release_return_topic();
  void set_allocated_return_topic(std::string* return_topic);
  private:
  const std::string& _internal_return_topic() const;
  void _internal_set_return_topic(const std::string& value);
  std::string* _internal_mutable_return_topic();
  public:

  // optional string client_id = 11;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // optional .bgs.protocol.ProcessId forward_target = 8;
  bool has_forward_target() const;
  private:
  bool _internal_has_forward_target() const;
  public:
  void clear_forward_target();
  const ::bgs::protocol::ProcessId& forward_target() const;
  ::bgs::protocol::ProcessId* release_forward_target();
  ::bgs::protocol::ProcessId* mutable_forward_target();
  void set_allocated_forward_target(::bgs::protocol::ProcessId* forward_target);
  private:
  const ::bgs::protocol::ProcessId& _internal_forward_target() const;
  ::bgs::protocol::ProcessId* _internal_mutable_forward_target();
  public:

  // optional fixed32 service_hash = 1;
  bool has_service_hash() const;
  private:
  bool _internal_has_service_hash() const;
  public:
  void clear_service_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash() const;
  void set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_hash() const;
  void _internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 method_id = 2;
  bool has_method_id() const;
  private:
  bool _internal_has_method_id() const;
  public:
  void clear_method_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id() const;
  void set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_method_id() const;
  void _internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 object_id = 4 [default = 0];
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 size = 5 [default = 0];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 timeout = 7;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 status = 6 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bgs.protocol.KafkaHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr return_topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::bgs::protocol::ProcessId* forward_target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NO_RESPONSE

// -------------------------------------------------------------------

// Address

// required string address = 1;
inline bool Address::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Address::has_address() const {
  return _internal_has_address();
}
inline void Address::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Address::address() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Address.address)
  return _internal_address();
}
inline void Address::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Address.address)
}
inline std::string* Address::mutable_address() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Address.address)
  return _internal_mutable_address();
}
inline const std::string& Address::_internal_address() const {
  return address_.GetNoArena();
}
inline void Address::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Address::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.Address.address)
}
inline void Address::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Address.address)
}
inline void Address::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Address.address)
}
inline std::string* Address::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_address() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Address.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Address.address)
}

// optional uint32 port = 2;
inline bool Address::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Address::has_port() const {
  return _internal_has_port();
}
inline void Address::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Address::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Address::port() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Address.port)
  return _internal_port();
}
inline void Address::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void Address::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Address.port)
}

// -------------------------------------------------------------------

// ProcessId

// required uint32 label = 1 [(.bgs.protocol.valid) = {
inline bool ProcessId::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessId::has_label() const {
  return _internal_has_label();
}
inline void ProcessId::clear_label() {
  label_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessId::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessId::label() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ProcessId.label)
  return _internal_label();
}
inline void ProcessId::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  label_ = value;
}
inline void ProcessId::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ProcessId.label)
}

// required uint32 epoch = 2;
inline bool ProcessId::_internal_has_epoch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProcessId::has_epoch() const {
  return _internal_has_epoch();
}
inline void ProcessId::clear_epoch() {
  epoch_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessId::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessId::epoch() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ProcessId.epoch)
  return _internal_epoch();
}
inline void ProcessId::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  epoch_ = value;
}
inline void ProcessId::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ProcessId.epoch)
}

// -------------------------------------------------------------------

// ObjectAddress

// required .bgs.protocol.ProcessId host = 1;
inline bool ObjectAddress::_internal_has_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || host_ != nullptr);
  return value;
}
inline bool ObjectAddress::has_host() const {
  return _internal_has_host();
}
inline void ObjectAddress::clear_host() {
  if (host_ != nullptr) host_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::ProcessId& ObjectAddress::_internal_host() const {
  const ::bgs::protocol::ProcessId* p = host_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ProcessId*>(
      &::bgs::protocol::_ProcessId_default_instance_);
}
inline const ::bgs::protocol::ProcessId& ObjectAddress::host() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ObjectAddress.host)
  return _internal_host();
}
inline ::bgs::protocol::ProcessId* ObjectAddress::release_host() {
  // @@protoc_insertion_point(field_release:bgs.protocol.ObjectAddress.host)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::ProcessId* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ProcessId* ObjectAddress::_internal_mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ProcessId>(GetArenaNoVirtual());
    host_ = p;
  }
  return host_;
}
inline ::bgs::protocol::ProcessId* ObjectAddress::mutable_host() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.ObjectAddress.host)
  return _internal_mutable_host();
}
inline void ObjectAddress::set_allocated_host(::bgs::protocol::ProcessId* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.ObjectAddress.host)
}

// optional uint64 object_id = 2 [default = 0];
inline bool ObjectAddress::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectAddress::has_object_id() const {
  return _internal_has_object_id();
}
inline void ObjectAddress::clear_object_id() {
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectAddress::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectAddress::object_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ObjectAddress.object_id)
  return _internal_object_id();
}
inline void ObjectAddress::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  object_id_ = value;
}
inline void ObjectAddress::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ObjectAddress.object_id)
}

// -------------------------------------------------------------------

// NoData

// -------------------------------------------------------------------

// ErrorInfo

// required .bgs.protocol.ObjectAddress object_address = 1;
inline bool ErrorInfo::_internal_has_object_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || object_address_ != nullptr);
  return value;
}
inline bool ErrorInfo::has_object_address() const {
  return _internal_has_object_address();
}
inline void ErrorInfo::clear_object_address() {
  if (object_address_ != nullptr) object_address_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bgs::protocol::ObjectAddress& ErrorInfo::_internal_object_address() const {
  const ::bgs::protocol::ObjectAddress* p = object_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ObjectAddress*>(
      &::bgs::protocol::_ObjectAddress_default_instance_);
}
inline const ::bgs::protocol::ObjectAddress& ErrorInfo::object_address() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ErrorInfo.object_address)
  return _internal_object_address();
}
inline ::bgs::protocol::ObjectAddress* ErrorInfo::release_object_address() {
  // @@protoc_insertion_point(field_release:bgs.protocol.ErrorInfo.object_address)
  _has_bits_[0] &= ~0x00000001u;
  ::bgs::protocol::ObjectAddress* temp = object_address_;
  object_address_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ObjectAddress* ErrorInfo::_internal_mutable_object_address() {
  _has_bits_[0] |= 0x00000001u;
  if (object_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ObjectAddress>(GetArenaNoVirtual());
    object_address_ = p;
  }
  return object_address_;
}
inline ::bgs::protocol::ObjectAddress* ErrorInfo::mutable_object_address() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.ErrorInfo.object_address)
  return _internal_mutable_object_address();
}
inline void ErrorInfo::set_allocated_object_address(::bgs::protocol::ObjectAddress* object_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete object_address_;
  }
  if (object_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_address_ = object_address;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.ErrorInfo.object_address)
}

// required uint32 status = 2;
inline bool ErrorInfo::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ErrorInfo::has_status() const {
  return _internal_has_status();
}
inline void ErrorInfo::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErrorInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErrorInfo::status() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ErrorInfo.status)
  return _internal_status();
}
inline void ErrorInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void ErrorInfo::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ErrorInfo.status)
}

// required uint32 service_hash = 3;
inline bool ErrorInfo::_internal_has_service_hash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ErrorInfo::has_service_hash() const {
  return _internal_has_service_hash();
}
inline void ErrorInfo::clear_service_hash() {
  service_hash_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErrorInfo::_internal_service_hash() const {
  return service_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErrorInfo::service_hash() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ErrorInfo.service_hash)
  return _internal_service_hash();
}
inline void ErrorInfo::_internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  service_hash_ = value;
}
inline void ErrorInfo::set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_hash(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ErrorInfo.service_hash)
}

// required uint32 method_id = 4;
inline bool ErrorInfo::_internal_has_method_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ErrorInfo::has_method_id() const {
  return _internal_has_method_id();
}
inline void ErrorInfo::clear_method_id() {
  method_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErrorInfo::_internal_method_id() const {
  return method_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErrorInfo::method_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.ErrorInfo.method_id)
  return _internal_method_id();
}
inline void ErrorInfo::_internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  method_id_ = value;
}
inline void ErrorInfo::set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_method_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.ErrorInfo.method_id)
}

// -------------------------------------------------------------------

// FanoutTarget

// optional string client_id = 1;
inline bool FanoutTarget::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FanoutTarget::has_client_id() const {
  return _internal_has_client_id();
}
inline void FanoutTarget::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FanoutTarget::client_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.FanoutTarget.client_id)
  return _internal_client_id();
}
inline void FanoutTarget::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.FanoutTarget.client_id)
}
inline std::string* FanoutTarget::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.FanoutTarget.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& FanoutTarget::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void FanoutTarget::_internal_set_client_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FanoutTarget::set_client_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.FanoutTarget.client_id)
}
inline void FanoutTarget::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.FanoutTarget.client_id)
}
inline void FanoutTarget::set_client_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.FanoutTarget.client_id)
}
inline std::string* FanoutTarget::_internal_mutable_client_id() {
  _has_bits_[0] |= 0x00000001u;
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FanoutTarget::release_client_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.FanoutTarget.client_id)
  if (!_internal_has_client_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FanoutTarget::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.FanoutTarget.client_id)
}

// optional bytes key = 2;
inline bool FanoutTarget::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FanoutTarget::has_key() const {
  return _internal_has_key();
}
inline void FanoutTarget::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FanoutTarget::key() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.FanoutTarget.key)
  return _internal_key();
}
inline void FanoutTarget::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.FanoutTarget.key)
}
inline std::string* FanoutTarget::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.FanoutTarget.key)
  return _internal_mutable_key();
}
inline const std::string& FanoutTarget::_internal_key() const {
  return key_.GetNoArena();
}
inline void FanoutTarget::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FanoutTarget::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.FanoutTarget.key)
}
inline void FanoutTarget::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.FanoutTarget.key)
}
inline void FanoutTarget::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.FanoutTarget.key)
}
inline std::string* FanoutTarget::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FanoutTarget::release_key() {
  // @@protoc_insertion_point(field_release:bgs.protocol.FanoutTarget.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FanoutTarget::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.FanoutTarget.key)
}

// -------------------------------------------------------------------

// Header

// required uint32 service_id = 1;
inline bool Header::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Header::has_service_id() const {
  return _internal_has_service_id();
}
inline void Header::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::service_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.service_id)
  return _internal_service_id();
}
inline void Header::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  service_id_ = value;
}
inline void Header::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.service_id)
}

// optional uint32 method_id = 2;
inline bool Header::_internal_has_method_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Header::has_method_id() const {
  return _internal_has_method_id();
}
inline void Header::clear_method_id() {
  method_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_method_id() const {
  return method_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::method_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.method_id)
  return _internal_method_id();
}
inline void Header::_internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  method_id_ = value;
}
inline void Header::set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_method_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.method_id)
}

// required uint32 token = 3;
inline bool Header::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Header::has_token() const {
  return _internal_has_token();
}
inline void Header::clear_token() {
  token_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::token() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.token)
  return _internal_token();
}
inline void Header::_internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  token_ = value;
}
inline void Header::set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.token)
}

// optional uint64 object_id = 4 [default = 0];
inline bool Header::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Header::has_object_id() const {
  return _internal_has_object_id();
}
inline void Header::clear_object_id() {
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::object_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.object_id)
  return _internal_object_id();
}
inline void Header::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  object_id_ = value;
}
inline void Header::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.object_id)
}

// optional uint32 size = 5 [default = 0];
inline bool Header::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Header::has_size() const {
  return _internal_has_size();
}
inline void Header::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::size() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.size)
  return _internal_size();
}
inline void Header::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  size_ = value;
}
inline void Header::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.size)
}

// optional uint32 status = 6 [default = 0];
inline bool Header::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Header::has_status() const {
  return _internal_has_status();
}
inline void Header::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::status() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.status)
  return _internal_status();
}
inline void Header::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  status_ = value;
}
inline void Header::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.status)
}

// repeated .bgs.protocol.ErrorInfo error = 7;
inline int Header::_internal_error_size() const {
  return error_.size();
}
inline int Header::error_size() const {
  return _internal_error_size();
}
inline void Header::clear_error() {
  error_.Clear();
}
inline ::bgs::protocol::ErrorInfo* Header::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Header.error)
  return error_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ErrorInfo >*
Header::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.Header.error)
  return &error_;
}
inline const ::bgs::protocol::ErrorInfo& Header::_internal_error(int index) const {
  return error_.Get(index);
}
inline const ::bgs::protocol::ErrorInfo& Header::error(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.error)
  return _internal_error(index);
}
inline ::bgs::protocol::ErrorInfo* Header::_internal_add_error() {
  return error_.Add();
}
inline ::bgs::protocol::ErrorInfo* Header::add_error() {
  // @@protoc_insertion_point(field_add:bgs.protocol.Header.error)
  return _internal_add_error();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ErrorInfo >&
Header::error() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.Header.error)
  return error_;
}

// optional uint64 timeout = 8;
inline bool Header::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Header::has_timeout() const {
  return _internal_has_timeout();
}
inline void Header::clear_timeout() {
  timeout_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::timeout() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.timeout)
  return _internal_timeout();
}
inline void Header::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  timeout_ = value;
}
inline void Header::set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.timeout)
}

// optional bool is_response = 9;
inline bool Header::_internal_has_is_response() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Header::has_is_response() const {
  return _internal_has_is_response();
}
inline void Header::clear_is_response() {
  is_response_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Header::_internal_is_response() const {
  return is_response_;
}
inline bool Header::is_response() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.is_response)
  return _internal_is_response();
}
inline void Header::_internal_set_is_response(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_response_ = value;
}
inline void Header::set_is_response(bool value) {
  _internal_set_is_response(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.is_response)
}

// repeated .bgs.protocol.ProcessId forward_targets = 10;
inline int Header::_internal_forward_targets_size() const {
  return forward_targets_.size();
}
inline int Header::forward_targets_size() const {
  return _internal_forward_targets_size();
}
inline void Header::clear_forward_targets() {
  forward_targets_.Clear();
}
inline ::bgs::protocol::ProcessId* Header::mutable_forward_targets(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Header.forward_targets)
  return forward_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ProcessId >*
Header::mutable_forward_targets() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.Header.forward_targets)
  return &forward_targets_;
}
inline const ::bgs::protocol::ProcessId& Header::_internal_forward_targets(int index) const {
  return forward_targets_.Get(index);
}
inline const ::bgs::protocol::ProcessId& Header::forward_targets(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.forward_targets)
  return _internal_forward_targets(index);
}
inline ::bgs::protocol::ProcessId* Header::_internal_add_forward_targets() {
  return forward_targets_.Add();
}
inline ::bgs::protocol::ProcessId* Header::add_forward_targets() {
  // @@protoc_insertion_point(field_add:bgs.protocol.Header.forward_targets)
  return _internal_add_forward_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::ProcessId >&
Header::forward_targets() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.Header.forward_targets)
  return forward_targets_;
}

// optional fixed32 service_hash = 11;
inline bool Header::_internal_has_service_hash() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Header::has_service_hash() const {
  return _internal_has_service_hash();
}
inline void Header::clear_service_hash() {
  service_hash_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_service_hash() const {
  return service_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::service_hash() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.service_hash)
  return _internal_service_hash();
}
inline void Header::_internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  service_hash_ = value;
}
inline void Header::set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_hash(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.service_hash)
}

// optional string client_id = 13;
inline bool Header::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_client_id() const {
  return _internal_has_client_id();
}
inline void Header::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::client_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.client_id)
  return _internal_client_id();
}
inline void Header::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.client_id)
}
inline std::string* Header::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Header.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& Header::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void Header::_internal_set_client_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Header::set_client_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.Header.client_id)
}
inline void Header::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Header.client_id)
}
inline void Header::set_client_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Header.client_id)
}
inline std::string* Header::_internal_mutable_client_id() {
  _has_bits_[0] |= 0x00000001u;
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Header::release_client_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.Header.client_id)
  if (!_internal_has_client_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.Header.client_id)
}

// repeated .bgs.protocol.FanoutTarget fanout_target = 14;
inline int Header::_internal_fanout_target_size() const {
  return fanout_target_.size();
}
inline int Header::fanout_target_size() const {
  return _internal_fanout_target_size();
}
inline void Header::clear_fanout_target() {
  fanout_target_.Clear();
}
inline ::bgs::protocol::FanoutTarget* Header::mutable_fanout_target(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Header.fanout_target)
  return fanout_target_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::FanoutTarget >*
Header::mutable_fanout_target() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.Header.fanout_target)
  return &fanout_target_;
}
inline const ::bgs::protocol::FanoutTarget& Header::_internal_fanout_target(int index) const {
  return fanout_target_.Get(index);
}
inline const ::bgs::protocol::FanoutTarget& Header::fanout_target(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.fanout_target)
  return _internal_fanout_target(index);
}
inline ::bgs::protocol::FanoutTarget* Header::_internal_add_fanout_target() {
  return fanout_target_.Add();
}
inline ::bgs::protocol::FanoutTarget* Header::add_fanout_target() {
  // @@protoc_insertion_point(field_add:bgs.protocol.Header.fanout_target)
  return _internal_add_fanout_target();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bgs::protocol::FanoutTarget >&
Header::fanout_target() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.Header.fanout_target)
  return fanout_target_;
}

// repeated string client_id_fanout_target = 15;
inline int Header::_internal_client_id_fanout_target_size() const {
  return client_id_fanout_target_.size();
}
inline int Header::client_id_fanout_target_size() const {
  return _internal_client_id_fanout_target_size();
}
inline void Header::clear_client_id_fanout_target() {
  client_id_fanout_target_.Clear();
}
inline std::string* Header::add_client_id_fanout_target() {
  // @@protoc_insertion_point(field_add_mutable:bgs.protocol.Header.client_id_fanout_target)
  return _internal_add_client_id_fanout_target();
}
inline const std::string& Header::_internal_client_id_fanout_target(int index) const {
  return client_id_fanout_target_.Get(index);
}
inline const std::string& Header::client_id_fanout_target(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.Header.client_id_fanout_target)
  return _internal_client_id_fanout_target(index);
}
inline std::string* Header::mutable_client_id_fanout_target(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.Header.client_id_fanout_target)
  return client_id_fanout_target_.Mutable(index);
}
inline void Header::set_client_id_fanout_target(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.client_id_fanout_target)
  client_id_fanout_target_.Mutable(index)->assign(value);
}
inline void Header::set_client_id_fanout_target(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.Header.client_id_fanout_target)
  client_id_fanout_target_.Mutable(index)->assign(std::move(value));
}
inline void Header::set_client_id_fanout_target(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  client_id_fanout_target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.Header.client_id_fanout_target)
}
inline void Header::set_client_id_fanout_target(int index, const char* value, size_t size) {
  client_id_fanout_target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.Header.client_id_fanout_target)
}
inline std::string* Header::_internal_add_client_id_fanout_target() {
  return client_id_fanout_target_.Add();
}
inline void Header::add_client_id_fanout_target(const std::string& value) {
  client_id_fanout_target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.Header.client_id_fanout_target)
}
inline void Header::add_client_id_fanout_target(std::string&& value) {
  client_id_fanout_target_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bgs.protocol.Header.client_id_fanout_target)
}
inline void Header::add_client_id_fanout_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  client_id_fanout_target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bgs.protocol.Header.client_id_fanout_target)
}
inline void Header::add_client_id_fanout_target(const char* value, size_t size) {
  client_id_fanout_target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bgs.protocol.Header.client_id_fanout_target)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Header::client_id_fanout_target() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.Header.client_id_fanout_target)
  return client_id_fanout_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Header::mutable_client_id_fanout_target() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.Header.client_id_fanout_target)
  return &client_id_fanout_target_;
}

// -------------------------------------------------------------------

// KafkaHeader

// optional fixed32 service_hash = 1;
inline bool KafkaHeader::_internal_has_service_hash() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KafkaHeader::has_service_hash() const {
  return _internal_has_service_hash();
}
inline void KafkaHeader::clear_service_hash() {
  service_hash_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::_internal_service_hash() const {
  return service_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::service_hash() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.service_hash)
  return _internal_service_hash();
}
inline void KafkaHeader::_internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  service_hash_ = value;
}
inline void KafkaHeader::set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_hash(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.service_hash)
}

// optional uint32 method_id = 2;
inline bool KafkaHeader::_internal_has_method_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KafkaHeader::has_method_id() const {
  return _internal_has_method_id();
}
inline void KafkaHeader::clear_method_id() {
  method_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::_internal_method_id() const {
  return method_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::method_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.method_id)
  return _internal_method_id();
}
inline void KafkaHeader::_internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  method_id_ = value;
}
inline void KafkaHeader::set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_method_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.method_id)
}

// optional uint32 token = 3;
inline bool KafkaHeader::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KafkaHeader::has_token() const {
  return _internal_has_token();
}
inline void KafkaHeader::clear_token() {
  token_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::token() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.token)
  return _internal_token();
}
inline void KafkaHeader::_internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  token_ = value;
}
inline void KafkaHeader::set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.token)
}

// optional uint64 object_id = 4 [default = 0];
inline bool KafkaHeader::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KafkaHeader::has_object_id() const {
  return _internal_has_object_id();
}
inline void KafkaHeader::clear_object_id() {
  object_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KafkaHeader::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KafkaHeader::object_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.object_id)
  return _internal_object_id();
}
inline void KafkaHeader::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  object_id_ = value;
}
inline void KafkaHeader::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.object_id)
}

// optional uint32 size = 5 [default = 0];
inline bool KafkaHeader::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KafkaHeader::has_size() const {
  return _internal_has_size();
}
inline void KafkaHeader::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::size() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.size)
  return _internal_size();
}
inline void KafkaHeader::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  size_ = value;
}
inline void KafkaHeader::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.size)
}

// optional uint32 status = 6 [default = 0];
inline bool KafkaHeader::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KafkaHeader::has_status() const {
  return _internal_has_status();
}
inline void KafkaHeader::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KafkaHeader::status() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.status)
  return _internal_status();
}
inline void KafkaHeader::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  status_ = value;
}
inline void KafkaHeader::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.status)
}

// optional uint64 timeout = 7;
inline bool KafkaHeader::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KafkaHeader::has_timeout() const {
  return _internal_has_timeout();
}
inline void KafkaHeader::clear_timeout() {
  timeout_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KafkaHeader::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KafkaHeader::timeout() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.timeout)
  return _internal_timeout();
}
inline void KafkaHeader::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  timeout_ = value;
}
inline void KafkaHeader::set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.timeout)
}

// optional .bgs.protocol.ProcessId forward_target = 8;
inline bool KafkaHeader::_internal_has_forward_target() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || forward_target_ != nullptr);
  return value;
}
inline bool KafkaHeader::has_forward_target() const {
  return _internal_has_forward_target();
}
inline void KafkaHeader::clear_forward_target() {
  if (forward_target_ != nullptr) forward_target_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::bgs::protocol::ProcessId& KafkaHeader::_internal_forward_target() const {
  const ::bgs::protocol::ProcessId* p = forward_target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bgs::protocol::ProcessId*>(
      &::bgs::protocol::_ProcessId_default_instance_);
}
inline const ::bgs::protocol::ProcessId& KafkaHeader::forward_target() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.forward_target)
  return _internal_forward_target();
}
inline ::bgs::protocol::ProcessId* KafkaHeader::release_forward_target() {
  // @@protoc_insertion_point(field_release:bgs.protocol.KafkaHeader.forward_target)
  _has_bits_[0] &= ~0x00000004u;
  ::bgs::protocol::ProcessId* temp = forward_target_;
  forward_target_ = nullptr;
  return temp;
}
inline ::bgs::protocol::ProcessId* KafkaHeader::_internal_mutable_forward_target() {
  _has_bits_[0] |= 0x00000004u;
  if (forward_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::bgs::protocol::ProcessId>(GetArenaNoVirtual());
    forward_target_ = p;
  }
  return forward_target_;
}
inline ::bgs::protocol::ProcessId* KafkaHeader::mutable_forward_target() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.KafkaHeader.forward_target)
  return _internal_mutable_forward_target();
}
inline void KafkaHeader::set_allocated_forward_target(::bgs::protocol::ProcessId* forward_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete forward_target_;
  }
  if (forward_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forward_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  forward_target_ = forward_target;
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.KafkaHeader.forward_target)
}

// optional string return_topic = 9;
inline bool KafkaHeader::_internal_has_return_topic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KafkaHeader::has_return_topic() const {
  return _internal_has_return_topic();
}
inline void KafkaHeader::clear_return_topic() {
  return_topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KafkaHeader::return_topic() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.return_topic)
  return _internal_return_topic();
}
inline void KafkaHeader::set_return_topic(const std::string& value) {
  _internal_set_return_topic(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.return_topic)
}
inline std::string* KafkaHeader::mutable_return_topic() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.KafkaHeader.return_topic)
  return _internal_mutable_return_topic();
}
inline const std::string& KafkaHeader::_internal_return_topic() const {
  return return_topic_.GetNoArena();
}
inline void KafkaHeader::_internal_set_return_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  return_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KafkaHeader::set_return_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  return_topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.KafkaHeader.return_topic)
}
inline void KafkaHeader::set_return_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  return_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.KafkaHeader.return_topic)
}
inline void KafkaHeader::set_return_topic(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  return_topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.KafkaHeader.return_topic)
}
inline std::string* KafkaHeader::_internal_mutable_return_topic() {
  _has_bits_[0] |= 0x00000001u;
  return return_topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KafkaHeader::release_return_topic() {
  // @@protoc_insertion_point(field_release:bgs.protocol.KafkaHeader.return_topic)
  if (!_internal_has_return_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return return_topic_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KafkaHeader::set_allocated_return_topic(std::string* return_topic) {
  if (return_topic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  return_topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), return_topic);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.KafkaHeader.return_topic)
}

// optional string client_id = 11;
inline bool KafkaHeader::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KafkaHeader::has_client_id() const {
  return _internal_has_client_id();
}
inline void KafkaHeader::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KafkaHeader::client_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.KafkaHeader.client_id)
  return _internal_client_id();
}
inline void KafkaHeader::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.KafkaHeader.client_id)
}
inline std::string* KafkaHeader::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.KafkaHeader.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& KafkaHeader::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void KafkaHeader::_internal_set_client_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KafkaHeader::set_client_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bgs.protocol.KafkaHeader.client_id)
}
inline void KafkaHeader::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bgs.protocol.KafkaHeader.client_id)
}
inline void KafkaHeader::set_client_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.KafkaHeader.client_id)
}
inline std::string* KafkaHeader::_internal_mutable_client_id() {
  _has_bits_[0] |= 0x00000002u;
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KafkaHeader::release_client_id() {
  // @@protoc_insertion_point(field_release:bgs.protocol.KafkaHeader.client_id)
  if (!_internal_has_client_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return client_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KafkaHeader::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.KafkaHeader.client_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgs_2flow_2fpb_2fclient_2frpc_5ftypes_2eproto
